PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT I_I__I

DATASET_TITLE Left / Right Bumps, Ind. Susp.: I_I + I
CATEGORY Suspension and Ride
TITLE Left / Right Bumps, Ind. Susp.: I_I + I <Suspension and Ride>

! Echo: Results\Run_2a5183c7-e628-4f58-ad39-740a518947b8\LastRun_echo.par
! This run was made 11:47 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    98 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      149 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME  0.3337144858 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             14 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       14 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              28 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP        -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    2 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    3 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 1 ! Number of axles on unit 2 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL(1) 762.5393701 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 910.8725017 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) 0.01714131349 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        1360 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 867.0450247 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 1323.814263 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 1435.09359 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! H_CG_TL(2) 788.2997848 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 2227.637098 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(2) 0.0003342173583 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)         803 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 892.4210319 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 1943.044832 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 1956.494341 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU(1)        700 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)       550 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)           600 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)         384 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)       624.2 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)       686.9 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)           0 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     3 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(1)      825 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 1
! LX_CG_SL(1) 904.1666667 ; mm ! CALC -- X distance SL CG is behind origin
! Y_CG_SL(1)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 1
! M_SL(1)        1200 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 1
! IXX_SL(1)       759 ; kg-m2 ! CALC -- Roll inertia for SL, unit 1
! IYY_SL(1) 1123.554167 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 1
! IZZ_SL(1) 1223.754167 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 1
! IXY_SL(1)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 1
! IXZ_SL(1)    53.125 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 1
! IYZ_SL(1)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 1

HT_SM(1)         1582 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(1)        1923 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(1)        1704 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

H_H_FRONT         500 ; mm ! Height (Z) of front hitch point in SM coordinate system
                      ! [I]
H_CG_SU(2)        971 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      2000 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)           465 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)         708 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)        1810 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)        1764 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(2) 889.4962406 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 2
! LX_CG_SL(2) 2150.37594 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(2)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 2
! M_SL(2)         665 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 2
! IXX_SL(2) 731.6006962 ; kg-m2 ! CALC -- Roll inertia for SL, unit 2
! IYY_SL(2) 1863.903102 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 2
! IZZ_SL(2) 1815.632406 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 2
! IXY_SL(2)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 2
! IXZ_SL(2) -18.94962406 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 2
! IYZ_SL(2)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 2

HT_SM(2)         1757 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(2)        2024 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             4 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     4 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; Large Drum (FL)
OPT_PL_BODY_ID(1)   1 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(1)      1100 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)        375 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)        950 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)           200 ; kg ! Mass of payload [I]
IXX_PL(1)         100 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)         100 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)         100 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(2)     2 ; Large Drum (FR)
OPT_PL_BODY_ID(2)   1 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(2)      1100 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(2)       -375 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(2)        950 ; mm ! Z coordinate of payload mass center [I]
M_PL(2)           200 ; kg ! Mass of payload [I]
IXX_PL(2)         100 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(2)         100 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(2)         100 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(2)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(2)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(2)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(3)     3 ; Large Drum (Back)
OPT_PL_BODY_ID(3)   1 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(3)      1575 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(3)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(3)        950 ; mm ! Z coordinate of payload mass center [I]
M_PL(3)           200 ; kg ! Mass of payload [I]
IXX_PL(3)         100 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(3)         100 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(3)         100 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(3)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(3)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(3)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(4)     4 ; Utility Trailer (200 kg)
OPT_PL_BODY_ID(4)   2 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(4)      2500 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(4)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(4)        700 ; mm ! Z coordinate of payload mass center [I]
M_PL(4)           200 ; kg ! Mass of payload [I]
IXX_PL(4)       13.33 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(4)        8.67 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(4)       16.67 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(4)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(4)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(4)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.

! FZH_L(1) 1127.76475 ; N ! CALC -- Static load, laden vehicle, hitch 1
! FZH_UL(1) 1052.328981 ; N ! CALC -- Static load, unladen vehicle, hitch 1
HITCH_DMP_X(1)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 1
HITCH_DMP_Y(1)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 1
HITCH_DMP_Z(1)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 1
HITCH_FRIC_X(1)     0 ; N-m ! [D] Roll friction, hitch 1
HITCH_FRIC_Y(1)     0 ; N-m ! [D] Pitch friction, hitch 1
HITCH_FRIC_Z(1)     0 ; N-m ! [D] Articulation friction, hitch 1
HITCH_FREQ(1)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 1 [I]
HITCH_ZETA(1)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 1 [I]
H_H(1)            550 ; mm ! Hitch point height (Z coord.), sprung mass 1 [I]
LX_H(1)          2750 ; mm ! X dist. hitch is behind sprung mass origin [I]
Y_H(1)              0 ; mm ! Y coordinate, hitch point 1 [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)        0 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)       0 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)       0 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)        0 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)       0 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)       0 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1,1)   0.2 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)   0.2 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1,1)       263 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       263 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1,1)    1.5 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)    1.5 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)         0.9 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)         0.9 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     1260 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1,1)     8 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,1,2)     8 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1,1)    19 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    19 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)        80 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1)   0.8 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(1,2,1)   0.2 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)   0.2 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_WC(1,2,1)       263 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       263 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(1,2,1)    1.5 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)    1.5 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)         0.9 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)         0.9 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1260 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     1923 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(1,2,1)     8 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(1,2,2)     8 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(1,2,1)    19 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)    19 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)        80 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2)   0.8 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Generic/independent suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
A_CAMBER(2,1,1)   0.2 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(2,1,2)   0.2 ; deg ! Static camber for wheel R3 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R3 [I]
H_WC(2,1,1)       296 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(2,1,2)       296 ; mm ! Reference Z coordinate of wheel center R3 [I]
! ISPIN(2,1,1)    1.7 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(2,1,2)    1.7 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(2,1,1)         1.1 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(2,1,2)         1.1 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(2,1)     1810 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(2,1)     2600 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_IND(2,1,1)    14 ; kg ! Unsteered suspension mass for wheel L3 [I]
M_US_IND(2,1,2)    14 ; kg ! Unsteered suspension mass for wheel R3 [I]
M_US_STR(2,1,1)    42 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(2,1,2)    42 ; kg ! Steered mass for wheel R3 [I]
! M_US(2,1)       138 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(2,1) 0.7971014493 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1,1) 70.01835907 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 70.01835907 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1,1) 4201.101544 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 5749.843391 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 2874.921696 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 2874.921696 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 6534.375391 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 4985.633544 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 3267.187696 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 3267.187696 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 415.6327081 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(1,2,1) 25.23852927 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 25.23852927 ; mm ! CALC -- Compression at design load, spring R2
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(1,2) 1682.888456 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 7145.901359 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 3572.950679 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 3572.950679 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 7930.433359 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 2467.420456 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 3965.216679 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 3965.216679 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 802.034949 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Generic/independent suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R3 [I]
! CMP_DESIGN(2,1,1) 8.769408173 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(2,1,2) 8.769408173 ; mm ! CALC -- Compression at design load, spring R3
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
! FSA_DESIGN(2,1) 3507.763269 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(2,1) 5393.6575 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(2,1,1) 2696.82875 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(2,1,2) 2696.82875 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(2,1) 6746.9752 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(2,1) 4861.080969 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(2,1,1) 3373.4876 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(2,1,2) 3373.4876 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(2,1) 5717.873162 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
BETA_COL            2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL               0 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL             0 ; N-m ! [D] Steering column friction torque
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  1 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)         0 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(2,1)         0 ; mm ! Dual-tire spacing for axle 3 [I]

OPT_TIRE_MODEL(1,1,1,1) 7 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 7 -> built-in Pacejka
                          ! 5.2; 8 -> TNO Delft-Tyre; 9 -> COSIN FTire; 10 ->
                          ! third-party STI tire model [I]
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1)  4100 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       0.6 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)    13 ; kg ! Mass of tire L1i
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 7 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1)  4100 ; N ! Reference vertical force
IT(1,1,2,1)       0.6 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)    13 ; kg ! Mass of tire R1i
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 7 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1)  4100 ; N ! Reference vertical force
IT(1,2,1,1)       0.6 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)    13 ; kg ! Mass of tire L2i
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,2,1) 7 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1)  4100 ; N ! Reference vertical force
IT(1,2,2,1)       0.6 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)    13 ; kg ! Mass of tire R2i
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,1,1) 7 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(2,1,1,1)  4100 ; N ! Reference vertical force
IT(2,1,1,1)       0.6 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(2,1,1,1)    13 ; kg ! Mass of tire L3i
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,2,1) 7 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(2,1,2,1)  4100 ; N ! Reference vertical force
IT(2,1,2,1)       0.6 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(2,1,2,1)    13 ; kg ! Mass of tire R3i
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


!------------------------------------------------------------------------------------
! PACEJKA 5.2 TIRE MODEL
!------------------------------------------------------------------------------------
INSTALL_TIRE_PAC52    ! Command to install the built-in Pacejka 5.2 model

P52_R0(1,1,1,1) 0.263 ; m ! Unloaded radius, unit 1, axle 1, left, inner [I]
P52_FZ0(1,1,1,1) 4100 ; N ! Nominal vertical load, unit 1, axle 1, left, inner
P52_LONGVL(1,1,1,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(1,1,1,1)   1 ; - ! Nominal load scale factor
P52_LCX(1,1,1,1)    1 ; - ! Fx shape scale factor
P52_LMUX(1,1,1,1)   1 ; - ! Fx peak Mu scale factor
P52_LEX(1,1,1,1)    1 ; - ! Fx curvature scale factor
P52_LKX(1,1,1,1)    1 ; - ! Fx slip stiffness scale factor
P52_LHX(1,1,1,1)    0 ; - ! Fx horizontal shift scale factor
P52_LVX(1,1,1,1)    0 ; - ! Fx vertcal shift scale factor
P52_LGAX(1,1,1,1)   1 ; - ! Camber scale factor for Fx
P52_LCY(1,1,1,1)    1 ; - ! Fy shape scale factor
P52_LMUY(1,1,1,1)   1 ; - ! Fy peak Mu scale factor
P52_LEY(1,1,1,1)    1 ; - ! Fy curvature scale factor
P52_LKY(1,1,1,1)    1 ; - ! Fy cornering stiffness scale factor
P52_LHY(1,1,1,1)    0 ; - ! Fy horizontal shift scale factor
P52_LVY(1,1,1,1)    0 ; - ! Fy vertcal shift scale factor
P52_LGAY(1,1,1,1)   1 ; - ! Camber for Fy scale factor
P52_LTR(1,1,1,1)    1 ; - ! Peak pneumatic trail scale factor
P52_LRES(1,1,1,1)   0 ; - ! Residual Mz scale factor
P52_LGAZ(1,1,1,1)   1 ; - ! Camber for Mz scale factor
P52_LXAL(1,1,1,1)   1 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(1,1,1,1)   1 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(1,1,1,1)  1 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(1,1,1,1)     1 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(1,1,1,1)  1 ; - ! Fx relaxation length scale factor
P52_LSGAL(1,1,1,1)  1 ; - ! Fy relaxation length scale factor
P52_LGYR(1,1,1,1)   1 ; - ! Gyroscopic moment scale factor
P52_LMX(1,1,1,1)    1 ; - ! Overturning moment scale factor
P52_LVMX(1,1,1,1)   1 ; - ! Overturning moment vertical shift scale factor
P52_LMY(1,1,1,1)    1 ; - ! Rolling resistance torque scale factor
P52_PCX1(1,1,1,1) 1.62 ; - ! Fx shape factor
P52_PDX1(1,1,1,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(1,1,1,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(1,1,1,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(1,1,1,1) 0.5 ; - ! Fx curvature at Fz0
P52_PEX2(1,1,1,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(1,1,1,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(1,1,1,1)   0 ; - ! Curvature in Fx with kappa
P52_PKX1(1,1,1,1) 19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(1,1,1,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(1,1,1,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(1,1,1,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(1,1,1,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(1,1,1,1)   0 ; - ! Fx vertical shift at Fz0
P52_PVX2(1,1,1,1)   0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(1,1,1,1)   9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(1,1,1,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                        ! with kappa
P52_RCX1(1,1,1,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(1,1,1,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(1,1,1,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(1,1,1,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(1,1,1,1) 1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(1,1,1,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(1,1,1,1) -0.3 ; - ! Change in relaxation length for kappa with exponent of
                       ! Fz
P52_PCY1(1,1,1,1) 1.29 ; - ! Fy shape factor
P52_PDY1(1,1,1,1) -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(1,1,1,1) 0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(1,1,1,1) -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(1,1,1,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(1,1,1,1) 0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(1,1,1,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(1,1,1,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(1,1,1,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(1,1,1,1) 1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(1,1,1,1) 0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(1,1,1,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(1,1,1,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(1,1,1,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(1,1,1,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(1,1,1,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(1,1,1,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(1,1,1,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(1,1,1,1) 6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(1,1,1,1) 7.95 ; - ! Change in Fx loss function combined slip slope factor
                       ! with alpha
P52_RBY3(1,1,1,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(1,1,1,1) 1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(1,1,1,1) 0.23 ; - ! Combined slip Fy curvature
P52_REY2(1,1,1,1) 0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(1,1,1,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(1,1,1,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                        ! shift with Fz
P52_RVY1(1,1,1,1)   0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(1,1,1,1)   0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(1,1,1,1)   0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(1,1,1,1)  10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(1,1,1,1) 1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(1,1,1,1) -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(1,1,1,1) 1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(1,1,1,1) 1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(1,1,1,1) 8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(1,1,1,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(1,1,1,1) 0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(1,1,1,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(1,1,1,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(1,1,1,1) 3.44 ; - ! Residual moment slope factor
P52_QBZ10(1,1,1,1)  0 ; - ! Residual moment slope factor
P52_QCZ1(1,1,1,1) 1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(1,1,1,1) 0.11 ; - ! Peak pneumatic trail
P52_QDZ2(1,1,1,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(1,1,1,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(1,1,1,1) 8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(1,1,1,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(1,1,1,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(1,1,1,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(1,1,1,1) 0.12 ; - ! Coupled change in peak residual moment with Fz and
                       ! gamma
P52_QEZ1(1,1,1,1) -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(1,1,1,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(1,1,1,1)   0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(1,1,1,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(1,1,1,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                        ! and sign(alpha)
P52_QHZ1(1,1,1,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(1,1,1,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(1,1,1,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(1,1,1,1) 0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                       ! Fz and gamma
P52_QSX1(1,1,1,1) 0.03 ; - ! Overturning moment due to Fz
P52_QSX2(1,1,1,1) 0.52 ; - ! Overturning moment due to gamma
P52_QSX3(1,1,1,1) 0.13 ; - ! Overturning moment due to Fy
P52_QSY1(1,1,1,1) 0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(1,1,1,1)   0 ; - ! Change in rolling resistance with Fx
P52_QSY3(1,1,1,1)   0 ; - ! Change in rolling resistance with Vx
P52_QSY4(1,1,1,1)   0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(1,1,1,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(1,1,1,1) 0.018 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(1,1,1,1) 0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(1,1,1,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(1,1,1,1) 0.2 ; - ! Gyroscopic moment constant
P52_MBELT(1,1,1,1) 4.1 ; kg ! Belt mass
P52_MU_REF_X(1,1,1,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(1,1,1,1) 1 ; - ! Reference lateral friction

P52_R0(1,1,2,1) 0.263 ; m ! Unloaded radius, unit 1, axle 1, right, inner [I]
P52_FZ0(1,1,2,1) 4100 ; N ! Nominal vertical load, unit 1, axle 1, right, inner
P52_LONGVL(1,1,2,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(1,1,2,1)   1 ; - ! Nominal load scale factor
P52_LCX(1,1,2,1)    1 ; - ! Fx shape scale factor
P52_LMUX(1,1,2,1)   1 ; - ! Fx peak Mu scale factor
P52_LEX(1,1,2,1)    1 ; - ! Fx curvature scale factor
P52_LKX(1,1,2,1)    1 ; - ! Fx slip stiffness scale factor
P52_LHX(1,1,2,1)    0 ; - ! Fx horizontal shift scale factor
P52_LVX(1,1,2,1)    0 ; - ! Fx vertcal shift scale factor
P52_LGAX(1,1,2,1)   1 ; - ! Camber scale factor for Fx
P52_LCY(1,1,2,1)    1 ; - ! Fy shape scale factor
P52_LMUY(1,1,2,1)   1 ; - ! Fy peak Mu scale factor
P52_LEY(1,1,2,1)    1 ; - ! Fy curvature scale factor
P52_LKY(1,1,2,1)    1 ; - ! Fy cornering stiffness scale factor
P52_LHY(1,1,2,1)    0 ; - ! Fy horizontal shift scale factor
P52_LVY(1,1,2,1)    0 ; - ! Fy vertcal shift scale factor
P52_LGAY(1,1,2,1)   1 ; - ! Camber for Fy scale factor
P52_LTR(1,1,2,1)    1 ; - ! Peak pneumatic trail scale factor
P52_LRES(1,1,2,1)   0 ; - ! Residual Mz scale factor
P52_LGAZ(1,1,2,1)   1 ; - ! Camber for Mz scale factor
P52_LXAL(1,1,2,1)   1 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(1,1,2,1)   1 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(1,1,2,1)  1 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(1,1,2,1)     1 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(1,1,2,1)  1 ; - ! Fx relaxation length scale factor
P52_LSGAL(1,1,2,1)  1 ; - ! Fy relaxation length scale factor
P52_LGYR(1,1,2,1)   1 ; - ! Gyroscopic moment scale factor
P52_LMX(1,1,2,1)    1 ; - ! Overturning moment scale factor
P52_LVMX(1,1,2,1)   1 ; - ! Overturning moment vertical shift scale factor
P52_LMY(1,1,2,1)    1 ; - ! Rolling resistance torque scale factor
P52_PCX1(1,1,2,1) 1.62 ; - ! Fx shape factor
P52_PDX1(1,1,2,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(1,1,2,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(1,1,2,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(1,1,2,1) 0.5 ; - ! Fx curvature at Fz0
P52_PEX2(1,1,2,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(1,1,2,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(1,1,2,1)   0 ; - ! Curvature in Fx with kappa
P52_PKX1(1,1,2,1) 19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(1,1,2,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(1,1,2,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(1,1,2,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(1,1,2,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(1,1,2,1)   0 ; - ! Fx vertical shift at Fz0
P52_PVX2(1,1,2,1)   0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(1,1,2,1)   9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(1,1,2,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                        ! with kappa
P52_RCX1(1,1,2,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(1,1,2,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(1,1,2,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(1,1,2,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(1,1,2,1) 1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(1,1,2,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(1,1,2,1) -0.3 ; - ! Change in relaxation length for kappa with exponent of
                       ! Fz
P52_PCY1(1,1,2,1) 1.29 ; - ! Fy shape factor
P52_PDY1(1,1,2,1) -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(1,1,2,1) 0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(1,1,2,1) -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(1,1,2,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(1,1,2,1) 0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(1,1,2,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(1,1,2,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(1,1,2,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(1,1,2,1) 1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(1,1,2,1) 0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(1,1,2,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(1,1,2,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(1,1,2,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(1,1,2,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(1,1,2,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(1,1,2,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(1,1,2,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(1,1,2,1) 6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(1,1,2,1) 7.95 ; - ! Change in Fx loss function combined slip slope factor
                       ! with alpha
P52_RBY3(1,1,2,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(1,1,2,1) 1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(1,1,2,1) 0.23 ; - ! Combined slip Fy curvature
P52_REY2(1,1,2,1) 0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(1,1,2,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(1,1,2,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                        ! shift with Fz
P52_RVY1(1,1,2,1)   0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(1,1,2,1)   0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(1,1,2,1)   0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(1,1,2,1)  10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(1,1,2,1) 1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(1,1,2,1) -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(1,1,2,1) 1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(1,1,2,1) 1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(1,1,2,1) 8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(1,1,2,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(1,1,2,1) 0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(1,1,2,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(1,1,2,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(1,1,2,1) 3.44 ; - ! Residual moment slope factor
P52_QBZ10(1,1,2,1)  0 ; - ! Residual moment slope factor
P52_QCZ1(1,1,2,1) 1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(1,1,2,1) 0.11 ; - ! Peak pneumatic trail
P52_QDZ2(1,1,2,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(1,1,2,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(1,1,2,1) 8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(1,1,2,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(1,1,2,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(1,1,2,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(1,1,2,1) 0.12 ; - ! Coupled change in peak residual moment with Fz and
                       ! gamma
P52_QEZ1(1,1,2,1) -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(1,1,2,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(1,1,2,1)   0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(1,1,2,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(1,1,2,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                        ! and sign(alpha)
P52_QHZ1(1,1,2,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(1,1,2,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(1,1,2,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(1,1,2,1) 0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                       ! Fz and gamma
P52_QSX1(1,1,2,1) 0.03 ; - ! Overturning moment due to Fz
P52_QSX2(1,1,2,1) 0.52 ; - ! Overturning moment due to gamma
P52_QSX3(1,1,2,1) 0.13 ; - ! Overturning moment due to Fy
P52_QSY1(1,1,2,1) 0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(1,1,2,1)   0 ; - ! Change in rolling resistance with Fx
P52_QSY3(1,1,2,1)   0 ; - ! Change in rolling resistance with Vx
P52_QSY4(1,1,2,1)   0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(1,1,2,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(1,1,2,1) 0.018 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(1,1,2,1) 0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(1,1,2,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(1,1,2,1) 0.2 ; - ! Gyroscopic moment constant
P52_MBELT(1,1,2,1) 4.1 ; kg ! Belt mass
P52_MU_REF_X(1,1,2,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(1,1,2,1) 1 ; - ! Reference lateral friction

P52_R0(1,2,1,1) 0.263 ; m ! Unloaded radius, unit 1, axle 2, left, inner [I]
P52_FZ0(1,2,1,1) 4100 ; N ! Nominal vertical load, unit 1, axle 2, left, inner
P52_LONGVL(1,2,1,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(1,2,1,1)   1 ; - ! Nominal load scale factor
P52_LCX(1,2,1,1)    1 ; - ! Fx shape scale factor
P52_LMUX(1,2,1,1)   1 ; - ! Fx peak Mu scale factor
P52_LEX(1,2,1,1)    1 ; - ! Fx curvature scale factor
P52_LKX(1,2,1,1)    1 ; - ! Fx slip stiffness scale factor
P52_LHX(1,2,1,1)    0 ; - ! Fx horizontal shift scale factor
P52_LVX(1,2,1,1)    0 ; - ! Fx vertcal shift scale factor
P52_LGAX(1,2,1,1)   1 ; - ! Camber scale factor for Fx
P52_LCY(1,2,1,1)    1 ; - ! Fy shape scale factor
P52_LMUY(1,2,1,1)   1 ; - ! Fy peak Mu scale factor
P52_LEY(1,2,1,1)    1 ; - ! Fy curvature scale factor
P52_LKY(1,2,1,1)    1 ; - ! Fy cornering stiffness scale factor
P52_LHY(1,2,1,1)    0 ; - ! Fy horizontal shift scale factor
P52_LVY(1,2,1,1)    0 ; - ! Fy vertcal shift scale factor
P52_LGAY(1,2,1,1)   1 ; - ! Camber for Fy scale factor
P52_LTR(1,2,1,1)    1 ; - ! Peak pneumatic trail scale factor
P52_LRES(1,2,1,1)   0 ; - ! Residual Mz scale factor
P52_LGAZ(1,2,1,1)   1 ; - ! Camber for Mz scale factor
P52_LXAL(1,2,1,1)   1 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(1,2,1,1)   1 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(1,2,1,1)  1 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(1,2,1,1)     1 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(1,2,1,1)  1 ; - ! Fx relaxation length scale factor
P52_LSGAL(1,2,1,1)  1 ; - ! Fy relaxation length scale factor
P52_LGYR(1,2,1,1)   1 ; - ! Gyroscopic moment scale factor
P52_LMX(1,2,1,1)    1 ; - ! Overturning moment scale factor
P52_LVMX(1,2,1,1)   1 ; - ! Overturning moment vertical shift scale factor
P52_LMY(1,2,1,1)    1 ; - ! Rolling resistance torque scale factor
P52_PCX1(1,2,1,1) 1.62 ; - ! Fx shape factor
P52_PDX1(1,2,1,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(1,2,1,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(1,2,1,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(1,2,1,1) 0.5 ; - ! Fx curvature at Fz0
P52_PEX2(1,2,1,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(1,2,1,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(1,2,1,1)   0 ; - ! Curvature in Fx with kappa
P52_PKX1(1,2,1,1) 19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(1,2,1,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(1,2,1,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(1,2,1,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(1,2,1,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(1,2,1,1)   0 ; - ! Fx vertical shift at Fz0
P52_PVX2(1,2,1,1)   0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(1,2,1,1)   9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(1,2,1,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                        ! with kappa
P52_RCX1(1,2,1,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(1,2,1,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(1,2,1,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(1,2,1,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(1,2,1,1) 1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(1,2,1,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(1,2,1,1) -0.3 ; - ! Change in relaxation length for kappa with exponent of
                       ! Fz
P52_PCY1(1,2,1,1) 1.29 ; - ! Fy shape factor
P52_PDY1(1,2,1,1) -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(1,2,1,1) 0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(1,2,1,1) -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(1,2,1,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(1,2,1,1) 0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(1,2,1,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(1,2,1,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(1,2,1,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(1,2,1,1) 1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(1,2,1,1) 0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(1,2,1,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(1,2,1,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(1,2,1,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(1,2,1,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(1,2,1,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(1,2,1,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(1,2,1,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(1,2,1,1) 6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(1,2,1,1) 7.95 ; - ! Change in Fx loss function combined slip slope factor
                       ! with alpha
P52_RBY3(1,2,1,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(1,2,1,1) 1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(1,2,1,1) 0.23 ; - ! Combined slip Fy curvature
P52_REY2(1,2,1,1) 0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(1,2,1,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(1,2,1,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                        ! shift with Fz
P52_RVY1(1,2,1,1)   0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(1,2,1,1)   0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(1,2,1,1)   0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(1,2,1,1)  10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(1,2,1,1) 1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(1,2,1,1) -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(1,2,1,1) 1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(1,2,1,1) 1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(1,2,1,1) 8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(1,2,1,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(1,2,1,1) 0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(1,2,1,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(1,2,1,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(1,2,1,1) 3.44 ; - ! Residual moment slope factor
P52_QBZ10(1,2,1,1)  0 ; - ! Residual moment slope factor
P52_QCZ1(1,2,1,1) 1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(1,2,1,1) 0.11 ; - ! Peak pneumatic trail
P52_QDZ2(1,2,1,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(1,2,1,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(1,2,1,1) 8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(1,2,1,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(1,2,1,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(1,2,1,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(1,2,1,1) 0.12 ; - ! Coupled change in peak residual moment with Fz and
                       ! gamma
P52_QEZ1(1,2,1,1) -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(1,2,1,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(1,2,1,1)   0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(1,2,1,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(1,2,1,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                        ! and sign(alpha)
P52_QHZ1(1,2,1,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(1,2,1,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(1,2,1,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(1,2,1,1) 0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                       ! Fz and gamma
P52_QSX1(1,2,1,1) 0.03 ; - ! Overturning moment due to Fz
P52_QSX2(1,2,1,1) 0.52 ; - ! Overturning moment due to gamma
P52_QSX3(1,2,1,1) 0.13 ; - ! Overturning moment due to Fy
P52_QSY1(1,2,1,1) 0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(1,2,1,1)   0 ; - ! Change in rolling resistance with Fx
P52_QSY3(1,2,1,1)   0 ; - ! Change in rolling resistance with Vx
P52_QSY4(1,2,1,1)   0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(1,2,1,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(1,2,1,1) 0.018 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(1,2,1,1) 0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(1,2,1,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(1,2,1,1) 0.2 ; - ! Gyroscopic moment constant
P52_MBELT(1,2,1,1) 4.1 ; kg ! Belt mass
P52_MU_REF_X(1,2,1,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(1,2,1,1) 1 ; - ! Reference lateral friction

P52_R0(1,2,2,1) 0.263 ; m ! Unloaded radius, unit 1, axle 2, right, inner [I]
P52_FZ0(1,2,2,1) 4100 ; N ! Nominal vertical load, unit 1, axle 2, right, inner
P52_LONGVL(1,2,2,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(1,2,2,1)   1 ; - ! Nominal load scale factor
P52_LCX(1,2,2,1)    1 ; - ! Fx shape scale factor
P52_LMUX(1,2,2,1)   1 ; - ! Fx peak Mu scale factor
P52_LEX(1,2,2,1)    1 ; - ! Fx curvature scale factor
P52_LKX(1,2,2,1)    1 ; - ! Fx slip stiffness scale factor
P52_LHX(1,2,2,1)    0 ; - ! Fx horizontal shift scale factor
P52_LVX(1,2,2,1)    0 ; - ! Fx vertcal shift scale factor
P52_LGAX(1,2,2,1)   1 ; - ! Camber scale factor for Fx
P52_LCY(1,2,2,1)    1 ; - ! Fy shape scale factor
P52_LMUY(1,2,2,1)   1 ; - ! Fy peak Mu scale factor
P52_LEY(1,2,2,1)    1 ; - ! Fy curvature scale factor
P52_LKY(1,2,2,1)    1 ; - ! Fy cornering stiffness scale factor
P52_LHY(1,2,2,1)    0 ; - ! Fy horizontal shift scale factor
P52_LVY(1,2,2,1)    0 ; - ! Fy vertcal shift scale factor
P52_LGAY(1,2,2,1)   1 ; - ! Camber for Fy scale factor
P52_LTR(1,2,2,1)    1 ; - ! Peak pneumatic trail scale factor
P52_LRES(1,2,2,1)   0 ; - ! Residual Mz scale factor
P52_LGAZ(1,2,2,1)   1 ; - ! Camber for Mz scale factor
P52_LXAL(1,2,2,1)   1 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(1,2,2,1)   1 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(1,2,2,1)  1 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(1,2,2,1)     1 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(1,2,2,1)  1 ; - ! Fx relaxation length scale factor
P52_LSGAL(1,2,2,1)  1 ; - ! Fy relaxation length scale factor
P52_LGYR(1,2,2,1)   1 ; - ! Gyroscopic moment scale factor
P52_LMX(1,2,2,1)    1 ; - ! Overturning moment scale factor
P52_LVMX(1,2,2,1)   1 ; - ! Overturning moment vertical shift scale factor
P52_LMY(1,2,2,1)    1 ; - ! Rolling resistance torque scale factor
P52_PCX1(1,2,2,1) 1.62 ; - ! Fx shape factor
P52_PDX1(1,2,2,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(1,2,2,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(1,2,2,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(1,2,2,1) 0.5 ; - ! Fx curvature at Fz0
P52_PEX2(1,2,2,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(1,2,2,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(1,2,2,1)   0 ; - ! Curvature in Fx with kappa
P52_PKX1(1,2,2,1) 19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(1,2,2,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(1,2,2,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(1,2,2,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(1,2,2,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(1,2,2,1)   0 ; - ! Fx vertical shift at Fz0
P52_PVX2(1,2,2,1)   0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(1,2,2,1)   9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(1,2,2,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                        ! with kappa
P52_RCX1(1,2,2,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(1,2,2,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(1,2,2,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(1,2,2,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(1,2,2,1) 1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(1,2,2,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(1,2,2,1) -0.3 ; - ! Change in relaxation length for kappa with exponent of
                       ! Fz
P52_PCY1(1,2,2,1) 1.29 ; - ! Fy shape factor
P52_PDY1(1,2,2,1) -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(1,2,2,1) 0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(1,2,2,1) -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(1,2,2,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(1,2,2,1) 0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(1,2,2,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(1,2,2,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(1,2,2,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(1,2,2,1) 1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(1,2,2,1) 0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(1,2,2,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(1,2,2,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(1,2,2,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(1,2,2,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(1,2,2,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(1,2,2,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(1,2,2,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(1,2,2,1) 6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(1,2,2,1) 7.95 ; - ! Change in Fx loss function combined slip slope factor
                       ! with alpha
P52_RBY3(1,2,2,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(1,2,2,1) 1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(1,2,2,1) 0.23 ; - ! Combined slip Fy curvature
P52_REY2(1,2,2,1) 0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(1,2,2,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(1,2,2,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                        ! shift with Fz
P52_RVY1(1,2,2,1)   0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(1,2,2,1)   0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(1,2,2,1)   0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(1,2,2,1)  10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(1,2,2,1) 1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(1,2,2,1) -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(1,2,2,1) 1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(1,2,2,1) 1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(1,2,2,1) 8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(1,2,2,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(1,2,2,1) 0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(1,2,2,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(1,2,2,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(1,2,2,1) 3.44 ; - ! Residual moment slope factor
P52_QBZ10(1,2,2,1)  0 ; - ! Residual moment slope factor
P52_QCZ1(1,2,2,1) 1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(1,2,2,1) 0.11 ; - ! Peak pneumatic trail
P52_QDZ2(1,2,2,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(1,2,2,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(1,2,2,1) 8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(1,2,2,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(1,2,2,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(1,2,2,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(1,2,2,1) 0.12 ; - ! Coupled change in peak residual moment with Fz and
                       ! gamma
P52_QEZ1(1,2,2,1) -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(1,2,2,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(1,2,2,1)   0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(1,2,2,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(1,2,2,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                        ! and sign(alpha)
P52_QHZ1(1,2,2,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(1,2,2,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(1,2,2,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(1,2,2,1) 0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                       ! Fz and gamma
P52_QSX1(1,2,2,1) 0.03 ; - ! Overturning moment due to Fz
P52_QSX2(1,2,2,1) 0.52 ; - ! Overturning moment due to gamma
P52_QSX3(1,2,2,1) 0.13 ; - ! Overturning moment due to Fy
P52_QSY1(1,2,2,1) 0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(1,2,2,1)   0 ; - ! Change in rolling resistance with Fx
P52_QSY3(1,2,2,1)   0 ; - ! Change in rolling resistance with Vx
P52_QSY4(1,2,2,1)   0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(1,2,2,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(1,2,2,1) 0.018 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(1,2,2,1) 0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(1,2,2,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(1,2,2,1) 0.2 ; - ! Gyroscopic moment constant
P52_MBELT(1,2,2,1) 4.1 ; kg ! Belt mass
P52_MU_REF_X(1,2,2,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(1,2,2,1) 1 ; - ! Reference lateral friction

P52_R0(2,1,1,1) 0.263 ; m ! Unloaded radius, unit 2, axle 1, left, inner [I]
P52_FZ0(2,1,1,1) 4100 ; N ! Nominal vertical load, unit 2, axle 1, left, inner
P52_LONGVL(2,1,1,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(2,1,1,1)   1 ; - ! Nominal load scale factor
P52_LCX(2,1,1,1)    1 ; - ! Fx shape scale factor
P52_LMUX(2,1,1,1)   1 ; - ! Fx peak Mu scale factor
P52_LEX(2,1,1,1)    1 ; - ! Fx curvature scale factor
P52_LKX(2,1,1,1)    1 ; - ! Fx slip stiffness scale factor
P52_LHX(2,1,1,1)    0 ; - ! Fx horizontal shift scale factor
P52_LVX(2,1,1,1)    0 ; - ! Fx vertcal shift scale factor
P52_LGAX(2,1,1,1)   1 ; - ! Camber scale factor for Fx
P52_LCY(2,1,1,1)    1 ; - ! Fy shape scale factor
P52_LMUY(2,1,1,1)   1 ; - ! Fy peak Mu scale factor
P52_LEY(2,1,1,1)    1 ; - ! Fy curvature scale factor
P52_LKY(2,1,1,1)    1 ; - ! Fy cornering stiffness scale factor
P52_LHY(2,1,1,1)    0 ; - ! Fy horizontal shift scale factor
P52_LVY(2,1,1,1)    0 ; - ! Fy vertcal shift scale factor
P52_LGAY(2,1,1,1)   1 ; - ! Camber for Fy scale factor
P52_LTR(2,1,1,1)    1 ; - ! Peak pneumatic trail scale factor
P52_LRES(2,1,1,1)   0 ; - ! Residual Mz scale factor
P52_LGAZ(2,1,1,1)   1 ; - ! Camber for Mz scale factor
P52_LXAL(2,1,1,1)   1 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(2,1,1,1)   1 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(2,1,1,1)  1 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(2,1,1,1)     1 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(2,1,1,1)  1 ; - ! Fx relaxation length scale factor
P52_LSGAL(2,1,1,1)  1 ; - ! Fy relaxation length scale factor
P52_LGYR(2,1,1,1)   1 ; - ! Gyroscopic moment scale factor
P52_LMX(2,1,1,1)    1 ; - ! Overturning moment scale factor
P52_LVMX(2,1,1,1)   1 ; - ! Overturning moment vertical shift scale factor
P52_LMY(2,1,1,1)    1 ; - ! Rolling resistance torque scale factor
P52_PCX1(2,1,1,1) 1.62 ; - ! Fx shape factor
P52_PDX1(2,1,1,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(2,1,1,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(2,1,1,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(2,1,1,1) 0.5 ; - ! Fx curvature at Fz0
P52_PEX2(2,1,1,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(2,1,1,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(2,1,1,1)   0 ; - ! Curvature in Fx with kappa
P52_PKX1(2,1,1,1) 19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(2,1,1,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(2,1,1,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(2,1,1,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(2,1,1,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(2,1,1,1)   0 ; - ! Fx vertical shift at Fz0
P52_PVX2(2,1,1,1)   0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(2,1,1,1)   9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(2,1,1,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                        ! with kappa
P52_RCX1(2,1,1,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(2,1,1,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(2,1,1,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(2,1,1,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(2,1,1,1) 1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(2,1,1,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(2,1,1,1) -0.3 ; - ! Change in relaxation length for kappa with exponent of
                       ! Fz
P52_PCY1(2,1,1,1) 1.29 ; - ! Fy shape factor
P52_PDY1(2,1,1,1) -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(2,1,1,1) 0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(2,1,1,1) -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(2,1,1,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(2,1,1,1) 0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(2,1,1,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(2,1,1,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(2,1,1,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(2,1,1,1) 1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(2,1,1,1) 0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(2,1,1,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(2,1,1,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(2,1,1,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(2,1,1,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(2,1,1,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(2,1,1,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(2,1,1,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(2,1,1,1) 6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(2,1,1,1) 7.95 ; - ! Change in Fx loss function combined slip slope factor
                       ! with alpha
P52_RBY3(2,1,1,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(2,1,1,1) 1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(2,1,1,1) 0.23 ; - ! Combined slip Fy curvature
P52_REY2(2,1,1,1) 0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(2,1,1,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(2,1,1,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                        ! shift with Fz
P52_RVY1(2,1,1,1)   0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(2,1,1,1)   0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(2,1,1,1)   0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(2,1,1,1)  10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(2,1,1,1) 1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(2,1,1,1) -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(2,1,1,1) 1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(2,1,1,1) 1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(2,1,1,1) 8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(2,1,1,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(2,1,1,1) 0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(2,1,1,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(2,1,1,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(2,1,1,1) 3.44 ; - ! Residual moment slope factor
P52_QBZ10(2,1,1,1)  0 ; - ! Residual moment slope factor
P52_QCZ1(2,1,1,1) 1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(2,1,1,1) 0.11 ; - ! Peak pneumatic trail
P52_QDZ2(2,1,1,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(2,1,1,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(2,1,1,1) 8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(2,1,1,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(2,1,1,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(2,1,1,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(2,1,1,1) 0.12 ; - ! Coupled change in peak residual moment with Fz and
                       ! gamma
P52_QEZ1(2,1,1,1) -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(2,1,1,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(2,1,1,1)   0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(2,1,1,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(2,1,1,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                        ! and sign(alpha)
P52_QHZ1(2,1,1,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(2,1,1,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(2,1,1,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(2,1,1,1) 0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                       ! Fz and gamma
P52_QSX1(2,1,1,1) 0.03 ; - ! Overturning moment due to Fz
P52_QSX2(2,1,1,1) 0.52 ; - ! Overturning moment due to gamma
P52_QSX3(2,1,1,1) 0.13 ; - ! Overturning moment due to Fy
P52_QSY1(2,1,1,1) 0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(2,1,1,1)   0 ; - ! Change in rolling resistance with Fx
P52_QSY3(2,1,1,1)   0 ; - ! Change in rolling resistance with Vx
P52_QSY4(2,1,1,1)   0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(2,1,1,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(2,1,1,1) 0.018 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(2,1,1,1) 0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(2,1,1,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(2,1,1,1) 0.2 ; - ! Gyroscopic moment constant
P52_MBELT(2,1,1,1) 4.1 ; kg ! Belt mass
P52_MU_REF_X(2,1,1,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(2,1,1,1) 1 ; - ! Reference lateral friction

P52_R0(2,1,2,1) 0.263 ; m ! Unloaded radius, unit 2, axle 1, right, inner [I]
P52_FZ0(2,1,2,1) 4100 ; N ! Nominal vertical load, unit 2, axle 1, right, inner
P52_LONGVL(2,1,2,1) 16.5 ; m/s ! Reference forward velocity
P52_LFZ0(2,1,2,1)   1 ; - ! Nominal load scale factor
P52_LCX(2,1,2,1)    1 ; - ! Fx shape scale factor
P52_LMUX(2,1,2,1)   1 ; - ! Fx peak Mu scale factor
P52_LEX(2,1,2,1)    1 ; - ! Fx curvature scale factor
P52_LKX(2,1,2,1)    1 ; - ! Fx slip stiffness scale factor
P52_LHX(2,1,2,1)    0 ; - ! Fx horizontal shift scale factor
P52_LVX(2,1,2,1)    0 ; - ! Fx vertcal shift scale factor
P52_LGAX(2,1,2,1)   1 ; - ! Camber scale factor for Fx
P52_LCY(2,1,2,1)    1 ; - ! Fy shape scale factor
P52_LMUY(2,1,2,1)   1 ; - ! Fy peak Mu scale factor
P52_LEY(2,1,2,1)    1 ; - ! Fy curvature scale factor
P52_LKY(2,1,2,1)    1 ; - ! Fy cornering stiffness scale factor
P52_LHY(2,1,2,1)    0 ; - ! Fy horizontal shift scale factor
P52_LVY(2,1,2,1)    0 ; - ! Fy vertcal shift scale factor
P52_LGAY(2,1,2,1)   1 ; - ! Camber for Fy scale factor
P52_LTR(2,1,2,1)    1 ; - ! Peak pneumatic trail scale factor
P52_LRES(2,1,2,1)   0 ; - ! Residual Mz scale factor
P52_LGAZ(2,1,2,1)   1 ; - ! Camber for Mz scale factor
P52_LXAL(2,1,2,1)   1 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(2,1,2,1)   1 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(2,1,2,1)  1 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(2,1,2,1)     1 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(2,1,2,1)  1 ; - ! Fx relaxation length scale factor
P52_LSGAL(2,1,2,1)  1 ; - ! Fy relaxation length scale factor
P52_LGYR(2,1,2,1)   1 ; - ! Gyroscopic moment scale factor
P52_LMX(2,1,2,1)    1 ; - ! Overturning moment scale factor
P52_LVMX(2,1,2,1)   1 ; - ! Overturning moment vertical shift scale factor
P52_LMY(2,1,2,1)    1 ; - ! Rolling resistance torque scale factor
P52_PCX1(2,1,2,1) 1.62 ; - ! Fx shape factor
P52_PDX1(2,1,2,1) 1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(2,1,2,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(2,1,2,1) -2.27 ; - ! Change in friction with gamma
P52_PEX1(2,1,2,1) 0.5 ; - ! Fx curvature at Fz0
P52_PEX2(2,1,2,1) -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(2,1,2,1) -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(2,1,2,1)   0 ; - ! Curvature in Fx with kappa
P52_PKX1(2,1,2,1) 19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(2,1,2,1) -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(2,1,2,1) 0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(2,1,2,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(2,1,2,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(2,1,2,1)   0 ; - ! Fx vertical shift at Fz0
P52_PVX2(2,1,2,1)   0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(2,1,2,1)   9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(2,1,2,1) -8.75 ; - ! Change in Fx loss function combined slip slope factor
                        ! with kappa
P52_RCX1(2,1,2,1) 1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(2,1,2,1) 0.078 ; - ! Combined slip Fx curvature
P52_REX2(2,1,2,1) -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(2,1,2,1) -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(2,1,2,1) 1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(2,1,2,1) 0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(2,1,2,1) -0.3 ; - ! Change in relaxation length for kappa with exponent of
                       ! Fz
P52_PCY1(2,1,2,1) 1.29 ; - ! Fy shape factor
P52_PDY1(2,1,2,1) -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(2,1,2,1) 0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(2,1,2,1) -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(2,1,2,1) -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(2,1,2,1) 0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(2,1,2,1) -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(2,1,2,1) -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(2,1,2,1) -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(2,1,2,1) 1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(2,1,2,1) 0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(2,1,2,1) 0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(2,1,2,1) -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(2,1,2,1) 0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(2,1,2,1) 0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(2,1,2,1) -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(2,1,2,1) -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(2,1,2,1) -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(2,1,2,1) 6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(2,1,2,1) 7.95 ; - ! Change in Fx loss function combined slip slope factor
                       ! with alpha
P52_RBY3(2,1,2,1) -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(2,1,2,1) 1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(2,1,2,1) 0.23 ; - ! Combined slip Fy curvature
P52_REY2(2,1,2,1) 0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(2,1,2,1) 0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(2,1,2,1) 0.024 ; - ! Change in Fy loss function combined slip horizontal
                        ! shift with Fz
P52_RVY1(2,1,2,1)   0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(2,1,2,1)   0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(2,1,2,1)   0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(2,1,2,1)  10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(2,1,2,1) 1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(2,1,2,1) -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(2,1,2,1) 1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(2,1,2,1) 1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(2,1,2,1) 8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(2,1,2,1) -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(2,1,2,1) 0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(2,1,2,1) -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(2,1,2,1) -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(2,1,2,1) 3.44 ; - ! Residual moment slope factor
P52_QBZ10(2,1,2,1)  0 ; - ! Residual moment slope factor
P52_QCZ1(2,1,2,1) 1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(2,1,2,1) 0.11 ; - ! Peak pneumatic trail
P52_QDZ2(2,1,2,1) -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(2,1,2,1) -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(2,1,2,1) 8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(2,1,2,1) -0.003 ; - ! Peak residual moment
P52_QDZ7(2,1,2,1) 0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(2,1,2,1) -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(2,1,2,1) 0.12 ; - ! Coupled change in peak residual moment with Fz and
                       ! gamma
P52_QEZ1(2,1,2,1) -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(2,1,2,1) -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(2,1,2,1)   0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(2,1,2,1) -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(2,1,2,1) -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                        ! and sign(alpha)
P52_QHZ1(2,1,2,1) 0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(2,1,2,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(2,1,2,1) 0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(2,1,2,1) 0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                       ! Fz and gamma
P52_QSX1(2,1,2,1) 0.03 ; - ! Overturning moment due to Fz
P52_QSX2(2,1,2,1) 0.52 ; - ! Overturning moment due to gamma
P52_QSX3(2,1,2,1) 0.13 ; - ! Overturning moment due to Fy
P52_QSY1(2,1,2,1) 0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(2,1,2,1)   0 ; - ! Change in rolling resistance with Fx
P52_QSY3(2,1,2,1)   0 ; - ! Change in rolling resistance with Vx
P52_QSY4(2,1,2,1)   0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(2,1,2,1) 0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(2,1,2,1) 0.018 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(2,1,2,1) 0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(2,1,2,1) -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(2,1,2,1) 0.2 ; - ! Gyroscopic moment constant
P52_MBELT(2,1,2,1) 4.1 ; kg ! Belt mass
P52_MU_REF_X(2,1,2,1) 1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(2,1,2,1) 1 ; - ! Reference lateral friction


!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)      0.3 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)      0.3 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)      0.3 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)      0.3 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1)  1 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(2,1,1)      0.3 ; s ! [D] Time constant for brake actuator L3
TLAG_BK(2,1,1)      0 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2)  1 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(2,1,2)      0.3 ; s ! [D] Time constant for brake actuator R3
TLAG_BK(2,1,2)      0 ; s ! Transport time delay for fluid to reach brake R3 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise
R_DRIVE_SC(1)       0 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(2)       1 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)  5.125 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  1 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE      1000 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             0.18 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT  0.01 ; kg-m2 ! Spin inertia of input shaft of torque converter
TC_TH_APP        0.05 ; s ! Time constant for engine throttle application
TC_TH_RELEASE     0.1 ; s ! Time constant for engine throttle release

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE     1 ! Clutch control mode: 0 -> open-loop, 1 -> closed-loop (based
                      ! on shifting) [I]
OPT_CLUTCH_DELAY    1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE  0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE    0.1 ; s ! Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD    0.1 ; s ! Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL  0.3 ; s ! Time applying the clutch to full pressure during shift
                      ! [I]
T_CL_RE_ENGAGE    0.5 ; s ! Time clutch is fully re-engaged after starting shift [I]
T_GEAR_LAG        0.1 ; s ! Time lag in shifting
! T_TH_RETURN     0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED     0.4 ; s ! Time when throttle has returned to pre-shift level [I]
T_TH_ZERO         0.1 ; s ! Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD  0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL   0.3 ; s ! Time when starting to return throttle [I]
VLOW_CLUTCH         5 ; km/h ! Press the clutch pedal when average of wheel speeds
                      ! is below this speed while deccelerating with brake during
                      ! the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              5 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT 0.05 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL      0.03 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE      0.03 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.95 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.95 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -5.151 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT           0.2 ; s ! Shift duration in closed-loop transmission control

ITR(1)           0.03 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.95 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.95 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)    5.106 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st-gear [I]

ITR(2)           0.03 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.95 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.95 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)    3.017 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd-gear

ITR(3)           0.03 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.95 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.95 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)    1.908 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd-gear

ITR(4)           0.03 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.95 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.95 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)    1.264 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th-gear

ITR(5)           0.03 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.95 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.95 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)        1 ; - ! 5th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight Path (East-West)
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 200 ; m ! Segment length
! S_SEGMENT_END(1,1) 200 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 200 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            1 ! Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID during initialization [I]

ROAD_ID(1)          1 ; Example Bumps (Left/Right)
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight Path (East-West)
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)       1 ; ROAD_DZ_ID for: 10 cm bumps (Left/Right)

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run

PATH_ID_DM          1 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 6 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 1, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 1, axle
                                             ! 2, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, right side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 6 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 6 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CD_MY_COEFFICIENT(1,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CD_MY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CD_MY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CD_MY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CD_MY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CD_MY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CD_MY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 80
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 6 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, left side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, right
                               ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 6 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 6 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 6 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 6 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 6 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1,1) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 1, axle 1, left side
C_LAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,1,2) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 1, axle 1, right side
C_LAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2,1) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 1, axle 2, left side
C_LAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2,2) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 1, axle 2, right side
C_LAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,1) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 2, axle 1, left side
C_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,2) 0 ! Coefficient: lateral displacement per unit force
                           ! (mm/N), unit 2, axle 1, right side
C_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

C_LONG_COEFFICIENT(1,1,1) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 1, axle 1, left side
C_LONG_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,1,2) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 1, axle 1, right side
C_LONG_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2,1) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 1, axle 2, left side
C_LONG_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2,2) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 1, axle 2, right side
C_LONG_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,1) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 2, axle 1, left side
C_LONG_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,2) 0 ! Coefficient: X displacement per unit force (mm/N),
                            ! unit 2, axle 1, right side
C_LONG_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 194.82
 0.1, 194.82
 0.2, 235.04
 0.3, 284.89
 0.4, 352.33
 0.5, 422.29
 0.6, 492.25
 0.7, 904.65
 1, 904.65
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 521.39
 0.1, 521.39
 0.2, 651.74
 0.3, 782.09
 0.4, 912.44
 0.5, 1042.8
 0.6, 1173.1
 0.7, 1303.5
 1, 1303.5
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1314.4
 0.1, 1314.4
 0.2, 1510.6
 0.3, 1706.8
 0.4, 1903
 0.5, 2099.2
 0.6, 2295.4
 0.7, 2501.2
 0.8, 2776.7
 1, 2776.7
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 3458.9
 0.2, 3458.9
 0.3, 3469.6
 0.4, 3480.3
 0.5, 3491
 0.6, 3501.8
 0.7, 3512.5
 0.8, 4339.1
 1, 4339.1
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 6 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -1410, -2644
 -720, -1814
 -390, -1227
 -210, -946
 -90, -532
 -20, -120
 0, 0
 20, 120
 90, 314
 200, 413
 390, 580
 760, 948
 1160, 1351
ENDTABLE
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -1410, -2644
 -720, -1814
 -390, -1227
 -210, -946
 -90, -532
 -20, -120
 0, 0
 20, 120
 90, 314
 200, 413
 390, 580
 760, 948
 1160, 1351
ENDTABLE
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 30 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 30 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -150, -8068.01
 -135, -7364.99
 -120, -6640.757
 -105, -5893.547
 -90, -5123.626
 -75, -4331.68
 -60, -3517.91
 -45, -2681.44
 -30, -1819.8
 -15, -928.41
 0, 0
 15, 976.26
 30, 2015.91
 45, 3141.29
 60, 4384.87
 75, 5795.47
 90, 7449.47
 105, 9472.67
 120, 12081.27
 135, 15649.47
 150, 20752.57
ENDTABLE
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -150, -8068.01
 -135, -7364.99
 -120, -6640.757
 -105, -5893.547
 -90, -5123.626
 -75, -4331.68
 -60, -3517.91
 -45, -2681.44
 -30, -1819.8
 -15, -928.41
 0, 0
 15, 976.26
 30, 2015.91
 45, 3141.29
 60, 4384.87
 75, 5795.47
 90, 7449.47
 105, 9472.67
 120, 12081.27
 135, 15649.47
 150, 20752.57
ENDTABLE
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(2,1,1) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 6 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 30 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 30 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -150, -10879.73
 0, -1224.35
 15, -443.34
 30, 388.38
 45, 1288.69
 60, 2283.55
 75, 3412.03
 90, 4735.27
 105, 6353.77
 120, 8440.67
 135, 11295.27
 150, 15377.67
ENDTABLE
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -150, -10879.73
 0, -1224.35
 15, -443.34
 30, 388.38
 45, 1288.69
 60, 2283.55
 75, 3412.03
 90, 4735.27
 105, 6353.77
 120, 8440.67
 135, 11295.27
 150, 15377.67
ENDTABLE
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(2,1,1) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

FX_AERO_SHAPING_CONSTANT(1) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX

FX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

FY_AERO_SHAPING_CONSTANT(1) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY

FY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

FZ_AERO_SHAPING_CONSTANT(1) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ

FZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 12 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 220 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 220 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, right, inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 220 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 220 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 220 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 220 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 6 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 6 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.75s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 12
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 12
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 22 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 22 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.00098, 0.0022, 0.0039, 0.0061, 0.0088, 0.012, 0.016, 0.024, 0.035, 0.048, 0.071, 0.098, 0.13, 0.18, 0.23, 0.3, 0.39, 0.52, 0.66, 0.82, 1
 508, -1.7099, 1.4168, 5.0266, 8.3318, 11.075, 13.301, 15.099, 16.581, 18.67, 19.716, 20.11, 20.354, 20.519, 20.639, 20.752, 20.832, 20.867, 20.89, 20.906, 20.916, 20.921, 20.916
 596, -3.3267, -0.31634, 3.6703, 7.9795, 12.028, 15.535, 18.425, 20.744, 24.059, 26.223, 27.708, 29.07, 29.589, 29.764, 29.891, 29.967, 30.013, 30.043, 30.057, 30.061, 30.062, 30.061
 860, -4.85, -3.4735, -1.5911, 1.2889, 4.9004, 9.2728, 14.011, 18.519, 25.92, 31.029, 34.439, 37.584, 39.413, 40.54, 41.387, 41.829, 42.062, 42.224, 42.314, 42.337, 42.332, 42.315
 1300, -5.5606, -4.7937, -3.9451, -2.5289, -0.5629, 1.8561, 4.684, 7.9211, 15.865, 24.168, 30.917, 37.844, 41.98, 44.461, 46.36, 47.424, 48.067, 48.578, 48.98, 49.229, 49.412, 49.553
 1740, -5.9874, -5.5028, -4.8959, -4.0014, -2.6936, -1.015, 0.9789, 3.2793, 8.7723, 15.592, 23.341, 33.371, 40.407, 45.021, 48.789, 51.007, 52.351, 53.273, 53.798, 54.013, 54.104, 54.138
 2180, -6.4971, -6.1404, -5.6641, -5.0222, -4.0761, -2.8132, -1.2707, 0.50982, 4.7527, 9.9184, 16.129, 26.921, 36.122, 42.632, 48.061, 51.165, 52.969, 54.24, 55.029, 55.398, 55.549, 55.6
 2620, -7.1433, -6.8629, -6.4792, -5.979, -5.241, -4.245, -3.0075, -1.5561, 1.9364, 6.1587, 11.19, 20.329, 30.452, 38.708, 46.251, 50.825, 53.547, 55.455, 56.587, 57.098, 57.309, 57.381
 3060, -7.8102, -7.5713, -7.2301, -6.821, -6.2171, -5.3994, -4.3767, -3.1724, -0.265, 3.2927, 7.4729, 15.095, 24.3, 34.087, 44.331, 51.144, 55.439, 58.578, 60.502, 61.395, 61.775, 61.908
 3500, -8.5108, -8.3058, -7.9963, -7.6517, -7.1423, -6.449, -5.5757, -4.5409, -2.0388, 1.0305, 4.6584, 11.225, 19.151, 28.38, 39.884, 48.276, 53.88, 58.167, 60.906, 62.218, 62.793, 63
 3940, -9.2271, -9.0547, -8.7838, -8.4854, -8.0456, -7.4461, -6.6881, -5.784, -3.5829, -0.8751, 2.342, 8.1401, 15.162, 23.368, 34.589, 43.288, 49.325, 54.055, 57.119, 58.588, 59.226, 59.448
 4380, -10.02, -9.8682, -9.6252, -9.3649, -8.9838, -8.4647, -7.811, -7.0296, -5.1226, -2.7647, 0.054898, 5.1638, 11.398, 18.671, 29.806, 39.752, 47.078, 53.025, 56.982, 58.913, 59.771, 60.089
 4820, -10.865, -10.728, -10.508, -10.282, -9.9532, -9.5025, -8.9304, -8.244, -6.5609, -4.4738, -1.9772, 2.575, 8.1724, 14.686, 24.812, 35.363, 43.708, 50.817, 55.739, 58.216, 59.343, 59.772
 5260, -11.744, -11.632, -11.456, -11.257, -10.96, -10.551, -10.032, -9.4116, -7.897, -6.024, -3.7859, 0.3026, 5.3541, 11.248, 20.365, 30.644, 39.472, 47.318, 52.919, 55.808, 57.144, 57.658
 5700, -12.72, -12.61, -12.459, -12.235, -11.99, -11.632, -11.158, -10.593, -9.2118, -7.5029, -5.4619, -1.7337, 2.8658, 8.2565, 16.569, 26.203, 35.033, 43.108, 48.971, 52.045, 53.494, 54.06
 6140, -13.782, -13.685, -13.542, -13.33, -13.098, -12.771, -12.334, -11.813, -10.536, -8.9631, -7.085, -3.6581, 0.55991, 5.5114, 13.132, 22.01, 30.41, 38.215, 43.928, 46.923, 48.33, 48.886
 6580, -14.946, -14.853, -14.712, -14.524, -14.305, -13.979, -13.572, -13.083, -11.905, -10.447, -8.7055, -5.5284, -1.6205, 2.964, 9.9945, 18.163, 25.922, 33.148, 38.46, 41.25, 42.56, 43.061
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 5 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

MX_AERO_SHAPING_CONSTANT(1) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX

MX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 3 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due to
                       ! relative axle roll, unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due to
                       ! relative axle roll, unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due to
                       ! relative axle roll, unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -21, -100000
 -20, 0
 0, 0
 20, 0
 21, 100000
ENDTABLE
MX_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(1) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

MY_AERO_SHAPING_CONSTANT(1) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY

MY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 6 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 281.8
 5.5, 1336.3
 7, 2000
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 281.8
 5.5, 1336.3
 7, 2000
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 281.8
 5.5, 1336.3
 7, 2000
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 281.8
 5.5, 1336.3
 7, 2000
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,1) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 2, axle 1, left side
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,2) 0 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), unit 2, axle 1, right side
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -11, -100000
 -10, 0
 15, 0
 16, 100000
ENDTABLE
MY_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(1) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(1) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

MZ_AERO_SHAPING_CONSTANT(1) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ

MZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(1) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(1) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 6 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.05 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(2,1,1) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 0 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! 10 cm bumps (Left/Right)

! 2D table: row 1 has "0" (place holder) followed by 9 values of lateral position
! (m). Other rows have station (m) followed by 9 values of dZ (m).
ROAD_DZ_CARPET(1) 2D_LINEAR
 0, -10, -3.5, -3, -0.5, 0, 0.5, 3, 3.5, 10
 100, 0, 0, 0, 0, 0, 0, 0, 0, 0
 109, 0, 0, 0, 0, 0, 0, 0, 0, 0
 110, 0, 0, 0, 0, 0, 0.1, 0.1, 0, 0
 114, 0, 0, 0, 0, 0, 0.1, 0.1, 0, 0
 115, 0, 0, 0, 0, 0, 0, 0, 0, 0
 116, 0, 0, 0.1, 0.1, 0, 0, 0, 0, 0
 120, 0, 0, 0.1, 0.1, 0, 0, 0, 0, 0
 121, 0, 0, 0, 0, 0, 0, 0, 0, 0
 130, 0, 0, 0, 0, 0, 0, 0, 0, 0
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 3 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: Left / Right Bumps
SPEED_TARGET_CONSTANT(1) 8 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 6 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -16, -18.9959
 -15.7778, -18.7288
 -15.5556, -18.4618
 -15.3333, -18.1949
 -15.1111, -17.9282
 -14.8889, -17.6616
 -14.6667, -17.3952
 -14.4444, -17.1289
 -14.2222, -16.8627
 -14, -16.5966
 -13.7778, -16.3306
 -13.5556, -16.0648
 -13.3333, -15.7991
 -13.1111, -15.5335
 -12.8889, -15.268
 -12.6667, -15.0027
 -12.4444, -14.7374
 -12.2222, -14.4722
 -12, -14.2072
 -11.7778, -13.9423
 -11.5556, -13.6774
 -11.3333, -13.4127
 -11.1111, -13.148
 -10.8889, -12.8835
 -10.6667, -12.619
 -10.4444, -12.3547
 -10.2222, -12.0904
 -10, -11.8262
 -9.7778, -11.5621
 -9.5556, -11.2981
 -9.3333, -11.0341
 -9.1111, -10.7703
 -8.8889, -10.5065
 -8.6667, -10.2428
 -8.4444, -9.9792
 -8.2222, -9.7156
 -8, -9.4521
 -7.7778, -9.1887
 -7.5556, -8.9254
 -7.3333, -8.6621
 -7.1111, -8.3989
 -6.8889, -8.1357
 -6.6667, -7.8726
 -6.4444, -7.6096
 -6.2222, -7.3466
 -6, -7.0837
 -5.7778, -6.8208
 -5.5556, -6.558
 -5.3333, -6.2953
 -5.1111, -6.0325
 -4.8889, -5.7699
 -4.6667, -5.5072
 -4.4444, -5.2447
 -4.2222, -4.9821
 -4, -4.7196
 -3.7778, -4.4572
 -3.5556, -4.1948
 -3.3333, -3.9324
 -3.1111, -3.67
 -2.8889, -3.4077
 -2.6667, -3.1454
 -2.4444, -2.8832
 -2.2222, -2.621
 -2, -2.3588
 -1.7778, -2.0966
 -1.5556, -1.8345
 -1.3333, -1.5723
 -1.1111, -1.3102
 -0.8889, -1.0482
 -0.6667, -0.7861
 -0.4444, -0.5241
 -0.2222, -0.262
 0, 0
 0.2222, 0.262
 0.4444, 0.524
 0.6667, 0.786
 0.8889, 1.048
 1.1111, 1.3099
 1.3333, 1.5719
 1.5556, 1.8339
 1.7778, 2.0958
 2, 2.3578
 2.2222, 2.6198
 2.4444, 2.8817
 2.6667, 3.1437
 2.8889, 3.4057
 3.1111, 3.6677
 3.3333, 3.9297
 3.5556, 4.1917
 3.7778, 4.4537
 4, 4.7157
 4.2222, 4.9777
 4.4444, 5.2398
 4.6667, 5.5019
 4.8889, 5.764
 5.1111, 6.0261
 5.3333, 6.2882
 5.5556, 6.5504
 5.7778, 6.8126
 6, 7.0748
 6.2222, 7.337
 6.4444, 7.5993
 6.6667, 7.8616
 6.8889, 8.1239
 7.1111, 8.3863
 7.3333, 8.6487
 7.5556, 8.9111
 7.7778, 9.1736
 8, 9.4361
 8.2222, 9.6987
 8.4444, 9.9613
 8.6667, 10.2239
 8.8889, 10.4866
 9.1111, 10.7493
 9.3333, 11.0121
 9.5556, 11.275
 9.7778, 11.5378
 10, 11.8008
 10.2222, 12.0638
 10.4444, 12.3268
 10.6667, 12.59
 10.8889, 12.8531
 11.1111, 13.1164
 11.3333, 13.3797
 11.5556, 13.643
 11.7778, 13.9065
 12, 14.17
 12.2222, 14.4336
 12.4444, 14.6972
 12.6667, 14.9609
 12.8889, 15.2247
 13.1111, 15.4886
 13.3333, 15.7525
 13.5556, 16.0166
 13.7778, 16.2807
 14, 16.5449
 14.2222, 16.8092
 14.4444, 17.0735
 14.6667, 17.338
 14.8889, 17.6025
 15.1111, 17.8672
 15.3333, 18.1319
 15.5556, 18.3968
 15.7778, 18.6617
 16, 18.9267
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -16, -18.9267
 -15.7778, -18.6617
 -15.5556, -18.3968
 -15.3333, -18.1319
 -15.1111, -17.8672
 -14.8889, -17.6025
 -14.6667, -17.338
 -14.4444, -17.0735
 -14.2222, -16.8092
 -14, -16.5449
 -13.7778, -16.2807
 -13.5556, -16.0166
 -13.3333, -15.7525
 -13.1111, -15.4886
 -12.8889, -15.2247
 -12.6667, -14.9609
 -12.4444, -14.6972
 -12.2222, -14.4336
 -12, -14.17
 -11.7778, -13.9065
 -11.5556, -13.643
 -11.3333, -13.3797
 -11.1111, -13.1164
 -10.8889, -12.8531
 -10.6667, -12.59
 -10.4444, -12.3268
 -10.2222, -12.0638
 -10, -11.8008
 -9.7778, -11.5378
 -9.5556, -11.275
 -9.3333, -11.0121
 -9.1111, -10.7493
 -8.8889, -10.4866
 -8.6667, -10.2239
 -8.4444, -9.9613
 -8.2222, -9.6987
 -8, -9.4361
 -7.7778, -9.1736
 -7.5556, -8.9111
 -7.3333, -8.6487
 -7.1111, -8.3863
 -6.8889, -8.1239
 -6.6667, -7.8616
 -6.4444, -7.5993
 -6.2222, -7.337
 -6, -7.0748
 -5.7778, -6.8126
 -5.5556, -6.5504
 -5.3333, -6.2882
 -5.1111, -6.0261
 -4.8889, -5.764
 -4.6667, -5.5019
 -4.4444, -5.2398
 -4.2222, -4.9777
 -4, -4.7157
 -3.7778, -4.4537
 -3.5556, -4.1917
 -3.3333, -3.9297
 -3.1111, -3.6677
 -2.8889, -3.4057
 -2.6667, -3.1437
 -2.4444, -2.8817
 -2.2222, -2.6198
 -2, -2.3578
 -1.7778, -2.0958
 -1.5556, -1.8339
 -1.3333, -1.5719
 -1.1111, -1.3099
 -0.8889, -1.048
 -0.6667, -0.786
 -0.4444, -0.524
 -0.2222, -0.262
 0, 0
 0.2222, 0.262
 0.4444, 0.5241
 0.6667, 0.7861
 0.8889, 1.0482
 1.1111, 1.3102
 1.3333, 1.5723
 1.5556, 1.8345
 1.7778, 2.0966
 2, 2.3588
 2.2222, 2.621
 2.4444, 2.8832
 2.6667, 3.1454
 2.8889, 3.4077
 3.1111, 3.67
 3.3333, 3.9324
 3.5556, 4.1948
 3.7778, 4.4572
 4, 4.7196
 4.2222, 4.9821
 4.4444, 5.2447
 4.6667, 5.5072
 4.8889, 5.7699
 5.1111, 6.0325
 5.3333, 6.2953
 5.5556, 6.558
 5.7778, 6.8208
 6, 7.0837
 6.2222, 7.3466
 6.4444, 7.6096
 6.6667, 7.8726
 6.8889, 8.1357
 7.1111, 8.3989
 7.3333, 8.6621
 7.5556, 8.9254
 7.7778, 9.1887
 8, 9.4521
 8.2222, 9.7156
 8.4444, 9.9792
 8.6667, 10.2428
 8.8889, 10.5065
 9.1111, 10.7703
 9.3333, 11.0341
 9.5556, 11.2981
 9.7778, 11.5621
 10, 11.8262
 10.2222, 12.0904
 10.4444, 12.3547
 10.6667, 12.619
 10.8889, 12.8835
 11.1111, 13.148
 11.3333, 13.4127
 11.5556, 13.6774
 11.7778, 13.9423
 12, 14.2072
 12.2222, 14.4722
 12.4444, 14.7374
 12.6667, 15.0027
 12.8889, 15.268
 13.1111, 15.5335
 13.3333, 15.7991
 13.5556, 16.0648
 13.7778, 16.3306
 14, 16.5966
 14.2222, 16.8627
 14.4444, 17.1289
 14.6667, 17.3952
 14.8889, 17.6616
 15.1111, 17.9282
 15.3333, 18.1949
 15.5556, 18.4618
 15.7778, 18.7288
 16, 18.9959
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 6 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, -2.07166
 -60, -1.77237
 -50, -1.47431
 -40, -1.17742
 -30, -0.881618
 -20, -0.586832
 -10, -0.292987
 0, 0
 10, 0.292218
 20, 0.583766
 30, 0.874758
 40, 1.16532
 50, 1.45561
 60, 1.7458
 70, 2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, -2.07166
 -60, -1.77237
 -50, -1.47431
 -40, -1.17742
 -30, -0.881618
 -20, -0.586832
 -10, -0.292987
 0, 0
 10, 0.292218
 20, 0.583766
 30, 0.874758
 40, 1.16532
 50, 1.45561
 60, 1.7458
 70, 2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 1, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, right side

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 6 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 1, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 1, axle 2, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, right
                                          ! side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 6 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 1, axle 2, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, right side

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 6
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 1,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,2,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 2,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,2,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 1, axle 2,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT   0.75 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 401.81
 0.1, 401.81
 0.2, 639.68
 0.3, 850.8
 0.4, 938.22
 0.5, 998.48
 0.6, 1015.2
 0.7, 1032
 1, 1032
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 926.44
 0.1, 926.44
 0.2, 1299.7
 0.3, 1476.3
 0.4, 1652.8
 0.5, 1829
 0.6, 1966.1
 0.7, 2016.7
 1, 2016.7
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1638.9
 0.1, 1638.9
 0.2, 2093.7
 0.3, 2426.8
 0.4, 2759.9
 0.5, 3012.8
 0.6, 3221
 0.7, 3259.7
 0.8, 3293.3
 1, 3293.3
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 3653.5
 0.2, 3653.5
 0.3, 3872.9
 0.4, 4092.3
 0.5, 4311.6
 0.6, 4508.6
 0.7, 4578
 0.8, 4583.5
 1, 4583.5
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_AERO_ROAD_ID_1   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_2   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 131.1238717 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_2 128.3774332 ; m ! Road path station for tracked aero road point
SV_ART_H1_OLD 0.03242014328 ; deg ! Articulation for hitch 1
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission
SV_AVX -0.006107499245 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 1 {AVx}
SV_AVX_SM2 -0.05455468215 ; deg/s ! ODE: Body-X roll rate of unit 2 sprung-mass
SV_AVY   0.8590495984 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 1 {AVy}
SV_AVY_L1 80.81357892 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 80.81745835 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 80.38383672 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 80.38619868 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_L3 81.07350736 ; rpm ! ODE: Spin of wheel L3 {AVy_L3}
SV_AVY_L3_OLD 81.07880015 ; rpm ! Spin of wheel L3 (previous time step)
SV_AVY_R1 80.75661454 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 80.75999258 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 80.32739969 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 80.32817326 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVY_R3 81.11815201 ; rpm ! ODE: Spin of wheel R3 {AVy_R3}
SV_AVY_R3_OLD 81.12436716 ; rpm ! Spin of wheel R3 (previous time step)
SV_AVY_SM2 -0.5816876862 ; deg/s ! ODE: Body-Y pitch rate of unit 2 sprung-mass
SV_AVZ -0.08657340943 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 1 {AVz}
SV_AVZ_SM2 0.03926439679 ; deg/s ! ODE: Body-Z yaw rate of unit 2 sprung-mass
SV_AV_CL            0 ; rpm ! Clutch relative spin
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_ENG 1237.000119 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}
SV_AV_SHAFT_L_D2 80.38383672 ; rpm ! ODE: Diff2 Left (first) output shaft speed
SV_AV_SHAFT_R_D2 80.32739969 ; rpm ! ODE: Diff2 Right (second) output shaft speed
SV_AV_SW  2.759611254 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC  1237.000119 ; rpm ! ODE: Torque coupling output shaft spin
SV_AV_TR_OUT 410.0099832 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BETA  0.0126142993 ; deg ! Sideslip (ISO)
SV_BETA_2 0.01854682426 ; deg ! Sideslip (ISO)
SV_BETA_RD 0.0126142993 ; deg ! Sideslip using road axes
SV_BETA_RD_2 0.01854682426 ; deg ! Sideslip using road axes
SV_BRAKE_STATE      0 ; - ! Braking state, used for clutch control
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state for 2nd drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_CL_AUTO_BRAKE    0 ; - ! Boolean: 1 if auto clutch for low-speed braking
SV_CL_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto clutch for a gear shift
SV_CL_CON           0 ; - ! Transmission clutch control {ClutchTr}
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff
SV_CL_DIFF_SPIN_2 0.05802541675 ; rpm ! Clutch rel. spin for 2nd drive axle diff
SV_CL_LOCKED        1 ; - ! Clutch lockup state
SV_CL_PRESS         0 ; - ! Initial direction state for automatic clutch
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch
SV_CMP_S_L1 93.00599488 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 62.25399761 ; mm ! Compression of ride spring L2
SV_CMP_S_L3 13.3830834 ; mm ! Compression of ride spring L3
SV_CMP_S_R1 95.2861225 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 64.29251809 ; mm ! Compression of ride spring R2
SV_CMP_S_R3 13.45438035 ; mm ! Compression of ride spring R3
SV_CMP_T_L1I 15.19813187 ; mm ! Tire L1i compression
SV_CMP_T_L1O        0 ; mm ! Tire L1o compression
SV_CMP_T_L2I 16.4914805 ; mm ! Tire L2i compression
SV_CMP_T_L2O        0 ; mm ! Tire L2o compression
SV_CMP_T_L3I 14.47812847 ; mm ! Tire L3i compression
SV_CMP_T_L3O        0 ; mm ! Tire L3o compression
SV_CMP_T_R1I 15.63619629 ; mm ! Tire R1i compression
SV_CMP_T_R1O        0 ; mm ! Tire R1o compression
SV_CMP_T_R2I 17.17819259 ; mm ! Tire R2i compression
SV_CMP_T_R2O        0 ; mm ! Tire R2o compression
SV_CMP_T_R3I 14.88479487 ; mm ! Tire R3i compression
SV_CMP_T_R3O        0 ; mm ! Tire R3o compression
SV_CONTACT_ID_L1I   1 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O   1 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I   1 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O   1 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_L3I   1 ; - ! Road surface ID for tire contact {RdID_L3I}
SV_CONTACT_ID_L3O   1 ; - ! Road surface ID for tire contact {RdID_L3O}
SV_CONTACT_ID_R1I   1 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O   1 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I   1 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O   1 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_ID_R3I   1 ; - ! Road surface ID for tire contact {RdID_R3I}
SV_CONTACT_ID_R3O   1 ; - ! Road surface ID for tire contact {RdID_R3O}
SV_CONTACT_STA_L1I 131.1219145 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 99.99966935 ; m ! Road path station for tire contact {S_Rd_L1O}
SV_CONTACT_STA_L2I 129.1991545 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O 98.07660577 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_L3I 125.7728476 ; m ! Road path station for tire contact {S_Rd_L3I}
SV_CONTACT_STA_L3O 94.65281373 ; m ! Road path station for tire contact {S_Rd_L3O}
SV_CONTACT_STA_R1I 131.1216603 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 99.99966935 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 129.1988169 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O 98.07660577 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_CONTACT_STA_R3I 125.7733188 ; m ! Road path station for tire contact {S_Rd_R3I}
SV_CONTACT_STA_R3O 94.65281373 ; m ! Road path station for tire contact {S_Rd_R3O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio
SV_DZDX_GND         0 ; - ! dZ/dX of ground at unit 1 aero ref. pt
SV_DZDX_GND_2       0 ; - ! dZ/dX of ground at unit 2 aero ref. pt
SV_DZDX_L1I         0 ; - ! Ground X slope under tire L1i
SV_DZDX_L1O         0 ; - ! Ground X slope under tire L1o
SV_DZDX_L2I         0 ; - ! Ground X slope under tire L2i
SV_DZDX_L2O         0 ; - ! Ground X slope under tire L2o
SV_DZDX_L3I         0 ; - ! Ground X slope under tire L3i
SV_DZDX_L3O         0 ; - ! Ground X slope under tire L3o
SV_DZDX_R1I         0 ; - ! Ground X slope under tire R1i
SV_DZDX_R1O         0 ; - ! Ground X slope under tire R1o
SV_DZDX_R2I         0 ; - ! Ground X slope under tire R2i
SV_DZDX_R2O         0 ; - ! Ground X slope under tire R2o
SV_DZDX_R3I         0 ; - ! Ground X slope under tire R3i
SV_DZDX_R3O         0 ; - ! Ground X slope under tire R3o
SV_DZDY_GND         0 ; - ! dZ/dY of ground at unit 1 aero ref. pt
SV_DZDY_GND_2       0 ; - ! dZ/dY of ground at unit 2 aero ref. pt
SV_DZDY_L1I         0 ; - ! Ground Y slope under tire L1i
SV_DZDY_L1O         0 ; - ! Ground Y slope under tire L1o
SV_DZDY_L2I         0 ; - ! Ground Y slope under tire L2i
SV_DZDY_L2O         0 ; - ! Ground Y slope under tire L2o
SV_DZDY_L3I         0 ; - ! Ground Y slope under tire L3i
SV_DZDY_L3O         0 ; - ! Ground Y slope under tire L3o
SV_DZDY_R1I         0 ; - ! Ground Y slope under tire R1i
SV_DZDY_R1O         0 ; - ! Ground Y slope under tire R1o
SV_DZDY_R2I         0 ; - ! Ground Y slope under tire R2i
SV_DZDY_R2O         0 ; - ! Ground Y slope under tire R2o
SV_DZDY_R3I         0 ; - ! Ground Y slope under tire R3i
SV_DZDY_R3O         0 ; - ! Ground Y slope under tire R3o
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_L3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3i
SV_D_ALPHA_L3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_L3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3i
SV_D_ALPHA_MX_L3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_MX_R3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3i
SV_D_ALPHA_MX_R3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_ALPHA_R3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3i
SV_D_ALPHA_R3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_L3I       0 ; - ! Delta Coni (Mz 0-crossing), tire L3i
SV_D_CONI_L3O       0 ; - ! Delta Coni (Mz 0-crossing), tire L3o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_CONI_R3I       0 ; - ! Delta Coni (Mz 0-crossing), tire R3i
SV_D_CONI_R3O       0 ; - ! Delta Coni (Mz 0-crossing), tire R3o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_L3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3i
SV_D_KAPPA_L3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_D_KAPPA_R3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3i
SV_D_KAPPA_R3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST           0 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  2790.179846 ; N ! Force from ride spring L1
SV_FS_L2  3282.079106 ; N ! Force from ride spring L2
SV_FS_L3   2514.00594 ; N ! Force from ride spring L3
SV_FS_R1  2858.583675 ; N ! Force from ride spring R1
SV_FS_R2   3400.41503 ; N ! Force from ride spring R2
SV_FS_R3  2582.054816 ; N ! Force from ride spring R3
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}
SV_FX_SM_L1 -4.658657096 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 -266.8086069 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_L3 19.84656066 ; N ! Tire force [sx] component, wheel L3
SV_FX_SM_R1 -5.534979006 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 -269.73019 ; N ! Tire force [sx] component, wheel R2
SV_FX_SM_R3 21.57288098 ; N ! Tire force [sx] component, wheel R3
SV_FY_SM_L1 45.36059454 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 18.56974235 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_L3 31.42093204 ; N ! Tire force [sy] component, wheel L3
SV_FY_SM_R1 17.67848699 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 -39.50783102 ; N ! Tire force [sy] component, wheel R2
SV_FY_SM_R3 9.136857398 ; N ! Tire force [sy] component, wheel R3
SV_FZ_SM_L1 3343.149404 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 3629.515791 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_L3 3183.139902 ; N ! Tire force force [sz] component, wheel L3
SV_FZ_SM_R1 3439.621612 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 3780.764289 ; N ! Tire force force [sz] component, wheel R2
SV_FZ_SM_R3 3272.765329 ; N ! Tire force force [sz] component, wheel R3
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A3    0 ; N ! Friction force at rack
SV_GEAR             2 ; - ! Automatic transmission gear {GearAuto}
SV_GEAR_DELAY       2 ; - ! Delayed transmission gear position
SV_GEAR_MEM         2 ; - ! Gear saved in memory, used for transition
SV_GEAR_STAT        2 ; - ! Transmission gear status {GearStat}
SV_IVERR -0.01945289706 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_I_GEAR_SHIFT  0.03 ; kg-m2 ! Transmission gear inertia modulated by shift
SV_I_GEAR_SHIFT_START 0 ; kg-m2 ! Gear spin inertia when automatic shift started
SV_JNCR_L1 0.03089542656 ; m/s ! ODE: Jounce rate at wheel L1
SV_JNCR_L2 -0.001034522418 ; m/s ! ODE: Jounce rate at wheel L2
SV_JNCR_L3 0.001865372269 ; m/s ! ODE: Jounce rate at wheel L3
SV_JNCR_R1 0.03098909506 ; m/s ! ODE: Jounce rate at wheel R1
SV_JNCR_R2 -0.0009903273708 ; m/s ! ODE: Jounce rate at wheel R2
SV_JNCR_R3 0.001662480176 ; m/s ! ODE: Jounce rate at wheel R3
SV_JNC_L1 0.02300308202 ; m ! ODE: Jounce movement at wheel L1
SV_JNC_L2 0.03701493642 ; m ! ODE: Jounce movement at wheel L2
SV_JNC_L3 0.004614599311 ; m ! ODE: Jounce movement at wheel L3
SV_JNC_R1 0.02528325874 ; m ! ODE: Jounce movement at wheel R1
SV_JNC_R2 0.03905347964 ; m ! ODE: Jounce movement at wheel R2
SV_JNC_R3 0.004685794971 ; m ! ODE: Jounce movement at wheel R3
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_L3        0 ; - ! Lockup state for wheel L3
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LK_WHL_R3        0 ; - ! Lockup state for wheel R3
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Is clutch locked while in neutral?
SV_LRELAX_X_PAC52_L1I 395.703695 ; mm ! Long. relaxation length for PAC52, tire L1I
SV_LRELAX_X_PAC52_L1O 0 ; mm ! Long. relaxation length for PAC52, tire L1O
SV_LRELAX_X_PAC52_L2I 438.4156879 ; mm ! Long. relaxation length for PAC52, tire L2I
SV_LRELAX_X_PAC52_L2O 0 ; mm ! Long. relaxation length for PAC52, tire L2O
SV_LRELAX_X_PAC52_L3I 372.611401 ; mm ! Long. relaxation length for PAC52, tire L3I
SV_LRELAX_X_PAC52_L3O 0 ; mm ! Long. relaxation length for PAC52, tire L3O
SV_LRELAX_X_PAC52_R1I 409.9917576 ; mm ! Long. relaxation length for PAC52, tire R1I
SV_LRELAX_X_PAC52_R1O 0 ; mm ! Long. relaxation length for PAC52, tire R1O
SV_LRELAX_X_PAC52_R2I 461.750347 ; mm ! Long. relaxation length for PAC52, tire R2I
SV_LRELAX_X_PAC52_R2O 0 ; mm ! Long. relaxation length for PAC52, tire R2O
SV_LRELAX_X_PAC52_R3I 385.5947064 ; mm ! Long. relaxation length for PAC52, tire R3I
SV_LRELAX_X_PAC52_R3O 0 ; mm ! Long. relaxation length for PAC52, tire R3O
SV_LRELAX_Y_PAC52_L1I 365.0636413 ; mm ! Lateral relaxation length for PAC52, tire
                                  ! L1I
SV_LRELAX_Y_PAC52_L1O 0 ; mm ! Lateral relaxation length for PAC52, tire L1O
SV_LRELAX_Y_PAC52_L2I 383.864294 ; mm ! Lateral relaxation length for PAC52, tire
                                 ! L2I
SV_LRELAX_Y_PAC52_L2O 0 ; mm ! Lateral relaxation length for PAC52, tire L2O
SV_LRELAX_Y_PAC52_L3I 353.9370885 ; mm ! Lateral relaxation length for PAC52, tire
                                  ! L3I
SV_LRELAX_Y_PAC52_L3O 0 ; mm ! Lateral relaxation length for PAC52, tire L3O
SV_LRELAX_Y_PAC52_R1I 372.1351721 ; mm ! Lateral relaxation length for PAC52, tire
                                  ! R1I
SV_LRELAX_Y_PAC52_R1O 0 ; mm ! Lateral relaxation length for PAC52, tire R1O
SV_LRELAX_Y_PAC52_R2I 393.6150879 ; mm ! Lateral relaxation length for PAC52, tire
                                  ! R2I
SV_LRELAX_Y_PAC52_R2O 0 ; mm ! Lateral relaxation length for PAC52, tire R2O
SV_LRELAX_Y_PAC52_R3I 360.612998 ; mm ! Lateral relaxation length for PAC52, tire
                                 ! R3I
SV_LRELAX_Y_PAC52_R3O 0 ; mm ! Lateral relaxation length for PAC52, tire R3O
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MX_H1            0 ; N-m ! Roll moment, hitch 1
SV_MY_BRK_L1 -0.9908885717 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 63.40736995 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_L3 -0.8702132219 ; N-m ! Spin moment, wheel L3
SV_MY_BRK_R1 -0.8929938663 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 63.74762048 ; N-m ! Spin moment, wheel R2
SV_MY_BRK_R3 -1.206468607 ; N-m ! Spin moment, wheel R3
SV_MY_H1            0 ; N-m ! Pitch moment, hitch 1
SV_MZ_H1            0 ; N-m ! Articulation moment, hitch 1
SV_MZ_WHEEL_L1 -2.825973753 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 -4.149104808 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_L3 -1.355263915 ; N-m ! Tire Mz, wheel L3
SV_MZ_WHEEL_R1 -0.437105549 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 1.362389828 ; N-m ! Tire Mz, wheel R2
SV_MZ_WHEEL_R3 -1.089421756 ; N-m ! Tire Mz, wheel R3
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff
SV_M_CLUTCH_DEL    80 ; N-m ! ODE: Time delayed clutch torque capacity
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle diff
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request
SV_M_HYS_COL        0 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A3    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -37.58325563 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_L3          0 ; N-m ! Kingpin moment, wheel L3
SV_M_KP_R1 29.3651285 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_KP_R3          0 ; N-m ! Kingpin moment, wheel R3
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_L3        0 ; N-m ! Kingpin steer park torque, wheel L3
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_PARK_R3        0 ; N-m ! Kingpin steer park torque, wheel R3
SV_M_TC  -7.257029324 ; N-m ! Transmission input shaft torque
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1           0 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2           0 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_L3           0 ; MPa ! ODE: Brake actuator pressure for wheel L3
SV_PBK_R1           0 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2           0 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PBK_R3           0 ; MPa ! ODE: Brake actuator pressure for wheel R3
SV_PITCH -0.4570428369 ; deg ! ODE: Pitch of sprung mass, unit 1 {Pitch}
SV_PITCH_H1 -0.4433672398 ; deg ! ODE: Relative pitch for unit 2
SV_PITCH_H1_OLD -0.4427065137 ; deg ! Relative pitch for hitch 1
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio
SV_ROLL  0.1241380222 ; deg ! ODE: Roll (Euler) of sprung mass, unit 1 {Roll_E}
SV_ROLL_H1 -0.1087516924 ; deg ! ODE: Relative roll for unit 2
SV_ROLL_H1_OLD -0.1084765036 ; deg ! Relative roll for hitch 1
SV_ROT_L1 18.82039627 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 18.89618038 ; rev ! ODE: Rotation of wheel L2
SV_ROT_L3 18.82487222 ; rev ! ODE: Rotation of wheel L3
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_L3        0 ; rev ! Rotation reference of wheel L3 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_LK_R3        0 ; rev ! Rotation reference of wheel R3 in "locked" mode
SV_ROT_R1 18.82385886 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 18.88672575 ; rev ! ODE: Rotation of wheel R2
SV_ROT_R3 18.82492818 ; rev ! ODE: Rotation of wheel R3
SV_ROT_SHAFT_2 96.81869696 ; rev ! ODE: 2nd drive axle diff input shaft rotation
SV_ROT_SHAFT_L_D2 18.89618038 ; rev ! ODE: Diff2 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D2 18.88672575 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation
SV_ROT_TC 292.0710935 ; rev ! ODE: Torque coupling output shaft rotation
SV_ROT_TR_OUT 96.80844996 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_SHIFT 3.017 ; - ! Transmission gear ratio modulated by gear shift
SV_R_GEAR_SHIFT_START 0 ; - ! Gear ratio when automatic shift started
SV_R_GEAR_TOTAL_SC 15.462125 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.013159693 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2 -1.000014969 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L3 -1.000000914 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.013255579 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2 -1.000013277 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R3 -1.000000941 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1I 0.2478041088 ; m ! Deflected radius for tire L1i
SV_R_L1O 0.2478041088 ; m ! Deflected radius for tire L1o
SV_R_L2I 0.2465122658 ; m ! Deflected radius for tire L2i
SV_R_L2O 0.2465122658 ; m ! Deflected radius for tire L2o
SV_R_L3I 0.2485315134 ; m ! Deflected radius for tire L3i
SV_R_L3O 0.2485315134 ; m ! Deflected radius for tire L3o
SV_R_R1I 0.2473659181 ; m ! Deflected radius for tire R1i
SV_R_R1O 0.2473659181 ; m ! Deflected radius for tire R1o
SV_R_R2I 0.2458254742 ; m ! Deflected radius for tire R2i
SV_R_R2O 0.2458254742 ; m ! Deflected radius for tire R2o
SV_R_R3I 0.2481240789 ; m ! Deflected radius for tire R3i
SV_R_R3O 0.2481240789 ; m ! Deflected radius for tire R3o
SV_SHIFT_DELAY      0 ; - ! Is shifting delay in T.C. active?
SV_SLIP_LAT_L1I -0.001393261702 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I -0.001152469947 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O     0 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_L3I -0.0007019331501 ; - ! ODE: Lagged tan of lateral slip, tire L3i
SV_SLIP_LAT_L3O     0 ; - ! ODE: Lagged tan of lateral slip, tire L3o
SV_SLIP_LAT_R1I 6.390967535e-05 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I 0.001837364697 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O     0 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LAT_R3I -0.0002941762844 ; - ! ODE: Lagged tan of lateral slip, tire R3i
SV_SLIP_LAT_R3O     0 ; - ! ODE: Lagged tan of lateral slip, tire R3o
SV_SLIP_LONG_L1I -0.0004995287042 ; - ! ODE: Lagged long. slip, tire L1i
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o
SV_SLIP_LONG_L2I -0.004300446742 ; - ! ODE: Lagged long. slip, tire L2i
SV_SLIP_LONG_L2O    0 ; - ! ODE: Lagged long. slip, tire L2o
SV_SLIP_LONG_L3I -0.0005075776238 ; - ! ODE: Lagged long. slip, tire L3i
SV_SLIP_LONG_L3O    0 ; - ! ODE: Lagged long. slip, tire L3o
SV_SLIP_LONG_R1I -0.000507786949 ; - ! ODE: Lagged long. slip, tire R1i
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o
SV_SLIP_LONG_R2I -0.00412707366 ; - ! ODE: Lagged long. slip, tire R2i
SV_SLIP_LONG_R2O    0 ; - ! ODE: Lagged long. slip, tire R2o
SV_SLIP_LONG_R3I -0.0004862418388 ; - ! ODE: Lagged long. slip, tire R3i
SV_SLIP_LONG_R3O    0 ; - ! ODE: Lagged long. slip, tire R3o
SV_SO_DIST 31.13056401 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION 131.1238717 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 131.1238717 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM 0.01765815868 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD 0.01759374954 ; deg ! Road-wheel steer from driver model (prev. time
                            ! step)
SV_STR_IN_DGR_A1 0.04816430246 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_DGR_A3    0 ; - ! ODE: Steering gear input rate, axle 3
SV_STR_IN_GR_A1 0.006511292488 ; - ! ODE: Steering gear input position, axle 1
                               ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_IN_GR_A3     0 ; - ! ODE: Steering gear input position, axle 3 {A_StrIn3}
SV_STR_KP_L1 0.06938766876 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD 0.06929418887 ; deg ! Kingpin steer angle, wheel L1 (previous time
                               ! step)
SV_STR_KP_L2 0.0729421166 ; deg ! Kingpin steer angle, wheel L2
SV_STR_KP_L2_OLD 1.029154304 ; deg ! Kingpin steer angle, wheel L2 (previous time
                             ! step)
SV_STR_KP_L3 0.01205615226 ; deg ! Kingpin steer angle, wheel L3
SV_STR_KP_L3_OLD 0.1105062939 ; deg ! Kingpin steer angle, wheel L3 (previous time
                              ! step)
SV_STR_KP_R1 -0.02162116825 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD -0.02162116825 ; deg ! Kingpin steer angle, wheel R1 (previous time
                                ! step)
SV_STR_KP_R2 -0.07540158866 ; deg ! Kingpin steer angle, wheel R2
SV_STR_KP_R2_OLD -1.095675778 ; deg ! Kingpin steer angle, wheel R2 (previous time
                              ! step)
SV_STR_KP_R3 -0.012224996 ; deg ! Kingpin steer angle, wheel R3
SV_STR_KP_R3_OLD -0.112252572 ; deg ! Kingpin steer angle, wheel R3 (previous time
                              ! step)
SV_STR_OUT_GR_A1 0.0002594884135 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_STR_OUT_GR_A3    0 ; - ! Steering gear output
SV_SWA   0.3730695787 ; deg ! ODE: Steering wheel angle
SV_SWA_DM 0.3716897731 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD 0.3716897731 ; deg ! Steering wheel angle (previous time step)
SV_THROTTLE 0.0007705823005 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          0 ; - ! Requested Throttle
SV_TH_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto throttle for a gear shift
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_L3          0 ; C ! ODE: Brake rotor L3 temperature {T_Rtr_L3}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_TROT_R3          0 ; C ! ODE: Brake rotor R3 temperature {T_Rtr_R3}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time of ESC control status changed
SV_T_SHIFT_START    0 ; s ! Time when automatic gear shift started
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_L3           0 ; mm3 ! ODE: Brake caliper L3 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VBK_R3           0 ; mm3 ! ODE: Brake caliper R3 volume
SV_VERR_OLD -0.04257132081 ; km/h ! Speed controller error at previous time step
SV_VXS    8.040655115 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 1
SV_VX_SM2 8.011004969 ; km/h ! ODE: Body X velocity at hitch for trailer 2
SV_VYS 0.0004121677965 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 1
SV_VY_SM2 0.000870037449 ; m/s ! ODE: Body Y velocity at hitch for trailer 2
SV_VZS -0.03948885747 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 1
SV_VZ_SM2 -0.05088193703 ; m/s ! ODE: Body Z velocity at hitch for trailer 2
SV_XO     131.1238717 ; m ! ODE: Global X coord. of sprung-mass origin, unit 1 {Xo}
SV_X_GND  131.1227609 ; m ! X coord, ground, unit 1 aero ref. pt
SV_X_GND_2 128.3763159 ; m ! X coord, ground, unit 2 aero ref. pt
SV_X_H1 0.00375971594 ; mm ! ODE: X translation for hitch 1
SV_YAW -0.01682903386 ; deg ! ODE: Yaw of sprung mass, unit 1 {Yaw}
SV_YAW_H1 0.03248491823 ; deg ! ODE: Relative yaw for unit 2
SV_YO -3.014782916e-05 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 1 {Yo}
SV_Y_GND -2.935367002e-05 ; m ! Y coord, ground, unit 1 aero ref. pt
SV_Y_GND_2 -0.0002773406326 ; m ! Y coord, ground, unit 2 aero ref. pt
SV_Y_H1 0.002389301652 ; mm ! ODE: Y translation for hitch 1
SV_ZO  -0.03955160942 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 1 {Zo}
SV_Z_CTC_L1I       -0 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O       -0 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I -2.775557562e-17 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O -2.775557562e-17 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_L3I -2.775557562e-17 ; m ! Center of tire contact L3i {Zgnd_L3i}
SV_Z_CTC_L3O -2.775557562e-17 ; m ! Center of tire contact L3o {Zgnd_L3o}
SV_Z_CTC_R1I       -0 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O       -0 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I       -0 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O       -0 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_CTC_R3I       -0 ; m ! Center of tire contact R3i {Zgnd_R3i}
SV_Z_CTC_R3O       -0 ; m ! Center of tire contact R3o {Zgnd_R3o}
SV_Z_GND            0 ; m ! Z coord, ground, unit 1 aero ref. pt
SV_Z_GND_2          0 ; m ! Z coord, ground, unit 2 aero ref. pt
SV_Z_H1 0.009951643853 ; mm ! ODE: Z translation for hitch 1


END
