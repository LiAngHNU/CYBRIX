PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT S_S

DATASET_TITLE Baseline (loaded road profile)
CATEGORY Road Networks: 3D Geometry and Terrain
TITLE Baseline (loaded road profile) <Road Networks: 3D Geometry and Terrain>

! Echo: Results\Run_8f2d1318-7023-460f-a558-fcd248017c81\LastRun_echo.par
! This run was made 11:24 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    73 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE       96 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            1 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              12 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP        -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 1003.782688 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1784.79808 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL 9.559530156e-19 ; mm ! CALC -- Y coordinate of TL CG
! M_TL           6042 ; kg ! CALC -- TL mass
! IXX_TL  3253.384475 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  51686.11498 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL   50614.7875 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU          1175 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1250 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             4455 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU         2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU        35402.8 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU        34802.6 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU           1626 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

HT_SM            1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM           4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM           1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM          1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         6.8 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       5000 ; mm ! Aerodynamic reference length
X_REF_AERO      -2500 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1)      510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1)         510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1)              80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
! ISPIN(1,1)     14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,2)     14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1)            10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)            10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1)      290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1)      36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)      36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)         544 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CG_AXLE(1)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(2)      530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(2,1)         530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(2)             215 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(2,1)     29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(2,2)     29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(2,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(2,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(2,1)            20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)            20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       5000 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(2)      679 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)        1043 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.3489932886 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(2)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 65.53293862 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 65.53293862 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1)         0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,2)         0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1)         0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,2)         0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1)        0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,2)        0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1)         0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,2)         0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1)         0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,2)         0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1)        0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,2)        0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1) 32766.46931 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1) 32766.46931 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 16383.23466 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 16383.23466 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 38101.28691 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 38101.28691 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1)     1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1)    890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1)    890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1)      890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1)        0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 7.801540313 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 7.801540313 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(2,1)        0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(2,2)        0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(2,1)        0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(2,2)        0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(2) 10922.15644 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(2) 10922.15644 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 5461.078219 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 5461.078219 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 21150.49239 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 21150.49239 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 7608.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(2)     1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(2)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(2)   1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(2)   1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(2)     1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(2)        0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
BETA_COL            2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL               0 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL             0 ; N-m ! [D] Steering column friction torque
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1)         0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1)     5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)        7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)        7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)        2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1)   0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1)    0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1)           0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1)         0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1)        100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)        100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1)  0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                      ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1)    0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1)           0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(2)         310 ; mm ! Dual-tire spacing for axle 2 [I]

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 7 -> built-in Pacejka 5.2; 8 ->
                        ! TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                        ! tire model [I]
OPT_TIRE_COMB(1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1)   30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1)      91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1)    0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)  2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,2,1)   30000 ; N ! Reference vertical force
IT(1,2,1)         4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,2,1)      91 ; kg ! Mass of tire R1i
MU_REF_X(1,2,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,2,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,2,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,2,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(2,1,1)   30000 ; N ! Reference vertical force
IT(2,1,1)         4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(2,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(2,1,1)      91 ; kg ! Mass of tire L2i
MU_REF_X(2,1,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(2,1,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(2,1,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(2,1,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(2,1,2)   30000 ; N ! Reference vertical force
IT(2,1,2)         4.8 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(2,1,2)      0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(2,1,2)      91 ; kg ! Mass of tire L2o
MU_REF_X(2,1,2)   0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(2,1,2)   0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(2,1,2)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(2,1,2)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(2,2,1)   30000 ; N ! Reference vertical force
IT(2,2,1)         4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(2,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(2,2,1)      91 ; kg ! Mass of tire R2i
MU_REF_X(2,2,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(2,2,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(2,2,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(2,2,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(2,2,2)   30000 ; N ! Reference vertical force
IT(2,2,2)         4.8 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(2,2,2)      0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(2,2,2)      91 ; kg ! Mass of tire R2o
MU_REF_X(2,2,2)   0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(2,2,2)   0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(2,2,2)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(2,2,2)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)    2 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)    2 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)    2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)    2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise
R_DRIVE_SC(1)       0 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(2)       1 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)      5 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE       725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG              1.4 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE     1 ! Clutch control mode: 0 -> open-loop, 1 -> closed-loop (based
                      ! on shifting) [I]
OPT_CLUTCH_DELAY    1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE  0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE    0.1 ; s ! Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD    0.1 ; s ! Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL  0.3 ; s ! Time applying the clutch to full pressure during shift
                      ! [I]
T_CL_RE_ENGAGE    0.5 ; s ! Time clutch is fully re-engaged after starting shift [I]
T_GEAR_LAG        0.1 ; s ! Time lag in shifting
! T_TH_RETURN     0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED     0.4 ; s ! Time when throttle has returned to pre-shift level [I]
T_TH_ZERO         0.1 ; s ! Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD  0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL   0.3 ; s ! Time when starting to return throttle [I]
VLOW_CLUTCH         5 ; km/h ! Press the clutch pedal when average of wheel speeds
                      ! is below this speed while deccelerating with brake during
                      ! the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT 0.09 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL       0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE       0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE  -8 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1)           0.15 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)     7.59 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st-gear [I]

ITR(2)           0.15 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     5.06 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd-gear

ITR(3)            0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.92 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.92 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     3.38 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd-gear

ITR(4)            0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.92 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.92 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)     2.25 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th-gear

ITR(5)            0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.92 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.92 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)      1.5 ; - ! 5th-gear ratio of transmission
T_SHIFT_UP(5)      -1 ; - ! [D] Duration of up-shift from 5th-gear
T_SHIFT_DOWN(5)    -1 ; - ! [D] Duration of down-shift to 5th-gear

ITR(6)            0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia
R_EFF_TR_F(6)    0.92 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)    0.92 ; - ! 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)        1 ; - ! 6th-gear ratio of transmission
T_SHIFT_UP(6)      -1 ; - ! [D] Duration of up-shift from 6th-gear
T_SHIFT_DOWN(6)    -1 ; - ! [D] Duration of down-shift to 6th-gear

ITR(7)            0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia
R_EFF_TR_F(7)    0.92 ; - ! 7th-gear forward efficiency of transmission
R_EFF_TR_R(7)    0.92 ; - ! 7th-gear reverse efficiency of transmission
R_GEAR_TR(7)     0.75 ; - ! 7th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight Path East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID during initialization [I]

ROAD_ID(1)          1 ; DLC, Rough Road (loaded)
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight Path East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run

PATH_ID_DM          1 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       1 ! [D] Set Xo, Yo, and Yaw to match path PATH_ID_DM and
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTART              0 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]
SSTOP             300 ; m ! Use to set OPT_DIRECTION (if OPT_DIRECTION = 0); stop
                      ! when the vehicle reaches this station (if OPT_STOP = 1)

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM      1000 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            20 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 900
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, left side
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, right side
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, left side
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, right side
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, left side
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, right side
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index IAXLE is used
! to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 1
C_LAT_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 2
C_LAT_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 1
C_LONG_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 2
C_LONG_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 135.08
 0.1, 135.08
 0.2, 108.98
 0.3, 107.22
 0.4, 107.19
 0.5, 107.32
 0.6, 107.87
 0.7, 108.43
 0.8, 108.99
 0.9, 109.55
 1, 109.55
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 328.98
 0.1, 328.98
 0.2, 297.51
 0.3, 270.94
 0.4, 245.64
 0.5, 239.65
 0.6, 280.65
 0.7, 321.66
 0.8, 362.66
 0.9, 403.66
 1, 403.66
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 512.29
 0.1, 512.29
 0.2, 443.86
 0.3, 411.55
 0.4, 411.55
 0.5, 428.66
 0.6, 471.3
 0.7, 513.94
 0.8, 556.58
 0.9, 599.22
 1, 599.22
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 657.15
 0.2, 657.15
 0.3, 617.12
 0.4, 617.04
 0.5, 623.12
 0.6, 682.18
 0.7, 741.24
 0.8, 800.3
 0.9, 859.36
 1, 859.36
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 921.2
 0.2, 921.2
 0.3, 914.58
 0.4, 914.76
 0.5, 915.55
 0.6, 957.02
 0.7, 1079
 0.8, 1200.9
 0.9, 1322.8
 1, 1322.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 2034.8
 0.8, 2034.8
 0.9, 2034.8
 1, 2034.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1) 15 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, left side
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(1,2) 15 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, right side
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,1) 30 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, left side
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,2) 30 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, right side
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 250 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 250 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 700 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 700 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 250 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 250 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 700 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 700 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 1.26
 -15, 1.17
 -10, 0.97
 -5, 0.82
 0, 0.69
 5, 0.82
 10, 0.97
 15, 1.17
 20, 1.26
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, left, inner
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, right, inner
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, inner
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, outer
FZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, inner
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, outer
FZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.04 ! Coefficient: pitman arm angle per unit steering gear
                             ! input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 8 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IAXLE, ISIDE,
! and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 1, left, inner
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 1, right, inner
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, left, inner
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, left, outer
KGAMMA_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, right, inner
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, right, outer
KGAMMA_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! Double Lane Change (Quick Start)

! 1D table: col 1 = station (m), col 2 = lateral offset (m)
LTARG_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 70, 0
 75, 0.2
 80, 1.1
 85, 2.4
 90, 3.3
 95, 3.5
 100, 3.5
 105, 3.5
 110, 3.5
 115, 3.5
 120, 3.5
 125, 3.3
 130, 2.4
 135, 1.1
 140, 0.2
 145, 0
ENDTABLE
LTARG_GAIN(1)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset
SSTART_LTARG(1)     0 ; m ! Offset subtracted from station
SSCALE_LTARG(1)     1 ! Scale factor divided into (station - SSTART_LTARG)

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 0 ; mm ! Constant tire contact length, axle 1, left,
                              ! inner
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 0 ; mm ! Constant tire contact length, axle 1, right,
                              ! inner
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 0 ; mm ! Constant tire contact length, axle 2, left,
                              ! inner
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,2) 0 ; mm ! Constant tire contact length, axle 2, left,
                              ! outer
L_CONTACT_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 0 ; mm ! Constant tire contact length, axle 2, right,
                              ! inner
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,2) 0 ; mm ! Constant tire contact length, axle 2, right,
                              ! outer
L_CONTACT_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 0 ; mm ! Constant tire contact width, axle 1, left,
                              ! inner
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 0 ; mm ! Constant tire contact width, axle 1, right,
                              ! inner
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 0 ; mm ! Constant tire contact width, axle 2, left,
                              ! inner
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,2) 0 ; mm ! Constant tire contact width, axle 2, left,
                              ! outer
L_CONTACT_Y_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 0 ; mm ! Constant tire contact width, axle 2, right,
                              ! inner
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,2) 0 ; mm ! Constant tire contact width, axle 2, right,
                              ! outer
L_CONTACT_Y_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2) LINEAR ! axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2) LINEAR ! axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2) SPLINE ! axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2) SPLINE ! axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 27.8, 74.2, 129.9, 185.6, 222.7, 278.4, 334.1, 389.8, 436.2, 482.6
 1000, -18.6, 43.7, 105.9, 168.2, 230.4, 292.7, 355, 417.2, 479.5, 541.7, 604
 1200, -22.3, 44.5, 111.4, 178.2, 245, 311.8, 378.6, 445.5, 512.3, 579.1, 645.9
 1400, -26, 45.1, 116.1, 187.2, 258.2, 329.3, 400.3, 471.4, 542.4, 613.5, 684.5
 1600, -29.7, 43.7, 117.2, 190.6, 264, 337.4, 410.9, 484.3, 557.7, 631.1, 704.6
 1800, -33.4, 40.4, 114.2, 188, 261.8, 335.6, 409.4, 483.2, 557, 630.8, 704.6
 2000, -37.1, 34.8, 106.7, 178.6, 250.5, 322.4, 394.3, 466.2, 538.1, 610, 681.9
 2200, -40.8, 29.2, 99.2, 169.2, 239.2, 309.2, 379.2, 449.2, 519.3, 589.3, 659.3
 2400, -44.5, 23.3, 91.2, 159.1, 227, 294.9, 362.8, 430.7, 498.6, 566.5, 634.4
 2600, -48.3, 17.5, 83.2, 149, 214.7, 280.5, 346.2, 411.9, 477.7, 543.4, 609.2
 2800, -52, 11.5, 75.1, 138.6, 202.1, 265.6, 329.1, 392.6, 456.1, 519.7, 583.2
 3000, -55.7, 5.6, 66.9, 128.2, 189.5, 250.8, 312, 373.3, 434.6, 495.9, 557.2
 3100, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7
 3150, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 7 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                           ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 1500 ! Coefficient: auxiliary roll moment per unit relative
                           ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1) SPLINE ! axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2) SPLINE ! axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1) SPLINE ! axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2) SPLINE ! axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1) 1 ; - ! Constant gain, axle 1
R_STEER_SPEED_GAIN(1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1) 0 ; - ! Offset added (after gain) to get gain

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: DLC @ 70 km/h (road profile)
SPEED_TARGET_CONSTANT(1) 70 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IAXLE is used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.

SUSP_DIVE_AXLE_CONSTANT(1) 0 ; deg ! Constant suspension dive, axle 1
SUSP_DIVE_AXLE_OFFSET(1) 0 ; deg ! Offset added (after gain) to get suspension dive

SUSP_DIVE_AXLE_CONSTANT(2) 0 ; deg ! Constant suspension dive, axle 2
SUSP_DIVE_AXLE_OFFSET(2) 0 ; deg ! Offset added (after gain) to get suspension dive

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IAXLE is used to
! identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1) 0 ; mm ! Constant X axle movement forward, axle 1
SUSP_X_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward

SUSP_X_AXLE_CONSTANT(2) 0 ; mm ! Constant X axle movement forward, axle 2
SUSP_X_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1) SPLINE ! axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2) SPLINE ! axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT    0.6 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 160.83
 0.1, 160.83
 0.2, 170.65
 0.3, 180.46
 0.4, 190.27
 0.5, 200.09
 0.6, 209.9
 0.7, 219.71
 0.8, 229.53
 0.9, 218.96
 1, 218.96
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 352.09
 0.1, 352.09
 0.2, 368.75
 0.3, 385.41
 0.4, 402.08
 0.5, 418.74
 0.6, 435.41
 0.7, 452.07
 0.8, 468.74
 0.9, 485.4
 1, 485.4
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 513.32
 0.1, 513.32
 0.2, 553.91
 0.3, 594.49
 0.4, 635.08
 0.5, 675.66
 0.6, 716.25
 0.7, 756.84
 0.8, 797.42
 0.9, 838.01
 1, 838.01
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 807.14
 0.2, 807.14
 0.3, 874.84
 0.4, 942.55
 0.5, 1010.3
 0.6, 1078
 0.7, 1145.7
 0.8, 1213.4
 0.9, 1281.1
 1, 1281.1
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 1030.9
 0.2, 1030.9
 0.3, 1163
 0.4, 1295.2
 0.5, 1427.4
 0.6, 1559.5
 0.7, 1691.7
 0.8, 1823.9
 0.9, 1934
 1, 1934
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 2743.9
 0.8, 2743.9
 0.9, 2907.8
 1, 2907.8
ENDTABLE
UPSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(6) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.
LOAD_ERD_FILE Roads\Profiles\RR_02_92_lrEmm.vstb ;
ERD_TO_TABLE Z_PROFILE_TABLE(1) DIST L_ELE LINEAR_LOOP
ECHO_LOADED_TABLE Z_PROFILE_TABLE(1)

! [D] 1D table: col 1 = distance travelled (m), col 2 = elevation increment (mm)
Z_PROFILE_TABLE(1) LINEAR_LOOP ! linear interpolation, repeat in loop
 0, -8.159999847
 0.1000000015, -7.78000021
 0.200000003, -7.300000191
 0.3000000119, -6.829999924
 0.400000006, -6.190000057
 0.5, -5.630000114
 0.6000000238, -5.119999886
 0.6999999881, -4.46999979
 0.8000000119, -3.829999924
 0.8999999762, -3.309999943
 1, -2.900000095
 1.100000024, -2.539999962
 1.200000048, -2.180000067
 1.299999952, -1.850000024
 1.399999976, -1.460000038
 1.5, -1.070000052
 1.600000024, -0.5699999928
 1.700000048, -0.1400000006
 1.799999952, 0.3199999928
 1.899999976, 0.9300000072
 2, 1.639999986
 2.099999905, 2.119999886
 2.200000048, 2.369999886
 2.299999952, 2.650000095
 2.400000095, 2.609999895
 2.5, 2.349999905
 2.599999905, 2.49000001
 2.700000048, 2.309999943
 2.799999952, 2.339999914
 2.900000095, 2.299999952
 3, 2.430000067
 3.099999905, 2.609999895
 3.200000048, 2.640000105
 3.299999952, 2.539999962
 3.400000095, 2.549999952
 3.5, 2.769999981
 3.599999905, 2.960000038
 3.700000048, 3.150000095
 3.799999952, 3.369999886
 3.900000095, 3.549999952
 4, 3.730000019
 4.099999905, 3.769999981
 4.199999809, 3.890000105
 4.300000191, 4.110000134
 4.400000095, 4.300000191
 4.5, 4.289999962
 4.599999905, 4.429999828
 4.699999809, 4.650000095
 4.800000191, 4.820000172
 4.900000095, 4.849999905
 5, 4.860000134
 5.099999905, 5
 5.199999809, 5.260000229
 5.300000191, 5.619999886
 5.400000095, 5.889999866
 5.5, 6.139999866
 5.599999905, 6.349999905
 5.699999809, 6.650000095
 5.800000191, 6.869999886
 5.900000095, 7.010000229
 6, 7.150000095
 6.099999905, 7.429999828
 6.199999809, 7.75
 6.300000191, 8.100000381
 6.400000095, 8.289999962
 6.5, 8.649999619
 6.599999905, 8.930000305
 6.699999809, 9.319999695
 6.800000191, 9.630000114
 6.900000095, 9.420000076
 7, 9.039999962
 7.099999905, 8.520000458
 7.199999809, 8.399999619
 7.300000191, 8.220000267
 7.400000095, 8.119999886
 7.5, 7.880000114
 7.599999905, 7.630000114
 7.699999809, 7.380000114
 7.800000191, 7.150000095
 7.900000095, 6.960000038
 8, 6.869999886
 8.100000381, 6.710000038
 8.199999809, 6.869999886
 8.300000191, 7.110000134
 8.399999619, 7.25
 8.5, 6.980000019
 8.600000381, 6.889999866
 8.699999809, 7.340000153
 8.800000191, 7.739999771
 8.899999619, 7.800000191
 9, 7.960000038
 9.100000381, 8.069999695
 9.199999809, 8.199999809
 9.300000191, 8.239999771
 9.399999619, 8.430000305
 9.5, 8.579999924
 9.600000381, 8.75
 9.699999809, 8.920000076
 9.800000191, 9.130000114
 9.899999619, 9.609999657
 10, 10.18999958
 10.10000038, 10.35000038
 10.19999981, 10.14999962
 10.30000019, 10.5
 10.39999962, 10.84000015
 10.5, 10.82999992
 10.60000038, 10.96000004
 10.69999981, 11.27000046
 10.80000019, 11.43999958
 10.89999962, 11.56999969
 11, 11.89999962
 11.10000038, 11.82999992
 11.19999981, 11.93000031
 11.30000019, 12.06999969
 11.39999962, 12.05000019
 11.5, 11.19999981
 11.60000038, 10.39000034
 11.69999981, 10.48999977
 11.80000019, 10.52999973
 11.89999962, 10.34000015
 12, 10.10999966
 12.10000038, 10.10000038
 12.19999981, 9.949999809
 12.30000019, 9.779999733
 12.39999962, 9.710000038
 12.5, 9.5
 12.60000038, 9.270000458
 12.69999981, 9.140000343
 12.80000019, 9.449999809
 12.89999962, 9.130000114
 13, 8.880000114
 13.10000038, 8.859999657
 13.19999981, 9.300000191
 13.30000019, 9.340000153
 13.39999962, 9.149999619
 13.5, 8.840000153
 13.60000038, 8.699999809
 13.69999981, 8.989999771
 13.80000019, 9.090000153
 13.89999962, 9.020000458
 14, 9.050000191
 14.10000038, 8.970000267
 14.19999981, 9.029999733
 14.30000019, 8.979999542
 14.39999962, 9.029999733
 14.5, 9.229999542
 14.60000038, 9.260000229
 14.69999981, 9.069999695
 14.80000019, 9.31000042
 14.89999962, 9.699999809
 15, 10.06000042
 15.10000038, 10.23999977
 15.19999981, 10.43000031
 15.30000019, 10.43999958
 15.39999962, 10.5
 15.5, 10.72000027
 15.60000038, 10.93000031
 15.69999981, 10.98999977
 15.80000019, 11.18000031
 15.89999962, 11.71000004
 16, 11.68000031
 16.10000038, 11.43000031
 16.20000076, 10.93999958
 16.29999924, 10.60999966
 16.39999962, 10.60000038
 16.5, 10.43999958
 16.60000038, 10.14000034
 16.70000076, 9.850000381
 16.79999924, 9.789999962
 16.89999962, 9.739999771
 17, 9.75
 17.10000038, 9.569999695
 17.20000076, 9.270000458
 17.29999924, 9.090000153
 17.39999962, 9.260000229
 17.5, 9.229999542
 17.60000038, 8.920000076
 17.70000076, 8.590000153
 17.79999924, 8.5
 17.89999962, 8.470000267
 18, 8.43999958
 18.10000038, 8.460000038
 18.20000076, 8.420000076
 18.29999924, 8.369999886
 18.39999962, 8.210000038
 18.5, 8.159999847
 18.60000038, 8.090000153
 18.70000076, 7.730000019
 18.79999924, 7.289999962
 18.89999962, 7.309999943
 19, 7.579999924
 19.10000038, 7.980000019
 19.20000076, 7.829999924
 19.29999924, 7.320000172
 19.39999962, 7.050000191
 19.5, 7.28000021
 19.60000038, 7.440000057
 19.70000076, 7.440000057
 19.79999924, 7.650000095
 19.89999962, 7.730000019
 20, 8.020000458
 20.10000038, 8.510000229
 20.20000076, 8.579999924
 20.29999924, 8.75
 20.39999962, 8.590000153
 20.5, 8.409999847
 20.60000038, 8.300000191
 20.70000076, 8.31000042
 20.79999924, 7.889999866
 20.89999962, 7.670000076
 21, 7.400000095
 21.10000038, 7.349999905
 21.20000076, 7.03000021
 21.29999924, 6.659999847
 21.39999962, 6.409999847
 21.5, 6.159999847
 21.60000038, 6.019999981
 21.70000076, 5.800000191
 21.79999924, 5.75
 21.89999962, 5.739999771
 22, 5.78000021
 22.10000038, 5.960000038
 22.20000076, 5.960000038
 22.29999924, 6.039999962
 22.39999962, 5.920000076
 22.5, 5.769999981
 22.60000038, 5.849999905
 22.70000076, 5.940000057
 22.79999924, 6.159999847
 22.89999962, 6.179999828
 23, 6.230000019
 23.10000038, 6.429999828
 23.20000076, 6.699999809
 23.29999924, 7.070000172
 23.39999962, 7.139999866
 23.5, 7.03000021
 23.60000038, 7.260000229
 23.70000076, 7.340000153
 23.79999924, 7.78000021
 23.89999962, 7.46999979
 24, 7.449999809
 24.10000038, 7.869999886
 24.20000076, 8.430000305
 24.29999924, 8.770000458
 24.39999962, 8.659999847
 24.5, 8.930000305
 24.60000038, 9.489999771
 24.70000076, 9.859999657
 24.79999924, 10.35000038
 24.89999962, 10.72999954
 25, 11.30000019
 25.10000038, 11.36999989
 25.20000076, 10.48999977
 25.29999924, 10.27999973
 25.39999962, 10.60000038
 25.5, 11.10000038
 25.60000038, 10.78999996
 25.70000076, 10.51000023
 25.79999924, 10.17000008
 25.89999962, 10.32999992
 26, 10.30000019
 26.10000038, 9.970000267
 26.20000076, 9.670000076
 26.29999924, 9.210000038
 26.39999962, 8.93999958
 26.5, 8.600000381
 26.60000038, 8.409999847
 26.70000076, 8.170000076
 26.79999924, 8.399999619
 26.89999962, 8.390000343
 27, 8.069999695
 27.10000038, 7.840000153
 27.20000076, 7.96999979
 27.29999924, 8.279999733
 27.39999962, 8.449999809
 27.5, 8.43999958
 27.60000038, 8.479999542
 27.70000076, 8.100000381
 27.79999924, 8.289999962
 27.89999962, 8.819999695
 28, 8.680000305
 28.10000038, 8.300000191
 28.20000076, 8.449999809
 28.29999924, 8.859999657
 28.39999962, 8.710000038
 28.5, 8.329999924
 28.60000038, 8.329999924
 28.70000076, 8.119999886
 28.79999924, 8.31000042
 28.89999962, 8.720000267
 29, 8.649999619
 29.10000038, 8.949999809
 29.20000076, 9.43999958
 29.29999924, 9.590000153
 29.39999962, 9.25
 29.5, 9.600000381
 29.60000038, 9.819999695
 29.70000076, 9.970000267
 29.79999924, 9.380000114
 29.89999962, 9.149999619
 30, 9.31000042
 30.10000038, 9.319999695
 30.20000076, 8.819999695
 30.29999924, 8.289999962
 30.39999962, 8.359999657
 30.5, 8.569999695
 30.60000038, 8.260000229
 30.70000076, 7.909999847
 30.79999924, 7.46999979
 30.89999962, 7.659999847
 31, 7.5
 31.10000038, 7.199999809
 31.20000076, 6.789999962
 31.29999924, 6.699999809
 31.39999962, 6.679999828
 31.5, 6.510000229
 31.60000038, 6.690000057
 31.70000076, 6.670000076
 31.79999924, 6.78000021
 31.89999962, 6.760000229
 32, 6.659999847
 32.09999847, 6.659999847
 32.20000076, 6.420000076
 32.29999924, 6.400000095
 32.40000153, 6.269999981
 32.5, 6.309999943
 32.59999847, 5.949999809
 32.70000076, 6.119999886
 32.79999924, 6.300000191
 32.90000153, 6.420000076
 33, 6.139999866
 33.09999847, 6.380000114
 33.20000076, 6.619999886
 33.29999924, 6.909999847
 33.40000153, 7
 33.5, 7.300000191
 33.59999847, 7.429999828
 33.70000076, 7.639999866
 33.79999924, 7.489999771
 33.90000153, 7.460000038
 34, 7.409999847
 34.09999847, 7.579999924
 34.20000076, 7.639999866
 34.29999924, 6.820000172
 34.40000153, 6.079999924
 34.5, 5.809999943
 34.59999847, 6.059999943
 34.70000076, 6.119999886
 34.79999924, 6.010000229
 34.90000153, 6.079999924
 35, 5.809999943
 35.09999847, 5.760000229
 35.20000076, 5.400000095
 35.29999924, 5.429999828
 35.40000153, 5.380000114
 35.5, 5.679999828
 35.59999847, 5.579999924
 35.70000076, 5.699999809
 35.79999924, 5.840000153
 35.90000153, 5.869999886
 36, 5.880000114
 36.09999847, 6.03000021
 36.20000076, 6.170000076
 36.29999924, 5.960000038
 36.40000153, 5.900000095
 36.5, 6.139999866
 36.59999847, 5.849999905
 36.70000076, 5.71999979
 36.79999924, 5.880000114
 36.90000153, 6.429999828
 37, 6.579999924
 37.09999847, 6.860000134
 37.20000076, 6.909999847
 37.29999924, 6.840000153
 37.40000153, 6.849999905
 37.5, 6.809999943
 37.59999847, 7.070000172
 37.70000076, 7.150000095
 37.79999924, 7.079999924
 37.90000153, 7.010000229
 38, 6.960000038
 38.09999847, 7.110000134
 38.20000076, 7.329999924
 38.29999924, 7.579999924
 38.40000153, 8.149999619
 38.5, 8.520000458
 38.59999847, 8.760000229
 38.70000076, 8.800000191
 38.79999924, 8.659999847
 38.90000153, 7.940000057
 39, 7.409999847
 39.09999847, 7.570000172
 39.20000076, 7.429999828
 39.29999924, 7.28000021
 39.40000153, 7.090000153
 39.5, 7.059999943
 39.59999847, 7
 39.70000076, 6.929999828
 39.79999924, 6.710000038
 39.90000153, 6.46999979
 40, 6.159999847
 40.09999847, 6.079999924
 40.20000076, 5.880000114
 40.29999924, 5.659999847
 40.40000153, 5.400000095
 40.5, 5.170000076
 40.59999847, 5.059999943
 40.70000076, 5.260000229
 40.79999924, 5.079999924
 40.90000153, 5.039999962
 41, 4.960000038
 41.09999847, 4.960000038
 41.20000076, 4.800000191
 41.29999924, 4.639999866
 41.40000153, 4.440000057
 41.5, 4.400000095
 41.59999847, 4.460000038
 41.70000076, 4.380000114
 41.79999924, 4.300000191
 41.90000153, 4.360000134
 42, 4.179999828
 42.09999847, 4.059999943
 42.20000076, 4.199999809
 42.29999924, 4.610000134
 42.40000153, 4.889999866
 42.5, 5.150000095
 42.59999847, 5.369999886
 42.70000076, 5.519999981
 42.79999924, 5.429999828
 42.90000153, 5.579999924
 43, 6.039999962
 43.09999847, 6.309999943
 43.20000076, 6.349999905
 43.29999924, 6.460000038
 43.40000153, 6.650000095
 43.5, 6.400000095
 43.59999847, 6.21999979
 43.70000076, 6.360000134
 43.79999924, 6.090000153
 43.90000153, 5.53000021
 44, 5.070000172
 44.09999847, 4.579999924
 44.20000076, 4.300000191
 44.29999924, 4.21999979
 44.40000153, 4.159999847
 44.5, 4.119999886
 44.59999847, 3.74000001
 44.70000076, 3.5
 44.79999924, 3.309999943
 44.90000153, 3.089999914
 45, 2.799999952
 45.09999847, 2.539999962
 45.20000076, 2.339999914
 45.29999924, 2.079999924
 45.40000153, 2
 45.5, 1.879999995
 45.59999847, 1.75999999
 45.70000076, 1.669999957
 45.79999924, 1.590000033
 45.90000153, 1.49000001
 46, 1.220000029
 46.09999847, 0.9100000262
 46.20000076, 0.7400000095
 46.29999924, 0.6800000072
 46.40000153, 0.8899999857
 46.5, 0.9200000167
 46.59999847, 0.8600000143
 46.70000076, 0.8600000143
 46.79999924, 0.8299999833
 46.90000153, 0.7200000286
 47, 0.8799999952
 47.09999847, 1.080000043
 47.20000076, 1.149999976
 47.29999924, 1.279999971
 47.40000153, 1.389999986
 47.5, 1.169999957
 47.59999847, 1.110000014
 47.70000076, 1.330000043
 47.79999924, 1.649999976
 47.90000153, 1.980000019
 48, 1.330000043
 48.09999847, 1.100000024
 48.20000076, 0.8100000024
 48.29999924, 1.649999976
 48.40000153, 1.659999967
 48.5, 1.289999962
 48.59999847, 1.049999952
 48.70000076, 1.080000043
 48.79999924, 1.190000057
 48.90000153, 1.169999957
 49, 1.230000019
 49.09999847, 1.139999986
 49.20000076, 1.169999957
 49.29999924, 1.090000033
 49.40000153, 1.149999976
 49.5, 0.9499999881
 49.59999847, 0.8500000238
 49.70000076, 0.9100000262
 49.79999924, 0.8500000238
 49.90000153, 0.6299999952
 50, 0.4900000095
 50.09999847, 0.4300000072
 50.20000076, 0.6800000072
 50.29999924, 0.6100000143
 50.40000153, 0.7200000286
 50.5, 0.7900000215
 50.59999847, 0.9300000072
 50.70000076, 0.9700000286
 50.79999924, 1
 50.90000153, 1.159999967
 51, 1.00999999
 51.09999847, 0.9599999785
 51.20000076, 1.190000057
 51.29999924, 1.419999957
 51.40000153, 1.610000014
 51.5, 1.610000014
 51.59999847, 1.779999971
 51.70000076, 1.769999981
 51.79999924, 1.960000038
 51.90000153, 2.319999933
 52, 2.369999886
 52.09999847, 2.569999933
 52.20000076, 2.660000086
 52.29999924, 3.039999962
 52.40000153, 3.309999943
 52.5, 3.579999924
 52.59999847, 3.079999924
 52.70000076, 2.849999905
 52.79999924, 2.950000048
 52.90000153, 2.650000095
 53, 2.279999971
 53.09999847, 2.160000086
 53.20000076, 1.99000001
 53.29999924, 1.860000014
 53.40000153, 1.679999948
 53.5, 1.269999981
 53.59999847, 0.9700000286
 53.70000076, 0.7900000215
 53.79999924, 0.5600000024
 53.90000153, 0.0700000003
 54, -0.2899999917
 54.09999847, -0.7200000286
 54.20000076, -0.8899999857
 54.29999924, -0.6999999881
 54.40000153, -0.4699999988
 54.5, -0.7099999785
 54.59999847, -0.9599999785
 54.70000076, -1.049999952
 54.79999924, -1.24000001
 54.90000153, -1.370000005
 55, -1.289999962
 55.09999847, -1.379999995
 55.20000076, -1.539999962
 55.29999924, -1.710000038
 55.40000153, -1.860000014
 55.5, -1.889999986
 55.59999847, -1.929999948
 55.70000076, -1.879999995
 55.79999924, -1.690000057
 55.90000153, -1.559999943
 56, -1.590000033
 56.09999847, -1.769999981
 56.20000076, -1.75
 56.29999924, -1.879999995
 56.40000153, -1.730000019
 56.5, -1.320000052
 56.59999847, -1.090000033
 56.70000076, -1.100000024
 56.79999924, -1.169999957
 56.90000153, -0.9399999976
 57, -0.8600000143
 57.09999847, -0.75
 57.20000076, -1.110000014
 57.29999924, -1.590000033
 57.40000153, -1.769999981
 57.5, -1.659999967
 57.59999847, -1.74000001
 57.70000076, -1.919999957
 57.79999924, -2.099999905
 57.90000153, -2.170000076
 58, -2.480000019
 58.09999847, -2.75999999
 58.20000076, -2.869999886
 58.29999924, -2.940000057
 58.40000153, -2.910000086
 58.5, -2.789999962
 58.59999847, -2.890000105
 58.70000076, -2.900000095
 58.79999924, -2.789999962
 58.90000153, -2.900000095
 59, -3.079999924
 59.09999847, -2.890000105
 59.20000076, -2.640000105
 59.29999924, -2.410000086
 59.40000153, -2.380000114
 59.5, -2.140000105
 59.59999847, -2.029999971
 59.70000076, -2.089999914
 59.79999924, -2
 59.90000153, -1.580000043
 60, -1.210000038
 60.09999847, -1.409999967
 60.20000076, -1.470000029
 60.29999924, -1.320000052
 60.40000153, -0.8899999857
 60.5, -0.8799999952
 60.59999847, -0.6299999952
 60.70000076, -0.4600000083
 60.79999924, -0.2099999934
 60.90000153, -0.09000000358
 61, 0
 61.09999847, 0.349999994
 61.20000076, 0.6499999762
 61.29999924, 1.25
 61.40000153, 1.460000038
 61.5, 1.639999986
 61.59999847, 1.980000019
 61.70000076, 2.069999933
 61.79999924, 1.799999952
 61.90000153, 1.649999976
 62, 1.629999995
 62.09999847, 1.669999957
 62.20000076, 1.580000043
 62.29999924, 1.080000043
 62.40000153, 0.7400000095
 62.5, 0.9700000286
 62.59999847, 0.7300000191
 62.70000076, 0.4300000072
 62.79999924, -0.1599999964
 62.90000153, -0.349999994
 63, -0.6600000262
 63.09999847, -1.129999995
 63.20000076, -0.8299999833
 63.29999924, -0.7300000191
 63.40000153, -0.6899999976
 63.5, -0.9300000072
 63.59999847, -1.139999986
 63.70000076, -1.389999986
 63.79999924, -1.909999967
 63.90000153, -2.039999962
 64, -1.960000038
 64.09999847, -1.730000019
 64.19999695, -1.559999943
 64.30000305, -1.860000014
 64.40000153, -2.049999952
 64.5, -2.170000076
 64.59999847, -2.24000001
 64.69999695, -2.220000029
 64.80000305, -2.230000019
 64.90000153, -2.210000038
 65, -2.210000038
 65.09999847, -2.279999971
 65.19999695, -2.349999905
 65.30000305, -2.329999924
 65.40000153, -2.140000105
 65.5, -2.170000076
 65.59999847, -2.309999943
 65.69999695, -2.420000076
 65.80000305, -2.180000067
 65.90000153, -2.079999924
 66, -2.00999999
 66.09999847, -2.099999905
 66.19999695, -2.25999999
 66.30000305, -2.49000001
 66.40000153, -2.880000114
 66.5, -2.74000001
 66.59999847, -2.349999905
 66.69999695, -2.50999999
 66.80000305, -2.680000067
 66.90000153, -2.720000029
 67, -3.00999999
 67.09999847, -3.380000114
 67.19999695, -3.49000001
 67.30000305, -3.75
 67.40000153, -4.050000191
 67.5, -4.179999828
 67.59999847, -4.360000134
 67.69999695, -4.75
 67.80000305, -5.010000229
 67.90000153, -4.849999905
 68, -4.409999847
 68.09999847, -4.260000229
 68.19999695, -4.369999886
 68.30000305, -4.409999847
 68.40000153, -4.340000153
 68.5, -4.599999905
 68.59999847, -4.840000153
 68.69999695, -4.929999828
 68.80000305, -4.760000229
 68.90000153, -4.739999771
 69, -4.71999979
 69.09999847, -4.75
 69.19999695, -4.679999828
 69.30000305, -4.320000172
 69.40000153, -4.070000172
 69.5, -3.799999952
 69.59999847, -3.589999914
 69.69999695, -3.480000019
 69.80000305, -3.359999895
 69.90000153, -3.359999895
 70, -3.269999981
 70.09999847, -3.25
 70.19999695, -3
 70.30000305, -2.890000105
 70.40000153, -2.660000086
 70.5, -2.519999981
 70.59999847, -2.450000048
 70.69999695, -2.480000019
 70.80000305, -2.269999981
 70.90000153, -2.329999924
 71, -2.539999962
 71.09999847, -2.829999924
 71.19999695, -2.680000067
 71.30000305, -2.49000001
 71.40000153, -2.720000029
 71.5, -3.109999895
 71.59999847, -3.430000067
 71.69999695, -3.5
 71.80000305, -3.450000048
 71.90000153, -3.339999914
 72, -3.329999924
 72.09999847, -3.359999895
 72.19999695, -3.670000076
 72.30000305, -3.650000095
 72.40000153, -3.710000038
 72.5, -3.710000038
 72.59999847, -3.890000105
 72.69999695, -4.010000229
 72.80000305, -4.010000229
 72.90000153, -3.829999924
 73, -3.599999905
 73.09999847, -3.400000095
 73.19999695, -3.470000029
 73.30000305, -3.74000001
 73.40000153, -3.680000067
 73.5, -3.819999933
 73.59999847, -3.470000029
 73.69999695, -3.410000086
 73.80000305, -3.359999895
 73.90000153, -3.289999962
 74, -3.039999962
 74.09999847, -3.039999962
 74.19999695, -2.730000019
 74.30000305, -2.700000048
 74.40000153, -2.589999914
 74.5, -2.519999981
 74.59999847, -2.160000086
 74.69999695, -1.940000057
 74.80000305, -1.710000038
 74.90000153, -1.529999971
 75, -1.179999948
 75.09999847, -1.090000033
 75.19999695, -1
 75.30000305, -1.00999999
 75.40000153, -0.9200000167
 75.5, -1.110000014
 75.59999847, -1.419999957
 75.69999695, -1.820000052
 75.80000305, -1.850000024
 75.90000153, -1.850000024
 76, -2.220000029
 76.09999847, -2.720000029
 76.19999695, -2.970000029
 76.30000305, -3.170000076
 76.40000153, -3.309999943
 76.5, -3.839999914
 76.59999847, -3.960000038
 76.69999695, -4.239999771
 76.80000305, -4.309999943
 76.90000153, -4.5
 77, -4.800000191
 77.09999847, -4.869999886
 77.19999695, -4.829999924
 77.30000305, -5.079999924
 77.40000153, -5
 77.5, -4.690000057
 77.59999847, -4.320000172
 77.69999695, -4.380000114
 77.80000305, -4.519999981
 77.90000153, -4.539999962
 78, -4.380000114
 78.09999847, -4.340000153
 78.19999695, -4.090000153
 78.30000305, -4.159999847
 78.40000153, -4.389999866
 78.5, -4.559999943
 78.59999847, -4.28000021
 78.69999695, -4.150000095
 78.80000305, -4.03000021
 78.90000153, -3.99000001
 79, -3.75
 79.09999847, -3.569999933
 79.19999695, -3.339999914
 79.30000305, -3.019999981
 79.40000153, -3.029999971
 79.5, -2.950000048
 79.59999847, -2.849999905
 79.69999695, -2.670000076
 79.80000305, -2.75
 79.90000153, -2.619999886
 80, -2.720000029
 80.09999847, -2.900000095
 80.19999695, -3.079999924
 80.30000305, -2.589999914
 80.40000153, -2.660000086
 80.5, -2.920000076
 80.59999847, -3.430000067
 80.69999695, -3.710000038
 80.80000305, -3.779999971
 80.90000153, -3.720000029
 81, -3.660000086
 81.09999847, -3.799999952
 81.19999695, -4.019999981
 81.30000305, -4.059999943
 81.40000153, -3.980000019
 81.5, -4.119999886
 81.59999847, -4.340000153
 81.69999695, -4.230000019
 81.80000305, -3.940000057
 81.90000153, -3.700000048
 82, -3.609999895
 82.09999847, -3.529999971
 82.19999695, -3.619999886
 82.30000305, -3.650000095
 82.40000153, -3.75999999
 82.5, -3.789999962
 82.59999847, -3.839999914
 82.69999695, -3.74000001
 82.80000305, -3.690000057
 82.90000153, -3.480000019
 83, -3.299999952
 83.09999847, -3
 83.19999695, -2.619999886
 83.30000305, -2.480000019
 83.40000153, -2.380000114
 83.5, -2.170000076
 83.59999847, -1.610000014
 83.69999695, -1.299999952
 83.80000305, -1.019999981
 83.90000153, -0.8700000048
 84, -0.8199999928
 84.09999847, -0.6999999881
 84.19999695, -0.200000003
 84.30000305, 0.2199999988
 84.40000153, 0.0700000003
 84.5, 0.150000006
 84.59999847, 0.2399999946
 84.69999695, 0.0700000003
 84.80000305, -0.1400000006
 84.90000153, -0.07999999821
 85, -0.1400000006
 85.09999847, -0.3899999857
 85.19999695, -0.9599999785
 85.30000305, -1.330000043
 85.40000153, -1.480000019
 85.5, -1.809999943
 85.59999847, -2.069999933
 85.69999695, -1.720000029
 85.80000305, -1.610000014
 85.90000153, -2.049999952
 86, -2.289999962
 86.09999847, -2.140000105
 86.19999695, -1.879999995
 86.30000305, -1.870000005
 86.40000153, -1.929999948
 86.5, -2.25999999
 86.59999847, -2.400000095
 86.69999695, -2.329999924
 86.80000305, -2.680000067
 86.90000153, -2.779999971
 87, -2.779999971
 87.09999847, -3.029999971
 87.19999695, -3.299999952
 87.30000305, -3.200000048
 87.40000153, -2.900000095
 87.5, -2.700000048
 87.59999847, -2.769999981
 87.69999695, -2.789999962
 87.80000305, -2.710000038
 87.90000153, -2.630000114
 88, -2.680000067
 88.09999847, -2.690000057
 88.19999695, -2.349999905
 88.30000305, -1.950000048
 88.40000153, -1.690000057
 88.5, -1.669999957
 88.59999847, -1.639999986
 88.69999695, -1.480000019
 88.80000305, -1.190000057
 88.90000153, -1.25999999
 89, -0.9499999881
 89.09999847, -0.7300000191
 89.19999695, -0.6800000072
 89.30000305, -1
 89.40000153, -1.210000038
 89.5, -1.110000014
 89.59999847, -1.120000005
 89.69999695, -1.289999962
 89.80000305, -1.25999999
 89.90000153, -1.309999943
 90, -1.460000038
 90.09999847, -1.679999948
 90.19999695, -1.659999967
 90.30000305, -1.75999999
 90.40000153, -1.820000052
 90.5, -1.730000019
 90.59999847, -1.74000001
 90.69999695, -1.929999948
 90.80000305, -1.899999976
 90.90000153, -1.870000005
 91, -1.950000048
 91.09999847, -1.980000019
 91.19999695, -2.089999914
 91.30000305, -2.119999886
 91.40000153, -1.850000024
 91.5, -1.919999957
 91.59999847, -1.830000043
 91.69999695, -1.74000001
 91.80000305, -1.610000014
 91.90000153, -1.690000057
 92, -1.700000048
 92.09999847, -1.610000014
 92.19999695, -1.360000014
 92.30000305, -1.190000057
 92.40000153, -0.8999999762
 92.5, -0.6399999857
 92.59999847, -0.4300000072
 92.69999695, -0.4300000072
 92.80000305, -0.3700000048
 92.90000153, -0.2300000042
 93, -0.03999999911
 93.09999847, 0.4099999964
 93.19999695, 0.8600000143
 93.30000305, 1.200000048
 93.40000153, 1.590000033
 93.5, 1.870000005
 93.59999847, 1.950000048
 93.69999695, 2.059999943
 93.80000305, 2.089999914
 93.90000153, 2.049999952
 94, 1.799999952
 94.09999847, 1.889999986
 94.19999695, 1.879999995
 94.30000305, 1.580000043
 94.40000153, 1.320000052
 94.5, 1.070000052
 94.59999847, 0.8199999928
 94.69999695, 0.8000000119
 94.80000305, 0.6700000167
 94.90000153, 0.6399999857
 95, 0.5500000119
 95.09999847, 0.5199999809
 95.19999695, 0.400000006
 95.30000305, 0.5199999809
 95.40000153, 0.6999999881
 95.5, 0.4399999976
 95.59999847, 0.4300000072
 95.69999695, 0.25
 95.80000305, 0.5799999833
 95.90000153, 1.070000052
 96, 1.049999952
 96.09999847, 0.8000000119
 96.19999695, 0.5899999738
 96.30000305, 0.8100000024
 96.40000153, 0.8100000024
 96.5, 0.8000000119
 96.59999847, 0.8199999928
 96.69999695, 1.120000005
 96.80000305, 1.200000048
 96.90000153, 1.25
 97, 1.289999962
 97.09999847, 1.230000019
 97.19999695, 1.289999962
 97.30000305, 1.559999943
 97.40000153, 1.700000048
 97.5, 1.690000057
 97.59999847, 1.799999952
 97.69999695, 2.069999933
 97.80000305, 2.329999924
 97.90000153, 2.349999905
 98, 2.75999999
 98.09999847, 2.950000048
 98.19999695, 3.019999981
 98.30000305, 2.49000001
 98.40000153, 2.539999962
 98.5, 2.599999905
 98.59999847, 3.309999943
 98.69999695, 3.140000105
 98.80000305, 2.700000048
 98.90000153, 2.269999981
 99, 2.119999886
 99.09999847, 2.150000095
 99.19999695, 2.25999999
 99.30000305, 2.400000095
 99.40000153, 2.430000067
 99.5, 2.25
 99.59999847, 1.74000001
 99.69999695, 1.74000001
 99.80000305, 1.919999957
 99.90000153, 1.779999971
 100, 1.830000043
 100.0999985, 1.909999967
 100.1999969, 1.879999995
 100.3000031, 1.789999962
 100.4000015, 1.629999995
 100.5, 1.419999957
 100.5999985, 1.299999952
 100.6999969, 1.220000029
 100.8000031, 1.230000019
 100.9000015, 1.090000033
 101, 1
 101.0999985, 1.25
 101.1999969, 1.330000043
 101.3000031, 1.370000005
 101.4000015, 1.379999995
 101.5, 1.460000038
 101.5999985, 1.570000052
 101.6999969, 1.639999986
 101.8000031, 1.690000057
 101.9000015, 1.74000001
 102, 2.039999962
 102.0999985, 2.49000001
 102.1999969, 2.769999981
 102.3000031, 2.779999971
 102.4000015, 3
 102.5, 3.50999999
 102.5999985, 3.589999914
 102.6999969, 3.430000067
 102.8000031, 3.75999999
 102.9000015, 3.559999943
 103, 3.50999999
 103.0999985, 3.680000067
 103.1999969, 3.789999962
 103.3000031, 3.779999971
 103.4000015, 3.579999924
 103.5, 2.880000114
 103.5999985, 2.569999933
 103.6999969, 2.460000038
 103.8000031, 2.109999895
 103.9000015, 1.879999995
 104, 1.779999971
 104.0999985, 1.879999995
 104.1999969, 1.809999943
 104.3000031, 1.789999962
 104.4000015, 1.690000057
 104.5, 1.700000048
 104.5999985, 1.799999952
 104.6999969, 1.659999967
 104.8000031, 1.559999943
 104.9000015, 1.559999943
 105, 1.929999948
 105.0999985, 2.190000057
 105.1999969, 2.210000038
 105.3000031, 1.980000019
 105.4000015, 2.160000086
 105.5, 2.160000086
 105.5999985, 2.299999952
 105.6999969, 2.410000086
 105.8000031, 2.720000029
 105.9000015, 2.74000001
 106, 2.890000105
 106.0999985, 2.99000001
 106.1999969, 2.910000086
 106.3000031, 2.910000086
 106.4000015, 3.049999952
 106.5, 3.099999905
 106.5999985, 3.319999933
 106.6999969, 3.589999914
 106.8000031, 4.059999943
 106.9000015, 4.210000038
 107, 4.110000134
 107.0999985, 4.119999886
 107.1999969, 4.019999981
 107.3000031, 4.099999905
 107.4000015, 3.579999924
 107.5, 3.170000076
 107.5999985, 2.75
 107.6999969, 2.859999895
 107.8000031, 2.200000048
 107.9000015, 1.409999967
 108, 1.159999967
 108.0999985, 0.8999999762
 108.1999969, 0.2899999917
 108.3000031, 0.03999999911
 108.4000015, 0.1800000072
 108.5, 0.3899999857
 108.5999985, 0.05000000075
 108.6999969, -0.349999994
 108.8000031, -0.5
 108.9000015, -0.6399999857
 109, -0.6000000238
 109.0999985, -0.8000000119
 109.1999969, -0.9499999881
 109.3000031, -1.110000014
 109.4000015, -1.139999986
 109.5, -1.24000001
 109.5999985, -1.419999957
 109.6999969, -1.480000019
 109.8000031, -1.74000001
 109.9000015, -1.879999995
 110, -1.960000038
 110.0999985, -1.970000029
 110.1999969, -1.899999976
 110.3000031, -1.799999952
 110.4000015, -1.440000057
 110.5, -1.460000038
 110.5999985, -1.330000043
 110.6999969, -1.389999986
 110.8000031, -1.269999981
 110.9000015, -1.220000029
 111, -1.090000033
 111.0999985, -0.6399999857
 111.1999969, -0.1400000006
 111.3000031, 0.1700000018
 111.4000015, 0.4499999881
 111.5, 0.6899999976
 111.5999985, 0.8500000238
 111.6999969, 1.049999952
 111.8000031, 1.289999962
 111.9000015, 1.289999962
 112, 1.070000052
 112.0999985, 0.8399999738
 112.1999969, 0.75
 112.3000031, 0.8899999857
 112.4000015, 1.049999952
 112.5, 1.190000057
 112.5999985, 0.9599999785
 112.6999969, 0.8100000024
 112.8000031, 0.6100000143
 112.9000015, 0.4600000083
 113, 0.6299999952
 113.0999985, 0.6700000167
 113.1999969, 0.7300000191
 113.3000031, 0.5400000215
 113.4000015, 0.349999994
 113.5, 0.2300000042
 113.5999985, -0.009999999776
 113.6999969, -0.05999999866
 113.8000031, -0.2899999917
 113.9000015, -0.4399999976
 114, -0.4099999964
 114.0999985, -0.4799999893
 114.1999969, -0.2899999917
 114.3000031, 0.02999999933
 114.4000015, 0.1000000015
 114.5, -0.01999999955
 114.5999985, -0.1099999994
 114.6999969, 0.09000000358
 114.8000031, 0.07999999821
 114.9000015, 0.3199999928
 115, 0.4499999881
 115.0999985, 0.6600000262
 115.1999969, 0.6299999952
 115.3000031, 0.6800000072
 115.4000015, 1.039999962
 115.5, 1.370000005
 115.5999985, 1.399999976
 115.6999969, 1.570000052
 115.8000031, 1.960000038
 115.9000015, 2.24000001
 116, 2.460000038
 116.0999985, 2.970000029
 116.1999969, 3.329999924
 116.3000031, 3.599999905
 116.4000015, 3.859999895
 116.5, 3.390000105
 116.5999985, 3.150000095
 116.6999969, 3.289999962
 116.8000031, 3.589999914
 116.9000015, 3.25
 117, 3.109999895
 117.0999985, 3.170000076
 117.1999969, 3.289999962
 117.3000031, 3.130000114
 117.4000015, 2.900000095
 117.5, 2.74000001
 117.5999985, 2.549999952
 117.6999969, 2.349999905
 117.8000031, 2.359999895
 117.9000015, 2.400000095
 118, 2.549999952
 118.0999985, 2.710000038
 118.1999969, 2.75
 118.3000031, 2.74000001
 118.4000015, 2.50999999
 118.5, 2.210000038
 118.5999985, 2.059999943
 118.6999969, 2.339999914
 118.8000031, 2.599999905
 118.9000015, 2.710000038
 119, 2.680000067
 119.0999985, 2.849999905
 119.1999969, 2.930000067
 119.3000031, 2.890000105
 119.4000015, 2.710000038
 119.5, 2.589999914
 119.5999985, 2.559999943
 119.6999969, 2.619999886
 119.8000031, 2.779999971
 119.9000015, 2.940000057
 120, 3.130000114
 120.0999985, 3.160000086
 120.1999969, 3.25
 120.3000031, 3.269999981
 120.4000015, 3.700000048
 120.5, 3.930000067
 120.5999985, 3.950000048
 120.6999969, 4.110000134
 120.8000031, 4.420000076
 120.9000015, 4.710000038
 121, 4.889999866
 121.0999985, 4.849999905
 121.1999969, 4.369999886
 121.3000031, 4.039999962
 121.4000015, 4.099999905
 121.5, 3.980000019
 121.5999985, 3.589999914
 121.6999969, 3.480000019
 121.8000031, 3.599999905
 121.9000015, 3.529999971
 122, 3.119999886
 122.0999985, 2.839999914
 122.1999969, 2.700000048
 122.3000031, 2.440000057
 122.4000015, 2.190000057
 122.5, 2.019999981
 122.5999985, 2.180000067
 122.6999969, 2.109999895
 122.8000031, 1.899999976
 122.9000015, 1.539999962
 123, 1.389999986
 123.0999985, 1.25
 123.1999969, 1.25999999
 123.3000031, 1.100000024
 123.4000015, 0.9300000072
 123.5, 1.00999999
 123.5999985, 0.9300000072
 123.6999969, 0.8100000024
 123.8000031, 0.5799999833
 123.9000015, 0.5199999809
 124, 0.4499999881
 124.0999985, 0.6899999976
 124.1999969, 0.8399999738
 124.3000031, 0.7099999785
 124.4000015, 0.75
 124.5, 1.019999981
 124.5999985, 1.5
 124.6999969, 1.529999971
 124.8000031, 1.389999986
 124.9000015, 1.50999999
 125, 1.75999999
 125.0999985, 2.109999895
 125.1999969, 2.279999971
 125.3000031, 2.24000001
 125.4000015, 2.150000095
 125.5, 2.269999981
 125.5999985, 2.109999895
 125.6999969, 1.919999957
 125.8000031, 1.820000052
 125.9000015, 2.299999952
 126, 2.150000095
 126.0999985, 2.029999971
 126.1999969, 1.789999962
 126.3000031, 1.799999952
 126.4000015, 1.74000001
 126.5, 1.399999976
 126.5999985, 1.100000024
 126.6999969, 0.8000000119
 126.8000031, 0.5099999905
 126.9000015, 0.4099999964
 127, 0.5199999809
 127.0999985, 0.3100000024
 127.1999969, 0.25
 127.3000031, 0.2599999905
 127.4000015, 0.5199999809
 127.5, 0.4099999964
 127.5999985, 0.1099999994
 127.6999969, 0.01999999955
 127.8000031, 0.05999999866
 127.9000015, 0.1299999952
 128, 0.1099999994
 128.1000061, 0.02999999933
 128.1999969, 0.2800000012
 128.3000031, 0.9399999976
 128.3999939, 1.159999967
 128.5, 1.24000001
 128.6000061, 1.429999948
 128.6999969, 1.730000019
 128.8000031, 1.820000052
 128.8999939, 1.549999952
 129, 1.730000019
 129.1000061, 2.099999905
 129.1999969, 2.25999999
 129.3000031, 2.319999933
 129.3999939, 2.710000038
 129.5, 2.799999952
 129.6000061, 2.940000057
 129.6999969, 3.00999999
 129.8000031, 3.309999943
 129.8999939, 3.589999914
 130, 3.920000076
 130.1000061, 4.210000038
 130.1999969, 3.960000038
 130.3000031, 3.569999933
 130.3999939, 3.450000048
 130.5, 3.50999999
 130.6000061, 3.390000105
 130.6999969, 3.170000076
 130.8000031, 3.230000019
 130.8999939, 3.029999971
 131, 2.779999971
 131.1000061, 2.349999905
 131.1999969, 2.099999905
 131.3000031, 1.919999957
 131.3999939, 1.559999943
 131.5, 1.019999981
 131.6000061, 0.7300000191
 131.6999969, 0.7099999785
 131.8000031, 0.5
 131.8999939, 0.3300000131
 132, 0.3400000036
 132.1000061, 0.1899999976
 132.1999969, 0.05999999866
 132.3000031, 0.01999999955
 132.3999939, -0.150000006
 132.5, -0.2899999917
 132.6000061, -0.2099999934
 132.6999969, -0.4799999893
 132.8000031, -0.7799999714
 132.8999939, -0.8100000024
 133, -0.8100000024
 133.1000061, -0.7900000215
 133.1999969, -0.8399999738
 133.3000031, -0.6600000262
 133.3999939, -0.7799999714
 133.5, -1.169999957
 133.6000061, -1.289999962
 133.6999969, -1.360000014
 133.8000031, -1.220000029
 133.8999939, -1.200000048
 134, -1.159999967
 134.1000061, -0.9700000286
 134.1999969, -0.7699999809
 134.3000031, -0.5699999928
 134.3999939, -0.5600000024
 134.5, -0.6299999952
 134.6000061, -0.6700000167
 134.6999969, -0.6100000143
 134.8000031, -0.9200000167
 134.8999939, -1.059999943
 135, -0.9599999785
 135.1000061, -0.8799999952
 135.1999969, -0.9900000095
 135.3000031, -1.179999948
 135.3999939, -1.25999999
 135.5, -1.580000043
 135.6000061, -1.919999957
 135.6999969, -2.200000048
 135.8000031, -2.359999895
 135.8999939, -2.299999952
 136, -2.380000114
 136.1000061, -2.519999981
 136.1999969, -2.680000067
 136.3000031, -2.720000029
 136.3999939, -2.970000029
 136.5, -3.059999943
 136.6000061, -3.150000095
 136.6999969, -2.930000067
 136.8000031, -3.140000105
 136.8999939, -3.119999886
 137, -3.230000019
 137.1000061, -3.390000105
 137.1999969, -3.579999924
 137.3000031, -3.5
 137.3999939, -3.420000076
 137.5, -3.269999981
 137.6000061, -3.190000057
 137.6999969, -3.109999895
 137.8000031, -2.99000001
 137.8999939, -3.029999971
 138, -3.029999971
 138.1000061, -2.710000038
 138.1999969, -2.640000105
 138.3000031, -2.569999933
 138.3999939, -2.569999933
 138.5, -2.460000038
 138.6000061, -2.430000067
 138.6999969, -2.099999905
 138.8000031, -1.970000029
 138.8999939, -2.079999924
 139, -1.899999976
 139.1000061, -1.730000019
 139.1999969, -1.559999943
 139.3000031, -1.429999948
 139.3999939, -1.539999962
 139.5, -1.710000038
 139.6000061, -1.620000005
 139.6999969, -1.659999967
 139.8000031, -1.799999952
 139.8999939, -1.74000001
 140, -1.700000048
 140.1000061, -1.789999962
 140.1999969, -1.840000033
 140.3000031, -2.029999971
 140.3999939, -2.049999952
 140.5, -2.220000029
 140.6000061, -2.279999971
 140.6999969, -2.50999999
 140.8000031, -2.630000114
 140.8999939, -2.819999933
 141, -3.109999895
 141.1000061, -3.309999943
 141.1999969, -2.829999924
 141.3000031, -2.74000001
 141.3999939, -2.819999933
 141.5, -2.900000095
 141.6000061, -2.890000105
 141.6999969, -2.960000038
 141.8000031, -3.079999924
 141.8999939, -3.109999895
 142, -3.190000057
 142.1000061, -3.099999905
 142.1999969, -2.809999943
 142.3000031, -2.660000086
 142.3999939, -2.49000001
 142.5, -2.099999905
 142.6000061, -1.929999948
 142.6999969, -1.799999952
 142.8000031, -1.620000005
 142.8999939, -1.570000052
 143, -1.549999952
 143.1000061, -1.289999962
 143.1999969, -1.129999995
 143.3000031, -1.070000052
 143.3999939, -0.9700000286
 143.5, -0.6100000143
 143.6000061, -0.1599999964
 143.6999969, 0.1400000006
 143.8000031, 0.2599999905
 143.8999939, 0.09000000358
 144, 0.03999999911
 144.1000061, -0.09000000358
 144.1999969, 0.200000003
 144.3000031, 0.200000003
 144.3999939, 0.150000006
 144.5, -0.009999999776
 144.6000061, 0.05000000075
 144.6999969, -0.349999994
 144.8000031, -0.4099999964
 144.8999939, -0.4799999893
 145, -0.2899999917
 145.1000061, -0.6000000238
 145.1999969, -0.5400000215
 145.3000031, -0.400000006
 145.3999939, -0.3000000119
 145.5, -0.6800000072
 145.6000061, -0.9499999881
 145.6999969, -0.6000000238
 145.8000031, -0.5299999714
 145.8999939, -0.5500000119
 146, -0.5500000119
 146.1000061, -0.5400000215
 146.1999969, -0.4300000072
 146.3000031, -0.4900000095
 146.3999939, -0.4099999964
 146.5, -0.6700000167
 146.6000061, -0.8299999833
 146.6999969, -1.080000043
 146.8000031, -1.039999962
 146.8999939, -0.7300000191
 147, -0.400000006
 147.1000061, -0.3899999857
 147.1999969, -0.3899999857
 147.3000031, -0.2800000012
 147.3999939, -0.3100000024
 147.5, -0.5899999738
 147.6000061, -0.6299999952
 147.6999969, -0.6399999857
 147.8000031, -0.400000006
 147.8999939, -0.3799999952
 148, -0.3600000143
 148.1000061, -0.2599999905
 148.1999969, -0.1000000015
 148.3000031, -0.1299999952
 148.3999939, -0.4699999988
 148.5, -0.5799999833
 148.6000061, -0.8000000119
 148.6999969, -0.1199999973
 148.8000031, -0.3400000036
 148.8999939, -0.3199999928
 149, -0.3000000119
 149.1000061, -0.3199999928
 149.1999969, -0.6100000143
 149.3000031, -0.8199999928
 149.3999939, -0.8600000143
 149.5, -0.8100000024
 149.6000061, -1.299999952
 149.6999969, -1.669999957
 149.8000031, -1.590000033
 149.8999939, -1.450000048
 150, -1.559999943
 150.1000061, -1.629999995
 150.1999969, -1.789999962
 150.3000031, -2.00999999
 150.3999939, -2.319999933
 150.5, -2.299999952
 150.6000061, -2
 150.6999969, -1.789999962
 150.8000031, -1.450000048
 150.8999939, -1.480000019
 151, -1.309999943
 151.1000061, -1.230000019
 151.1999969, -0.9499999881
 151.3000031, -0.7599999905
 151.3999939, -0.5400000215
 151.5, 0.009999999776
 151.6000061, 0.2399999946
 151.6999969, -0.2599999905
 151.8000031, -0.4799999893
 151.8999939, -0.1400000006
 152, 0.2099999934
 152.1000061, 0.3799999952
 152.1999969, 0.5
 152.3000031, 0.7799999714
 152.3999939, 1
 153, 1
 153.1000061, -8.159999847
ENDTABLE
Z_PROFILE_GAIN(1)   1 ! Gain multiplied with calculated value to get elevation
                      ! increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment
SSTART_Z_PROFILE(1) 0 ; m ! Offset subtracted from distance travelled
SSCALE_Z_PROFILE(1) 1 ! Scale factor divided into (distance travelled -
                      ! SSTART_Z_PROFILE)
LOAD_ERD_FILE Roads\Profiles\RR_02_92_lrEmm.vstb ;
ERD_TO_TABLE Z_PROFILE_TABLE(2) DIST R_ELE LINEAR_LOOP
ECHO_LOADED_TABLE Z_PROFILE_TABLE(2)

! [D] 1D table: col 1 = distance travelled (m), col 2 = elevation increment (mm)
Z_PROFILE_TABLE(2) LINEAR_LOOP ! linear interpolation, repeat in loop
 0, -4.550000191
 0.1000000015, -4.340000153
 0.200000003, -4.070000172
 0.3000000119, -3.640000105
 0.400000006, -3.24000001
 0.5, -2.890000105
 0.6000000238, -2.460000038
 0.6999999881, -2.130000114
 0.8000000119, -1.74000001
 0.8999999762, -1.370000005
 1, -0.8799999952
 1.100000024, -0.4499999881
 1.200000048, 0
 1.299999952, 0.3400000036
 1.399999976, 0.6600000262
 1.5, 0.9499999881
 1.600000024, 1.330000043
 1.700000048, 1.850000024
 1.799999952, 2.220000029
 1.899999976, 2.470000029
 2, 2.75999999
 2.099999905, 3.299999952
 2.200000048, 3.950000048
 2.299999952, 3.589999914
 2.400000095, 3.049999952
 2.5, 2.470000029
 2.599999905, 3.140000105
 2.700000048, 3.170000076
 2.799999952, 3.150000095
 2.900000095, 3.170000076
 3, 3.339999914
 3.099999905, 3.359999895
 3.200000048, 3.309999943
 3.299999952, 3.400000095
 3.400000095, 3.390000105
 3.5, 3.299999952
 3.599999905, 3.130000114
 3.700000048, 3.109999895
 3.799999952, 3.309999943
 3.900000095, 3.319999933
 4, 3.339999914
 4.099999905, 3.49000001
 4.199999809, 3.660000086
 4.300000191, 3.779999971
 4.400000095, 3.849999905
 4.5, 4.010000229
 4.599999905, 3.950000048
 4.699999809, 4.019999981
 4.800000191, 4.130000114
 4.900000095, 4.139999866
 5, 4.159999847
 5.099999905, 4.320000172
 5.199999809, 4.400000095
 5.300000191, 4.550000191
 5.400000095, 4.710000038
 5.5, 4.860000134
 5.599999905, 4.96999979
 5.699999809, 5.070000172
 5.800000191, 5.099999905
 5.900000095, 5.260000229
 6, 5.210000038
 6.099999905, 5.329999924
 6.199999809, 5.510000229
 6.300000191, 5.889999866
 6.400000095, 6.119999886
 6.5, 6.170000076
 6.599999905, 6.409999847
 6.699999809, 6.690000057
 6.800000191, 6.880000114
 6.900000095, 6.599999905
 7, 6.28000021
 7.099999905, 6.28000021
 7.199999809, 6.21999979
 7.300000191, 6.079999924
 7.400000095, 5.980000019
 7.5, 5.869999886
 7.599999905, 5.760000229
 7.699999809, 5.619999886
 7.800000191, 5.409999847
 7.900000095, 5.03000021
 8, 4.78000021
 8.100000381, 4.539999962
 8.199999809, 4.239999771
 8.300000191, 4.070000172
 8.399999619, 4.019999981
 8.5, 3.839999914
 8.600000381, 3.720000029
 8.699999809, 3.74000001
 8.800000191, 3.829999924
 8.899999619, 3.970000029
 9, 3.910000086
 9.100000381, 3.819999933
 9.199999809, 3.75
 9.300000191, 3.829999924
 9.399999619, 3.910000086
 9.5, 4.110000134
 9.600000381, 4.260000229
 9.699999809, 4.510000229
 9.800000191, 4.820000172
 9.899999619, 4.900000095
 10, 4.889999866
 10.10000038, 4.880000114
 10.19999981, 4.940000057
 10.30000019, 4.869999886
 10.39999962, 4.940000057
 10.5, 5.150000095
 10.60000038, 5.5
 10.69999981, 5.78000021
 10.80000019, 6.039999962
 10.89999962, 6.360000134
 11, 6.559999943
 11.10000038, 6.650000095
 11.19999981, 6.710000038
 11.30000019, 6.840000153
 11.39999962, 5.21999979
 11.5, 4.309999943
 11.60000038, 4.230000019
 11.69999981, 4.309999943
 11.80000019, 4.389999866
 11.89999962, 4.380000114
 12, 4.070000172
 12.10000038, 3.75
 12.19999981, 3.619999886
 12.30000019, 3.700000048
 12.39999962, 3.74000001
 12.5, 3.599999905
 12.60000038, 3.779999971
 12.69999981, 4.070000172
 12.80000019, 4.130000114
 12.89999962, 4.039999962
 13, 3.980000019
 13.10000038, 4.090000153
 13.19999981, 3.940000057
 13.30000019, 3.890000105
 13.39999962, 4.010000229
 13.5, 4.090000153
 13.60000038, 4.03000021
 13.69999981, 4.019999981
 13.80000019, 4.400000095
 13.89999962, 4.539999962
 14, 4.480000019
 14.10000038, 4.440000057
 14.19999981, 4.449999809
 14.30000019, 4.570000172
 14.39999962, 4.730000019
 14.5, 4.820000172
 14.60000038, 5
 14.69999981, 5.21999979
 14.80000019, 5.329999924
 14.89999962, 5.440000057
 15, 5.769999981
 15.10000038, 6.150000095
 15.19999981, 6.309999943
 15.30000019, 6.610000134
 15.39999962, 6.880000114
 15.5, 7.110000134
 15.60000038, 7.139999866
 15.69999981, 7.409999847
 15.80000019, 7.900000095
 15.89999962, 8.31000042
 16, 8.319999695
 16.10000038, 8.079999924
 16.20000076, 7.639999866
 16.29999924, 7.510000229
 16.39999962, 7.269999981
 16.5, 7.130000114
 16.60000038, 6.880000114
 16.70000076, 6.800000191
 16.79999924, 6.860000134
 16.89999962, 6.829999924
 17, 6.699999809
 17.10000038, 6.539999962
 17.20000076, 6.510000229
 17.29999924, 6.409999847
 17.39999962, 6.260000229
 17.5, 6.010000229
 17.60000038, 5.909999847
 17.70000076, 5.860000134
 17.79999924, 5.789999962
 17.89999962, 5.71999979
 18, 5.880000114
 18.10000038, 5.800000191
 18.20000076, 5.739999771
 18.29999924, 5.46999979
 18.39999962, 5.260000229
 18.5, 5.110000134
 18.60000038, 5.079999924
 18.70000076, 5.110000134
 18.79999924, 5.170000076
 18.89999962, 5.130000114
 19, 5.260000229
 19.10000038, 5.440000057
 19.20000076, 5.789999962
 19.29999924, 5.869999886
 19.39999962, 5.630000114
 19.5, 5.480000019
 19.60000038, 5.409999847
 19.70000076, 5.599999905
 19.79999924, 5.579999924
 19.89999962, 5.840000153
 20, 6.019999981
 20.10000038, 6
 20.20000076, 6.079999924
 20.29999924, 6.429999828
 20.39999962, 6.349999905
 20.5, 6.380000114
 20.60000038, 6.159999847
 20.70000076, 5.840000153
 20.79999924, 5.510000229
 20.89999962, 5.46999979
 21, 5.460000038
 21.10000038, 4.840000153
 21.20000076, 4.5
 21.29999924, 3.75999999
 21.39999962, 3.380000114
 21.5, 3.140000105
 21.60000038, 3.150000095
 21.70000076, 3
 21.79999924, 3.109999895
 21.89999962, 3.079999924
 22, 3.329999924
 22.10000038, 3.609999895
 22.20000076, 3.619999886
 22.29999924, 3.420000076
 22.39999962, 3.25999999
 22.5, 3.210000038
 22.60000038, 3.180000067
 22.70000076, 3.200000048
 22.79999924, 3.349999905
 22.89999962, 3.559999943
 23, 3.839999914
 23.10000038, 4.210000038
 23.20000076, 4.360000134
 23.29999924, 4.269999981
 23.39999962, 4.199999809
 23.5, 4.380000114
 23.60000038, 4.590000153
 23.70000076, 4.690000057
 23.79999924, 4.489999771
 23.89999962, 4.710000038
 24, 5.460000038
 24.10000038, 5.650000095
 24.20000076, 5.869999886
 24.29999924, 6
 24.39999962, 5.840000153
 24.5, 5.96999979
 24.60000038, 6.510000229
 24.70000076, 7.239999771
 24.79999924, 7.230000019
 24.89999962, 7.329999924
 25, 7.579999924
 25.10000038, 7.800000191
 25.20000076, 7.730000019
 25.29999924, 7.590000153
 25.39999962, 7.449999809
 25.5, 7.5
 25.60000038, 7.670000076
 25.70000076, 7.21999979
 25.79999924, 6.869999886
 25.89999962, 6.570000172
 26, 6.590000153
 26.10000038, 6.519999981
 26.20000076, 6.289999962
 26.29999924, 6.079999924
 26.39999962, 5.949999809
 26.5, 6.139999866
 26.60000038, 6.159999847
 26.70000076, 6.199999809
 26.79999924, 6.119999886
 26.89999962, 5.980000019
 27, 5.739999771
 27.10000038, 5.920000076
 27.20000076, 6.139999866
 27.29999924, 6.119999886
 27.39999962, 6.119999886
 27.5, 6.179999828
 27.60000038, 6.159999847
 27.70000076, 6.150000095
 27.79999924, 6.130000114
 27.89999962, 6.199999809
 28, 5.980000019
 28.10000038, 5.980000019
 28.20000076, 6.300000191
 28.29999924, 6.480000019
 28.39999962, 6.119999886
 28.5, 6.139999866
 28.60000038, 6.440000057
 28.70000076, 6.809999943
 28.79999924, 7.079999924
 28.89999962, 7.070000172
 29, 7.179999828
 29.10000038, 7.429999828
 29.20000076, 7.590000153
 29.29999924, 7.550000191
 29.39999962, 7.670000076
 29.5, 7.960000038
 29.60000038, 8.029999733
 29.70000076, 7.829999924
 29.79999924, 7.579999924
 29.89999962, 7.71999979
 30, 7.690000057
 30.10000038, 7.880000114
 30.20000076, 7.769999981
 30.29999924, 7.369999886
 30.39999962, 7.070000172
 30.5, 6.670000076
 30.60000038, 6.380000114
 30.70000076, 6.070000172
 30.79999924, 6.059999943
 30.89999962, 5.820000172
 31, 5.690000057
 31.10000038, 5.539999962
 31.20000076, 5.329999924
 31.29999924, 5.260000229
 31.39999962, 5.349999905
 31.5, 5.480000019
 31.60000038, 5.340000153
 31.70000076, 5.199999809
 31.79999924, 4.989999771
 31.89999962, 4.860000134
 32, 4.75
 32.09999847, 4.690000057
 32.20000076, 4.599999905
 32.29999924, 4.53000021
 32.40000153, 4.170000076
 32.5, 4.179999828
 32.59999847, 4.619999886
 32.70000076, 4.929999828
 32.79999924, 5.099999905
 32.90000153, 5.159999847
 33, 5.03000021
 33.09999847, 4.800000191
 33.20000076, 4.829999924
 33.29999924, 4.860000134
 33.40000153, 4.949999809
 33.5, 5.179999828
 33.59999847, 5.420000076
 33.70000076, 5.559999943
 33.79999924, 5.420000076
 33.90000153, 5.559999943
 34, 5.820000172
 34.09999847, 6.239999771
 34.20000076, 6.75
 34.29999924, 5.809999943
 34.40000153, 4.679999828
 34.5, 4.079999924
 34.59999847, 4.300000191
 34.70000076, 4.170000076
 34.79999924, 4.199999809
 34.90000153, 4.179999828
 35, 4.070000172
 35.09999847, 4.039999962
 35.20000076, 3.880000114
 35.29999924, 4.090000153
 35.40000153, 4.369999886
 35.5, 4.480000019
 35.59999847, 4.519999981
 35.70000076, 4.710000038
 35.79999924, 4.75
 35.90000153, 4.53000021
 36, 4.440000057
 36.09999847, 4.5
 36.20000076, 4.650000095
 36.29999924, 4.739999771
 36.40000153, 4.809999943
 36.5, 5.050000191
 36.59999847, 5.559999943
 36.70000076, 5.980000019
 36.79999924, 6.099999905
 36.90000153, 6.050000191
 37, 6.099999905
 37.09999847, 6.139999866
 37.20000076, 6.170000076
 37.29999924, 6.320000172
 37.40000153, 6.460000038
 37.5, 6.559999943
 37.59999847, 6.639999866
 37.70000076, 6.760000229
 37.79999924, 6.840000153
 37.90000153, 7.269999981
 38, 7.889999866
 38.09999847, 8.140000343
 38.20000076, 8.300000191
 38.29999924, 8.420000076
 38.40000153, 8.770000458
 38.5, 8.840000153
 38.59999847, 9.039999962
 38.70000076, 9.449999809
 38.79999924, 9.470000267
 38.90000153, 8.640000343
 39, 7.789999962
 39.09999847, 7.840000153
 39.20000076, 7.71999979
 39.29999924, 7.519999981
 39.40000153, 7.46999979
 39.5, 7.53000021
 39.59999847, 7.539999962
 39.70000076, 7.460000038
 39.79999924, 7.329999924
 39.90000153, 7.28000021
 40, 7.199999809
 40.09999847, 7.119999886
 40.20000076, 7.039999962
 40.29999924, 6.829999924
 40.40000153, 6.639999866
 40.5, 6.46999979
 40.59999847, 6.699999809
 40.70000076, 6.900000095
 40.79999924, 7.269999981
 40.90000153, 7.369999886
 41, 7.5
 41.09999847, 7.489999771
 41.20000076, 7.389999866
 41.29999924, 7.369999886
 41.40000153, 7.360000134
 41.5, 7.420000076
 41.59999847, 7.389999866
 41.70000076, 7.539999962
 41.79999924, 7.659999847
 41.90000153, 7.849999905
 42, 8
 42.09999847, 8.359999657
 42.20000076, 8.819999695
 42.29999924, 8.979999542
 42.40000153, 9.229999542
 42.5, 9.329999924
 42.59999847, 9.710000038
 42.70000076, 10.06999969
 42.79999924, 10.23999977
 42.90000153, 10.42000008
 43, 10.60000038
 43.09999847, 10.77999973
 43.20000076, 10.88000011
 43.29999924, 11.21000004
 43.40000153, 11.32999992
 43.5, 11.31000042
 43.59999847, 11.22000027
 43.70000076, 11.10000038
 43.79999924, 10.64000034
 43.90000153, 10.14000034
 44, 9.989999771
 44.09999847, 9.649999619
 44.20000076, 9.399999619
 44.29999924, 8.989999771
 44.40000153, 8.479999542
 44.5, 8.369999886
 44.59999847, 8.369999886
 44.70000076, 8.449999809
 44.79999924, 8.199999809
 44.90000153, 7.869999886
 45, 7.570000172
 45.09999847, 7.480000019
 45.20000076, 7.389999866
 45.29999924, 7.119999886
 45.40000153, 6.980000019
 45.5, 7.019999981
 45.59999847, 6.900000095
 45.70000076, 6.46999979
 45.79999924, 6.320000172
 45.90000153, 6.380000114
 46, 6.190000057
 46.09999847, 6.130000114
 46.20000076, 6.269999981
 46.29999924, 6.440000057
 46.40000153, 6.329999924
 46.5, 6.309999943
 46.59999847, 6.230000019
 46.70000076, 6.21999979
 46.79999924, 6.179999828
 46.90000153, 5.960000038
 47, 5.889999866
 47.09999847, 6.139999866
 47.20000076, 6.050000191
 47.29999924, 5.789999962
 47.40000153, 5.769999981
 47.5, 6.150000095
 47.59999847, 6.429999828
 47.70000076, 6.5
 47.79999924, 6.550000191
 47.90000153, 6.96999979
 48, 6.78000021
 48.09999847, 6.480000019
 48.20000076, 6.170000076
 48.29999924, 6.489999771
 48.40000153, 6.260000229
 48.5, 6.019999981
 48.59999847, 5.880000114
 48.70000076, 6.119999886
 48.79999924, 6.260000229
 48.90000153, 6.269999981
 49, 6.269999981
 49.09999847, 6.269999981
 49.20000076, 6.090000153
 49.29999924, 5.960000038
 49.40000153, 5.960000038
 49.5, 5.900000095
 49.59999847, 5.78000021
 49.70000076, 5.590000153
 49.79999924, 5.46999979
 49.90000153, 5.449999809
 50, 5.21999979
 50.09999847, 5.019999981
 50.20000076, 5.239999771
 50.29999924, 5.380000114
 50.40000153, 5.190000057
 50.5, 5.010000229
 50.59999847, 5.03000021
 50.70000076, 4.980000019
 50.79999924, 4.989999771
 50.90000153, 4.889999866
 51, 4.840000153
 51.09999847, 4.849999905
 51.20000076, 4.929999828
 51.29999924, 4.929999828
 51.40000153, 4.940000057
 51.5, 5.28000021
 51.59999847, 5.730000019
 51.70000076, 6.159999847
 51.79999924, 6.190000057
 51.90000153, 6.010000229
 52, 6.019999981
 52.09999847, 6.119999886
 52.20000076, 6.170000076
 52.29999924, 6.449999809
 52.40000153, 6.860000134
 52.5, 7
 52.59999847, 6.849999905
 52.70000076, 6.760000229
 52.79999924, 6.71999979
 52.90000153, 6.550000191
 53, 6.170000076
 53.09999847, 5.71999979
 53.20000076, 5.400000095
 53.29999924, 5.289999962
 53.40000153, 4.900000095
 53.5, 4.610000134
 53.59999847, 4.159999847
 53.70000076, 4.059999943
 53.79999924, 3.859999895
 53.90000153, 3.910000086
 54, 3.470000029
 54.09999847, 3.309999943
 54.20000076, 3.289999962
 54.29999924, 3.559999943
 54.40000153, 3.529999971
 54.5, 3.24000001
 54.59999847, 2.930000067
 54.70000076, 2.819999933
 54.79999924, 2.410000086
 54.90000153, 2.230000019
 55, 2.50999999
 55.09999847, 2.579999924
 55.20000076, 2.680000067
 55.29999924, 2.49000001
 55.40000153, 2.460000038
 55.5, 2.599999905
 55.59999847, 2.74000001
 55.70000076, 2.730000019
 55.79999924, 2.579999924
 55.90000153, 2.569999933
 56, 2.609999895
 56.09999847, 2.609999895
 56.20000076, 2.650000095
 56.29999924, 2.809999943
 56.40000153, 2.799999952
 56.5, 2.630000114
 56.59999847, 2.730000019
 56.70000076, 2.839999914
 56.79999924, 2.930000067
 56.90000153, 3.25
 57, 3.690000057
 57.09999847, 3.730000019
 57.20000076, 3.25
 57.29999924, 2.599999905
 57.40000153, 2.230000019
 57.5, 2.150000095
 57.59999847, 2.079999924
 57.70000076, 2.00999999
 57.79999924, 1.720000029
 57.90000153, 1.600000024
 58, 1.470000029
 58.09999847, 1.429999948
 58.20000076, 1.389999986
 58.29999924, 1.470000029
 58.40000153, 1.50999999
 58.5, 1.299999952
 58.59999847, 1.029999971
 58.70000076, 0.9900000095
 58.79999924, 0.9900000095
 58.90000153, 0.8199999928
 59, 0.6200000048
 59.09999847, 0.6200000048
 59.20000076, 0.6399999857
 59.29999924, 0.5500000119
 59.40000153, 0.4499999881
 59.5, 0.5400000215
 59.59999847, 0.6700000167
 59.70000076, 0.9399999976
 59.79999924, 1.340000033
 59.90000153, 1.5
 60, 1.600000024
 60.09999847, 1.659999967
 60.20000076, 1.850000024
 60.29999924, 1.809999943
 60.40000153, 1.789999962
 60.5, 1.899999976
 60.59999847, 2.119999886
 60.70000076, 2.339999914
 60.79999924, 2.309999943
 60.90000153, 2.539999962
 61, 2.829999924
 61.09999847, 3.059999943
 61.20000076, 3.410000086
 61.29999924, 3.430000067
 61.40000153, 3.420000076
 61.5, 3.650000095
 61.59999847, 4.03000021
 61.70000076, 3.910000086
 61.79999924, 3.480000019
 61.90000153, 3.220000029
 62, 3.49000001
 62.09999847, 3.410000086
 62.20000076, 3.349999905
 62.29999924, 3.279999971
 62.40000153, 3.410000086
 62.5, 3.470000029
 62.59999847, 3.470000029
 62.70000076, 3.150000095
 62.79999924, 2.880000114
 62.90000153, 2.589999914
 63, 2.339999914
 63.09999847, 2.039999962
 63.20000076, 1.830000043
 63.29999924, 1.850000024
 63.40000153, 1.980000019
 63.5, 1.940000057
 63.59999847, 1.730000019
 63.70000076, 1.620000005
 63.79999924, 1.50999999
 63.90000153, 1.370000005
 64, 1.059999943
 64.09999847, 0.9700000286
 64.19999695, 0.6899999976
 64.30000305, 0.6399999857
 64.40000153, 0.6200000048
 64.5, 0.6399999857
 64.59999847, 0.6800000072
 64.69999695, 0.75
 64.80000305, 0.8199999928
 64.90000153, 0.8399999738
 65, 1.00999999
 65.09999847, 0.9700000286
 65.19999695, 0.8999999762
 65.30000305, 0.9200000167
 65.40000153, 1.100000024
 65.5, 1.139999986
 65.59999847, 0.8600000143
 65.69999695, 0.9200000167
 65.80000305, 1
 65.90000153, 1.289999962
 66, 1.279999971
 66.09999847, 1.159999967
 66.19999695, 0.9100000262
 66.30000305, 0.8500000238
 66.40000153, 0.7099999785
 66.5, 0.3100000024
 66.59999847, 0.09000000358
 66.69999695, -0.2599999905
 66.80000305, -0.5799999833
 66.90000153, -0.9300000072
 67, -1.25
 67.09999847, -1.460000038
 67.19999695, -1.870000005
 67.30000305, -2.329999924
 67.40000153, -2.75
 67.5, -2.859999895
 67.59999847, -3.049999952
 67.69999695, -3.359999895
 67.80000305, -3.660000086
 67.90000153, -3.930000067
 68, -4.139999866
 68.09999847, -4.409999847
 68.19999695, -4.840000153
 68.30000305, -5.159999847
 68.40000153, -5.190000057
 68.5, -5.300000191
 68.59999847, -5.559999943
 68.69999695, -5.679999828
 68.80000305, -5.489999771
 68.90000153, -5.389999866
 69, -5.340000153
 69.09999847, -5.230000019
 69.19999695, -5.130000114
 69.30000305, -5.139999866
 69.40000153, -5.050000191
 69.5, -5.010000229
 69.59999847, -5
 69.69999695, -5.110000134
 69.80000305, -5.119999886
 69.90000153, -5.150000095
 70, -4.840000153
 70.09999847, -4.639999866
 70.19999695, -4.429999828
 70.30000305, -4.340000153
 70.40000153, -4.349999905
 70.5, -4.110000134
 70.59999847, -3.670000076
 70.69999695, -3.369999886
 70.80000305, -3.809999943
 70.90000153, -4.099999905
 71, -4.309999943
 71.09999847, -3.75999999
 71.19999695, -3.900000095
 71.30000305, -4.099999905
 71.40000153, -4.190000057
 71.5, -4.320000172
 71.59999847, -4.5
 71.69999695, -4.599999905
 71.80000305, -4.510000229
 71.90000153, -4.460000038
 72, -4.369999886
 72.09999847, -4.429999828
 72.19999695, -4.619999886
 72.30000305, -4.710000038
 72.40000153, -4.650000095
 72.5, -4.679999828
 72.59999847, -4.619999886
 72.69999695, -4.389999866
 72.80000305, -4.269999981
 72.90000153, -4.21999979
 73, -4.190000057
 73.09999847, -4.289999962
 73.19999695, -4.25
 73.30000305, -4.079999924
 73.40000153, -4.110000134
 73.5, -4.300000191
 73.59999847, -4.079999924
 73.69999695, -3.660000086
 73.80000305, -3.329999924
 73.90000153, -3.279999971
 74, -3.25
 74.09999847, -3.279999971
 74.19999695, -3
 74.30000305, -2.900000095
 74.40000153, -2.700000048
 74.5, -2.670000076
 74.59999847, -2.410000086
 74.69999695, -1.919999957
 74.80000305, -1.919999957
 74.90000153, -2
 75, -1.899999976
 75.09999847, -1.74000001
 75.19999695, -1.539999962
 75.30000305, -1.309999943
 75.40000153, -1.5
 75.5, -1.99000001
 75.59999847, -2.400000095
 75.69999695, -2.549999952
 75.80000305, -2.930000067
 75.90000153, -3.279999971
 76, -3.720000029
 76.09999847, -3.970000029
 76.19999695, -4.28000021
 76.30000305, -4.53000021
 76.40000153, -4.800000191
 76.5, -4.860000134
 76.59999847, -5
 76.69999695, -5.340000153
 76.80000305, -5.320000172
 76.90000153, -5.389999866
 77, -5.820000172
 77.09999847, -5.900000095
 77.19999695, -5.900000095
 77.30000305, -5.880000114
 77.40000153, -5.949999809
 77.5, -5.989999771
 77.59999847, -6.03000021
 77.69999695, -5.989999771
 77.80000305, -6.260000229
 77.90000153, -6.289999962
 78, -6.340000153
 78.09999847, -6.389999866
 78.19999695, -6.429999828
 78.30000305, -6.360000134
 78.40000153, -6.199999809
 78.5, -6.230000019
 78.59999847, -6.170000076
 78.69999695, -5.889999866
 78.80000305, -5.46999979
 78.90000153, -5.510000229
 79, -5.630000114
 79.09999847, -5.619999886
 79.19999695, -5.550000191
 79.30000305, -5.260000229
 79.40000153, -5.449999809
 79.5, -5.380000114
 79.59999847, -5.420000076
 79.69999695, -4.989999771
 79.80000305, -4.789999962
 79.90000153, -4.559999943
 80, -4.650000095
 80.09999847, -4.659999847
 80.19999695, -4.639999866
 80.30000305, -4.239999771
 80.40000153, -4.03000021
 80.5, -4.139999866
 80.59999847, -4.210000038
 80.69999695, -4.230000019
 80.80000305, -4.480000019
 80.90000153, -4.539999962
 81, -4.559999943
 81.09999847, -4.480000019
 81.19999695, -4.429999828
 81.30000305, -4.460000038
 81.40000153, -4.380000114
 81.5, -4.050000191
 81.59999847, -4.099999905
 81.69999695, -4.170000076
 81.80000305, -4.21999979
 81.90000153, -4.059999943
 82, -4.28000021
 82.09999847, -4.289999962
 82.19999695, -4.150000095
 82.30000305, -4
 82.40000153, -4.079999924
 82.5, -3.960000038
 82.59999847, -3.910000086
 82.69999695, -3.789999962
 82.80000305, -3.569999933
 82.90000153, -3.279999971
 83, -3.190000057
 83.09999847, -3.170000076
 83.19999695, -3.180000067
 83.30000305, -2.99000001
 83.40000153, -2.74000001
 83.5, -2.25999999
 83.59999847, -2.140000105
 83.69999695, -1.75999999
 83.80000305, -1.720000029
 83.90000153, -1.889999986
 84, -1.659999967
 84.09999847, -0.8500000238
 84.19999695, -0.2899999917
 84.30000305, 0.01999999955
 84.40000153, 0.2700000107
 84.5, 0.6899999976
 84.59999847, 0.5199999809
 84.69999695, 0.3100000024
 84.80000305, 0.05000000075
 84.90000153, 0.1899999976
 85, 0.1099999994
 85.09999847, 0.05999999866
 85.19999695, -0.1899999976
 85.30000305, -0.4799999893
 85.40000153, -0.4600000083
 85.5, -0.4600000083
 85.59999847, -0.6499999762
 85.69999695, -0.8000000119
 85.80000305, -1.100000024
 85.90000153, -1.690000057
 86, -1.950000048
 86.09999847, -2.069999933
 86.19999695, -2.220000029
 86.30000305, -2.440000057
 86.40000153, -2.529999971
 86.5, -2.539999962
 86.59999847, -2.480000019
 86.69999695, -2.369999886
 86.80000305, -2.039999962
 86.90000153, -2.24000001
 87, -2.609999895
 87.09999847, -2.430000067
 87.19999695, -2.390000105
 87.30000305, -2.650000095
 87.40000153, -2.730000019
 87.5, -2.579999924
 87.59999847, -2.329999924
 87.69999695, -2.200000048
 87.80000305, -2.369999886
 87.90000153, -2.710000038
 88, -2.779999971
 88.09999847, -2.680000067
 88.19999695, -2.069999933
 88.30000305, -1.620000005
 88.40000153, -1.549999952
 88.5, -1.50999999
 88.59999847, -1.580000043
 88.69999695, -1.659999967
 88.80000305, -1.600000024
 88.90000153, -1.559999943
 89, -1.570000052
 89.09999847, -1.5
 89.19999695, -1.75999999
 89.30000305, -1.870000005
 89.40000153, -1.840000033
 89.5, -1.700000048
 89.59999847, -1.789999962
 89.69999695, -1.860000014
 89.80000305, -1.860000014
 89.90000153, -1.99000001
 90, -2.24000001
 90.09999847, -2.279999971
 90.19999695, -2.369999886
 90.30000305, -2.309999943
 90.40000153, -2.369999886
 90.5, -2.440000057
 90.59999847, -2.640000105
 90.69999695, -2.890000105
 90.80000305, -2.829999924
 90.90000153, -2.609999895
 91, -2.50999999
 91.09999847, -2.529999971
 91.19999695, -2.630000114
 91.30000305, -2.809999943
 91.40000153, -3.00999999
 91.5, -2.829999924
 91.59999847, -2.640000105
 91.69999695, -2.480000019
 91.80000305, -2.579999924
 91.90000153, -2.559999943
 92, -2.339999914
 92.09999847, -2.150000095
 92.19999695, -2.039999962
 92.30000305, -1.889999986
 92.40000153, -1.75
 92.5, -1.610000014
 92.59999847, -1.389999986
 92.69999695, -1.25999999
 92.80000305, -1.070000052
 92.90000153, -0.9200000167
 93, -0.8500000238
 93.09999847, -0.7400000095
 93.19999695, -0.5600000024
 93.30000305, -0.4300000072
 93.40000153, -0.1599999964
 93.5, 0.09000000358
 93.59999847, 0.3400000036
 93.69999695, 0.4099999964
 93.80000305, 0.3700000048
 93.90000153, 0.1899999976
 94, -0.1099999994
 94.09999847, -0.1599999964
 94.19999695, -0.3600000143
 94.30000305, -0.5699999928
 94.40000153, -0.8399999738
 94.5, -1.00999999
 94.59999847, -1.159999967
 94.69999695, -1.299999952
 94.80000305, -1.169999957
 94.90000153, -1.299999952
 95, -1.320000052
 95.09999847, -1.120000005
 95.19999695, -0.8899999857
 95.30000305, -0.75
 95.40000153, -0.9300000072
 95.5, -1.190000057
 95.59999847, -1.320000052
 95.69999695, -1.070000052
 95.80000305, -0.9900000095
 95.90000153, -1.120000005
 96, -1.090000033
 96.09999847, -1.289999962
 96.19999695, -1.190000057
 96.30000305, -1.360000014
 96.40000153, -1.00999999
 96.5, -0.6100000143
 96.59999847, -0.3799999952
 96.69999695, -0.75
 96.80000305, -1.090000033
 96.90000153, -1.230000019
 97, -1.039999962
 97.09999847, -1.090000033
 97.19999695, -0.7799999714
 97.30000305, -0.5199999809
 97.40000153, -0.3400000036
 97.5, -0.2399999946
 97.59999847, 0.1000000015
 97.69999695, 0.3300000131
 97.80000305, 0.4099999964
 97.90000153, 0.4199999869
 98, 0.5600000024
 98.09999847, 0.8500000238
 98.19999695, 0.9499999881
 98.30000305, 0.3600000143
 98.40000153, 0.3300000131
 98.5, 0.3100000024
 98.59999847, 0.7799999714
 98.69999695, 0.7799999714
 98.80000305, 0.7200000286
 98.90000153, 0.75
 99, 0.8199999928
 99.09999847, 0.7900000215
 99.19999695, 0.6000000238
 99.30000305, 0.2399999946
 99.40000153, 0.03999999911
 99.5, -0.1299999952
 99.59999847, -0.3300000131
 99.69999695, -0.3899999857
 99.80000305, -0.4300000072
 99.90000153, -0.6200000048
 100, -0.8799999952
 100.0999985, -0.9200000167
 100.1999969, -0.8199999928
 100.3000031, -0.6600000262
 100.4000015, -0.5299999714
 100.5, -0.4799999893
 100.5999985, -0.4399999976
 100.6999969, -0.1899999976
 100.8000031, -0.05999999866
 100.9000015, -0.03999999911
 101, -0.05999999866
 101.0999985, 0.01999999955
 101.1999969, 0.03999999911
 101.3000031, 0.01999999955
 101.4000015, -0.2899999917
 101.5, -0.2399999946
 101.5999985, -0.05000000075
 101.6999969, 0.09000000358
 101.8000031, 0.01999999955
 101.9000015, 0.1299999952
 102, 0.4300000072
 102.0999985, 0.9499999881
 102.1999969, 1.340000033
 102.3000031, 1.580000043
 102.4000015, 1.75
 102.5, 1.940000057
 102.5999985, 1.950000048
 102.6999969, 2.079999924
 102.8000031, 2.099999905
 102.9000015, 1.559999943
 103, 1.149999976
 103.0999985, 1.110000014
 103.1999969, 1.049999952
 103.3000031, 0.8500000238
 103.4000015, 0.5500000119
 103.5, 0.4099999964
 103.5999985, 0.2399999946
 103.6999969, 0.09000000358
 103.8000031, -0.2800000012
 103.9000015, -0.3799999952
 104, -0.4199999869
 104.0999985, -0.7099999785
 104.1999969, -0.6700000167
 104.3000031, -0.5699999928
 104.4000015, -0.5899999738
 104.5, -0.5099999905
 104.5999985, -0.3300000131
 104.6999969, -0.3300000131
 104.8000031, -0.3899999857
 104.9000015, -0.4600000083
 105, -0.3600000143
 105.0999985, -0.01999999955
 105.1999969, 0.5099999905
 105.3000031, 0.9599999785
 105.4000015, 1.230000019
 105.5, 1.299999952
 105.5999985, 1.230000019
 105.6999969, 1.110000014
 105.8000031, 1.070000052
 105.9000015, 1.269999981
 106, 1.419999957
 106.0999985, 1.519999981
 106.1999969, 1.669999957
 106.3000031, 1.840000033
 106.4000015, 2.200000048
 106.5, 2.130000114
 106.5999985, 2.049999952
 106.6999969, 2.309999943
 106.8000031, 2.75999999
 106.9000015, 2.789999962
 107, 2.599999905
 107.0999985, 2.470000029
 107.1999969, 2.549999952
 107.3000031, 2.650000095
 107.4000015, 2.369999886
 107.5, 1.909999967
 107.5999985, 1.419999957
 107.6999969, 1.25999999
 107.8000031, 1.230000019
 107.9000015, 1.070000052
 108, 0.7400000095
 108.0999985, 0.4499999881
 108.1999969, -0.09000000358
 108.3000031, -0.5600000024
 108.4000015, -0.7900000215
 108.5, -0.8999999762
 108.5999985, -1.129999995
 108.6999969, -1.179999948
 108.8000031, -1.50999999
 108.9000015, -1.75
 109, -1.730000019
 109.0999985, -1.75999999
 109.1999969, -1.850000024
 109.3000031, -1.980000019
 109.4000015, -2.019999981
 109.5, -1.99000001
 109.5999985, -1.850000024
 109.6999969, -2.039999962
 109.8000031, -2.160000086
 109.9000015, -2.269999981
 110, -2.309999943
 110.0999985, -2.569999933
 110.1999969, -2.549999952
 110.3000031, -2.349999905
 110.4000015, -2.440000057
 110.5, -2.50999999
 110.5999985, -2.460000038
 110.6999969, -2.450000048
 110.8000031, -2.289999962
 110.9000015, -2.230000019
 111, -1.799999952
 111.0999985, -1.460000038
 111.1999969, -1.320000052
 111.3000031, -1.179999948
 111.4000015, -0.8100000024
 111.5, -0.6800000072
 111.5999985, -0.6200000048
 111.6999969, -0.5699999928
 111.8000031, -0.4799999893
 111.9000015, -0.400000006
 112, -0.5400000215
 112.0999985, -0.7200000286
 112.1999969, -0.75
 112.3000031, -0.8999999762
 112.4000015, -0.8799999952
 112.5, -1.129999995
 112.5999985, -1.309999943
 112.6999969, -1.159999967
 112.8000031, -1.220000029
 112.9000015, -1.24000001
 113, -1.149999976
 113.0999985, -1.389999986
 113.1999969, -1.649999976
 113.3000031, -1.649999976
 113.4000015, -1.50999999
 113.5, -1.50999999
 113.5999985, -1.710000038
 113.6999969, -1.879999995
 113.8000031, -1.970000029
 113.9000015, -1.950000048
 114, -1.840000033
 114.0999985, -1.899999976
 114.1999969, -2.119999886
 114.3000031, -2.109999895
 114.4000015, -2.230000019
 114.5, -2.099999905
 114.5999985, -1.820000052
 114.6999969, -1.570000052
 114.8000031, -1.350000024
 114.9000015, -1.120000005
 115, -0.8899999857
 115.0999985, -0.7099999785
 115.1999969, -0.4900000095
 115.3000031, -0.25
 115.4000015, 0.1099999994
 115.5, 0.4199999869
 115.5999985, 0.6600000262
 115.6999969, 0.8600000143
 115.8000031, 1.230000019
 115.9000015, 1.50999999
 116, 2.029999971
 116.0999985, 2.390000105
 116.1999969, 2.779999971
 116.3000031, 2.819999933
 116.4000015, 2.950000048
 116.5, 2.829999924
 116.5999985, 2.160000086
 116.6999969, 1.629999995
 116.8000031, 1.50999999
 116.9000015, 1.580000043
 117, 1.450000048
 117.0999985, 1.409999967
 117.1999969, 1.460000038
 117.3000031, 1.639999986
 117.4000015, 1.50999999
 117.5, 1.450000048
 117.5999985, 1.370000005
 117.6999969, 1.309999943
 117.8000031, 1.169999957
 117.9000015, 0.9900000095
 118, 0.9200000167
 118.0999985, 0.7400000095
 118.1999969, 0.6499999762
 118.3000031, 0.6800000072
 118.4000015, 0.4900000095
 118.5, 0.4300000072
 118.5999985, 0.5500000119
 118.6999969, 0.6000000238
 118.8000031, 0.5
 118.9000015, 0.3799999952
 119, 0.4099999964
 119.0999985, 0.5
 119.1999969, 0.7699999809
 119.3000031, 0.8399999738
 119.4000015, 1.00999999
 119.5, 0.9800000191
 119.5999985, 1.019999981
 119.6999969, 1.370000005
 119.8000031, 1.639999986
 119.9000015, 1.789999962
 120, 1.74000001
 120.0999985, 2
 120.1999969, 2.210000038
 120.3000031, 2.410000086
 120.4000015, 2.559999943
 120.5, 2.849999905
 120.5999985, 2.940000057
 120.6999969, 3.190000057
 120.8000031, 3.50999999
 120.9000015, 3.75999999
 121, 3.730000019
 121.0999985, 3.039999962
 121.1999969, 2.650000095
 121.3000031, 3.00999999
 121.4000015, 3.24000001
 121.5, 3.329999924
 121.5999985, 3.24000001
 121.6999969, 3.019999981
 121.8000031, 2.890000105
 121.9000015, 2.619999886
 122, 2.619999886
 122.0999985, 2.680000067
 122.1999969, 2.359999895
 122.3000031, 2.230000019
 122.4000015, 2.00999999
 122.5, 1.870000005
 122.5999985, 1.580000043
 122.6999969, 1.460000038
 122.8000031, 1.389999986
 122.9000015, 1.309999943
 123, 1.340000033
 123.0999985, 1.429999948
 123.1999969, 1.320000052
 123.3000031, 1.360000014
 123.4000015, 1.309999943
 123.5, 1.179999948
 123.5999985, 0.9700000286
 123.6999969, 0.9599999785
 123.8000031, 0.7900000215
 123.9000015, 0.6899999976
 124, 0.6899999976
 124.0999985, 0.5899999738
 124.1999969, 0.4499999881
 124.3000031, 0.5400000215
 124.4000015, 0.5099999905
 124.5, 0.5500000119
 124.5999985, 0.6600000262
 124.6999969, 0.8299999833
 124.8000031, 0.9800000191
 124.9000015, 1.309999943
 125, 1.539999962
 125.0999985, 1.480000019
 125.1999969, 1.539999962
 125.3000031, 1.75999999
 125.4000015, 2.039999962
 125.5, 2.029999971
 125.5999985, 2.019999981
 125.6999969, 1.600000024
 125.8000031, 1.120000005
 125.9000015, 1.120000005
 126, 1.029999971
 126.0999985, 1
 126.1999969, 0.8299999833
 126.3000031, 0.6999999881
 126.4000015, 0.2899999917
 126.5, 0.3000000119
 126.5999985, 0.0700000003
 126.6999969, 0.1199999973
 126.8000031, 0.1199999973
 126.9000015, 0.02999999933
 127, -0.1199999973
 127.0999985, -0.09000000358
 127.1999969, -0.0700000003
 127.3000031, -0.05000000075
 127.4000015, -0.05000000075
 127.5, 0
 127.5999985, 0.05999999866
 127.6999969, 0.2700000107
 127.8000031, 0.2599999905
 127.9000015, 0.2599999905
 128, 0.3300000131
 128.1000061, 0.4099999964
 128.1999969, 0.4199999869
 128.3000031, 0.400000006
 128.3999939, 0.5899999738
 128.5, 0.7699999809
 128.6000061, 0.9900000095
 128.6999969, 1.139999986
 128.8000031, 1.309999943
 128.8999939, 1.529999971
 129, 1.620000005
 129.1000061, 1.710000038
 129.1999969, 2.109999895
 129.3000031, 2.190000057
 129.3999939, 2.309999943
 129.5, 2.440000057
 129.6000061, 2.660000086
 129.6999969, 2.75999999
 129.8000031, 2.890000105
 129.8999939, 3.049999952
 130, 3.200000048
 130.1000061, 3.579999924
 130.1999969, 3.519999981
 130.3000031, 3.130000114
 130.3999939, 2.619999886
 130.5, 2.569999933
 130.6000061, 2.640000105
 130.6999969, 2.380000114
 130.8000031, 1.940000057
 130.8999939, 1.919999957
 131, 1.600000024
 131.1000061, 1.25
 131.1999969, 0.8700000048
 131.3000031, 0.4600000083
 131.3999939, -0.1400000006
 131.5, -0.3600000143
 131.6000061, -0.5699999928
 131.6999969, -0.8199999928
 131.8000031, -0.8399999738
 131.8999939, -0.8000000119
 132, -0.9599999785
 132.1000061, -1.139999986
 132.1999969, -1.279999971
 132.3000031, -1.269999981
 132.3999939, -1.230000019
 132.5, -1.279999971
 132.6000061, -1.480000019
 132.6999969, -1.629999995
 132.8000031, -1.75
 132.8999939, -1.99000001
 133, -2.079999924
 133.1000061, -1.830000043
 133.1999969, -1.929999948
 133.3000031, -1.929999948
 133.3999939, -1.960000038
 133.5, -1.820000052
 133.6000061, -1.75
 133.6999969, -1.809999943
 133.8000031, -1.779999971
 133.8999939, -1.870000005
 134, -1.940000057
 134.1000061, -1.850000024
 134.1999969, -1.730000019
 134.3000031, -1.629999995
 134.3999939, -1.620000005
 134.5, -1.74000001
 134.6000061, -1.789999962
 134.6999969, -2.059999943
 134.8000031, -2.519999981
 134.8999939, -2.720000029
 135, -2.25999999
 135.1000061, -2.329999924
 135.1999969, -2.50999999
 135.3000031, -2.920000076
 135.3999939, -3.410000086
 135.5, -3.450000048
 135.6000061, -3.390000105
 135.6999969, -3.369999886
 135.8000031, -3.480000019
 135.8999939, -3.690000057
 136, -3.930000067
 136.1000061, -4.139999866
 136.1999969, -4.25
 136.3000031, -4.309999943
 136.3999939, -4.25
 136.5, -4.179999828
 136.6000061, -4.210000038
 136.6999969, -4.289999962
 136.8000031, -4.28000021
 136.8999939, -4.460000038
 137, -4.539999962
 137.1000061, -4.420000076
 137.1999969, -4.710000038
 137.3000031, -4.829999924
 137.3999939, -4.570000172
 137.5, -4.400000095
 137.6000061, -4.360000134
 137.6999969, -4.400000095
 137.8000031, -4.090000153
 137.8999939, -4.159999847
 138, -3.940000057
 138.1000061, -3.75999999
 138.1999969, -3.309999943
 138.3000031, -2.910000086
 138.3999939, -2.920000076
 138.5, -2.74000001
 138.6000061, -2.460000038
 138.6999969, -2.190000057
 138.8000031, -1.919999957
 138.8999939, -1.639999986
 139, -1.899999976
 139.1000061, -2.25
 139.1999969, -1.899999976
 139.3000031, -1.25
 139.3999939, -1.029999971
 139.5, -1.309999943
 139.6000061, -1.99000001
 139.6999969, -2.140000105
 139.8000031, -1.950000048
 139.8999939, -2.279999971
 140, -2.210000038
 140.1000061, -2.130000114
 140.1999969, -1.74000001
 140.3000031, -1.820000052
 140.3999939, -2.170000076
 140.5, -2.299999952
 140.6000061, -2.440000057
 140.6999969, -2.289999962
 140.8000031, -2.339999914
 140.8999939, -2.359999895
 141, -2.230000019
 141.1000061, -2.150000095
 141.1999969, -2.230000019
 141.3000031, -2.450000048
 141.3999939, -2.299999952
 141.5, -2.410000086
 141.6000061, -2.549999952
 141.6999969, -2.480000019
 141.8000031, -2.289999962
 141.8999939, -2.24000001
 142, -2.130000114
 142.1000061, -2.019999981
 142.1999969, -1.74000001
 142.3000031, -1.580000043
 142.3999939, -1.529999971
 142.5, -1.50999999
 142.6000061, -1.529999971
 142.6999969, -1.75999999
 142.8000031, -1.720000029
 142.8999939, -1.590000033
 143, -1.460000038
 143.1000061, -1.720000029
 143.1999969, -1.49000001
 143.3000031, -0.9499999881
 143.3999939, -0.5
 143.5, -0.05999999866
 143.6000061, -0.009999999776
 143.6999969, 0.150000006
 143.8000031, 0.3700000048
 143.8999939, 0.009999999776
 144, -0.4300000072
 144.1000061, -0.2399999946
 144.1999969, 0.2300000042
 144.3000031, 0.5
 144.3999939, 0.5600000024
 144.5, 0.4300000072
 144.6000061, 0.4399999976
 144.6999969, 0.4399999976
 144.8000031, 0.6200000048
 144.8999939, 0.6000000238
 145, 0.5799999833
 145.1000061, 0.6499999762
 145.1999969, 0.6999999881
 145.3000031, 0.8000000119
 145.3999939, 0.75
 145.5, 0.6700000167
 145.6000061, 0.6600000262
 145.6999969, 0.6899999976
 145.8000031, 0.6700000167
 145.8999939, 0.4699999988
 146, 0.4099999964
 146.1000061, 0.5799999833
 146.1999969, 1.059999943
 146.3000031, 1.080000043
 146.3999939, 1.129999995
 146.5, 1
 146.6000061, 0.9700000286
 146.6999969, 0.7300000191
 146.8000031, 0.6100000143
 146.8999939, 0.6499999762
 147, 0.6600000262
 147.1000061, 0.7300000191
 147.1999969, 0.5400000215
 147.3000031, 0.6499999762
 147.3999939, 0.7400000095
 147.5, 0.8399999738
 147.6000061, 0.6800000072
 147.6999969, 0.6899999976
 147.8000031, 0.8600000143
 147.8999939, 1.230000019
 148, 1.370000005
 148.1000061, 1.419999957
 148.1999969, 1.429999948
 148.3000031, 1.340000033
 148.3999939, 1.049999952
 148.5, 0.8999999762
 148.6000061, 0.8199999928
 148.6999969, 0.9800000191
 148.8000031, 0.8299999833
 148.8999939, 0.7200000286
 149, 0.8999999762
 149.1000061, 0.9800000191
 149.1999969, 0.7900000215
 149.3000031, 0.6899999976
 149.3999939, 0.3000000119
 149.5, -0.07999999821
 149.6000061, -0.3300000131
 149.6999969, -0.4099999964
 149.8000031, -0.4900000095
 149.8999939, -0.5699999928
 150, -0.7799999714
 150.1000061, -1.049999952
 150.1999969, -1.139999986
 150.3000031, -1.029999971
 150.3999939, -1.279999971
 150.5, -1.309999943
 150.6000061, -1.169999957
 150.6999969, -1.110000014
 150.8000031, -1.080000043
 150.8999939, -1.230000019
 151, -1.370000005
 151.1000061, -1.320000052
 151.1999969, -1.019999981
 151.3000031, -0.8999999762
 151.3999939, -0.6899999976
 151.5, -0.02999999933
 151.6000061, -0.1000000015
 151.6999969, -0.4699999988
 151.8000031, -0.5899999738
 151.8999939, -0.1000000015
 152, -0.1099999994
 152.1000061, -0.1800000072
 152.1999969, 0.150000006
 152.3000031, 0.4499999881
 152.3999939, 0.6899999976
 153, 0.6899999976
 153.1000061, -4.550000191
ENDTABLE
Z_PROFILE_GAIN(2)   1 ! Gain multiplied with calculated value to get elevation
                      ! increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment
SSTART_Z_PROFILE(2) 0 ; m ! Offset subtracted from distance travelled
SSCALE_Z_PROFILE(2) 1 ! Scale factor divided into (distance travelled -
                      ! SSTART_Z_PROFILE)


END
