PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT S_S

DATASET_TITLE Atlas: 3D Highway Exit (Scenic)
CATEGORY Scene Import
TITLE Atlas: 3D Highway Exit (Scenic) <Scene Import>

! Echo: Results\Run_f1a4e329-f1b9-44a2-8750-e6f571f2a8ce\LastRun_echo.par
! This run was made 11:30 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   460 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      497 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            1 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME  0.5001137335 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             37 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       37 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              74 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP        -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 1003.695778 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1784.79808 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL -0.06903392213 ; mm ! CALC -- Y coordinate of TL CG
! M_TL           6042 ; kg ! CALC -- TL mass
! IXX_TL  3254.095897 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  51686.87408 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  50614.83377 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU          1175 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1250 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             4455 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU         2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU        35402.8 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU        34802.6 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU           1626 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

HT_SM            1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM           4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM           1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM          1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         6.8 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       5000 ; mm ! Aerodynamic reference length
X_REF_AERO      -2500 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1)      510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1)         510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1)              80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
! ISPIN(1,1)     14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,2)     14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1)            10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)            10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1)      290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1)      36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)      36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)         544 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CG_AXLE(1)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(2)      530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(2,1)         530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(2)             215 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(2,1)     29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(2,2)     29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(2,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(2,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(2,1)            20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)            20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       5000 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(2)      679 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)        1043 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.3489932886 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(2)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 65.53293862 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 65.53293862 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1)         0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,2)         0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1)         0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,2)         0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1)        0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,2)        0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1)         0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,2)         0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1)         0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,2)         0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1)        0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,2)        0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1) 32766.46931 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1) 32766.46931 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 16383.23466 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 16383.23466 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 38101.28691 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 38101.28691 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1)     1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1)    890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1)    890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1)      890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1)        0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 7.801540313 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 7.801540313 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(2,1)        0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(2,2)        0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(2,1)        0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(2,2)        0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(2) 10922.15644 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(2) 10922.15644 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 5461.078219 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 5461.078219 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 21150.49239 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 21150.49239 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 7608.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(2)     1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(2)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(2)   1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(2)   1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(2)     1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(2)        0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
BETA_COL            2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL               0 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL             0 ; N-m ! [D] Steering column friction torque
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1)         0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1)     5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)        7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)        7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)        2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1)   0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1)    0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1)           0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1)         0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1)        100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)        100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1)  0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                      ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1)    0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1)           0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(2)         310 ; mm ! Dual-tire spacing for axle 2 [I]

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 7 -> built-in Pacejka 5.2; 8 ->
                        ! TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                        ! tire model [I]
OPT_TIRE_COMB(1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1)   30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1)      91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1)    0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)  2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,2,1)   30000 ; N ! Reference vertical force
IT(1,2,1)         4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,2,1)      91 ; kg ! Mass of tire R1i
MU_REF_X(1,2,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,2,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,2,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,2,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(2,1,1)   30000 ; N ! Reference vertical force
IT(2,1,1)         4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(2,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(2,1,1)      91 ; kg ! Mass of tire L2i
MU_REF_X(2,1,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(2,1,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(2,1,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(2,1,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(2,1,2)   30000 ; N ! Reference vertical force
IT(2,1,2)         4.8 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(2,1,2)      0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(2,1,2)      91 ; kg ! Mass of tire L2o
MU_REF_X(2,1,2)   0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(2,1,2)   0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(2,1,2)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(2,1,2)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(2,2,1)   30000 ; N ! Reference vertical force
IT(2,2,1)         4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(2,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(2,2,1)      91 ; kg ! Mass of tire R2i
MU_REF_X(2,2,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(2,2,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(2,2,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(2,2,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(2,2,2)   30000 ; N ! Reference vertical force
IT(2,2,2)         4.8 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(2,2,2)      0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(2,2,2)      91 ; kg ! Mass of tire R2o
MU_REF_X(2,2,2)   0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(2,2,2)   0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(2,2,2)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(2,2,2)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)    2 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)    2 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)    2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)    2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise
R_DRIVE_SC(1)       0 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(2)       1 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)      5 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE       725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG              1.4 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE     1 ! Clutch control mode: 0 -> open-loop, 1 -> closed-loop (based
                      ! on shifting) [I]
OPT_CLUTCH_DELAY    1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE  0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE    0.1 ; s ! Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD    0.1 ; s ! Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL  0.3 ; s ! Time applying the clutch to full pressure during shift
                      ! [I]
T_CL_RE_ENGAGE    0.5 ; s ! Time clutch is fully re-engaged after starting shift [I]
T_GEAR_LAG        0.1 ; s ! Time lag in shifting
! T_TH_RETURN     0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED     0.4 ; s ! Time when throttle has returned to pre-shift level [I]
T_TH_ZERO         0.1 ; s ! Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD  0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL   0.3 ; s ! Time when starting to return throttle [I]
VLOW_CLUTCH         5 ; km/h ! Press the clutch pedal when average of wheel speeds
                      ! is below this speed while deccelerating with brake during
                      ! the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT 0.09 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL       0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE       0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE  -8 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1)           0.15 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)     7.59 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st-gear [I]

ITR(2)           0.15 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     5.06 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd-gear

ITR(3)            0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.92 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.92 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     3.38 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd-gear

ITR(4)            0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.92 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.92 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)     2.25 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th-gear

ITR(5)            0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.92 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.92 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)      1.5 ; - ! 5th-gear ratio of transmission
T_SHIFT_UP(5)      -1 ; - ! [D] Duration of up-shift from 5th-gear
T_SHIFT_DOWN(5)    -1 ; - ! [D] Duration of down-shift to 5th-gear

ITR(6)            0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia
R_EFF_TR_F(6)    0.92 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)    0.92 ; - ! 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)        1 ; - ! 6th-gear ratio of transmission
T_SHIFT_UP(6)      -1 ; - ! [D] Duration of up-shift from 6th-gear
T_SHIFT_DOWN(6)    -1 ; - ! [D] Duration of down-shift to 6th-gear

ITR(7)            0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia
R_EFF_TR_F(7)    0.92 ; - ! 7th-gear forward efficiency of transmission
R_EFF_TR_R(7)    0.92 ; - ! 7th-gear reverse efficiency of transmission
R_GEAR_TR(7)     0.75 ; - ! 7th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             5 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        5 ! VS Command to install reference paths

PATH_ID(1)       1094 ; Path_1
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1) 87.15853327 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(1,1)  1 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(1,1) 2313.747278 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) -756.524693 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 1819.466219 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) 165.6808935 ; deg ! CALC -- Heading at end of segment
DEFINE_XY_TABLES    7 ! No. of XY spline tables (see the SPLINE TABLES section)

PATH_ID(2)       1001 ; Jacksone Rd E
OPT_PATH_START(2)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! Station at the start of this path
! HEADING_START(2) -22.357854 ; deg ! Heading at the start of this path
! X_PATH_START(2) -267.299892 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(2) 1436.245312 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        1 ! Number of segments in this path
SEGMENT_TYPE(2,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(2,1)  2 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(2,1) 633.5886321 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 322.574869 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) 1206.312768 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) -14.18364194 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1002 ; I-94 Exit 172
OPT_PATH_START(3)   0 ! [D] Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)    537 ; m ! Station at the start of this path
! HEADING_START(3) 86.66773221 ; deg ! Heading at the start of this path
! X_PATH_START(3) 28.3117 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(3) 536.8917 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        1 ! Number of segments in this path
SEGMENT_TYPE(3,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(3,1) 1002 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(3,1) 1297.97677 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 85.8039 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 1292.9513 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 65.23963446 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       2001 ; I-94 exit Right onto Jackson: 2001
OPT_PATH_START(4)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)   -508 ; m ! Station at the start of this path
! HEADING_START(4) 94.38026358 ; deg ! Heading at the start of this path
! X_PATH_START(4) -13.6142 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(4) -508.12 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        3 ! Number of segments in this path
SEGMENT_TYPE(4,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(4,1)  4 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(4,1) 1288.735467 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) 81.3969 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 1283.3964 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1) 65.2397078 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(4,2) -6 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(4,2)   87 ; deg ! Central angle of arc
! S_SEGMENT_END(4,2) 1297.846085 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,2) 89.06965338 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,2) 1286.455921 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,2) -21.7602922 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,3)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(4,3)  5 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(4,3) 1547.134295 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,3) 323.3735274 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,3) 1202.396816 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,3) -13.97389126 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       2002 ; I-94 exit Left onto Jackson: 2002
OPT_PATH_START(5)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)   -508 ; m ! Station at the start of this path
! HEADING_START(5) 94.38026358 ; deg ! Heading at the start of this path
! X_PATH_START(5) -13.6142 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(5) -508.12 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        3 ! Number of segments in this path
SEGMENT_TYPE(5,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(5,1)  6 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(5,1) 1288.735467 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) 81.3969 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) 1283.3964 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1) 65.2397078 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(5,2) 13 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(5,2) 94.7 ; deg ! Central angle of arc
! S_SEGMENT_END(5,2) 1310.222215 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,2) 74.05113086 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,2) 1301.052416 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,2) 159.9397078 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,3)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(5,3)  7 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(5,3) 1677.242308 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,3) -265.6766775 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,3) 1439.883327 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,3) 157.6066875 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             3 ! Number of installed road surfaces (read only)
NROAD_DZ            6 ! Number of ROAD_DZ datasets
DEFINE_ROADS        3 ! VS Command to define road surfaces
CURRENT_ROAD_ID  1001 ! ROAD_ID during initialization [I]

ROAD_ID(1)       1094 ; I-94 North, Near Exit 172 (Scenic)
ROAD_PATH_ID(1)  1094 ; PATH_ID for: I-94, Exit 172 (Jackson Ave)
ROAD_SMAX_NEW_ID(1) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)       1 ; ROAD_DZ_ID for: I-94 Near Exit 712, 3D cosmetics

ROAD_ID(2)       1001 ; Jackson Ave, Near I-94 (Scenic)
ROAD_PATH_ID(2)  1001 ; PATH_ID for: Jackson Ave Near I-94
ROAD_SMAX_NEW_ID(2) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(2) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(2)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(2,1)       3 ; ROAD_DZ_ID for: Jackson Boundary

ROAD_ID(3)       1002 ; I-94 Exit 172 to Jackson Ave (Scenic)
ROAD_PATH_ID(3)  1002 ; PATH_ID for: I-94 Exit 172
ROAD_SMAX(3)     1289 ; m ! Boundary: maximum station for this road
ROAD_SMAX_NEW_S(3) 380 ; m ! Approximate station on new road at SMAX transfer
ROAD_SMAX_NEW_ID(3) 1001 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                         ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(3) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(3)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(3,1)       5 ; ROAD_DZ_ID for: I-94 Exit Lane Edges (Scenic)

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             3 ! Number of LTARG datasets that are used in this run

PATH_ID_DM       2002 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM      2002 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTOP      2857.34335 ; m ! Use to set OPT_DIRECTION (if OPT_DIRECTION = 0); stop
                      ! when the vehicle reaches this station (if OPT_STOP = 1)

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
INSTALL_DM_OUTPUTS    ! VS Command to install XYZ outputs DM preview point(s)
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      3 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              4 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_SC_3D           0 ! Path preview for SC: 1 -> account for 3D ground curvature, 0
                      ! -> assume flat level ground [I]
OPT_SC_SKILL        2 ! Speed controller skill: 2 -> high, 1 -> medium, 0 -> low [I]
OPT_SC_ENGINE_BRAKING 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018         0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
BK_PERF_SC          1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC     10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH  24 ; m ! Speed controller: length of path used to calculate
                      ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP          0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3         0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI            0 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW     150 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START 0 ; m ! Speed controller: path preview start (distance in front
                      ! of sprung mass origin) [I]
SPEED_PREVIEW_STEP  4 ; m ! Speed controller: preview interval (resolution) [I]

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT 295.543732 ; m ! GPS altitude when Z = 0
GPS_REF_LAT  42.26972 ; deg ! GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG -83.78449 ; deg ! GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT          53 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 53 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; 1 Driver Preview Point, Set by DM
IUNIT_OBJ(1)        0 ! [D] Attach object to sprung mass of this vehicle unit, or 0
                      ! -> don't attach to a sprung mass [I]
PATH_ID_OBJ(1)      0 ! PATH_ID used to define location with S, L, Hdg; or 0 ->
                      ! define with global X, Y, Yaw [I]
ROAD_ID_OBJ(1)   1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(1)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(1)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(1)    0 ! Does this object have a target shape, even though there are
                      ! no sensors? 1 -> yes, 0 -> no
MsgObj_1            0 ; - ! Output: User-defined Message (code) for object
S_RdO_1   310.0645763 ; m ! Output: Station of object on road path
TypeO_1             0 ; - ! Output: User-defined Type (code) for object
V_Obj_1   47.14040983 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1   20.09822586 ; m ! Output: X coordinate of object 1
Y_Obj_1   1319.891144 ; m ! Output: Y coordinate of object 1
YawO_1              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(2)      2 ; Cars along I-94 North (Left Lane), Object #1
IUNIT_OBJ(2)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(2)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(2)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(2)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(2)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(2)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(2) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(2)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(2)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(2)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(2)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(2)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(2)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(2)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(2)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(2)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_2             0 ; deg ! Output: Heading of object relative to path
LatO_2            1.8 ; m ! Output: Lateral offset, object 2
MsgObj_2            0 ; - ! Output: User-defined Message (code) for object
S_Obj_2   1776.976407 ; m ! Output and possibly ODE SV: Station of object
TypeO_2             0 ; - ! Output: User-defined Type (code) for object
V_Obj_2           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(3)      3 ; Cars along I-94 North (Left Lane), Object #2
IUNIT_OBJ(3)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(3)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(3)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(3)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(3)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(3)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(3) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(3)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(3)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(3)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(3)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(3)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(3)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(3)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(3)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(3)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_3             0 ; deg ! Output: Heading of object relative to path
LatO_3            1.8 ; m ! Output: Lateral offset, object 3
MsgObj_3            0 ; - ! Output: User-defined Message (code) for object
S_Obj_3   1877.300975 ; m ! Output and possibly ODE SV: Station of object
TypeO_3             0 ; - ! Output: User-defined Type (code) for object
V_Obj_3           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(4)      4 ; Cars along I-94 North (Left Lane), Object #3
IUNIT_OBJ(4)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(4)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(4)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(4)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(4)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(4)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(4) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(4)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(4)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(4)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(4)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(4)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(4)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(4)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(4)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(4)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_4             0 ; deg ! Output: Heading of object relative to path
LatO_4            1.8 ; m ! Output: Lateral offset, object 4
MsgObj_4            0 ; - ! Output: User-defined Message (code) for object
S_Obj_4    1947.38556 ; m ! Output and possibly ODE SV: Station of object
TypeO_4             0 ; - ! Output: User-defined Type (code) for object
V_Obj_4           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(5)      5 ; Cars along I-94 North (Left Lane), Object #4
IUNIT_OBJ(5)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(5)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(5)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(5)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(5)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(5)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(5) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(5)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(5)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(5)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(5)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(5)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(5)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(5)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(5)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(5)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_5             0 ; deg ! Output: Heading of object relative to path
LatO_5            1.8 ; m ! Output: Lateral offset, object 5
MsgObj_5            0 ; - ! Output: User-defined Message (code) for object
S_Obj_5   1817.137571 ; m ! Output and possibly ODE SV: Station of object
TypeO_5             0 ; - ! Output: User-defined Type (code) for object
V_Obj_5           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(6)      6 ; Cars along I-94 North (Left Lane), Object #5
IUNIT_OBJ(6)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(6)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(6)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(6)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(6)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(6)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(6) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(6)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(6)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(6)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(6)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(6)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(6)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(6)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(6)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(6)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_6             0 ; deg ! Output: Heading of object relative to path
LatO_6            1.8 ; m ! Output: Lateral offset, object 6
MsgObj_6            0 ; - ! Output: User-defined Message (code) for object
S_Obj_6   1817.137571 ; m ! Output and possibly ODE SV: Station of object
TypeO_6             0 ; - ! Output: User-defined Type (code) for object
V_Obj_6           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(7)      7 ; Cars along I-94 North (Left Lane), Object #6
IUNIT_OBJ(7)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(7)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(7)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(7)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(7)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(7)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(7) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(7)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(7)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(7)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(7)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(7)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(7)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(7)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(7)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(7)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_7             0 ; deg ! Output: Heading of object relative to path
LatO_7            1.8 ; m ! Output: Lateral offset, object 7
MsgObj_7            0 ; - ! Output: User-defined Message (code) for object
S_Obj_7   1696.722915 ; m ! Output and possibly ODE SV: Station of object
TypeO_7             0 ; - ! Output: User-defined Type (code) for object
V_Obj_7           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(8)      8 ; Cars along I-94 North (Left Lane), Object #7
IUNIT_OBJ(8)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(8)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(8)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(8)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(8)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(8)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(8) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(8)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(8)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(8)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(8)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(8)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(8)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(8)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(8)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(8)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_8             0 ; deg ! Output: Heading of object relative to path
LatO_8            1.8 ; m ! Output: Lateral offset, object 8
MsgObj_8            0 ; - ! Output: User-defined Message (code) for object
S_Obj_8   1606.442674 ; m ! Output and possibly ODE SV: Station of object
TypeO_8             0 ; - ! Output: User-defined Type (code) for object
V_Obj_8           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(9)      9 ; Cars along I-94 North (Left Lane), Object #8
IUNIT_OBJ(9)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(9)   1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(9)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(9)    1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(9)      1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(9)     0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(9) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(9)    0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(9)  1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(9)      10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(9)    2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(9)    200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(9)   1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(9)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(9)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(9)    0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_9             0 ; deg ! Output: Heading of object relative to path
LatO_9            1.8 ; m ! Output: Lateral offset, object 9
MsgObj_9            0 ; - ! Output: User-defined Message (code) for object
S_Obj_9   1526.076148 ; m ! Output and possibly ODE SV: Station of object
TypeO_9             0 ; - ! Output: User-defined Type (code) for object
V_Obj_9           126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(10)    10 ; Cars along I-94 North (Left Lane), Object #9
IUNIT_OBJ(10)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(10)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(10)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(10)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(10)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(10)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(10) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(10)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(10) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(10)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(10)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(10)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(10)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(10)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(10)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(10)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_10            0 ; deg ! Output: Heading of object relative to path
LatO_10           1.8 ; m ! Output: Lateral offset, object 10
MsgObj_10           0 ; - ! Output: User-defined Message (code) for object
S_Obj_10  1445.928094 ; m ! Output and possibly ODE SV: Station of object
TypeO_10            0 ; - ! Output: User-defined Type (code) for object
V_Obj_10          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(11)    11 ; Cars along I-94 North (Left Lane), Object #10
IUNIT_OBJ(11)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(11)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(11)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(11)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(11)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(11)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(11) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(11)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(11) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(11)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(11)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(11)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(11)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(11)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(11)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(11)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_11            0 ; deg ! Output: Heading of object relative to path
LatO_11           1.8 ; m ! Output: Lateral offset, object 11
MsgObj_11           0 ; - ! Output: User-defined Message (code) for object
S_Obj_11   1365.73952 ; m ! Output and possibly ODE SV: Station of object
TypeO_11            0 ; - ! Output: User-defined Type (code) for object
V_Obj_11          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(12)    12 ; Cars along I-94 North (Right Lane), Object #1
IUNIT_OBJ(12)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(12)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(12)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(12)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(12)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(12)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(12) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(12)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(12) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(12)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(12)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(12)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(12)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(12)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(12)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(12)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_12            0 ; deg ! Output: Heading of object relative to path
LatO_12            -2 ; m ! Output: Lateral offset, object 12
MsgObj_12           0 ; - ! Output: User-defined Message (code) for object
S_Obj_12  1858.506413 ; m ! Output and possibly ODE SV: Station of object
TypeO_12            0 ; - ! Output: User-defined Type (code) for object
V_Obj_12        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(13)    13 ; Cars along I-94 North (Right Lane), Object #2
IUNIT_OBJ(13)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(13)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(13)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(13)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(13)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(13)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(13) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(13)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(13) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(13)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(13)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(13)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(13)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(13)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(13)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(13)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_13            0 ; deg ! Output: Heading of object relative to path
LatO_13            -2 ; m ! Output: Lateral offset, object 13
MsgObj_13           0 ; - ! Output: User-defined Message (code) for object
S_Obj_13  1768.826748 ; m ! Output and possibly ODE SV: Station of object
TypeO_13            0 ; - ! Output: User-defined Type (code) for object
V_Obj_13        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(14)    14 ; Cars along I-94 North (Right Lane), Object #3
IUNIT_OBJ(14)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(14)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(14)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(14)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(14)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(14)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(14) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(14)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(14) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(14)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(14)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(14)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(14)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(14)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(14)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(14)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_14            0 ; deg ! Output: Heading of object relative to path
LatO_14            -2 ; m ! Output: Lateral offset, object 14
MsgObj_14           0 ; - ! Output: User-defined Message (code) for object
S_Obj_14  1619.347459 ; m ! Output and possibly ODE SV: Station of object
TypeO_14            0 ; - ! Output: User-defined Type (code) for object
V_Obj_14        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(15)    15 ; Cars along I-94 North (Right Lane), Object #4
IUNIT_OBJ(15)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(15)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(15)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(15)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(15)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(15)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(15) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(15)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(15) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(15)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(15)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(15)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(15)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(15)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(15)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(15)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_15            0 ; deg ! Output: Heading of object relative to path
LatO_15            -2 ; m ! Output: Lateral offset, object 15
MsgObj_15           0 ; - ! Output: User-defined Message (code) for object
S_Obj_15  1539.755129 ; m ! Output and possibly ODE SV: Station of object
TypeO_15            0 ; - ! Output: User-defined Type (code) for object
V_Obj_15        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(16)    16 ; Cars along I-94 North (Right Lane), Object #5
IUNIT_OBJ(16)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(16)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(16)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(16)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(16)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(16)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(16) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(16)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(16) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(16)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(16)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(16)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(16)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(16)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(16)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(16)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_16            0 ; deg ! Output: Heading of object relative to path
LatO_16            -2 ; m ! Output: Lateral offset, object 16
MsgObj_16           0 ; - ! Output: User-defined Message (code) for object
S_Obj_16  1459.944596 ; m ! Output and possibly ODE SV: Station of object
TypeO_16            0 ; - ! Output: User-defined Type (code) for object
V_Obj_16        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(17)    17 ; Cars along I-94 North (Right Lane), Object #6
IUNIT_OBJ(17)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(17)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(17)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(17)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(17)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(17)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(17) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(17)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(17) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(17)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(17)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(17)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(17)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(17)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(17)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(17)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_17            0 ; deg ! Output: Heading of object relative to path
LatO_17            -2 ; m ! Output: Lateral offset, object 17
MsgObj_17           0 ; - ! Output: User-defined Message (code) for object
S_Obj_17  1410.131584 ; m ! Output and possibly ODE SV: Station of object
TypeO_17            0 ; - ! Output: User-defined Type (code) for object
V_Obj_17        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(18)    18 ; Cars along I-94 North (Right Lane), Object #7
IUNIT_OBJ(18)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(18)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(18)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(18)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(18)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(18)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(18) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(18)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(18) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(18)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(18)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(18)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(18)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(18)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(18)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(18)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_18            0 ; deg ! Output: Heading of object relative to path
LatO_18            -2 ; m ! Output: Lateral offset, object 18
MsgObj_18           0 ; - ! Output: User-defined Message (code) for object
S_Obj_18  1360.261159 ; m ! Output and possibly ODE SV: Station of object
TypeO_18            0 ; - ! Output: User-defined Type (code) for object
V_Obj_18        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(19)    19 ; Cars along I-94 North (Right Lane), Object #8
IUNIT_OBJ(19)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(19)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(19)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(19)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(19)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(19)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(19) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(19)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(19) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(19)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(19)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(19)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(19)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(19)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(19)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(19)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_19            0 ; deg ! Output: Heading of object relative to path
LatO_19            -2 ; m ! Output: Lateral offset, object 19
MsgObj_19           0 ; - ! Output: User-defined Message (code) for object
S_Obj_19  1280.420177 ; m ! Output and possibly ODE SV: Station of object
TypeO_19            0 ; - ! Output: User-defined Type (code) for object
V_Obj_19        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(20)    20 ; Cars along I-94 North (Right Lane), Object #9
IUNIT_OBJ(20)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(20)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(20)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(20)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(20)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(20)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(20) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(20)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(20) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(20)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(20)   2000 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(20)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(20)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(20)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(20)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(20)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_20            0 ; deg ! Output: Heading of object relative to path
LatO_20            -2 ; m ! Output: Lateral offset, object 20
MsgObj_20           0 ; - ! Output: User-defined Message (code) for object
S_Obj_20   1240.47532 ; m ! Output and possibly ODE SV: Station of object
TypeO_20            0 ; - ! Output: User-defined Type (code) for object
V_Obj_20        118.8 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(21)    21 ; Cars along I-94 South (Left Lane), Object #1
IUNIT_OBJ(21)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(21)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(21)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(21)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(21)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(21)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(21) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(21)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(21) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(21)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(21)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(21)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(21)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(21)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(21)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(21)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_21          180 ; deg ! Output: Heading of object relative to path
LatO_21            13 ; m ! Output: Lateral offset, object 21
MsgObj_21           0 ; - ! Output: User-defined Message (code) for object
S_Obj_21  197.2755893 ; m ! Output and possibly ODE SV: Station of object
TypeO_21            0 ; - ! Output: User-defined Type (code) for object
V_Obj_21          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(22)    22 ; Cars along I-94 South (Left Lane), Object #2
IUNIT_OBJ(22)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(22)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(22)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(22)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(22)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(22)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(22) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(22)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(22) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(22)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(22)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(22)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(22)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(22)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(22)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(22)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_22          180 ; deg ! Output: Heading of object relative to path
LatO_22            13 ; m ! Output: Lateral offset, object 22
MsgObj_22           0 ; - ! Output: User-defined Message (code) for object
S_Obj_22  1561.950496 ; m ! Output and possibly ODE SV: Station of object
TypeO_22            0 ; - ! Output: User-defined Type (code) for object
V_Obj_22          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(23)    23 ; Cars along I-94 South (Left Lane), Object #3
IUNIT_OBJ(23)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(23)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(23)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(23)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(23)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(23)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(23) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(23)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(23) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(23)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(23)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(23)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(23)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(23)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(23)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(23)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_23          180 ; deg ! Output: Heading of object relative to path
LatO_23            13 ; m ! Output: Lateral offset, object 23
MsgObj_23           0 ; - ! Output: User-defined Message (code) for object
S_Obj_23  1462.130949 ; m ! Output and possibly ODE SV: Station of object
TypeO_23            0 ; - ! Output: User-defined Type (code) for object
V_Obj_23          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(24)    24 ; Cars along I-94 South (Left Lane), Object #4
IUNIT_OBJ(24)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(24)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(24)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(24)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(24)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(24)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(24) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(24)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(24) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(24)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(24)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(24)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(24)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(24)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(24)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(24)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_24          180 ; deg ! Output: Heading of object relative to path
LatO_24            13 ; m ! Output: Lateral offset, object 24
MsgObj_24           0 ; - ! Output: User-defined Message (code) for object
S_Obj_24  1412.041898 ; m ! Output and possibly ODE SV: Station of object
TypeO_24            0 ; - ! Output: User-defined Type (code) for object
V_Obj_24          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(25)    25 ; Cars along I-94 South (Left Lane), Object #5
IUNIT_OBJ(25)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(25)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(25)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(25)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(25)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(25)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(25) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(25)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(25) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(25)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(25)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(25)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(25)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(25)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(25)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(25)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_25          180 ; deg ! Output: Heading of object relative to path
LatO_25            13 ; m ! Output: Lateral offset, object 25
MsgObj_25           0 ; - ! Output: User-defined Message (code) for object
S_Obj_25  1210.178078 ; m ! Output and possibly ODE SV: Station of object
TypeO_25            0 ; - ! Output: User-defined Type (code) for object
V_Obj_25          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(26)    26 ; Cars along I-94 South (Left Lane), Object #6
IUNIT_OBJ(26)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(26)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(26)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(26)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(26)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(26)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(26) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(26)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(26) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(26)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(26)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(26)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(26)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(26)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(26)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(26)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_26          180 ; deg ! Output: Heading of object relative to path
LatO_26            13 ; m ! Output: Lateral offset, object 26
MsgObj_26           0 ; - ! Output: User-defined Message (code) for object
S_Obj_26  1110.071166 ; m ! Output and possibly ODE SV: Station of object
TypeO_26            0 ; - ! Output: User-defined Type (code) for object
V_Obj_26          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(27)    27 ; Cars along I-94 South (Left Lane), Object #7
IUNIT_OBJ(27)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(27)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(27)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(27)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(27)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(27)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(27) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(27)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(27) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(27)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(27)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(27)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(27)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(27)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(27)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(27)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_27          180 ; deg ! Output: Heading of object relative to path
LatO_27            13 ; m ! Output: Lateral offset, object 27
MsgObj_27           0 ; - ! Output: User-defined Message (code) for object
S_Obj_27  1060.274974 ; m ! Output and possibly ODE SV: Station of object
TypeO_27            0 ; - ! Output: User-defined Type (code) for object
V_Obj_27          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(28)    28 ; Cars along I-94 South (Left Lane), Object #8
IUNIT_OBJ(28)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(28)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(28)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(28)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(28)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(28)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(28) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(28)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(28) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(28)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(28)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(28)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(28)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(28)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(28)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(28)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_28          180 ; deg ! Output: Heading of object relative to path
LatO_28            13 ; m ! Output: Lateral offset, object 28
MsgObj_28           0 ; - ! Output: User-defined Message (code) for object
S_Obj_28  989.9314558 ; m ! Output and possibly ODE SV: Station of object
TypeO_28            0 ; - ! Output: User-defined Type (code) for object
V_Obj_28          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(29)    29 ; Cars along I-94 South (Left Lane), Object #9
IUNIT_OBJ(29)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(29)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(29)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(29)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(29)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(29)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(29) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(29)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(29) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(29)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(29)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(29)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(29)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(29)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(29)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(29)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_29          180 ; deg ! Output: Heading of object relative to path
LatO_29            13 ; m ! Output: Lateral offset, object 29
MsgObj_29           0 ; - ! Output: User-defined Message (code) for object
S_Obj_29  859.6189552 ; m ! Output and possibly ODE SV: Station of object
TypeO_29            0 ; - ! Output: User-defined Type (code) for object
V_Obj_29          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(30)    30 ; Cars along I-94 South (Left Lane), Object #10
IUNIT_OBJ(30)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(30)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(30)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(30)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(30)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(30)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(30) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(30)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(30) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(30)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(30)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(30)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(30)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(30)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(30)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(30)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_30          180 ; deg ! Output: Heading of object relative to path
LatO_30            13 ; m ! Output: Lateral offset, object 30
MsgObj_30           0 ; - ! Output: User-defined Message (code) for object
S_Obj_30  819.6192974 ; m ! Output and possibly ODE SV: Station of object
TypeO_30            0 ; - ! Output: User-defined Type (code) for object
V_Obj_30          126 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(31)    31 ; Cars along I-94 South (Right Lane), Object #1
IUNIT_OBJ(31)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(31)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(31)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(31)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(31)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(31)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(31) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(31)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(31) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(31)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(31)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(31)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(31)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(31)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(31)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(31)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_31          180 ; deg ! Output: Heading of object relative to path
LatO_31            17 ; m ! Output: Lateral offset, object 31
MsgObj_31           0 ; - ! Output: User-defined Message (code) for object
S_Obj_31  1493.832479 ; m ! Output and possibly ODE SV: Station of object
TypeO_31            0 ; - ! Output: User-defined Type (code) for object
V_Obj_31        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(32)    32 ; Cars along I-94 South (Right Lane), Object #2
IUNIT_OBJ(32)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(32)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(32)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(32)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(32)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(32)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(32) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(32)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(32) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(32)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(32)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(32)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(32)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(32)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(32)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(32)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_32          180 ; deg ! Output: Heading of object relative to path
LatO_32            17 ; m ! Output: Lateral offset, object 32
MsgObj_32           0 ; - ! Output: User-defined Message (code) for object
S_Obj_32  1464.113819 ; m ! Output and possibly ODE SV: Station of object
TypeO_32            0 ; - ! Output: User-defined Type (code) for object
V_Obj_32        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(33)    33 ; Cars along I-94 South (Right Lane), Object #3
IUNIT_OBJ(33)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(33)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(33)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(33)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(33)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(33)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(33) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(33)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(33) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(33)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(33)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(33)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(33)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(33)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(33)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(33)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_33          180 ; deg ! Output: Heading of object relative to path
LatO_33            17 ; m ! Output: Lateral offset, object 33
MsgObj_33           0 ; - ! Output: User-defined Message (code) for object
S_Obj_33  1423.643097 ; m ! Output and possibly ODE SV: Station of object
TypeO_33            0 ; - ! Output: User-defined Type (code) for object
V_Obj_33        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(34)    34 ; Cars along I-94 South (Right Lane), Object #4
IUNIT_OBJ(34)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(34)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(34)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(34)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(34)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(34)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(34) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(34)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(34) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(34)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(34)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(34)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(34)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(34)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(34)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(34)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_34          180 ; deg ! Output: Heading of object relative to path
LatO_34            17 ; m ! Output: Lateral offset, object 34
MsgObj_34           0 ; - ! Output: User-defined Message (code) for object
S_Obj_34  1372.563893 ; m ! Output and possibly ODE SV: Station of object
TypeO_34            0 ; - ! Output: User-defined Type (code) for object
V_Obj_34        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(35)    35 ; Cars along I-94 South (Right Lane), Object #5
IUNIT_OBJ(35)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(35)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(35)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(35)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(35)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(35)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(35) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(35)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(35) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(35)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(35)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(35)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(35)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(35)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(35)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(35)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_35          180 ; deg ! Output: Heading of object relative to path
LatO_35            17 ; m ! Output: Lateral offset, object 35
MsgObj_35           0 ; - ! Output: User-defined Message (code) for object
S_Obj_35  1290.531406 ; m ! Output and possibly ODE SV: Station of object
TypeO_35            0 ; - ! Output: User-defined Type (code) for object
V_Obj_35        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(36)    36 ; Cars along I-94 South (Right Lane), Object #6
IUNIT_OBJ(36)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(36)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(36)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(36)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(36)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(36)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(36) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(36)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(36) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(36)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(36)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(36)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(36)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(36)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(36)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(36)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_36          180 ; deg ! Output: Heading of object relative to path
LatO_36            17 ; m ! Output: Lateral offset, object 36
MsgObj_36           0 ; - ! Output: User-defined Message (code) for object
S_Obj_36  1290.531406 ; m ! Output and possibly ODE SV: Station of object
TypeO_36            0 ; - ! Output: User-defined Type (code) for object
V_Obj_36        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(37)    37 ; Cars along I-94 South (Right Lane), Object #7
IUNIT_OBJ(37)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(37)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(37)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(37)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(37)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(37)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(37) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(37)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(37) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(37)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(37)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(37)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(37)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(37)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(37)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(37)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_37          180 ; deg ! Output: Heading of object relative to path
LatO_37            17 ; m ! Output: Lateral offset, object 37
MsgObj_37           0 ; - ! Output: User-defined Message (code) for object
S_Obj_37  1218.803271 ; m ! Output and possibly ODE SV: Station of object
TypeO_37            0 ; - ! Output: User-defined Type (code) for object
V_Obj_37        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(38)    38 ; Cars along I-94 South (Right Lane), Object #8
IUNIT_OBJ(38)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(38)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(38)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(38)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(38)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(38)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(38) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(38)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(38) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(38)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(38)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(38)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(38)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(38)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(38)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(38)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_38          180 ; deg ! Output: Heading of object relative to path
LatO_38            17 ; m ! Output: Lateral offset, object 38
MsgObj_38           0 ; - ! Output: User-defined Message (code) for object
S_Obj_38   1058.31896 ; m ! Output and possibly ODE SV: Station of object
TypeO_38            0 ; - ! Output: User-defined Type (code) for object
V_Obj_38        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(39)    39 ; Cars along I-94 South (Right Lane), Object #9
IUNIT_OBJ(39)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(39)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(39)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(39)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(39)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(39)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(39) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(39)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(39) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(39)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(39)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(39)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(39)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(39)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(39)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(39)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_39          180 ; deg ! Output: Heading of object relative to path
LatO_39            17 ; m ! Output: Lateral offset, object 39
MsgObj_39           0 ; - ! Output: User-defined Message (code) for object
S_Obj_39  997.9087404 ; m ! Output and possibly ODE SV: Station of object
TypeO_39            0 ; - ! Output: User-defined Type (code) for object
V_Obj_39        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(40)    40 ; Cars along I-94 South (Right Lane), Object #10
IUNIT_OBJ(40)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(40)  1094 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(40)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(40)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(40)    -1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(40)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(40) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(40)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(40) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(40)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(40)   1600 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(40)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(40)  1094 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(40)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(40)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(40)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_40          180 ; deg ! Output: Heading of object relative to path
LatO_40            17 ; m ! Output: Lateral offset, object 40
MsgObj_40           0 ; - ! Output: User-defined Message (code) for object
S_Obj_40  737.4248205 ; m ! Output and possibly ODE SV: Station of object
TypeO_40            0 ; - ! Output: User-defined Type (code) for object
V_Obj_40        115.2 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(41)    41 ; Cars Turning Right onto Jackson
IUNIT_OBJ(41)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(41)  2001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(41) 2001 ! LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(41)   2 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(41)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(41)    2 ! SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(41) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(41)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(41) 0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(41)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(41)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(41)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(41)   1 ! Is there a target shape? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(41)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
LENGTH_OBJ(41)    4.8 ; m ! Length of rectangular or segment object
L_WB_OBJ(41)        3 ; m ! Wheelbase used for offtracking
LX_FRONT_OBJ(41)  0.7 ; m ! Distance to front of rectangle
WIDTH_OBJ(41)     2.5 ; m ! Width of rectangular object
HeadO_41 -0.3090534684 ; deg ! Output: Heading of object relative to path
LatO_41            -2 ; m ! Output: Lateral offset, object 41
MsgObj_41           0 ; - ! Output: User-defined Message (code) for object
S_Obj_41  1478.986086 ; m ! Output and possibly ODE SV: Station of object
S_RdO_41  567.5162026 ; m ! Output: Station of object on road path
TypeO_41            0 ; - ! Output: User-defined Type (code) for object
V_Obj_41   89.9952939 ; km/h ! Output and possibly ODE SV: Speed of object
YawO_41  -19.73257461 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(42)    42 ; Cars Turning Left onto Jackson, Object #1
IUNIT_OBJ(42)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(42)  2002 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(42) 2002 ! LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(42)   2 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(42)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(42)    3 ! SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(42) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(42)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(42) 0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(42)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(42)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(42)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(42)   1 ! Is there a target shape? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(42)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
LENGTH_OBJ(42)   4.75 ; m ! Length of rectangular or segment object
L_WB_OBJ(42)      3.2 ; m ! Wheelbase used for offtracking
LX_FRONT_OBJ(42)  0.5 ; m ! Distance to front of rectangle
WIDTH_OBJ(42)     2.2 ; m ! Width of rectangular object
HeadO_42 0.2837980005 ; deg ! Output: Heading of object relative to path
LatO_42             2 ; m ! Output: Lateral offset, object 42
MsgObj_42           0 ; - ! Output: User-defined Message (code) for object
S_Obj_42   1327.83927 ; m ! Output and possibly ODE SV: Station of object
S_RdO_42  349.6058385 ; m ! Output: Station of object on road path
TypeO_42            0 ; - ! Output: User-defined Type (code) for object
V_Obj_42   35.8554432 ; km/h ! Output and possibly ODE SV: Speed of object
YawO_42   160.1851253 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(43)    43 ; Cars Turning Left onto Jackson, Object #2
IUNIT_OBJ(43)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(43)  2002 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(43) 2002 ! LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(43)   2 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(43)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(43)    3 ! SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(43) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(43)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(43) 0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(43)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(43)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(43)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(43)   1 ! Is there a target shape? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(43)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
LENGTH_OBJ(43)   4.75 ; m ! Length of rectangular or segment object
L_WB_OBJ(43)        3 ; m ! Wheelbase used for offtracking
LX_FRONT_OBJ(43) 0.75 ; m ! Distance to front of rectangle
WIDTH_OBJ(43)       2 ; m ! Width of rectangular object
HeadO_43 0.00402892935 ; deg ! Output: Heading of object relative to path
LatO_43             2 ; m ! Output: Lateral offset, object 43
MsgObj_43           0 ; - ! Output: User-defined Message (code) for object
S_Obj_43  1409.574711 ; m ! Output and possibly ODE SV: Station of object
S_RdO_43  267.7871331 ; m ! Output: Station of object on road path
TypeO_43            0 ; - ! Output: User-defined Type (code) for object
V_Obj_43  73.00094031 ; km/h ! Output and possibly ODE SV: Speed of object
YawO_43   157.6569544 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(44)    44 ; Cars along Jackson East (Left Lane), Object #1
IUNIT_OBJ(44)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(44)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(44)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(44)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(44)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(44)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(44) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(44)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(44) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(44)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(44)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(44)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(44)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(44)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(44)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(44)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_44            0 ; deg ! Output: Heading of object relative to path
LatO_44         -1.85 ; m ! Output: Lateral offset, object 44
MsgObj_44           0 ; - ! Output: User-defined Message (code) for object
S_Obj_44  356.8469647 ; m ! Output and possibly ODE SV: Station of object
TypeO_44            0 ; - ! Output: User-defined Type (code) for object
V_Obj_44         57.6 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(45)    45 ; Cars along Jackson East (Left Lane), Object #2
IUNIT_OBJ(45)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(45)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(45)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(45)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(45)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(45)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(45) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(45)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(45) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(45)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(45)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(45)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(45)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(45)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(45)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(45)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_45            0 ; deg ! Output: Heading of object relative to path
LatO_45         -1.85 ; m ! Output: Lateral offset, object 45
MsgObj_45           0 ; - ! Output: User-defined Message (code) for object
S_Obj_45  336.8427798 ; m ! Output and possibly ODE SV: Station of object
TypeO_45            0 ; - ! Output: User-defined Type (code) for object
V_Obj_45         57.6 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(46)    46 ; Cars along Jackson East (Left Lane), Object #3
IUNIT_OBJ(46)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(46)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(46)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(46)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(46)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(46)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(46) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(46)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(46) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(46)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(46)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(46)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(46)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(46)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(46)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(46)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_46            0 ; deg ! Output: Heading of object relative to path
LatO_46         -1.85 ; m ! Output: Lateral offset, object 46
MsgObj_46           0 ; - ! Output: User-defined Message (code) for object
S_Obj_46  316.8388878 ; m ! Output and possibly ODE SV: Station of object
TypeO_46            0 ; - ! Output: User-defined Type (code) for object
V_Obj_46         57.6 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(47)    47 ; Cars along Jackson East (Left Lane), Object #4
IUNIT_OBJ(47)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(47)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(47)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(47)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(47)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(47)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(47) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(47)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(47) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(47)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(47)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(47)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(47)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(47)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(47)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(47)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_47            0 ; deg ! Output: Heading of object relative to path
LatO_47         -1.85 ; m ! Output: Lateral offset, object 47
MsgObj_47           0 ; - ! Output: User-defined Message (code) for object
S_Obj_47  296.8388355 ; m ! Output and possibly ODE SV: Station of object
TypeO_47            0 ; - ! Output: User-defined Type (code) for object
V_Obj_47         57.6 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(48)    48 ; Cars along Jackson East (Left Lane), Object #5
IUNIT_OBJ(48)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(48)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(48)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(48)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(48)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(48)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(48) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(48)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(48) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(48)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(48)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(48)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(48)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(48)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(48)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(48)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_48            0 ; deg ! Output: Heading of object relative to path
LatO_48         -1.85 ; m ! Output: Lateral offset, object 48
MsgObj_48           0 ; - ! Output: User-defined Message (code) for object
S_Obj_48  271.8388355 ; m ! Output and possibly ODE SV: Station of object
TypeO_48            0 ; - ! Output: User-defined Type (code) for object
V_Obj_48         57.6 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(49)    49 ; Cars along Jackson East (Right Lane), Object #1
IUNIT_OBJ(49)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(49)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(49)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(49)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(49)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(49)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(49) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(49)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(49) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(49)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(49)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(49)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(49)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(49)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(49)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(49)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_49            0 ; deg ! Output: Heading of object relative to path
LatO_49         -5.55 ; m ! Output: Lateral offset, object 49
MsgObj_49           0 ; - ! Output: User-defined Message (code) for object
S_Obj_49  334.5510368 ; m ! Output and possibly ODE SV: Station of object
TypeO_49            0 ; - ! Output: User-defined Type (code) for object
V_Obj_49           54 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(50)    50 ; Cars along Jackson East (Right Lane), Object #2
IUNIT_OBJ(50)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(50)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(50)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(50)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(50)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(50)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(50) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(50)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(50) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(50)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(50)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(50)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(50)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(50)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(50)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(50)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_50            0 ; deg ! Output: Heading of object relative to path
LatO_50         -5.55 ; m ! Output: Lateral offset, object 50
MsgObj_50           0 ; - ! Output: User-defined Message (code) for object
S_Obj_50   304.531429 ; m ! Output and possibly ODE SV: Station of object
TypeO_50            0 ; - ! Output: User-defined Type (code) for object
V_Obj_50           54 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(51)    51 ; Cars along Jackson East (Right Lane), Object #3
IUNIT_OBJ(51)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(51)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(51)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(51)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(51)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(51)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(51) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(51)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(51) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(51)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(51)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(51)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(51)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(51)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(51)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(51)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_51            0 ; deg ! Output: Heading of object relative to path
LatO_51         -5.55 ; m ! Output: Lateral offset, object 51
MsgObj_51           0 ; - ! Output: User-defined Message (code) for object
S_Obj_51  284.5194766 ; m ! Output and possibly ODE SV: Station of object
TypeO_51            0 ; - ! Output: User-defined Type (code) for object
V_Obj_51           54 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(52)    52 ; Cars along Jackson East (Right Lane), Object #4
IUNIT_OBJ(52)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(52)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(52)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(52)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(52)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(52)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(52) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(52)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(52) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(52)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(52)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(52)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(52)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(52)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(52)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(52)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_52            0 ; deg ! Output: Heading of object relative to path
LatO_52         -5.55 ; m ! Output: Lateral offset, object 52
MsgObj_52           0 ; - ! Output: User-defined Message (code) for object
S_Obj_52  259.5165922 ; m ! Output and possibly ODE SV: Station of object
TypeO_52            0 ; - ! Output: User-defined Type (code) for object
V_Obj_52           54 ; km/h ! Output and possibly ODE SV: Speed of object

OBJECT_NAME(53)    53 ; Cars along Jackson East (Right Lane), Object #5
IUNIT_OBJ(53)       0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(53)  1001 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(53)    0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(53)   1 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_DIR_OBJ(53)     1 ! Direction on path: 1 -> increasing S, -1 -> decreasing S
SPEED_ID_OBJ(53)    0 ! [D] SPEED_TARGET_ID for SPEED_TARGET dataset, or 0 [I]
AX_BRK_OBJ_ON(53) 0.05 ; g ! [D] Braking deceleration needed to show brake lights
OPT_ACCEL_OBJ(53)   0 ! Use acceleration in ODEs? 0 -> no, 1 -> ODE for V
OPT_RECYCLE_OBJ(53) 1 ! Can this object be recycled? 1 -> yes, 0 -> no
S_HIDE_OBJ(53)     10 ; m ! Distance for which an object is hidden
S_LEAD_OBJ(53)    550 ; m ! Maximum station before recycling object
S_TRAIL_OBJ(53)   200 ; m ! Minimum station before recycling object
ROAD_ID_OBJ(53)  1001 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(53)  1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(53)   1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(53)   0 ! Is there a target shape? 1 -> yes, 0 -> no
HeadO_53            0 ; deg ! Output: Heading of object relative to path
LatO_53         -5.55 ; m ! Output: Lateral offset, object 53
MsgObj_53           0 ; - ! Output: User-defined Message (code) for object
S_Obj_53  229.5165922 ; m ! Output and possibly ODE SV: Station of object
TypeO_53            0 ; - ! Output: User-defined Type (code) for object
V_Obj_53           54 ; km/h ! Output and possibly ODE SV: Speed of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 900
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, left side
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, right side
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, left side
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, right side
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, left side
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, right side
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index IAXLE is used
! to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 1
C_LAT_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 2
C_LAT_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 1
C_LONG_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 2
C_LONG_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 135.08
 0.1, 135.08
 0.2, 108.98
 0.3, 107.22
 0.4, 107.19
 0.5, 107.32
 0.6, 107.87
 0.7, 108.43
 0.8, 108.99
 0.9, 109.55
 1, 109.55
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 328.98
 0.1, 328.98
 0.2, 297.51
 0.3, 270.94
 0.4, 245.64
 0.5, 239.65
 0.6, 280.65
 0.7, 321.66
 0.8, 362.66
 0.9, 403.66
 1, 403.66
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 512.29
 0.1, 512.29
 0.2, 443.86
 0.3, 411.55
 0.4, 411.55
 0.5, 428.66
 0.6, 471.3
 0.7, 513.94
 0.8, 556.58
 0.9, 599.22
 1, 599.22
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 657.15
 0.2, 657.15
 0.3, 617.12
 0.4, 617.04
 0.5, 623.12
 0.6, 682.18
 0.7, 741.24
 0.8, 800.3
 0.9, 859.36
 1, 859.36
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 921.2
 0.2, 921.2
 0.3, 914.58
 0.4, 914.76
 0.5, 915.55
 0.6, 957.02
 0.7, 1079
 0.8, 1200.9
 0.9, 1322.8
 1, 1322.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 2034.8
 0.8, 2034.8
 0.9, 2034.8
 1, 2034.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1) 15 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, left side
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(1,2) 15 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, right side
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,1) 30 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, left side
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,2) 30 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, right side
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 250 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 250 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 700 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 700 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 250 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 250 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 700 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 700 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 1.26
 -15, 1.17
 -10, 0.97
 -5, 0.82
 0, 0.69
 5, 0.82
 10, 0.97
 15, 1.17
 20, 1.26
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, left, inner
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, right, inner
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, inner
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, outer
FZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, inner
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, outer
FZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.04 ! Coefficient: pitman arm angle per unit steering gear
                             ! input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 8 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IAXLE, ISIDE,
! and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 1, left, inner
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 1, right, inner
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, left, inner
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, left, outer
KGAMMA_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, right, inner
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, right, outer
KGAMMA_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.75s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)      2001  ! Exit, Right Lane: LTARG ID 2001

! 1D table: col 1 = station (m), col 2 = lateral offset (m)
LTARG_TABLE(2) LINEAR ! linear interpolation and extrapolation
 0, 0
 1000, 0
 1210, -2
 1500, -2
ENDTABLE
LTARG_GAIN(2)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset
SSTART_LTARG(2)     0 ; m ! Offset subtracted from station
SSCALE_LTARG(2)     1 ! Scale factor divided into (station - SSTART_LTARG)

LTARG_ID(3)      2002  ! Exit, Left Lane: LTARG ID 2002

! 1D table: col 1 = station (m), col 2 = lateral offset (m)
LTARG_TABLE(3) LINEAR ! linear interpolation and extrapolation
 0, 0
 1000, 0
 1210, 2
 1500, 2
ENDTABLE
LTARG_GAIN(3)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset
SSTART_LTARG(3)     0 ; m ! Offset subtracted from station
SSCALE_LTARG(3)     1 ! Scale factor divided into (station - SSTART_LTARG)

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 0 ; mm ! Constant tire contact length, axle 1, left,
                              ! inner
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 0 ; mm ! Constant tire contact length, axle 1, right,
                              ! inner
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 0 ; mm ! Constant tire contact length, axle 2, left,
                              ! inner
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,2) 0 ; mm ! Constant tire contact length, axle 2, left,
                              ! outer
L_CONTACT_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 0 ; mm ! Constant tire contact length, axle 2, right,
                              ! inner
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,2) 0 ; mm ! Constant tire contact length, axle 2, right,
                              ! outer
L_CONTACT_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 0 ; mm ! Constant tire contact width, axle 1, left,
                              ! inner
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 0 ; mm ! Constant tire contact width, axle 1, right,
                              ! inner
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 0 ; mm ! Constant tire contact width, axle 2, left,
                              ! inner
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,2) 0 ; mm ! Constant tire contact width, axle 2, left,
                              ! outer
L_CONTACT_Y_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 0 ; mm ! Constant tire contact width, axle 2, right,
                              ! inner
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,2) 0 ; mm ! Constant tire contact width, axle 2, right,
                              ! outer
L_CONTACT_Y_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2) LINEAR ! axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2) LINEAR ! axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2) SPLINE ! axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2) SPLINE ! axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 27.8, 74.2, 129.9, 185.6, 222.7, 278.4, 334.1, 389.8, 436.2, 482.6
 1000, -18.6, 43.7, 105.9, 168.2, 230.4, 292.7, 355, 417.2, 479.5, 541.7, 604
 1200, -22.3, 44.5, 111.4, 178.2, 245, 311.8, 378.6, 445.5, 512.3, 579.1, 645.9
 1400, -26, 45.1, 116.1, 187.2, 258.2, 329.3, 400.3, 471.4, 542.4, 613.5, 684.5
 1600, -29.7, 43.7, 117.2, 190.6, 264, 337.4, 410.9, 484.3, 557.7, 631.1, 704.6
 1800, -33.4, 40.4, 114.2, 188, 261.8, 335.6, 409.4, 483.2, 557, 630.8, 704.6
 2000, -37.1, 34.8, 106.7, 178.6, 250.5, 322.4, 394.3, 466.2, 538.1, 610, 681.9
 2200, -40.8, 29.2, 99.2, 169.2, 239.2, 309.2, 379.2, 449.2, 519.3, 589.3, 659.3
 2400, -44.5, 23.3, 91.2, 159.1, 227, 294.9, 362.8, 430.7, 498.6, 566.5, 634.4
 2600, -48.3, 17.5, 83.2, 149, 214.7, 280.5, 346.2, 411.9, 477.7, 543.4, 609.2
 2800, -52, 11.5, 75.1, 138.6, 202.1, 265.6, 329.1, 392.6, 456.1, 519.7, 583.2
 3000, -55.7, 5.6, 66.9, 128.2, 189.5, 250.8, 312, 373.3, 434.6, 495.9, 557.2
 3100, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7
 3150, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 7 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(3) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(3)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(3)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(3) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(3) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                           ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 1500 ! Coefficient: auxiliary roll moment per unit relative
                           ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1) SPLINE ! axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2) SPLINE ! axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1) SPLINE ! axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2) SPLINE ! axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! I-94 Near Exit 712, 3D cosmetics

! 2D variable width table: (data section) row 1 is a header for the 8 lanes of
! lateral position (m). Other rows have station (m) followed by 8 values of dZ (m).
! (column section) Row 1 is a header for the lanes. Other rows have station (m)
! followed by the values of lateral position (m).
ROAD_DZ_CARPET(1) VAR_WIDTH
 0, 1, 2, 3, 4, 5, 6, 7, 8
 300, -2, 0, 0, 0, 0, 0, 0, -3
 900, -2, 0, 0, 0, 0, 0, 0, -5
 1244.99, 0, 0, 0, 0, 0, 0, 0, -5
 1245, 0, 0, -1.5, 0, 0, -1.5, 0, -5
 1313.31, 0, 0, -1.5, 0, 0, -1.5, 0, -5
 1313.32, 0, 0, -1.5, 0, 0, -1.5, 0, -5
 1335.08, -6, 0, -1.5, 0, 0, -1.5, 0, -5
 1335.09, -6, 0, -1.5, 0, 0, -1.5, 0, -5
 1367.08, -6, 0, -1.5, 0, 0, -1.5, 0, -5
 1367.09, -6, 0, 0, 0, 0, 0, 0, -5
 2000, -6, 0, 0, 0, 0, 0, 0, -5
ENDDATA
 0, 1, 2, 3, 4, 5, 6, 7, 8
 300, -45, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 55
 900, -45, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 55
 1244.99, -45, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 55
 1245, -9.201, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 55
 1313.31, -9.201, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 50
 1313.32, -9.201, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 50
 1335.08, -9.201, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 24.201
 1335.09, -25, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 24.201
 1367.08, -25, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 35
 1367.09, -25, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 35
 2000, -25, -9.2, -7.3, -7.2, 22.1, 22.2, 24.2, 55
ENDCOLS
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

ROAD_DZ_ID(3)       3  ! Jackson Boundary

! 2D variable width table: (data section) row 1 is a header for the 5 lanes of
! lateral position (m). Other rows have station (m) followed by 5 values of dZ (m).
! (column section) Row 1 is a header for the lanes. Other rows have station (m)
! followed by the values of lateral position (m).
ROAD_DZ_CARPET(3) VAR_WIDTH
 0, 1, 2, 3, 4, 5
 0, 0, 0, 0, 0, 0
 262.5, 0.757929, 0, 0, 0, 2
 270, 0.775286, 0, 0, 0, 4.673
 280, 0.81, 0, 0, 0, 4.95799
 302, 5.85, 0, 0, 0, 5.52796
 315.16, 6.10267, 0, 0, 0, 5.96
 324.8, 6.26333, 0, 0, 0, 0
 339, 6.5, 0, 0, 0, 0
 358.66, 7.3, 0, 0, 0, 0
 368, 0, 0, 0, 0, 0
 500, 0, 0, 0, 0, 0
ENDDATA
 0, 1, 2, 3, 4, 5
 0, -20, -10, 0, 10, 20
 260, -37.5, -10, 0, 10, 25
 270, -36, -10, 0, 10, 25
 280, -33.5, -10, 0, 10, 20
 302, -21, -10, 0, 10, 20
 315.16, -22.2157, -10, 0, 10, 21
 324.8, -23.6246, -10, 0, 10, 35
 339, -25.7, -10, 0, 10, 30
 358.66, -52.71, -10, 0, 10, 25
 368, -30, -10, 0, 10, 20
 390, -20, -10, 0, 10, 20
 500, -20, -10, 0, 10, 20
ENDCOLS
ENDTABLE
ROAD_DZ_GAIN(3)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(3)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(3)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(3)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(3)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(3)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

ROAD_DZ_ID(5)       5  ! I-94 Exit Lane Edges (Scenic)

! 2D variable width table: (data section) row 1 is a header for the 7 lanes of
! lateral position (m). Other rows have station (m) followed by 7 values of dZ (m).
! (column section) Row 1 is a header for the lanes. Other rows have station (m)
! followed by the values of lateral position (m).
ROAD_DZ_CARPET(5) VAR_WIDTH
 0, 1, 2, 3, 4, 5, 6, 7
 700, 0, 0, 0, 0, 0, 0, 0
 1028, -2, 0, 0, 0, 0, 0, 0
 1080, -5, 0, 0, 0, 0, 0, 0.4
 1175, -5, 0, 0, 0, 0, 0, 4
 1250, 0, 0, 0, 0, 0, 0, 6.6
 1280, 0, 0, 0, 0, 0, 0, 0
ENDDATA
 0, 1, 2, 3, 4, 5, 6, 7
 700, -20, -7, -5.2, -1.9, 1.8, 2, 3
 880, -20, -7, -4.5, -1.9, 1.8, 2, 4
 920, -20, -7, -4.2, -1.9, 1.9, 2.3, 2.5
 1025, -20, -7, -4, -3, 3, 7, 8
 1220, -20, -7, -4.1, -4, 4, 6, 20
 1250, -20, -7, -4.075, -4, 4, 6, 22
 1280, -25, -7, -4.05, -4, 4, 6, 40
 1283, -25, -7, -4.51, -4.5, 4.5, 7, 40
 1286, -25, -10, -6.01, -6, 6, 10, 40
 1290, -25, -10, -9.01, -9, 9, 10, 40
ENDCOLS
ENDTABLE
ROAD_DZ_GAIN(5)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(5)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(5)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(5)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(5)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(5)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_L_BOUNDARY: Road left/right boundary limit L. L is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. L from the calculation can be adjusted with ROAD_L_BOUNDARY_GAIN and
! ROAD_L_BOUNDARY_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_ROAD_L_BOUNDARY and SSTART_ROAD_L_BOUNDARY. This configurable function
! supports 400 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IROAD and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(1,2) STEP ! Road 1, right side boundary
 960, -12
 988, -4
 1010, -6
ENDTABLE
ROAD_L_BOUNDARY_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(1,2) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(1,2) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

ROAD_L_BOUNDARY_CONSTANT(3,1) 12 ; m ! Constant L, Road 3, left side boundary
ROAD_L_BOUNDARY_GAIN(3,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(3,2) -6 ; m ! Constant L, Road 3, right side boundary
ROAD_L_BOUNDARY_GAIN(3,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(3,2) 0 ; m ! Offset added (after gain) to get L

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(1,2) STEP ! Road 1, right side boundary
 960, -1
 988, 1002
 1030, -1
ENDTABLE
ROAD_NEW_ID_GAIN(1,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(1,2) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(1,2) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(2,1) 0 ; - ! [D] Constant ID, Road 2, left side boundary
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,2) 0 ; - ! [D] Constant ID, Road 2, right side boundary
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(3,1) -1 ; - ! Constant ID, Road 3, left side boundary
ROAD_NEW_ID_GAIN(3,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(3,2) -1 ; - ! Constant ID, Road 3, right side boundary
ROAD_NEW_ID_GAIN(3,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_NEW_S: Estimate of station in new road (left/right) when a switch occurs. New
! S is a function of S (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. New S from the calculation can be adjusted with
! ROAD_NEW_S_GAIN and ROAD_NEW_S_OFFSET. S used in the calculation can be adjusted
! with SSCALE_ROAD_NEW_S and SSTART_ROAD_NEW_S. This configurable function supports
! 400 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IROAD and ISIDE are used to identify the dataset when reading data.

ROAD_NEW_S_COEFFICIENT(1,2) 1 ! Coefficient: new S per unit S (m/m), Road 1, right
                              ! side boundary
ROAD_NEW_S_GAIN(1,2) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(1,2) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(1,2) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0
 931.738314, -1.281433
 972.445525, -1.368439
 1049.335169, -1.492004
 1099.087754, -1.586823
 1216.68501, -1.786713
 1248.345117, -1.936493
 1280.00752, -2.367249
 1356.827785, -3.516724
 1388.502626, -4.120758
 1411.129035, -4.64389
 1415.651675, -4.749756
 1447.335441, -5.613678
 1492.604756, -6.809509
 1524.301654, -7.580505
 1537.885268, -7.843903
 1614.891871, -9.285156
 1660.216651, -9.845337
 1687.409874, -10.078094
 1705.546358, -10.170807
 1737.291436, -10.366486
 1764.506246, -10.430634
 1796.260291, -10.446045
 1800.792955, -10.451233
 1828.019678, -10.48642
 1859.787148, -10.535828
 1877.941832, -10.547333
 1905.176842, -10.611053
 2313.747278, -11.222443
ENDTABLE
ROAD_ZS_GAIN(1)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(1)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, -3.904999
 340.996089, -9.457245
 510.815539, -8.86319
 579.026205, -8.149659
 633.588632, -7.968964
ENDTABLE
ROAD_ZS_GAIN(2)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(2)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(2)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(3) SPLINE ! spline interpolation and extrapolation
 537, -2.3008
 610.9562, -1.25
 702.5211, -0.92
 987.7966, -1.4
 1032.9126, -1.6
 1105.5706, -3.2923
 1171.2167, -5.8539
 1238.7721, -8.3791
 1249.5949, -8.7396
 1254.6164, -8.8624
 1262.9026, -9.0156
 1297.9768, -9.94
ENDTABLE
ROAD_ZS_GAIN(3)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(3)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(3)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(3)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(2) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(2)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(2)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(2) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(2) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(3) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(3)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(3)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(3) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(3) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1) 1 ; - ! Constant gain, axle 1
R_STEER_SPEED_GAIN(1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1) 0 ; - ! Offset added (after gain) to get gain

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE.

SPEED_AX_BRAKE_CONSTANT 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE.

SPEED_AX_THROTTLE_CONSTANT 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT.

SPEED_AY_LEFT_CONSTANT 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN  1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT.

SPEED_AY_RIGHT_CONSTANT 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Path Preview: 0.2/0.2 G Max Ax/Ay, 120 kmh
SPEED_TARGET_CONSTANT(1) 120 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(2)  2  ! Exit Right onto Jackson
SPEED_TARGET_CONSTANT(2) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(2) LINEAR ! linear interpolation and extrapolation
 0, 120
 6.66298, 119.92648
 13.32541, 119.91003
 19.98758, 119.91847
 26.64976, 119.92036
 33.31189, 119.91935
 39.97406, 119.91925
 46.63623, 119.9194
 53.2984, 119.91946
 59.96058, 119.91949
 66.62276, 119.91953
 73.28493, 119.91958
 79.94712, 119.91962
 86.60931, 119.91965
 93.2715, 119.9197
 99.93369, 119.91974
 106.59588, 119.91978
 113.25807, 119.91982
 119.92027, 119.91985
 126.58246, 119.9199
 133.24466, 119.91994
 139.90688, 119.91998
 146.56908, 119.92001
 153.23129, 119.92005
 159.89349, 119.92009
 166.55571, 119.92012
 173.21791, 119.92016
 179.88013, 119.9202
 186.54234, 119.92023
 193.20456, 119.92027
 199.86678, 119.9203
 206.52899, 119.92034
 213.19121, 119.92037
 219.85342, 119.92041
 226.51566, 119.92044
 233.17787, 119.92048
 239.8401, 119.92051
 246.50233, 119.92054
 253.16457, 119.92058
 259.82678, 119.92061
 266.48904, 119.92064
 273.15128, 119.92067
 279.81351, 119.9207
 286.47574, 119.92074
 293.13797, 119.92077
 299.80023, 119.9208
 306.46246, 119.92083
 313.12473, 119.92086
 319.78696, 119.92089
 326.44922, 119.92091
 333.11145, 119.92094
 339.77371, 119.92097
 346.43597, 119.92101
 353.09824, 119.92104
 359.76047, 119.92106
 366.42273, 119.92109
 373.08499, 119.92112
 379.74725, 119.92114
 386.40955, 119.92117
 393.07181, 119.9212
 399.73407, 119.92123
 406.39633, 119.92125
 413.05862, 119.92128
 419.72089, 119.9213
 426.38318, 119.92133
 433.04544, 119.92136
 439.70773, 119.92138
 446.37003, 119.9214
 453.03229, 119.92142
 459.69458, 119.92145
 466.35687, 119.92148
 473.01917, 119.9215
 479.68146, 119.92152
 486.34375, 119.92155
 493.00604, 119.92157
 499.66833, 119.92159
 506.33066, 119.92162
 512.99298, 119.92164
 519.65527, 119.92165
 526.31757, 119.92168
 532.97986, 119.9217
 539.64215, 119.92172
 546.3045, 119.92174
 552.9668, 119.92176
 559.62909, 119.92178
 566.29144, 119.9218
 572.95374, 119.92182
 579.61609, 119.92184
 586.27838, 119.92186
 592.94073, 119.92188
 599.60303, 119.9219
 606.26538, 119.92192
 612.92767, 119.92194
 619.59003, 119.92195
 626.25232, 119.92197
 632.91467, 119.92199
 639.57697, 119.922
 646.23932, 119.92203
 652.90167, 119.92204
 659.56396, 119.92206
 666.22632, 119.92207
 672.88867, 119.92209
 679.55096, 119.9221
 686.21332, 119.92212
 692.87567, 119.92213
 699.53796, 119.92215
 706.20032, 119.92216
 712.86267, 119.92217
 719.52509, 119.92218
 726.18744, 119.92219
 732.84979, 119.9222
 739.51215, 119.9222
 746.1745, 119.92221
 752.83679, 119.92223
 759.49908, 119.92224
 766.16132, 119.92226
 772.82355, 119.92227
 779.48578, 119.92229
 786.14795, 119.9223
 792.81018, 119.92233
 799.47235, 119.92234
 806.13458, 119.92236
 812.79675, 119.92237
 819.45892, 119.92239
 826.12109, 119.9224
 832.78333, 119.92241
 839.4455, 119.92242
 846.10773, 119.92243
 852.76996, 119.92243
 859.43219, 119.92244
 866.09442, 119.92245
 872.75671, 119.92245
 879.41901, 119.92246
 886.08136, 119.92248
 892.74371, 119.92249
 899.40607, 119.9225
 906.06842, 119.92251
 912.73077, 119.92252
 919.39313, 119.92253
 926.05548, 119.92254
 932.71783, 119.92255
 939.38019, 119.92255
 946.04254, 119.92252
 952.70496, 119.92248
 959.36731, 119.92239
 966.02972, 119.92228
 972.69208, 119.92213
 979.35449, 119.92199
 986.01685, 119.92181
 992.67883, 119.9223
 999.34143, 119.92196
 1006.00366, 119.92317
 1012.66547, 119.92331
 1019.32721, 119.92493
 1025.98877, 119.92638
 1032.65002, 119.92764
 1039.3114, 119.92843
 1045.97314, 119.92836
 1052.63477, 119.92778
 1059.29602, 119.92651
 1065.95679, 119.92463
 1072.61707, 119.92218
 1079.27673, 119.91919
 1085.93555, 119.91564
 1092.5929, 119.80621
 1099.10547, 114.78684
 1105.32068, 109.23436
 1111.23657, 103.94334
 1116.85559, 98.5626
 1122.20581, 94.57162
 1127.39758, 92.56155
 1132.49243, 91.02118
 1137.50439, 89.54958
 1142.43408, 88.0586
 1147.28125, 86.57115
 1152.04639, 85.09579
 1156.72998, 83.62342
 1161.33179, 82.14938
 1165.85205, 80.67213
 1170.29041, 79.19138
 1174.64661, 77.70798
 1178.91663, 76.22427
 1183.10449, 74.74252
 1187.20947, 73.1999
 1191.229, 71.68544
 1195.16833, 70.25088
 1199.02734, 68.77842
 1202.80481, 67.28686
 1206.49988, 65.78699
 1210.1123, 64.28381
 1213.64185, 62.77919
 1217.0885, 61.2716
 1220.44995, 59.64573
 1223.71753, 57.97775
 1226.90369, 56.6088
 1230.01123, 55.14408
 1233.03638, 53.63115
 1235.97742, 52.10098
 1238.8335, 50.56427
 1241.60425, 49.02817
 1244.2959, 47.51318
 1246.93713, 46.06944
 1249.54565, 44.74557
 1252.13318, 43.63905
 1254.65332, 42.66582
 1257.06396, 41.66888
 1259.43066, 41.19062
 1261.76904, 40.71033
 1264.07202, 40.07808
 1266.33447, 39.29562
 1268.52832, 38.31602
 1270.65271, 37.14857
 1272.70178, 35.8286
 1274.66919, 34.382
 1276.54932, 32.86209
 1278.33936, 31.27591
 1280.03271, 29.42851
 1281.61023, 27.40962
 1283.09668, 26.1079
 1284.50525, 24.66273
 1285.82642, 23.03535
 1287.05481, 21.38703
 1288.18494, 19.37755
 1289.18127, 16.99582
 1290.09766, 16.44438
 1291.18188, 16.12846
 1292.58777, 15.40338
 1293.93701, 14.86974
 1295.24023, 14.10169
 1296.53809, 14.3385
 1297.922, 15.56572
 1299.38257, 16.19478
 1300.8158, 18.24572
 1301.97412, 19.45796
 1303.10291, 19.63514
 1304.28601, 21.68856
 1305.51196, 21.93102
 1306.77954, 23.72058
 1308.14539, 24.9578
 1309.54834, 25.88314
 1311.05469, 28.30651
 1312.66321, 29.31056
 1314.31445, 30.49529
 1316.06006, 32.06701
 1317.87219, 33.36739
 1319.76929, 34.78161
 1321.73853, 36.19202
 1323.78809, 37.5269
 1325.91272, 39.03648
 1328.12732, 40.53571
 1330.4115, 41.77507
 1332.77356, 43.22691
 1335.21338, 44.59422
 1337.72888, 45.95852
 1340.32019, 47.32073
 1342.98706, 48.68019
 1345.72937, 50.04149
 1348.54736, 51.40667
 1351.44153, 52.78034
 1354.41211, 54.15996
 1357.45935, 55.53913
 1360.58301, 56.91756
 1363.78345, 58.29863
 1367.06055, 59.68314
 1370.41455, 61.07003
 1373.8457, 62.45675
 1377.35352, 63.83752
 1380.93799, 65.21528
 1384.59888, 66.59177
 1388.33594, 67.95805
 1392.14868, 69.3199
 1396.03699, 70.68469
 1400.00122, 72.05251
 1404.04138, 73.42466
 1408.15796, 74.80021
 1412.35071, 76.17818
 1416.62012, 77.55779
 1420.96606, 78.93967
 1425.38867, 80.32256
 1429.89539, 81.70225
 1434.47717, 83.08021
 1439.13342, 84.56004
 1443.87891, 86.23083
 1448.6936, 87.28138
 1453.56982, 88.50741
 1458.51257, 89.75943
 1463.52271, 90.95972
 1468.57336, 91.16312
 1473.61267, 90.75101
 1478.61902, 90.05825
 1483.5802, 89.20735
 1488.48865, 88.24899
 1493.33972, 87.25389
 1498.12231, 86.32074
 1502.86133, 85.56426
 1507.57031, 85.06808
 1512.26453, 85.03952
 1516.99377, 85.99987
 1521.7771, 86.8442
 1526.61584, 87.84046
 1531.52026, 89.05683
 1536.52246, 90.95643
 1541.63342, 92.74355
 1546.84656, 94.08176
 1552.10718, 95.12628
 1557.427, 96.39075
 1562.81689, 97.67455
 1568.27966, 98.99776
 1573.81665, 100.33677
 1579.4281, 101.68208
 1585.11462, 103.03409
 1590.87646, 104.39144
 1596.71387, 105.75278
 1602.62683, 107.11608
 1608.6156, 108.47733
 1614.67981, 109.83631
 1620.81946, 111.1932
 1627.03442, 112.5491
 1633.32483, 113.90836
 1639.69092, 115.26905
 1646.13232, 116.62
 1652.64844, 117.96165
 1659.23816, 119.23563
 1665.89014, 120.11005
 1672.56226, 120.06898
 1679.22583, 119.89137
 1685.88855, 119.91019
 1692.55054, 119.92281
 1699.21277, 119.92014
 1705.87488, 119.91866
 1712.53711, 119.91903
 1719.19922, 119.91918
 1725.86133, 119.91914
 1732.52356, 119.91912
 1739.18567, 119.91913
 1745.8479, 119.91913
 1752.51001, 119.91913
 1759.17224, 119.91913
 1765.83435, 119.91913
 1772.49658, 119.91913
 1779.15869, 119.91913
 1785.82092, 119.91913
 1792.48303, 119.91913
 1799.14526, 119.91913
 1805.80737, 119.91913
 1812.4696, 119.91913
 1819.13171, 119.91913
 1825.79395, 119.91913
 1832.45605, 119.91913
 1839.11829, 119.91913
 1845.7804, 119.91913
 1852.44263, 119.91913
 1859.10474, 119.91913
 1865.76697, 119.91913
 1872.42908, 119.91913
 1879.09131, 119.91913
 1885.75342, 119.91913
 1892.41565, 119.91913
 1899.07776, 119.91913
 1905.73999, 119.91913
 1912.40222, 119.91913
 1919.06433, 119.91913
 1925.72656, 119.91913
 1932.38867, 119.91913
 1939.0509, 119.91913
 1945.71301, 119.91913
 1952.37524, 119.91913
 1959.03735, 119.91913
 1965.69958, 119.91913
 1972.36169, 119.91913
 1979.02393, 119.91913
 1985.68604, 119.91913
 1992.34827, 119.91913
 1999.01038, 119.91913
ENDTABLE
SSTART_SPEED_TARGET(2) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(2) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(3)  3  ! Exit Left onto Jackson
SPEED_TARGET_CONSTANT(3) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(3) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(3) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(3) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(3) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(3) LINEAR ! linear interpolation and extrapolation
 0, 120
 6.662981987, 119.9264832
 13.32540512, 119.9100342
 19.98758316, 119.9184723
 26.64975548, 119.9203644
 33.31188583, 119.9193497
 39.97406006, 119.9192505
 46.63623047, 119.9194031
 53.29840088, 119.9194641
 59.9605751, 119.9194946
 66.62275696, 119.9195328
 73.284935, 119.9195786
 79.94712067, 119.9196167
 86.60930634, 119.9196548
 93.27149963, 119.9197006
 99.93369293, 119.9197388
 106.5958786, 119.9197769
 113.2580719, 119.9198151
 119.9202652, 119.9198532
 126.5824585, 119.919899
 133.2446594, 119.9199371
 139.9068756, 119.9199753
 146.5690765, 119.9200134
 153.2312927, 119.9200516
 159.8934937, 119.9200897
 166.5557098, 119.9201202
 173.2179108, 119.9201584
 179.880127, 119.9201965
 186.5423431, 119.9202347
 193.2045593, 119.9202652
 199.8667755, 119.9203033
 206.5289917, 119.9203415
 213.1912079, 119.920372
 219.8534241, 119.9204102
 226.5156555, 119.9204407
 233.1778717, 119.9204788
 239.8401031, 119.9205093
 246.5023346, 119.9205399
 253.164566, 119.920578
 259.8267822, 119.9206085
 266.4890442, 119.920639
 273.1512756, 119.9206696
 279.8135071, 119.9207001
 286.4757385, 119.9207382
 293.13797, 119.9207687
 299.8002319, 119.9207993
 306.4624634, 119.9208298
 313.1247253, 119.9208603
 319.7869568, 119.9208908
 326.4492188, 119.9209137
 333.1114502, 119.9209442
 339.7737122, 119.9209747
 346.4359741, 119.9210052
 353.0982361, 119.9210358
 359.7604675, 119.9210587
 366.4227295, 119.9210892
 373.0849915, 119.9211197
 379.7472534, 119.9211426
 386.4095459, 119.9211731
 393.0718079, 119.921196
 399.7340698, 119.9212265
 406.3963318, 119.9212494
 413.0586243, 119.9212799
 419.7208862, 119.9213028
 426.3831787, 119.9213257
 433.0454407, 119.9213562
 439.7077332, 119.9213791
 446.3700256, 119.921402
 453.0322876, 119.9214249
 459.6945801, 119.9214478
 466.3568726, 119.9214783
 473.019165, 119.9215012
 479.6814575, 119.921524
 486.34375, 119.9215469
 493.0060425, 119.9215698
 499.668335, 119.9215927
 506.330658, 119.9216156
 512.992981, 119.9216385
 519.6552734, 119.9216537
 526.3175659, 119.9216766
 532.9798584, 119.9216995
 539.6421509, 119.9217224
 546.3045044, 119.9217377
 552.9667969, 119.9217606
 559.6290894, 119.9217834
 566.2914429, 119.9217987
 572.9537354, 119.9218216
 579.6160889, 119.9218445
 586.2783813, 119.9218597
 592.9407349, 119.9218826
 599.6030273, 119.9218979
 606.2653809, 119.9219208
 612.9276733, 119.921936
 619.5900269, 119.9219513
 626.2523193, 119.9219742
 632.9146729, 119.9219894
 639.5769653, 119.9220047
 646.2393188, 119.9220276
 652.9016724, 119.9220428
 659.5639648, 119.9220581
 666.2263184, 119.9220734
 672.8886719, 119.9220886
 679.5509644, 119.9221039
 686.2133179, 119.9221191
 692.8756714, 119.9221344
 699.5379639, 119.9221497
 706.2003174, 119.9221573
 712.8626709, 119.9221725
 719.5250854, 119.9221802
 726.187439, 119.9221878
 732.8497925, 119.9221954
 739.512146, 119.9222031
 746.1744995, 119.9222107
 752.836792, 119.922226
 759.4990845, 119.9222412
 766.1613159, 119.9222565
 772.8235474, 119.9222717
 779.4857788, 119.922287
 786.1479492, 119.9223022
 792.8101807, 119.9223251
 799.4723511, 119.9223404
 806.1345825, 119.9223557
 812.7967529, 119.9223709
 819.4589233, 119.9223862
 826.1210938, 119.9224014
 832.7833252, 119.9224091
 839.4454956, 119.9224243
 846.1077271, 119.9224319
 852.7699585, 119.9224319
 859.4321899, 119.9224396
 866.0944214, 119.9224472
 872.7567139, 119.9224548
 879.4190063, 119.9224625
 886.0813599, 119.9224777
 892.7437134, 119.9224854
 899.4060669, 119.9225006
 906.0684204, 119.9225082
 912.7307739, 119.9225159
 919.3931274, 119.9225311
 926.055481, 119.9225388
 932.7178345, 119.9225464
 939.380188, 119.922554
 946.0425415, 119.9225235
 952.7049561, 119.9224777
 959.3673096, 119.9223938
 966.0297241, 119.922287
 972.6920776, 119.922142
 979.3544312, 119.9220123
 986.0168457, 119.9218521
 992.678772, 119.922348
 999.3413696, 119.92202
 1006.003601, 119.9232483
 1012.665405, 119.9233856
 1019.327087, 119.9250107
 1025.98877, 119.9264603
 1032.650146, 119.9277191
 1039.311035, 119.9284973
 1045.971069, 119.928421
 1052.630981, 119.9278259
 1059.291016, 119.9265366
 1065.951172, 119.9246292
 1072.611816, 119.9221649
 1079.273193, 119.9191589
 1085.935547, 119.9156342
 1092.598755, 119.8312683
 1099.12085, 114.8192749
 1105.347046, 109.2593002
 1111.274292, 103.9632416
 1116.90271, 98.62689209
 1122.271851, 95.02328491
 1127.502686, 93.23261261
 1132.642334, 91.73573303
 1137.700317, 90.27748871
 1142.677246, 88.82009888
 1147.57312, 87.35921478
 1152.387695, 85.8939743
 1157.120728, 84.4245224
 1161.771973, 82.9509964
 1166.341309, 81.47353363
 1170.828491, 79.99245453
 1175.233521, 78.50888824
 1179.560791, 77.02480316
 1183.805054, 75.54199219
 1187.965942, 74.04681396
 1192.040283, 72.47312927
 1196.029541, 71.02039337
 1199.937378, 69.56233978
 1203.762451, 68.07447815
 1207.503784, 66.57363129
 1211.160645, 65.06765747
 1214.733154, 63.56094742
 1218.221313, 62.05384445
 1221.625, 60.5302887
 1224.9375, 58.79635239
 1228.158813, 57.32645798
 1231.302002, 55.92079926
 1234.363525, 54.42877579
 1237.341064, 52.91090393
 1240.233398, 51.38378525
 1243.039795, 49.86764526
 1245.737305, 48.39253616
 1248.329102, 47.03103256
 1250.833618, 45.84613419
 1253.262573, 44.87504578
 1255.682007, 44.19927216
 1258.07312, 43.72977448
 1260.439087, 43.36564636
 1262.784424, 42.97315598
 1265.096313, 42.15780258
 1267.371582, 41.53901291
 1269.633057, 40.93070602
 1271.857422, 40.04498291
 1274.031616, 38.94841003
 1276.143677, 37.65874481
 1278.184814, 36.23884583
 1280.148071, 34.72768402
 1282.030029, 33.1656189
 1283.827026, 31.56020546
 1285.536255, 29.81855392
 1287.137573, 27.73290443
 1288.648438, 26.46817017
 1290.09375, 25.26954079
 1291.638672, 23.9636097
 1293.230835, 22.7280426
 1294.708984, 20.31290627
 1296.041992, 18.43318939
 1297.317749, 18.30716133
 1298.558838, 18.04177475
 1299.780029, 17.52306175
 1300.963379, 17.09045601
 1302.134033, 17.18240547
 1303.335083, 17.82265854
 1304.555054, 17.89213753
 1305.807739, 18.8966732
 1307.117432, 19.32812309
 1308.450195, 20.10244179
 1309.861816, 21.33821106
 1311.308105, 22.04045105
 1312.661499, 23.67776871
 1313.999634, 24.18478966
 1315.396484, 25.97134018
 1316.897461, 27.69499779
 1318.452759, 28.32389641
 1320.078613, 30.13786316
 1321.782104, 31.18961906
 1323.559448, 32.81381989
 1325.414917, 34.04374695
 1327.345947, 35.53020096
 1329.353149, 36.85352707
 1331.436646, 38.30679703
 1333.606201, 39.87634277
 1335.845703, 41.03455734
 1338.15918, 42.49315643
 1340.557739, 43.86381912
 1343.032593, 45.22372437
 1345.58313, 46.58883286
 1348.209351, 47.94680786
 1350.911011, 49.30760193
 1353.688354, 50.67024231
 1356.541382, 52.0362587
 1359.470703, 53.41036606
 1362.47644, 54.79019547
 1365.558838, 56.16985321
 1368.717896, 57.5487709
 1371.953613, 58.9296875
 1375.266113, 60.31376648
 1378.655518, 61.70047379
 1382.121948, 63.08460236
 1385.665161, 64.46322632
 1389.284668, 65.83189392
 1392.97998, 67.19028473
 1396.75061, 68.54934692
 1400.596924, 69.9107666
 1404.518921, 71.27536774
 1408.516846, 72.64428711
 1412.590942, 74.01784515
 1416.741455, 75.39513397
 1420.968506, 76.77519226
 1425.272339, 78.15740967
 1429.652954, 79.54149628
 1434.110474, 80.92631531
 1438.64502, 82.31186676
 1443.25647, 83.69804382
 1447.944946, 85.08479309
 1452.710449, 86.46994781
 1457.552856, 87.85501862
 1462.479004, 89.55220795
 1467.49353, 90.8326416
 1472.567871, 91.90100098
 1477.70752, 93.11717224
 1482.914795, 94.35181427
 1488.191528, 95.61491394
 1493.539185, 96.90804291
 1498.959229, 98.21060181
 1504.451294, 99.50398254
 1510.015015, 100.7926483
 1515.650146, 102.0777283
 1521.356689, 103.3604965
 1527.134399, 104.6414413
 1532.983154, 105.9204407
 1538.902954, 107.1966019
 1544.893433, 108.4686966
 1550.954468, 109.735672
 1557.085693, 110.9967499
 1563.286865, 112.2517471
 1569.557495, 113.5008698
 1575.897339, 114.7446899
 1582.306152, 115.9840546
 1588.783691, 117.2200089
 1595.329834, 118.4529266
 1601.941772, 119.5564194
 1608.602417, 120.0545578
 1615.266357, 119.8612289
 1621.926758, 119.9047775
 1628.586792, 119.9028091
 1635.247192, 119.8987656
 1641.907837, 119.9016418
 1648.568604, 119.9058075
 1655.229492, 119.9090576
 1661.890503, 119.9119339
 1668.551636, 119.9147415
 1675.212891, 119.9175186
 1681.874512, 119.9187927
 1688.536743, 119.9190979
 1695.198975, 119.9191895
 1701.861084, 119.9190979
 1708.523315, 119.9191437
 1715.185547, 119.9191284
 1721.847656, 119.9191284
 1728.509888, 119.9191284
 1735.171997, 119.9191284
 1741.834229, 119.9191284
 1748.496338, 119.9191284
 1755.158569, 119.9191284
 1761.820679, 119.9191284
 1768.48291, 119.9191284
 1775.14502, 119.9191284
 1781.807251, 119.9191284
 1788.46936, 119.9191284
 1795.131592, 119.9191284
 1801.793701, 119.9191284
 1808.455933, 119.9191284
 1815.118042, 119.9191284
 1821.780273, 119.9191284
 1828.442383, 119.9191284
 1835.104614, 119.9191284
 1841.766846, 119.9191284
 1848.428955, 119.9191284
 1855.091187, 119.9191284
 1861.753296, 119.9191284
 1868.415527, 119.9191284
 1875.077637, 119.9191284
 1881.739868, 119.9191284
 1888.401978, 119.9191284
 1895.064209, 119.9191284
 1901.726318, 119.9191284
 1908.38855, 119.9191284
 1915.050659, 119.9191284
 1921.712891, 119.9191284
 1928.375, 119.9191284
 1935.037231, 119.9191284
 1941.699341, 119.9191284
 1948.361572, 119.9191284
 1955.023804, 119.9191284
 1961.685913, 119.9191284
 1968.348145, 119.9191284
 1975.010254, 119.9191284
 1981.672485, 119.9191284
 1988.334595, 119.9191284
 1994.996826, 119.9191284
ENDTABLE
SSTART_SPEED_TARGET(3) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(3) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IAXLE is used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.

SUSP_DIVE_AXLE_CONSTANT(1) 0 ; deg ! Constant suspension dive, axle 1
SUSP_DIVE_AXLE_OFFSET(1) 0 ; deg ! Offset added (after gain) to get suspension dive

SUSP_DIVE_AXLE_CONSTANT(2) 0 ; deg ! Constant suspension dive, axle 2
SUSP_DIVE_AXLE_OFFSET(2) 0 ; deg ! Offset added (after gain) to get suspension dive

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IAXLE is used to
! identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1) 0 ; mm ! Constant X axle movement forward, axle 1
SUSP_X_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward

SUSP_X_AXLE_CONSTANT(2) 0 ; mm ! Constant X axle movement forward, axle 2
SUSP_X_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1) SPLINE ! axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2) SPLINE ! axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT   0.75 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 160.83
 0.1, 160.83
 0.2, 170.65
 0.3, 180.46
 0.4, 190.27
 0.5, 200.09
 0.6, 209.9
 0.7, 219.71
 0.8, 229.53
 0.9, 218.96
 1, 218.96
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 352.09
 0.1, 352.09
 0.2, 368.75
 0.3, 385.41
 0.4, 402.08
 0.5, 418.74
 0.6, 435.41
 0.7, 452.07
 0.8, 468.74
 0.9, 485.4
 1, 485.4
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 513.32
 0.1, 513.32
 0.2, 553.91
 0.3, 594.49
 0.4, 635.08
 0.5, 675.66
 0.6, 716.25
 0.7, 756.84
 0.8, 797.42
 0.9, 838.01
 1, 838.01
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 807.14
 0.2, 807.14
 0.3, 874.84
 0.4, 942.55
 0.5, 1010.3
 0.6, 1078
 0.7, 1145.7
 0.8, 1213.4
 0.9, 1281.1
 1, 1281.1
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 1030.9
 0.2, 1030.9
 0.3, 1163
 0.4, 1295.2
 0.5, 1427.4
 0.6, 1559.5
 0.7, 1691.7
 0.8, 1823.9
 0.9, 1934
 1, 1934
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 2743.9
 0.8, 2743.9
 0.9, 2907.8
 1, 2907.8
ENDTABLE
UPSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(6) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! SPLINE X-Y TABLES FOR PATH SEGMENTS
!------------------------------------------------------------------------------------
! Following are up to 500 tables of X-Y global coordinates used to make spline
! segments for reference paths. Tables are listed here only if used in a path. If
! indices shown below are not used, e.g., SEGMENT_XY_TABLE(1), the current value
! of the index ITAB_XY is used to identify the table when reading data.

! NTAB_XY 7 ! CALC -- Current number of XY spline tables for path segments

XY_TABLE_ID(1)      1 ; Path_1 Segment 1
SEGMENT_XY_TABLE(1) ! table with X (m), Y (m), and calculated station S (m)
 0, 0, 0
 46.1887, 930.5928, 931.738
 47.7804, 971.2688, 972.446
 47.85, 1048.1585, 1049.335
 46.9435, 1097.9028, 1099.088
 42.9798, 1215.4332, 1216.685
 40.4596, 1246.9929, 1248.345
 35.3105, 1278.2338, 1280.008
 17.3299, 1352.9201, 1356.828
 6.6651, 1382.7456, 1388.503
 -1.5336, 1403.8343, 1411.129
 -3.3063, 1407.9951, 1415.652
 -16.9578, 1436.587, 1447.335
 -38.7838, 1476.2473, 1492.605
 -55.9593, 1502.8873, 1524.302
 -63.1082, 1514.4376, 1537.885
 -113.1388, 1572.9778, 1614.892
 -146.3345, 1603.8385, 1660.217
 -167.2302, 1621.2408, 1687.41
 -181.6046, 1632.3001, 1705.546
 -208.1485, 1649.712, 1737.291
 -231.4177, 1663.8254, 1764.506
 -259.153, 1679.2874, 1796.26
 -263.1829, 1681.3622, 1800.793
 -288.0227, 1692.5103, 1828.02
 -317.5528, 1704.2211, 1859.787
 -334.5949, 1710.4789, 1877.942
 -360.6472, 1718.4177, 1905.177
 -756.5247, 1819.4662, 2313.747
ENDTABLE

XY_TABLE_ID(2)      2 ; Jacksone Rd E Segment 1
SEGMENT_XY_TABLE(2) ! table with X (m), Y (m), and calculated station S (m)
 -267.2999, 1436.2453, 0
 48.0622, 1306.5337, 340.996
 205.9068, 1243.8941, 510.816
 269.6758, 1219.6822, 579.026
 322.5749, 1206.3128, 633.589
ENDTABLE

XY_TABLE_ID(3)   1002 ; I-94 Exit 172
SEGMENT_XY_TABLE(3) ! table with X (m), Y (m), and calculated station S (m)
 28.3117, 536.8917, 0
 32.6105, 610.7229, 73.956
 36.6076, 702.2005, 165.521
 56.4872, 986.7825, 450.797
 58.5697, 1031.8504, 495.913
 63.5346, 1104.3385, 568.571
 66.0066, 1169.9381, 634.217
 66.8348, 1237.4884, 701.772
 67.6518, 1248.2803, 712.595
 68.5585, 1253.2193, 717.616
 71.114, 1261.1016, 725.903
 85.8039, 1292.9513, 760.977
ENDTABLE

XY_TABLE_ID(4)      4 ; Exit off I-94
SEGMENT_XY_TABLE(4) ! table with X (m), Y (m), and calculated station S (m)
 -13.6142, -508.12, 0
 -16.0365, -476.497, 31.716
 -17.74, -437.772, 70.478
 -17.74, -391.961, 116.289
 -5.4314, -156.184, 352.387
 -0.4745, -43.5316, 465.149
 28.3117, 536.8917, 1046.285
 36.6076, 702.2005, 1211.802
 56.4872, 986.7825, 1497.078
 58.5697, 1031.8504, 1542.194
 63.5346, 1104.3385, 1614.851
 66.0066, 1169.9381, 1680.498
 66.8348, 1237.4884, 1748.053
 67.6518, 1248.2803, 1758.876
 68.5585, 1253.2193, 1763.897
 71.114, 1261.1016, 1772.184
 81.3969, 1283.3964, 1796.735
ENDTABLE

XY_TABLE_ID(5)      5 ; Right onto Jackson
SEGMENT_XY_TABLE(5) ! table with X (m), Y (m), and calculated station S (m)
 88.4639, 1291.24, 0
 205.8101, 1243.8937, 126.538
 269.566, 1219.6817, 194.736
 322.4543, 1206.3122, 249.288
ENDTABLE

XY_TABLE_ID(6)      6 ; Exit off I-94
SEGMENT_XY_TABLE(6) ! table with X (m), Y (m), and calculated station S (m)
 -13.6142, -508.12, 0
 -16.0365, -476.497, 31.716
 -17.74, -437.772, 70.478
 -17.74, -391.961, 116.289
 -5.4314, -156.184, 352.387
 -0.4745, -43.5316, 465.149
 28.3117, 536.8917, 1046.285
 36.6076, 702.2005, 1211.802
 56.4872, 986.7825, 1497.078
 58.5697, 1031.8504, 1542.194
 63.5346, 1104.3385, 1614.851
 66.0066, 1169.9381, 1680.498
 66.8348, 1237.4884, 1748.053
 67.6518, 1248.2803, 1758.876
 68.5585, 1253.2193, 1763.897
 71.114, 1261.1016, 1772.184
 81.3969, 1283.3964, 1796.735
ENDTABLE

XY_TABLE_ID(7)      7 ; Left onto Jackson
SEGMENT_XY_TABLE(7) ! table with X (m), Y (m), and calculated station S (m)
 72.5037, 1297.6, 0
 47.9977, 1306.5335, 26.084
 -267.2999, 1436.2453, 367.02
ENDTABLE


!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT X_OBJ_1 = X_DM_1;
EQ_OUT Y_OBJ_1 = Y_DM_1;
EQ_OUT V_OBJ_2 = 35;
EQ_OUT V_OBJ_3 = 35;
EQ_OUT V_OBJ_4 = 35;
EQ_OUT V_OBJ_5 = 35;
EQ_OUT V_OBJ_6 = 35;
EQ_OUT V_OBJ_7 = 35;
EQ_OUT V_OBJ_8 = 35;
EQ_OUT V_OBJ_9 = 35;
EQ_OUT V_OBJ_10 = 35;
EQ_OUT V_OBJ_11 = 35;
EQ_OUT V_OBJ_12 = 33;
EQ_OUT V_OBJ_13 = 33;
EQ_OUT V_OBJ_14 = 33;
EQ_OUT V_OBJ_15 = 33;
EQ_OUT V_OBJ_16 = 33;
EQ_OUT V_OBJ_17 = 33;
EQ_OUT V_OBJ_18 = 33;
EQ_OUT V_OBJ_19 = 33;
EQ_OUT V_OBJ_20 = 33;
EQ_OUT V_OBJ_21 = 35;
EQ_OUT V_OBJ_22 = 35;
EQ_OUT V_OBJ_23 = 35;
EQ_OUT V_OBJ_24 = 35;
EQ_OUT V_OBJ_25 = 35;
EQ_OUT V_OBJ_26 = 35;
EQ_OUT V_OBJ_27 = 35;
EQ_OUT V_OBJ_28 = 35;
EQ_OUT V_OBJ_29 = 35;
EQ_OUT V_OBJ_30 = 35;
EQ_OUT V_OBJ_31 = 32;
EQ_OUT V_OBJ_32 = 32;
EQ_OUT V_OBJ_33 = 32;
EQ_OUT V_OBJ_34 = 32;
EQ_OUT V_OBJ_35 = 32;
EQ_OUT V_OBJ_36 = 32;
EQ_OUT V_OBJ_37 = 32;
EQ_OUT V_OBJ_38 = 32;
EQ_OUT V_OBJ_39 = 32;
EQ_OUT V_OBJ_40 = 32;
EQ_OUT V_OBJ_44 = 16;
EQ_OUT V_OBJ_45 = 16;
EQ_OUT V_OBJ_46 = 16;
EQ_OUT V_OBJ_47 = 16;
EQ_OUT V_OBJ_48 = 16;
EQ_OUT V_OBJ_49 = 15;
EQ_OUT V_OBJ_50 = 15;
EQ_OUT V_OBJ_51 = 15;
EQ_OUT V_OBJ_52 = 15;
EQ_OUT V_OBJ_53 = 15;

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_AERO_ROAD_ID_1 1001 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 322.5251374 ; m ! Road path station for tracked aero road point
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission
SV_AVX  0.01681196599 ; deg/s ! ODE: Body-X roll rate of sprung-mass {AVx}
SV_AVX_A1 0.01784109002 ; deg/s ! ODE: Roll rate of axle 1
SV_AVX_A2 0.04330699264 ; deg/s ! ODE: Roll rate of axle 2
SV_AVY -0.01073680436 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass {AVy}
SV_AVY_L1 248.7082266 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 248.7099219 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 248.7355277 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 248.7365723 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_R1  248.668561 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 248.6701803 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 248.6995254 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 248.7003736 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVZ -0.05638767657 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass {AVz}
SV_AV_CL  892.4110188 ; rpm ! Clutch relative spin
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_ENG 2758.587596 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}
SV_AV_SHAFT_L_D2 248.7355277 ; rpm ! ODE: Diff2 Left (first) output shaft speed
SV_AV_SHAFT_R_D2 248.6995254 ; rpm ! ODE: Diff2 Right (second) output shaft speed
SV_AV_SW -0.2468069715 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC  1866.342916 ; rpm ! ODE: Torque coupling output shaft spin
SV_AV_TR_OUT 1244.228611 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BETA 0.00561177156 ; deg ! Sideslip (ISO)
SV_BETA_RD 0.00560954795 ; deg ! Sideslip using road axes
SV_BRAKE_STATE      0 ; - ! Braking state, used for clutch control
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state for 2nd drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_CL_AUTO_BRAKE    0 ; - ! Boolean: 1 if auto clutch for low-speed braking
SV_CL_AUTO_SHIFT    1 ; - ! Boolean: 1 if auto clutch for a gear shift
SV_CL_CON           1 ; - ! Transmission clutch control {ClutchTr}
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff
SV_CL_DIFF_SPIN_2 0.03619875817 ; rpm ! Clutch rel. spin for 2nd drive axle diff
SV_CL_LOCKED        0 ; - ! Clutch lockup state
SV_CL_PRESS         0 ; - ! Initial direction state for automatic clutch
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch
SV_CMP_S_L1 63.23230064 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 6.989847663 ; mm ! Compression of ride spring L2
SV_CMP_S_R1 64.63866609 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 9.262040597 ; mm ! Compression of ride spring R2
SV_CMP_T_L1I 19.85555437 ; mm ! Tire L1i compression
SV_CMP_T_L1O        0 ; mm ! Tire L1o compression
SV_CMP_T_L2I 5.632187761 ; mm ! Tire L2i compression
SV_CMP_T_L2O 5.729849629 ; mm ! Tire L2o compression
SV_CMP_T_R1I 20.62597271 ; mm ! Tire R1i compression
SV_CMP_T_R1O        0 ; mm ! Tire R1o compression
SV_CMP_T_R2I 5.142931898 ; mm ! Tire R2i compression
SV_CMP_T_R2O 5.045269468 ; mm ! Tire R2o compression
SV_CONTACT_ID_L1I 1001 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O 1094 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I 1001 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O 1001 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_R1I 1001 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O 1094 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I 1001 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O 1001 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_STA_L1I 320.0245504 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 499.3500589 ; m ! Road path station for tire contact {S_Rd_L1O}
SV_CONTACT_STA_L2I 325.0252074 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O 325.0248353 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_R1I 320.0265562 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 499.3499071 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 325.0270714 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O 325.0274435 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio
SV_DZDX_GND -0.01079523923 ; - ! dZ/dX of ground at vehicle aero ref. pt
SV_DZDX_L1I -0.01117264489 ; - ! Ground X slope under tire L1i
SV_DZDX_L1O -0.01117264489 ; - ! Ground X slope under tire L1o
SV_DZDX_L2I -0.01040977021 ; - ! Ground X slope under tire L2i
SV_DZDX_L2O -0.01040967828 ; - ! Ground X slope under tire L2o
SV_DZDX_R1I -0.01117338123 ; - ! Ground X slope under tire R1i
SV_DZDX_R1O -0.01117338123 ; - ! Ground X slope under tire R1o
SV_DZDX_R2I -0.01041023079 ; - ! Ground X slope under tire R2i
SV_DZDX_R2O -0.01041032273 ; - ! Ground X slope under tire R2o
SV_DZDY_GND 0.004398908107 ; - ! dZ/dY of ground at vehicle aero ref. pt
SV_DZDY_L1I 0.004554138496 ; - ! Ground Y slope under tire L1i
SV_DZDY_L1O 0.004554138496 ; - ! Ground Y slope under tire L1o
SV_DZDY_L2I 0.004240474745 ; - ! Ground Y slope under tire L2i
SV_DZDY_L2O 0.004240437498 ; - ! Ground Y slope under tire L2o
SV_DZDY_R1I 0.004554437488 ; - ! Ground Y slope under tire R1i
SV_DZDY_R1O 0.004554437488 ; - ! Ground Y slope under tire R1o
SV_DZDY_R2I 0.004240661345 ; - ! Ground Y slope under tire R2i
SV_DZDY_R2O 0.004240698595 ; - ! Ground Y slope under tire R2o
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST           0 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  16922.67917 ; N ! Force from ride spring L1
SV_FS_L2  6493.782121 ; N ! Force from ride spring L2
SV_FS_R1  16865.53998 ; N ! Force from ride spring R1
SV_FS_R2  4109.758725 ; N ! Force from ride spring R2
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}
SV_FX_SM_L1 -75.87305126 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 -24.4172839 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_R1 -79.62076765 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 -22.79344844 ; N ! Tire force [sx] component, wheel R2
SV_FY_SM_L1 -71.8717233 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 -3.853449442 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_R1 191.0077503 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 -4.238804799 ; N ! Tire force [sy] component, wheel R2
SV_FZ_SM_L1 19454.08496 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 11126.49387 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_R1 20208.00507 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 9974.234648 ; N ! Tire force force [sz] component, wheel R2
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_GEAR             5 ; - ! Automatic transmission gear {GearAuto}
SV_GEAR_DELAY       5 ; - ! Delayed transmission gear position
SV_GEAR_MEM         5 ; - ! Gear saved in memory, used for transition
SV_GEAR_STAT        5 ; - ! Transmission gear status {GearStat}
SV_IVERR   4.15541363 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_I_GEAR_SHIFT   0.2 ; kg-m2 ! Transmission gear inertia modulated by shift
SV_I_GEAR_SHIFT_START 0 ; kg-m2 ! Gear spin inertia when automatic shift started
SV_JNCR_A1 0.01329550063 ; m/s ! ODE: Jounce rate of axle 1
SV_JNCR_A2 0.003707528889 ; m/s ! ODE: Jounce rate of axle 2
SV_JNC_A1 -0.001590796411 ; m ! ODE: Jounce of axle 1
SV_JNC_A2 0.000326256248 ; m ! ODE: Jounce of axle 2
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Is clutch locked while in neutral?
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MY_BRK_L1 -4.173286033 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 -7.389456949 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_R1 -3.964402034 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 -6.164936037 ; N-m ! Spin moment, wheel R2
SV_MZ_WHEEL_L1 8.263079126 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 1.147760902 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_R1 -11.64874817 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 1.018191368 ; N-m ! Tire Mz, wheel R2
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff
SV_M_CLUTCH_DEL 2.357028052e-50 ; N-m ! ODE: Time delayed clutch torque capacity
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle diff
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request
SV_M_HYS_COL        0 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -148.0088518 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_R1 141.3452885 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_TC 2.357028052e-50 ; N-m ! Transmission input shaft torque
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1 1.752203067e-42 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2 1.752203067e-42 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_R1 1.752203067e-42 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2 1.752203067e-42 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PITCH -0.7487066195 ; deg ! ODE: Pitch of sprung mass {Pitch}
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio
SV_ROLL   0.112887539 ; deg ! ODE: Roll (Euler) of sprung mass {Roll_E}
SV_ROLL_A1 -0.09052838849 ; deg ! ODE: Roll of axle 1
SV_ROLL_A2 -0.1301651674 ; deg ! ODE: Roll of axle 2
SV_ROT_L1 264.5392702 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 265.6938076 ; rev ! ODE: Rotation of wheel L2
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_R1 265.3029334 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 266.4868424 ; rev ! ODE: Rotation of wheel R2
SV_ROT_SHAFT_2 1330.451625 ; rev ! ODE: 2nd drive axle diff input shaft rotation
SV_ROT_SHAFT_L_D2 265.6938076 ; rev ! ODE: Diff2 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D2 266.4868424 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation
SV_ROT_TC 1257.508246 ; rev ! ODE: Torque coupling output shaft rotation
SV_ROT_TR_OUT 1330.451339 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_SHIFT   1.5 ; - ! Transmission gear ratio modulated by gear shift
SV_R_GEAR_SHIFT_START 0 ; - ! Gear ratio when automatic shift started
SV_R_GEAR_TOTAL_SC 7.5 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.012039562 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.012041864 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1I 0.5001491622 ; m ! Deflected radius for tire L1i
SV_R_L1O 0.5001491622 ; m ! Deflected radius for tire L1o
SV_R_L2I 0.5143721757 ; m ! Deflected radius for tire L2i
SV_R_L2O 0.5142743531 ; m ! Deflected radius for tire L2o
SV_R_R1I 0.4993793363 ; m ! Deflected radius for tire R1i
SV_R_R1O 0.4993793363 ; m ! Deflected radius for tire R1o
SV_R_R2I 0.5148622369 ; m ! Deflected radius for tire R2i
SV_R_R2O 0.5149600601 ; m ! Deflected radius for tire R2o
SV_SHIFT_DELAY      0 ; - ! Is shifting delay in T.C. active?
SV_SLIP_LAT_L1I 0.0005829943079 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I 0.0002485783266 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O 0.000247310729 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_R1I -0.0008352675579 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I 0.0002551106239 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O 0.0002564509265 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LONG_L1I -0.0004429791926 ; - ! ODE: Lagged long. slip, tire L1i
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o
SV_SLIP_LONG_L2I -0.0003168803494 ; - ! ODE: Lagged long. slip, tire L2i
SV_SLIP_LONG_L2O -0.000339795179 ; - ! ODE: Lagged long. slip, tire L2o
SV_SLIP_LONG_R1I -0.0004517032291 ; - ! ODE: Lagged long. slip, tire R1i
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o
SV_SLIP_LONG_R2I -0.0003467808056 ; - ! ODE: Lagged long. slip, tire R2i
SV_SLIP_LONG_R2O -0.0003238629497 ; - ! ODE: Lagged long. slip, tire R2o
SV_SO_DIST 853.0678454 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SPEED_DVDS 0.1310390021 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 1356 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 52.93927351 ; km/h ! Initial target speed in preview array
SV_STATION 1357.34335 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 320.0250126 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM -0.04176007123 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD -0.04175488874 ; deg ! Road-wheel steer from driver model (prev. time
                             ! step)
SV_STR_IN_DGR_A1 -0.00430759427 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_GR_A1 -0.01821955467 ; - ! ODE: Steering gear input position, axle 1
                               ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_KP_L1 -0.04964481947 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD -0.0497054897 ; deg ! Kingpin steer angle, wheel L1 (previous time
                               ! step)
SV_STR_KP_L2_OLD    0 ; deg ! Kingpin steer angle, wheel L2 (previous time step)
SV_STR_KP_R1 0.03617175141 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD 0.0360948058 ; deg ! Kingpin steer angle, wheel R1 (previous time
                              ! step)
SV_STR_KP_R2_OLD    0 ; deg ! Kingpin steer angle, wheel R2 (previous time step)
SV_STR_OUT_GR_A1 -0.0007286960351 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_SWA   -1.043903587 ; deg ! ODE: Steering wheel angle
SV_SWA_DM -1.043780184 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD -1.043780184 ; deg ! Steering wheel angle (previous time step)
SV_S_OBJ_10 1445.928094 ; m ! ODE: Station of object 10 {S_Obj_10}
SV_S_OBJ_11 1365.73952 ; m ! ODE: Station of object 11 {S_Obj_11}
SV_S_OBJ_12 1858.506413 ; m ! ODE: Station of object 12 {S_Obj_12}
SV_S_OBJ_13 1768.826748 ; m ! ODE: Station of object 13 {S_Obj_13}
SV_S_OBJ_14 1619.347459 ; m ! ODE: Station of object 14 {S_Obj_14}
SV_S_OBJ_15 1539.755129 ; m ! ODE: Station of object 15 {S_Obj_15}
SV_S_OBJ_16 1459.944596 ; m ! ODE: Station of object 16 {S_Obj_16}
SV_S_OBJ_17 1410.131584 ; m ! ODE: Station of object 17 {S_Obj_17}
SV_S_OBJ_18 1360.261159 ; m ! ODE: Station of object 18 {S_Obj_18}
SV_S_OBJ_19 1280.420177 ; m ! ODE: Station of object 19 {S_Obj_19}
SV_S_OBJ_2 1776.976407 ; m ! ODE: Station of object 2 {S_Obj_2}
SV_S_OBJ_20 1240.47532 ; m ! ODE: Station of object 20 {S_Obj_20}
SV_S_OBJ_21 197.2755893 ; m ! ODE: Station of object 21 {S_Obj_21}
SV_S_OBJ_22 1561.950496 ; m ! ODE: Station of object 22 {S_Obj_22}
SV_S_OBJ_23 1462.130949 ; m ! ODE: Station of object 23 {S_Obj_23}
SV_S_OBJ_24 1412.041898 ; m ! ODE: Station of object 24 {S_Obj_24}
SV_S_OBJ_25 1210.178078 ; m ! ODE: Station of object 25 {S_Obj_25}
SV_S_OBJ_26 1110.071166 ; m ! ODE: Station of object 26 {S_Obj_26}
SV_S_OBJ_27 1060.274974 ; m ! ODE: Station of object 27 {S_Obj_27}
SV_S_OBJ_28 989.9314558 ; m ! ODE: Station of object 28 {S_Obj_28}
SV_S_OBJ_29 859.6189552 ; m ! ODE: Station of object 29 {S_Obj_29}
SV_S_OBJ_3 1877.300975 ; m ! ODE: Station of object 3 {S_Obj_3}
SV_S_OBJ_30 819.6192974 ; m ! ODE: Station of object 30 {S_Obj_30}
SV_S_OBJ_31 1493.832479 ; m ! ODE: Station of object 31 {S_Obj_31}
SV_S_OBJ_32 1464.113819 ; m ! ODE: Station of object 32 {S_Obj_32}
SV_S_OBJ_33 1423.643097 ; m ! ODE: Station of object 33 {S_Obj_33}
SV_S_OBJ_34 1372.563893 ; m ! ODE: Station of object 34 {S_Obj_34}
SV_S_OBJ_35 1290.531406 ; m ! ODE: Station of object 35 {S_Obj_35}
SV_S_OBJ_36 1290.531406 ; m ! ODE: Station of object 36 {S_Obj_36}
SV_S_OBJ_37 1218.803271 ; m ! ODE: Station of object 37 {S_Obj_37}
SV_S_OBJ_38 1058.31896 ; m ! ODE: Station of object 38 {S_Obj_38}
SV_S_OBJ_39 997.9087404 ; m ! ODE: Station of object 39 {S_Obj_39}
SV_S_OBJ_4 1947.38556 ; m ! ODE: Station of object 4 {S_Obj_4}
SV_S_OBJ_40 737.4248205 ; m ! ODE: Station of object 40 {S_Obj_40}
SV_S_OBJ_41 1478.986086 ; m ! ODE: Station of object 41 {S_Obj_41}
SV_S_OBJ_42 1327.83927 ; m ! ODE: Station of object 42 {S_Obj_42}
SV_S_OBJ_43 1409.574711 ; m ! ODE: Station of object 43 {S_Obj_43}
SV_S_OBJ_44 356.8469647 ; m ! ODE: Station of object 44 {S_Obj_44}
SV_S_OBJ_45 336.8427798 ; m ! ODE: Station of object 45 {S_Obj_45}
SV_S_OBJ_46 316.8388878 ; m ! ODE: Station of object 46 {S_Obj_46}
SV_S_OBJ_47 296.8388355 ; m ! ODE: Station of object 47 {S_Obj_47}
SV_S_OBJ_48 271.8388355 ; m ! ODE: Station of object 48 {S_Obj_48}
SV_S_OBJ_49 334.5510368 ; m ! ODE: Station of object 49 {S_Obj_49}
SV_S_OBJ_5 1817.137571 ; m ! ODE: Station of object 5 {S_Obj_5}
SV_S_OBJ_50 304.531429 ; m ! ODE: Station of object 50 {S_Obj_50}
SV_S_OBJ_51 284.5194766 ; m ! ODE: Station of object 51 {S_Obj_51}
SV_S_OBJ_52 259.5165922 ; m ! ODE: Station of object 52 {S_Obj_52}
SV_S_OBJ_53 229.5165922 ; m ! ODE: Station of object 53 {S_Obj_53}
SV_S_OBJ_6 1817.137571 ; m ! ODE: Station of object 6 {S_Obj_6}
SV_S_OBJ_7 1696.722915 ; m ! ODE: Station of object 7 {S_Obj_7}
SV_S_OBJ_8 1606.442674 ; m ! ODE: Station of object 8 {S_Obj_8}
SV_S_OBJ_9 1526.076148 ; m ! ODE: Station of object 9 {S_Obj_9}
SV_S_RDO_1          0 ; m ! Station of object 1 on road path {S_RdO_1}
SV_S_RDO_10 1445.928094 ; m ! Station of object 10 on road path {S_RdO_10}
SV_S_RDO_11 1365.73952 ; m ! Station of object 11 on road path {S_RdO_11}
SV_S_RDO_12 1858.506413 ; m ! Station of object 12 on road path {S_RdO_12}
SV_S_RDO_13 1768.826748 ; m ! Station of object 13 on road path {S_RdO_13}
SV_S_RDO_14 1619.347459 ; m ! Station of object 14 on road path {S_RdO_14}
SV_S_RDO_15 1539.755129 ; m ! Station of object 15 on road path {S_RdO_15}
SV_S_RDO_16 1459.944596 ; m ! Station of object 16 on road path {S_RdO_16}
SV_S_RDO_17 1410.131584 ; m ! Station of object 17 on road path {S_RdO_17}
SV_S_RDO_18 1360.261159 ; m ! Station of object 18 on road path {S_RdO_18}
SV_S_RDO_19 1280.420177 ; m ! Station of object 19 on road path {S_RdO_19}
SV_S_RDO_2 1776.976407 ; m ! Station of object 2 on road path {S_RdO_2}
SV_S_RDO_20 1240.47532 ; m ! Station of object 20 on road path {S_RdO_20}
SV_S_RDO_21 197.2755893 ; m ! Station of object 21 on road path {S_RdO_21}
SV_S_RDO_22 1561.950496 ; m ! Station of object 22 on road path {S_RdO_22}
SV_S_RDO_23 1462.130949 ; m ! Station of object 23 on road path {S_RdO_23}
SV_S_RDO_24 1412.041898 ; m ! Station of object 24 on road path {S_RdO_24}
SV_S_RDO_25 1210.178078 ; m ! Station of object 25 on road path {S_RdO_25}
SV_S_RDO_26 1110.071166 ; m ! Station of object 26 on road path {S_RdO_26}
SV_S_RDO_27 1060.274974 ; m ! Station of object 27 on road path {S_RdO_27}
SV_S_RDO_28 989.9314558 ; m ! Station of object 28 on road path {S_RdO_28}
SV_S_RDO_29 859.6189552 ; m ! Station of object 29 on road path {S_RdO_29}
SV_S_RDO_3 1877.300975 ; m ! Station of object 3 on road path {S_RdO_3}
SV_S_RDO_30 819.6192974 ; m ! Station of object 30 on road path {S_RdO_30}
SV_S_RDO_31 1493.832479 ; m ! Station of object 31 on road path {S_RdO_31}
SV_S_RDO_32 1464.113819 ; m ! Station of object 32 on road path {S_RdO_32}
SV_S_RDO_33 1423.643097 ; m ! Station of object 33 on road path {S_RdO_33}
SV_S_RDO_34 1372.563893 ; m ! Station of object 34 on road path {S_RdO_34}
SV_S_RDO_35 1290.531406 ; m ! Station of object 35 on road path {S_RdO_35}
SV_S_RDO_36 1290.531406 ; m ! Station of object 36 on road path {S_RdO_36}
SV_S_RDO_37 1218.803271 ; m ! Station of object 37 on road path {S_RdO_37}
SV_S_RDO_38 1058.31896 ; m ! Station of object 38 on road path {S_RdO_38}
SV_S_RDO_39 997.9087404 ; m ! Station of object 39 on road path {S_RdO_39}
SV_S_RDO_4 1947.38556 ; m ! Station of object 4 on road path {S_RdO_4}
SV_S_RDO_40 737.4248205 ; m ! Station of object 40 on road path {S_RdO_40}
SV_S_RDO_41 1478.986086 ; m ! Station of object 41 on road path {S_RdO_41}
SV_S_RDO_42 1327.83927 ; m ! Station of object 42 on road path {S_RdO_42}
SV_S_RDO_43 1409.574711 ; m ! Station of object 43 on road path {S_RdO_43}
SV_S_RDO_44 356.8469647 ; m ! Station of object 44 on road path {S_RdO_44}
SV_S_RDO_45 336.8427798 ; m ! Station of object 45 on road path {S_RdO_45}
SV_S_RDO_46 316.8388878 ; m ! Station of object 46 on road path {S_RdO_46}
SV_S_RDO_47 296.8388355 ; m ! Station of object 47 on road path {S_RdO_47}
SV_S_RDO_48 271.8388355 ; m ! Station of object 48 on road path {S_RdO_48}
SV_S_RDO_49 334.5510368 ; m ! Station of object 49 on road path {S_RdO_49}
SV_S_RDO_5 1817.137571 ; m ! Station of object 5 on road path {S_RdO_5}
SV_S_RDO_50 304.531429 ; m ! Station of object 50 on road path {S_RdO_50}
SV_S_RDO_51 284.5194766 ; m ! Station of object 51 on road path {S_RdO_51}
SV_S_RDO_52 259.5165922 ; m ! Station of object 52 on road path {S_RdO_52}
SV_S_RDO_53 229.5165922 ; m ! Station of object 53 on road path {S_RdO_53}
SV_S_RDO_6 1817.137571 ; m ! Station of object 6 on road path {S_RdO_6}
SV_S_RDO_7 1696.722915 ; m ! Station of object 7 on road path {S_RdO_7}
SV_S_RDO_8 1606.442674 ; m ! Station of object 8 on road path {S_RdO_8}
SV_S_RDO_9 1526.076148 ; m ! Station of object 9 on road path {S_RdO_9}
SV_THROTTLE 0.228686643 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          1 ; - ! Requested Throttle
SV_TH_AUTO_SHIFT    1 ; - ! Boolean: 1 if auto throttle for a gear shift
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time of ESC control status changed
SV_T_SHIFT_START 36.7695 ; s ! Time when automatic gear shift started
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VERR_OLD 5.734460212 ; km/h ! Speed controller error at previous time step
SV_VXS    47.83474679 ; km/h ! ODE: Body-X speed of laden sprung-mass CG
SV_VYS 0.000634144162 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG
SV_VZS -0.03680561604 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG
SV_V_O_41  89.9952939 ; km/h ! Speed of object {V_Obj_41}
SV_V_O_42  35.8554432 ; km/h ! Speed of object {V_Obj_42}
SV_V_O_43 73.00094031 ; km/h ! Speed of object {V_Obj_43}
SV_XO     29.32074669 ; m ! ODE: Global X coord. of sprung-mass origin {Xo}
SV_X_GND  31.64096436 ; m ! X coord, ground, vehicle aero ref. pt
SV_YAW    157.7674516 ; deg ! ODE: Yaw of sprung mass {Yaw}
SV_YAW_O_41 -19.73257461 ; deg ! ODE: Yaw of object 41 {Yaw_O_41}
SV_YAW_O_42 160.1851253 ; deg ! ODE: Yaw of object 42 {Yaw_O_42}
SV_YAW_O_43 157.6569544 ; deg ! ODE: Yaw of object 43 {Yaw_O_43}
SV_YO     1316.113543 ; m ! ODE: Global Y coord. of sprung-mass origin {Yo}
SV_Y_GND  1315.165143 ; m ! Y coord, ground, vehicle aero ref. pt
SV_ZO    -9.250374376 ; m ! ODE: Global Z coord. of sprung-mass origin {Zo}
SV_Z_CTC_L1I -9.241712419 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O -9.241712419 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I -9.299999844 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O -9.299995662 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_R1I -9.241736621 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O -9.241736621 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I -9.300020797 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O -9.300024979 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_GND -9.271452223 ; m ! Z coord, ground, vehicle aero ref. pt


END
