PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT I_S

DATASET_TITLE Road X-Y-Z Edges
CATEGORY Road Networks: 3D Geometry and Terrain
TITLE Road X-Y-Z Edges <Road Networks: 3D Geometry and Terrain>

! Echo: Results\Run_da3ef1f2-8a90-470a-a993-0aaf56451eb8\LastRun_echo.par
! This run was made 11:26 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    37 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE       56 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            1 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     1 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME 0.09507974115 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART            100 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE      100 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP             200 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP        -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL  777.965979 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1682.163907 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL 0.03819475314 ; mm ! CALC -- Y coordinate of TL CG
! M_TL           3602 ; kg ! CALC -- TL mass
! IXX_TL  1607.477465 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  14271.53181 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  14037.33972 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           850 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1560 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             3080 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU           1260 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU          11730 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU          11420 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU            110 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

HT_SM            1611 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM           4020 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM           2486 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM          1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         3.2 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       4000 ; mm ! Aerodynamic reference length
X_REF_AERO      -2000 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. For solid-axle
! suspensions, these include the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE,
! SUSP_X_AXLE, and SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the
! origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         400 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         400 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)      1.9 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,2)      1.9 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1)           0.1 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)           0.1 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1750 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)      22 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)      22 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)      52 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)      52 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)         210 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.7904761905 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(2)      325 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(2,1)         325 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         325 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(2)              57 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(2,1)      3.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(2,2)      3.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(2,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(2,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(2,1)           0.2 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)           0.2 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1900 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       4020 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(2)      188 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)         312 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.3974358974 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(2)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 92.41669866 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 92.41669866 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 18483.33973 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1) 18483.33973 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 18483.33973 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 18483.33973 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 20542.73623 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 20542.73623 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 10271.36812 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 10271.36812 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 5855.070834 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) -36.903718 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) -36.903718 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(2,1)        0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(2,2)        0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(2,1)        0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(2,2)        0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(2) 11721.14227 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(2) 11721.14227 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 6511.745705 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 6511.745705 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 14780.81707 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 14780.81707 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 7390.408534 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 7390.408534 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 1964.953516 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(2)     1100 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(2)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(2)   1200 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(2)   1200 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(2)     1200 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(2)        0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       1 ! Option for calculating steering wheel torque when the angle
                      ! is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table, 1 ->
                      ! calculated (see the steering Help document for details) [I]
OPT_POWER           1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
BETA_COL          0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL            0.01 ; N-m-s/deg ! Steering column viscous damping
D_TBAR              0 ; N-m-s/deg ! [D] Torsion bar viscous damping
HYS_COL          0.25 ; N-m ! Steering column friction torque
I_GEAR_IN    0.000564 ; kg-m2 ! Steering system inertia
M_BOOST_MAX       400 ; N-m ! Maximum power steering boost torque
TC_BOOST         0.02 ; s ! Time constant for power steering boost
A_STR_STOP_L      -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           0 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1)         0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1)     3.5 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     3.5 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)          8 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)          8 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)      2 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)      2 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)      0.1 ; deg ! Ref hys. angle for steering gear friction, axle 1
D_GEAR(1)         2.5 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1)        10 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1)       39.5 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)       39.5 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)         -1 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)         -1 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1)           0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(2)         290 ; mm ! Dual-tire spacing for axle 2 [I]

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 7 -> built-in Pacejka 5.2; 8 ->
                        ! TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                        ! tire model [I]
OPT_TIRE_COMB(1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1)  100000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1)   11500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         1.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1)      31 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1)    0.0044 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)   2.8e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1)  100000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,2,1)   11500 ; N ! Reference vertical force
IT(1,2,1)         1.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,2,1)      31 ; kg ! Mass of tire R1i
MU_REF_X(1,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,2,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,2,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1)  100000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(2,1,1)   11500 ; N ! Reference vertical force
IT(2,1,1)         1.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(2,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(2,1,1)      31 ; kg ! Mass of tire L2i
MU_REF_X(2,1,1)     1 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(2,1,1)     1 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(2,1,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(2,1,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2)  100000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(2,1,2)   11500 ; N ! Reference vertical force
IT(2,1,2)         1.8 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(2,1,2)      0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(2,1,2)      31 ; kg ! Mass of tire L2o
MU_REF_X(2,1,2)     1 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(2,1,2)     1 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(2,1,2)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2)        393 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(2,1,2)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1)  100000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(2,2,1)   11500 ; N ! Reference vertical force
IT(2,2,1)         1.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(2,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(2,2,1)      31 ; kg ! Mass of tire R2i
MU_REF_X(2,2,1)     1 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(2,2,1)     1 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(2,2,1)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(2,2,1)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2)  100000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(2,2,2)   11500 ; N ! Reference vertical force
IT(2,2,2)         1.8 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(2,2,2)      0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(2,2,2)      31 ; kg ! Mass of tire R2o
MU_REF_X(2,2,2)     1 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(2,2,2)     1 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(2,2,2)         402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2)        393 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(2,2,2)    0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2)   2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)  0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)  0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)  0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)  0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              3 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise
R_DRIVE_SC(1)     0.5 ; - ! [D] Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(2)     0.5 ; - ! [D] Ratio: [axle drive torque]/[total drive torque] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(1)  0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(1) 1 ; N-m-s/deg ! Torsional damping for locked 1st drive axle diff
                      ! [I]
LOCKED_DIFF_K(1)  100 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff [I]
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of 1st drive axle diff [I]
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of 1st drive axle diff [I]
R_GEAR_DIFF(1)    4.1 ; - ! Gear ratio of 1st drive axle diff [I]
IDS(1)          0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft [I]
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle diff
                      ! [I]
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(1)  0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)    4.1 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

OPT_DIFF_INTERNAL(3) 1 ! Transfer case model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(3)  0 ! Is the transfer case locked? 0 -> no, 1 -> yes [I]
R_REAR_BIAS(3)    0.5 ; - ! Fraction: transfer case torque on the transfer case [I]
LOCKED_DIFF_DAMP(3) 0.8 ; N-m-s/deg ! Torsional damping for locked transfer case [I]
LOCKED_DIFF_K(3)   80 ; N-m/deg ! Torsional spring rate for locked transfer case [I]
R_EFF_F_DIFF(3)  0.99 ; - ! Forward efficiency of transfer case [I]
R_EFF_R_DIFF(3)  0.99 ; - ! Reverse efficiency of transfer case [I]
R_GEAR_DIFF(3)      1 ; - ! Gear ratio of transfer case [I]
IDS(3)              0 ; kg-m2 ! [D] Spin inertia of transfer case input shaft [I]
OPT_CLUTCH_DIFF(3)  0 ! [D] Clutch control for transfer case: 0 -> table lookup or
                      ! external, 1 -> Torsen parameters, 2 -> yaw control [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE       675 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             0.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL     0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE     0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1)          0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)      3.1 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st-gear [I]

ITR(2)          0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     1.81 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd-gear

ITR(3)          0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.95 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.95 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     1.41 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd-gear

ITR(4)           0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.95 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.95 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)        1 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th-gear

ITR(5)           0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.98 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.98 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)     0.71 ; - ! 5th-gear ratio of transmission
T_SHIFT_UP(5)      -1 ; - ! [D] Duration of up-shift from 5th-gear
T_SHIFT_DOWN(5)    -1 ; - ! [D] Duration of down-shift to 5th-gear

ITR(6)           0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia
R_EFF_TR_F(6)    0.99 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)    0.99 ; - ! 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)     0.61 ; - ! 6th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; X-Y-Z Edges, Looped Road
OPT_PATH_START(1)   0 ! [D] Set initial heading and X-Y coordinates of the path? 0
                      ! -> no (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! [D] Station at the start of this path
! SPATH_LAP(1) 1121.220956 ; m ! CALC -- Lap distance for this path
! HEADING_START(1) 31.54106494 ; deg ! Heading at the start of this path
! X_PATH_START(1) -54.277 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1) 154.002 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(1,1)  1 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(1,1) 1121.220956 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) -54.277 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 154.002 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) 31.54106494 ; deg ! CALC -- Heading at end of segment
DEFINE_XY_TABLES    1 ! No. of XY spline tables (see the SPLINE TABLES section)

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            1 ! Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID during initialization [I]

ROAD_ID(1)          1 ; X-Y-Z Edges, Looped Road
ROAD_PATH_ID(1)     1 ; PATH_ID for: X-Y-Z Edges, Looped Road
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)       1 ; ROAD_DZ_ID for: X-Y-Z Edges, Looped Road

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run

PATH_ID_DM          1 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTOP     2231.498954 ; m ! Use to set OPT_DIRECTION (if OPT_DIRECTION = 0); stop
                      ! when the vehicle reaches this station (if OPT_STOP = 1)

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)   0.15 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)   0.5 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         3 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, 1st
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3) 1 ; - ! [D] Constant normalized clutch input,
                                  ! transfer case
CLUTCH_CONTROL_DIFF_GAIN(3) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, 1st drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, transfer
                                 ! case
CLUTCH_TORQUE_DIFF_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.5 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.5 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 0.9 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 0.9 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.5 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.5 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 0.9 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 0.9 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.5 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.5 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 0.9 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 0.9 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.5 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), axle 1, left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.5 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), axle 1, right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 0.9 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 0.9 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 2, left side
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 2, right side
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0.00095 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 2, left side
CS_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0.00095 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 2, right side
CS_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index IAXLE is used
! to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(2) 3.8e-05 ! Coefficient: C_LAT_AXLE displacement per unit
                                  ! force (mm/N), axle 2
C_LAT_AXLE_GAIN(2)  1 ! Gain multiplied with calculated value to get C_LAT_AXLE
                      ! displacement
C_LAT_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(2) 7e-05 ! Coefficient: C_LONG_AXLE displacement per unit
                                 ! force (mm/N), axle 2
C_LONG_AXLE_GAIN(2) 1 ! Gain multiplied with calculated value to get C_LONG_AXLE
                      ! displacement
C_LONG_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 298
 0.2, 298
 0.8, 1150
 1, 1150
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 383
 0.2, 383
 0.8, 1969
 1, 1969
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 540
 0.2, 540
 0.8, 2528
 1, 2528
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 761
 0.2, 761
 0.8, 3564
 1, 3564
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 885
 0.2, 885
 0.8, 5020
 1, 5020
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1) 20 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, left side
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(1,2) 20 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, right side
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,1) 10 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, left side
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,2) 10 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, right side
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 200 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 200 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,1) SPLINE ! axle 2, left side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2) SPLINE ! axle 2, right side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 200 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 200 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,1) SPLINE ! axle 2, left side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2) SPLINE ! axle 2, right side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, left, inner
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, right, inner
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, inner
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, outer
FZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, inner
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2) 502 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, outer
FZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.05902776548 ! Coefficient: pitman arm angle per unit
                                      ! steering gear input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.0084852815
 0.1, 0.0084012685
 0.2, 0.0083189025
 0.3, 0.0082380885
 0.4, 0.008158069
 0.5, 0.0080733285
 0.6, 0.0079565795
 0.7, 0.007706162
 0.8, 0.007013131
 0.9, 0.005070318
 0.95, 0.003109434
 0.99, 0.0007382575
 1, 0
 1.01, -0.0007382575
 1.05, -0.003109434
 1.1, -0.005070318
 1.2, -0.007013131
 1.3, -0.007706162
 1.4, -0.0079565795
 1.5, -0.0080733285
 1.6, -0.008158069
 1.7, -0.0082380885
 1.8, -0.0083189025
 1.9, -0.0084852815
 2, -0.0084852815
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                      ! converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 8 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IAXLE, ISIDE,
! and ITIRE are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,2) SPLINE ! axle 2, left, outer
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,2) SPLINE ! axle 2, right, outer
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 1.65m Right, 0.6s Single Preview
LTARG_CONSTANT(1) -1.65 ; m ! Constant lateral offset
LTARG_GAIN(1)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 85 ; mm ! Constant tire contact length, axle 1, left,
                               ! inner
L_CONTACT_X_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 85 ; mm ! Constant tire contact length, axle 1, right,
                               ! inner
L_CONTACT_X_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 85 ; mm ! Constant tire contact length, axle 2, left,
                               ! inner
L_CONTACT_X_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,2) 85 ; mm ! Constant tire contact length, axle 2, left,
                               ! outer
L_CONTACT_X_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 85 ; mm ! Constant tire contact length, axle 2, right,
                               ! inner
L_CONTACT_X_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,2) 85 ; mm ! Constant tire contact length, axle 2, right,
                               ! outer
L_CONTACT_X_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact length
L_CONTACT_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 265 ; mm ! Constant tire contact width, axle 1, left,
                                ! inner
L_CONTACT_Y_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 265 ; mm ! Constant tire contact width, axle 1, right,
                                ! inner
L_CONTACT_Y_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 265 ; mm ! Constant tire contact width, axle 2, left,
                                ! inner
L_CONTACT_Y_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,2) 265 ; mm ! Constant tire contact width, axle 2, left,
                                ! outer
L_CONTACT_Y_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 265 ; mm ! Constant tire contact width, axle 2, right,
                                ! inner
L_CONTACT_Y_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,2) 265 ; mm ! Constant tire contact width, axle 2, right,
                                ! outer
L_CONTACT_Y_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get tire
                          ! contact width
L_CONTACT_Y_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2) LINEAR ! axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2) 0.0786 ! Gain multiplied with calculated value to get
                             ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2) LINEAR ! axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2) 11500 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2) SPLINE ! axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2) 0.786 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2) SPLINE ! axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2) 11500 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 5, 15, 20, 30, 40, 60, 75, 90, 98, 100
 500, 25, 30, 40, 60, 80, 120, 150, 180, 196, 200
 600, 10, 45, 60, 90, 120, 180, 225, 270, 294, 300
 800, -15, 59.25, 79, 118.5, 158, 237, 296.25, 355.5, 387.1, 395
 1000, -25, 75, 100, 150, 200, 300, 375, 450, 490, 500
 1200, -40, 97.5, 130, 195, 260, 390, 487.5, 585, 637, 650
 1400, -50, 108.75, 145, 217.5, 290, 435, 543.75, 652.5, 710.5, 725
 1600, -65, 123.75, 165, 247.5, 330, 495, 618.75, 742.5, 808.5, 825
 1800, -90, 135, 180, 270, 360, 540, 675, 810, 882, 900
 2000, -105, 133.5, 178, 267, 356, 534, 667.5, 801, 872.2, 890
 2200, -125, 133.2, 177.6, 266.4, 355.2, 532.8, 666, 799.2, 870.24, 888
 2400, -150, 131.25, 175, 262.5, 350, 525, 656.25, 787.5, 857.5, 875
 2600, -170, 127.5, 170, 255, 340, 510, 637.5, 765, 833, 850
 2800, -190, 126, 168, 252, 336, 504, 630, 756, 823.2, 840
 3000, -210, 124.5, 166, 249, 332, 498, 622.5, 747, 813.4, 830
 3200, -225, 120, 160, 240, 320, 480, 600, 720, 784, 800
 3400, -230, 105, 140, 210, 280, 420, 525, 630, 686, 700
 3600, -240, 82.5, 110, 165, 220, 330, 412.5, 495, 539, 550
 4000, -250, 75, 100, 150, 200, 300, 375, 450, 490, 500
 4400, -275, -275, -275, -275, -275, -275, -275, -275, -275, -275
 4500, -280, -280, -280, -280, -280, -280, -280, -280, -280, -280
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 510 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 510 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 500 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 500 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 300 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 300 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,1) LINEAR_FLAT ! axle 1, left side
 0, 180
 0.1, 162.45
 0.2, 145.8
 0.3, 130.05
 0.4, 115.2
 0.5, 101.25
 0.6, 88.2
 0.7, 76.05
 0.8, 64.8
 0.9, 54.45
 1, 45
 1.1, 36.45
 1.2, 28.8
 1.3, 22.05
 1.4, 16.2
 1.5, 11.25
 1.6, 7.2
 1.7, 4.05
 1.8, 1.8
 1.9, 0.45
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,1) 1 ! Scale factor divided into (vehicle speed -
                                 ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(1,2) LINEAR_FLAT ! axle 1, right side
 0, 180
 0.1, 162.45
 0.2, 145.8
 0.3, 130.05
 0.4, 115.2
 0.5, 101.25
 0.6, 88.2
 0.7, 76.05
 0.8, 64.8
 0.9, 54.45
 1, 45
 1.1, 36.45
 1.2, 28.8
 1.3, 22.05
 1.4, 16.2
 1.5, 11.25
 1.6, 7.2
 1.7, 4.05
 1.8, 1.8
 1.9, 0.45
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
VX_START_MZ_PARKING_STEER(1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(1,2) 1 ! Scale factor divided into (vehicle speed -
                                 ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_BOOST_G: Boost torque applied to steering gear. Boost torque can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_BOOST_G_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost torque from the calculation can be adjusted with M_BOOST_G_GAIN
! and M_BOOST_G_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_M_BOOST and M_TB_START_M_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_M_BOOST and VX_TB_START_M_BOOST.

! 1D table: col 1 = torsion bar torque (N-m), col 2 = boost torque (N-m)
M_BOOST_G_TABLE LINEAR ! linear interpolation and extrapolation
 -2, -56
 -1.5, -8
 -0.75, -0.2
 0, 0
 0.75, 0.2
 1.5, 8
 2, 56
ENDTABLE
M_BOOST_G_GAIN      1 ! Gain multiplied with calculated value to get boost torque
M_BOOST_G_OFFSET    0 ; N-m ! Offset added (after gain) to get boost torque
M_TB_START_M_BOOST  0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_M_BOOST  1 ! Scale factor divided into (torsion bar torque -
                      ! M_TB_START_M_BOOST)
M_BOOST_G_COMBINE ADD ! How to combine the two components
SET_UNITS M_BOOST_G_V_TABLE N-m ;
M_BOOST_G_V_CONSTANT 0 ; N-m ! Constant boost torque component due to speed

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(1) SPLINE ! 1st drive axle diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(1) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(1) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2) SPLINE ! 2nd drive axle diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(3) SPLINE ! transfer case
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(3) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(3) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(3) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT  2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,1) LINEAR ! axle 2, left side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1) 0 ; MPa ! Constant delivery pressure component due to
                          ! dynamic wheel load, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2) LINEAR ! axle 2, right side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2) 0 ; MPa ! Constant delivery pressure component due to
                          ! dynamic wheel load, axle 2, right side

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! User-defined ID number for this dataset

! 2D variable width table: (data section) row 1 is a header for the 2 lanes of
! lateral position (m). Other rows have station (m) followed by 2 values of dZ (m).
! (column section) Row 1 is a header for the lanes. Other rows have station (m)
! followed by the values of lateral position (m).
ROAD_DZ_CARPET(1) VAR_WIDTH
 0, 1, 2
 0, -0.1873, 0
 3.5968, -0.192, 0
 7.5225, -0.1976, 0
 11.5883, -0.2044, 0
 15.6029, -0.2141, 0
 19.3774, -0.2253, 0
 22.9529, -0.2394, 0
 26.4989, -0.2566, 0
 30.0261, -0.2734, 0
 33.5393, -0.2907, 0
 37.0347, -0.3054, 0
 40.5404, -0.3159, 0
 44.0975, -0.3223, 0
 47.7125, -0.3273, 0
 51.3932, -0.33, 0
 55.143, -0.3283, 0
 59.0144, -0.3194, 0
 63.0357, -0.3013, 0
 67.1644, -0.2817, 0
 71.3523, -0.2612, 0
 75.5481, -0.2467, 0
 79.7441, -0.2431, 0
 83.9939, -0.2453, 0
 88.3258, -0.2478, 0
 92.7548, -0.248, 0
 97.2945, -0.2462, 0
 102.049, -0.244, 0
 107.0082, -0.2444, 0
 112.0172, -0.2426, 0
 116.923, -0.2373, 0
 121.5736, -0.2281, 0
 125.9682, -0.211, 0
 130.2063, -0.1954, 0
 134.3005, -0.183, 0
 138.2642, -0.1799, 0
 142.1323, -0.1852, 0
 145.8027, -0.1842, 0
 149.2675, -0.1832, 0
 152.7458, -0.1944, 0
 156.4765, -0.226, 0
 160.7224, -0.2927, 0
 165.3126, -0.3805, 0
 169.6997, -0.4515, 0
 173.4591, -0.4932, 0
 176.1028, -0.5134, 0
 177.1047, -0.5414, 0
 178.4204, -0.5467, 0
 181.7789, -0.5143, 0
 186.2916, -0.4679, 0
 191.0794, -0.416, 0
 195.2696, -0.371, 0
 198.952, -0.3416, 0
 202.7144, -0.3278, 0
 206.4602, -0.3149, 0
 210.1047, -0.297, 0
 213.5765, -0.2757, 0
 216.8449, -0.2587, 0
 219.9937, -0.2447, 0
 223.1555, -0.2325, 0
 226.4624, -0.2246, 0
 230.0473, -0.2169, 0
 234.0681, -0.2096, 0
 238.4758, -0.2073, 0
 243.0825, -0.203, 0
 247.6997, -0.1942, 0
 252.1337, -0.1838, 0
 256.327, -0.1766, 0
 260.4306, -0.1733, 0
 264.5685, -0.1735, 0
 268.8634, -0.1768, 0
 273.4361, -0.1819, 0
 278.251, -0.1836, 0
 283.2408, -0.1829, 0
 288.4822, -0.1823, 0
 294.0595, -0.1839, 0
 300.0626, -0.1926, 0
 306.4613, -0.2011, 0
 313.0378, -0.2054, 0
 319.611, -0.207, 0
 326.0088, -0.2061, 0
 332.0701, -0.2018, 0
 337.4611, -0.1945, 0
 342.1596, -0.1887, 0
 346.4763, -0.1841, 0
 350.7209, -0.1815, 0
 355.1972, -0.1783, 0
 359.8568, -0.1682, 0
 364.4985, -0.1579, 0
 369.1971, -0.1466, 0
 374.0268, -0.1399, 0
 379.0627, -0.1337, 0
 384.4084, -0.1251, 0
 390.0178, -0.114, 0
 395.7302, -0.1033, 0
 401.3898, -0.0935, 0
 406.8394, -0.0897, 0
 411.9174, -0.0878, 0
 416.7297, -0.0836, 0
 421.5186, -0.0716, 0
 426.5215, -0.0491, 0
 431.9846, -0.0266, 0
 437.5655, -0.0068, 0
 442.7943, 0.008, 0
 447.7117, 0.0228, 0
 452.3399, 0.0382, 0
 456.6949, 0.0555, 0
 460.7541, 0.0686, 0
 464.5447, 0.08, 0
 468.1205, 0.0961, 0
 471.515, 0.1187, 0
 474.7531, 0.1347, 0
 477.9732, 0.1265, 0
 481.323, 0.1108, 0
 484.8038, 0.0961, 0
 488.3989, 0.0804, 0
 492.0859, 0.0487, 0
 495.8619, -0.0089, 0
 499.7433, -0.0691, 0
 503.63, -0.1133, 0
 507.388, -0.1376, 0
 510.8954, -0.14, 0
 514.2352, -0.1427, 0
 517.4852, -0.1472, 0
 520.5949, -0.1486, 0
 523.5145, -0.1469, 0
 526.1958, -0.1511, 0
 528.7252, -0.1564, 0
 531.3373, -0.1534, 0
 534.2235, -0.1389, 0
 537.5924, -0.1148, 0
 541.6649, -0.0781, 0
 545.7908, -0.0344, 0
 549.3192, -0.0004, 0
 552.4495, 0.0177, 0
 555.3855, 0.0208, 0
 558.3569, 0.0152, 0
 561.3706, 0.0084, 0
 564.3039, 0.0011, 0
 567.221, -0.0054, 0
 570.1743, -0.01, 0
 573.2114, -0.0142, 0
 576.4298, -0.0228, 0
 579.8431, -0.0287, 0
 583.328, -0.0319, 0
 586.7223, -0.0405, 0
 589.861, -0.0646, 0
 592.9466, -0.0999, 0
 596.2661, -0.1392, 0
 599.6871, -0.1775, 0
 603.0437, -0.2146, 0
 606.1546, -0.2485, 0
 609.1509, -0.2802, 0
 612.2715, -0.3063, 0
 615.5252, -0.322, 0
 618.9987, -0.3233, 0
 622.888, -0.3152, 0
 626.4428, -0.3099, 0
 629.0323, -0.3067, 0
 631.1282, -0.3028, 0
 633.1667, -0.3024, 0
 635.5331, -0.2947, 0
 638.3559, -0.2665, 0
 641.5275, -0.2311, 0
 644.9262, -0.2007, 0
 648.3629, -0.1798, 0
 651.6328, -0.1699, 0
 654.7043, -0.1693, 0
 657.66, -0.1724, 0
 660.4991, -0.1784, 0
 663.2308, -0.1897, 0
 665.8763, -0.2017, 0
 668.4241, -0.216, 0
 670.9191, -0.2305, 0
 673.4727, -0.2418, 0
 676.186, -0.249, 0
 679.1503, -0.256, 0
 682.3462, -0.2706, 0
 685.7049, -0.2797, 0
 689.1194, -0.2804, 0
 692.4206, -0.2787, 0
 695.4101, -0.2811, 0
 698.5107, -0.2829, 0
 702.1011, -0.281, 0
 705.8961, -0.2775, 0
 709.6107, -0.2771, 0
 712.9603, -0.2808, 0
 716.2582, -0.2827, 0
 719.9472, -0.2804, 0
 723.93, -0.279, 0
 728.1109, -0.2767, 0
 732.3936, -0.2796, 0
 737.2378, -0.2825, 0
 742.887, -0.2831, 0
 748.9059, -0.2801, 0
 754.8493, -0.2791, 0
 760.2688, -0.2787, 0
 765.1101, -0.2809, 0
 769.6824, -0.2851, 0
 774.0759, -0.2877, 0
 778.3785, -0.2906, 0
 782.6727, -0.2934, 0
 786.948, -0.2952, 0
 791.1503, -0.2982, 0
 795.3013, -0.3013, 0
 799.4249, -0.3035, 0
 803.5385, -0.3048, 0
 807.4852, -0.3059, 0
 811.2544, -0.3057, 0
 815.0855, -0.3068, 0
 819.223, -0.3069, 0
 823.9122, -0.3074, 0
 829.4257, -0.3069, 0
 835.6, -0.3059, 0
 842.0384, -0.3046, 0
 848.3398, -0.303, 0
 854.1043, -0.302, 0
 859.1336, -0.3026, 0
 863.6952, -0.3018, 0
 868.0972, -0.2991, 0
 872.6463, -0.2955, 0
 877.6505, -0.2906, 0
 883.2263, -0.2861, 0
 889.1724, -0.28, 0
 895.3202, -0.2747, 0
 901.5008, -0.2682, 0
 907.5485, -0.2599, 0
 913.5425, -0.248, 0
 919.6022, -0.2347, 0
 925.6231, -0.2245, 0
 931.4917, -0.2229, 0
 937.0999, -0.2311, 0
 942.6004, -0.2407, 0
 948.072, -0.2484, 0
 953.277, -0.2547, 0
 957.9818, -0.2619, 0
 961.9505, -0.278, 0
 964.9443, -0.3156, 0
 967.124, -0.3392, 0
 968.846, -0.3531, 0
 970.464, -0.3616, 0
 972.3309, -0.3707, 0
 974.177, -0.3831, 0
 975.7636, -0.3932, 0
 977.5082, -0.4016, 0
 979.8303, -0.4072, 0
 983.1484, -0.4034, 0
 987.6266, -0.3831, 0
 992.9877, -0.3379, 0
 998.9846, -0.2887, 0
 1005.3699, -0.2556, 0
 1011.8988, -0.257, 0
 1018.3065, -0.2741, 0
 1024.3786, -0.2909, 0
 1029.9562, -0.3039, 0
 1034.8846, -0.3096, 0
 1039.0282, -0.3172, 0
 1042.5071, -0.3371, 0
 1045.6405, -0.3719, 0
 1048.6261, -0.4051, 0
 1051.6604, -0.4193, 0
 1054.9388, -0.4196, 0
 1058.5125, -0.4091, 0
 1062.2496, -0.3915, 0
 1066.0788, -0.3672, 0
 1069.9294, -0.3376, 0
 1073.7309, -0.3027, 0
 1077.5275, -0.2698, 0
 1081.3685, -0.2385, 0
 1085.1846, -0.2141, 0
 1088.9064, -0.1983, 0
 1092.4683, -0.1885, 0
 1095.9712, -0.1854, 0
 1099.4608, -0.1874, 0
 1102.7834, -0.1907, 0
 1105.7872, -0.1956, 0
 1108.3294, -0.1984, 0
 1110.5849, -0.1993, 0
 1112.8889, -0.203, 0
 1115.3523, -0.194, 0
 1118.0882, -0.188, 0
 1121.221, -0.1873, 0
ENDDATA
 0, 1, 2
 0, -7.4193, 0
 3.5968, -7.5687, 0
 7.5225, -7.6884, 0
 11.5883, -7.8246, 0
 15.6029, -7.9842, 0
 19.3774, -8.1341, 0
 22.9529, -8.2165, 0
 26.4989, -8.2816, 0
 30.0261, -8.2632, 0
 33.5393, -8.1638, 0
 37.0347, -8.0046, 0
 40.5404, -7.7972, 0
 44.0975, -7.5859, 0
 47.7125, -7.4111, 0
 51.3932, -7.2823, 0
 55.143, -7.2018, 0
 59.0144, -7.1337, 0
 63.0357, -7.0205, 0
 67.1644, -6.8483, 0
 71.3523, -6.6361, 0
 75.5481, -6.4142, 0
 79.7441, -6.1756, 0
 83.9939, -5.9544, 0
 88.3258, -5.8428, 0
 92.7548, -5.9086, 0
 97.2945, -6.2245, 0
 102.049, -6.734, 0
 107.0082, -7.2607, 0
 112.0172, -7.7402, 0
 116.923, -8.1799, 0
 121.5736, -8.5909, 0
 125.9682, -8.89, 0
 130.2063, -9.0794, 0
 134.3005, -9.2645, 0
 138.2642, -9.5015, 0
 142.1323, -9.8055, 0
 145.8027, -10.0103, 0
 149.2675, -10.1363, 0
 152.7458, -10.3397, 0
 156.4765, -10.6755, 0
 160.7224, -11.1211, 0
 165.3126, -11.3769, 0
 169.6997, -11.5482, 0
 173.4591, -11.5648, 0
 176.1028, -11.5883, 0
 177.1047, -11.5373, 0
 178.4204, -11.6752, 0
 181.7789, -11.6734, 0
 186.2916, -11.5206, 0
 191.0794, -11.3002, 0
 195.2696, -11.1643, 0
 198.952, -11.078, 0
 202.7144, -11.1033, 0
 206.4602, -11.1862, 0
 210.1047, -11.281, 0
 213.5765, -11.2991, 0
 216.8449, -11.243, 0
 219.9937, -11.1887, 0
 223.1555, -11.0291, 0
 226.4624, -10.7613, 0
 230.0473, -10.4299, 0
 234.0681, -10.0123, 0
 238.4758, -9.5914, 0
 243.0825, -9.2309, 0
 247.6997, -8.9889, 0
 252.1337, -8.8452, 0
 256.327, -8.7454, 0
 260.4306, -8.6452, 0
 264.5685, -8.4835, 0
 268.8634, -8.2332, 0
 273.4361, -7.9059, 0
 278.251, -7.5962, 0
 283.2408, -7.3652, 0
 288.4822, -7.2317, 0
 294.0595, -7.215, 0
 300.0626, -7.1324, 0
 306.4613, -7.1157, 0
 313.0378, -7.2409, 0
 319.611, -7.3533, 0
 326.0088, -7.3724, 0
 332.0701, -7.2689, 0
 337.4611, -7.157, 0
 342.1596, -7.1293, 0
 346.4763, -7.1606, 0
 350.7209, -7.2886, 0
 355.1972, -7.5256, 0
 359.8568, -7.6956, 0
 364.4985, -7.7077, 0
 369.1971, -7.6353, 0
 374.0268, -7.551, 0
 379.0627, -7.5132, 0
 384.4084, -7.5231, 0
 390.0178, -7.5412, 0
 395.7302, -7.5588, 0
 401.3898, -7.5664, 0
 406.8394, -7.5453, 0
 411.9174, -7.5088, 0
 416.7297, -7.484, 0
 421.5186, -7.4707, 0
 426.5215, -7.4955, 0
 431.9846, -7.6351, 0
 437.5655, -7.7708, 0
 442.7943, -7.8, 0
 447.7117, -7.8979, 0
 452.3399, -8.1301, 0
 456.6949, -8.3679, 0
 460.7541, -8.569, 0
 464.5447, -8.7273, 0
 468.1205, -8.9165, 0
 471.515, -9.1693, 0
 474.7531, -9.5313, 0
 477.9732, -9.8019, 0
 481.323, -9.9555, 0
 484.8038, -10.0271, 0
 488.3989, -10.1237, 0
 492.0859, -10.3186, 0
 495.8619, -10.4561, 0
 499.7433, -10.3437, 0
 503.63, -10.1649, 0
 507.388, -10.0885, 0
 510.8954, -10.234, 0
 514.2352, -10.3991, 0
 517.4852, -10.4119, 0
 520.5949, -10.2776, 0
 523.5145, -10.0021, 0
 526.1958, -9.6813, 0
 528.7252, -9.3562, 0
 531.3373, -8.9367, 0
 534.2235, -8.548, 0
 537.5924, -8.2427, 0
 541.6649, -7.9686, 0
 545.7908, -7.8351, 0
 549.3192, -8.289, 0
 552.4495, -8.9825, 0
 555.3855, -9.4905, 0
 558.3569, -9.7574, 0
 561.3706, -9.9111, 0
 564.3039, -9.945, 0
 567.221, -9.9493, 0
 570.1743, -10.0764, 0
 573.2114, -10.3243, 0
 576.4298, -10.4623, 0
 579.8431, -10.398, 0
 583.328, -10.287, 0
 586.7223, -10.2577, 0
 589.861, -10.3108, 0
 592.9466, -10.3139, 0
 596.2661, -10.1595, 0
 599.6871, -9.9862, 0
 603.0437, -9.8836, 0
 606.1546, -9.9024, 0
 609.1509, -9.9193, 0
 612.2715, -9.9066, 0
 615.5252, -10.0696, 0
 618.9987, -10.3933, 0
 622.888, -10.3544, 0
 626.4428, -10.1527, 0
 629.0323, -9.933, 0
 631.1282, -9.8075, 0
 633.1667, -9.5893, 0
 635.5331, -9.1195, 0
 638.3559, -8.5061, 0
 641.5275, -8.3589, 0
 644.9262, -8.505, 0
 648.3629, -8.766, 0
 651.6328, -9.0164, 0
 654.7043, -9.1944, 0
 657.66, -9.4784, 0
 660.4991, -9.8466, 0
 663.2308, -10.1416, 0
 665.8763, -10.2986, 0
 668.4241, -10.3884, 0
 670.9191, -10.387, 0
 673.4727, -10.3369, 0
 676.186, -10.3387, 0
 679.1503, -10.4732, 0
 682.3462, -10.5044, 0
 685.7049, -10.2962, 0
 689.1194, -9.9538, 0
 692.4206, -9.6059, 0
 695.4101, -9.4057, 0
 698.5107, -9.3574, 0
 702.1011, -9.4024, 0
 705.8961, -9.3958, 0
 709.6107, -9.3112, 0
 712.9603, -9.2147, 0
 716.2582, -9.1272, 0
 719.9472, -9.0644, 0
 723.93, -9.0087, 0
 728.1109, -8.9318, 0
 732.3936, -8.8043, 0
 737.2378, -8.5739, 0
 742.887, -8.3529, 0
 748.9059, -8.2241, 0
 754.8493, -8.1469, 0
 760.2688, -8.0824, 0
 765.1101, -7.9928, 0
 769.6824, -7.8726, 0
 774.0759, -7.7396, 0
 778.3785, -7.6164, 0
 782.6727, -7.5318, 0
 786.948, -7.4823, 0
 791.1503, -7.4361, 0
 795.3013, -7.3894, 0
 799.4249, -7.3353, 0
 803.5385, -7.2751, 0
 807.4852, -7.2301, 0
 811.2544, -7.1723, 0
 815.0855, -7.0948, 0
 819.223, -7.0642, 0
 823.9122, -7.0724, 0
 829.4257, -7.06, 0
 835.6, -6.9964, 0
 842.0384, -6.92, 0
 848.3398, -6.8859, 0
 854.1043, -6.9411, 0
 859.1336, -7.0631, 0
 863.6952, -7.1537, 0
 868.0972, -7.1296, 0
 872.6463, -7.0861, 0
 877.6505, -7.0956, 0
 883.2263, -7.1326, 0
 889.1724, -7.1767, 0
 895.3202, -7.211, 0
 901.5008, -7.2279, 0
 907.5485, -7.2387, 0
 913.5425, -7.2591, 0
 919.6022, -7.3004, 0
 925.6231, -7.3366, 0
 931.4917, -7.3148, 0
 937.0999, -7.2848, 0
 942.6004, -7.2673, 0
 948.072, -7.2045, 0
 953.277, -7.1308, 0
 957.9818, -7.0843, 0
 961.9505, -7.1161, 0
 964.9443, -7.348, 0
 967.124, -7.6595, 0
 968.846, -7.9559, 0
 970.464, -8.1781, 0
 972.3309, -8.3741, 0
 974.177, -8.5447, 0
 975.7636, -8.6741, 0
 977.5082, -8.7674, 0
 979.8303, -8.8652, 0
 983.1484, -8.9728, 0
 987.6266, -9.1069, 0
 992.9877, -9.2635, 0
 998.9846, -9.4363, 0
 1005.3699, -9.602, 0
 1011.8988, -9.7135, 0
 1018.3065, -9.7035, 0
 1024.3786, -9.5457, 0
 1029.9562, -9.2219, 0
 1034.8846, -8.7366, 0
 1039.0282, -8.0573, 0
 1042.5071, -7.3039, 0
 1045.6405, -6.762, 0
 1048.6261, -6.4648, 0
 1051.6604, -6.3263, 0
 1054.9388, -6.2005, 0
 1058.5125, -6.0956, 0
 1062.2496, -6.0337, 0
 1066.0788, -6.0157, 0
 1069.9294, -6.055, 0
 1073.7309, -6.158, 0
 1077.5275, -6.3002, 0
 1081.3685, -6.4537, 0
 1085.1846, -6.5965, 0
 1088.9064, -6.7032, 0
 1092.4683, -6.7517, 0
 1095.9712, -6.8002, 0
 1099.4608, -6.8947, 0
 1102.7834, -7.0078, 0
 1105.7872, -7.0764, 0
 1108.3294, -6.9965, 0
 1110.5849, -6.8757, 0
 1112.8889, -6.9129, 0
 1115.3523, -7.0517, 0
 1118.0882, -7.2291, 0
 1121.221, -7.4193, 0
ENDCOLS
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, -0.194
 3.5968, -0.191
 7.5225, -0.185
 11.5883, -0.178
 15.6029, -0.17
 19.3774, -0.163
 22.9529, -0.157
 26.4989, -0.15
 30.0261, -0.144
 33.5393, -0.138
 37.0347, -0.134
 40.5404, -0.132
 44.0975, -0.132
 47.7125, -0.132
 51.3932, -0.133
 55.143, -0.134
 59.0144, -0.137
 63.0357, -0.142
 67.1644, -0.145
 71.3523, -0.148
 75.5481, -0.148
 79.7441, -0.14
 83.9939, -0.127
 88.3258, -0.114
 92.7548, -0.105
 97.2945, -0.103
 102.049, -0.107
 107.0082, -0.114
 112.0172, -0.127
 116.923, -0.15
 121.5736, -0.185
 125.9682, -0.236
 130.2063, -0.298
 134.3005, -0.371
 138.2642, -0.45
 142.1323, -0.533
 145.8027, -0.623
 149.2675, -0.722
 152.7458, -0.826
 156.4765, -0.929
 160.7224, -1.025
 165.3126, -1.128
 169.6997, -1.24
 173.4591, -1.343
 176.1028, -1.418
 177.1047, -1.448
 178.4204, -1.491
 181.7789, -1.601
 186.2916, -1.749
 191.0794, -1.906
 195.2696, -2.043
 198.952, -2.163
 202.7144, -2.283
 206.4602, -2.402
 210.1047, -2.516
 213.5765, -2.62
 216.8449, -2.71
 219.9937, -2.789
 223.1555, -2.864
 226.4624, -2.94
 230.0473, -3.025
 234.0681, -3.122
 238.4758, -3.226
 243.0825, -3.332
 247.6997, -3.437
 252.1337, -3.537
 256.327, -3.628
 260.4306, -3.714
 264.5685, -3.798
 268.8634, -3.883
 273.4361, -3.974
 278.251, -4.074
 283.2408, -4.178
 288.4822, -4.285
 294.0595, -4.388
 300.0626, -4.483
 306.4613, -4.572
 313.0378, -4.659
 319.611, -4.74
 326.0088, -4.813
 332.0701, -4.875
 337.4611, -4.923
 342.1596, -4.957
 346.4763, -4.984
 350.7209, -5.011
 355.1972, -5.041
 359.8568, -5.075
 364.4985, -5.109
 369.1971, -5.145
 374.0268, -5.181
 379.0627, -5.218
 384.4084, -5.259
 390.0178, -5.304
 395.7302, -5.348
 401.3898, -5.389
 406.8394, -5.42
 411.9174, -5.445
 416.7297, -5.466
 421.5186, -5.479
 426.5215, -5.484
 431.9846, -5.476
 437.5655, -5.455
 442.7943, -5.423
 447.7117, -5.381
 452.3399, -5.331
 456.6949, -5.275
 460.7541, -5.213
 464.5447, -5.145
 468.1205, -5.07
 471.515, -4.987
 474.7531, -4.898
 477.9732, -4.802
 481.323, -4.7
 484.8038, -4.59
 488.3989, -4.474
 492.0859, -4.352
 495.8619, -4.217
 499.7433, -4.068
 503.63, -3.917
 507.388, -3.772
 510.8954, -3.646
 514.2352, -3.537
 517.4852, -3.441
 520.5949, -3.354
 523.5145, -3.277
 526.1958, -3.206
 528.7252, -3.145
 531.3373, -3.094
 534.2235, -3.05
 537.5924, -3.011
 541.6649, -2.974
 545.7908, -2.94
 549.3192, -2.912
 552.4495, -2.887
 555.3855, -2.861
 558.3569, -2.832
 561.3706, -2.801
 564.3039, -2.769
 567.221, -2.736
 570.1743, -2.701
 573.2114, -2.666
 576.4298, -2.63
 579.8431, -2.594
 583.328, -2.556
 586.7223, -2.515
 589.861, -2.468
 592.9466, -2.416
 596.2661, -2.356
 599.6871, -2.294
 603.0437, -2.232
 606.1546, -2.172
 609.1509, -2.114
 612.2715, -2.056
 615.5252, -1.999
 618.9987, -1.946
 622.888, -1.898
 626.4428, -1.856
 629.0323, -1.818
 631.1282, -1.784
 633.1667, -1.754
 635.5331, -1.725
 638.3559, -1.699
 641.5275, -1.678
 644.9262, -1.659
 648.3629, -1.638
 651.6328, -1.614
 654.7043, -1.586
 657.66, -1.554
 660.4991, -1.522
 663.2308, -1.488
 665.8763, -1.457
 668.4241, -1.427
 670.9191, -1.397
 673.4727, -1.367
 676.186, -1.336
 679.1503, -1.304
 682.3462, -1.268
 685.7049, -1.232
 689.1194, -1.194
 692.4206, -1.155
 695.4101, -1.116
 698.5107, -1.077
 702.1011, -1.037
 705.8961, -0.997
 709.6107, -0.956
 712.9603, -0.916
 716.2582, -0.879
 719.9472, -0.844
 723.93, -0.807
 728.1109, -0.769
 732.3936, -0.725
 737.2378, -0.675
 742.887, -0.618
 748.9059, -0.56
 754.8493, -0.502
 760.2688, -0.449
 765.1101, -0.401
 769.6824, -0.355
 774.0759, -0.312
 778.3785, -0.27
 782.6727, -0.228
 786.948, -0.188
 791.1503, -0.149
 795.3013, -0.111
 799.4249, -0.074
 803.5385, -0.038
 807.4852, -0.003
 811.2544, 0.029
 815.0855, 0.062
 819.223, 0.097
 823.9122, 0.137
 829.4257, 0.184
 835.6, 0.237
 842.0384, 0.292
 848.3398, 0.345
 854.1043, 0.393
 859.1336, 0.435
 863.6952, 0.471
 868.0972, 0.505
 872.6463, 0.541
 877.6505, 0.58
 883.2263, 0.625
 889.1724, 0.674
 895.3202, 0.724
 901.5008, 0.771
 907.5485, 0.811
 913.5425, 0.846
 919.6022, 0.878
 925.6231, 0.905
 931.4917, 0.927
 937.0999, 0.942
 942.6004, 0.948
 948.072, 0.946
 953.277, 0.939
 957.9818, 0.931
 961.9505, 0.925
 964.9443, 0.921
 967.124, 0.918
 968.846, 0.913
 970.464, 0.907
 972.3309, 0.899
 974.177, 0.893
 975.7636, 0.888
 977.5082, 0.88
 979.8303, 0.863
 983.1484, 0.829
 987.6266, 0.777
 992.9877, 0.707
 998.9846, 0.63
 1005.3699, 0.549
 1011.8988, 0.475
 1018.3065, 0.402
 1024.3786, 0.327
 1029.9562, 0.254
 1034.8846, 0.185
 1039.0282, 0.126
 1042.5071, 0.077
 1045.6405, 0.036
 1048.6261, 0.001
 1051.6604, -0.032
 1054.9388, -0.062
 1058.5125, -0.094
 1062.2496, -0.123
 1066.0788, -0.15
 1069.9294, -0.172
 1073.7309, -0.188
 1077.5275, -0.195
 1081.3685, -0.197
 1085.1846, -0.194
 1088.9064, -0.19
 1092.4683, -0.187
 1095.9712, -0.183
 1099.4608, -0.177
 1102.7834, -0.172
 1105.7872, -0.167
 1108.3294, -0.166
 1110.5849, -0.169
 1112.8889, -0.176
 1115.3523, -0.185
 1118.0882, -0.191
 1121.221, -0.194
ENDTABLE
ROAD_ZS_GAIN(1)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(1)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1) 1 ; - ! Constant gain, axle 1
R_STEER_SPEED_GAIN(1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1) 0 ; - ! Offset added (after gain) to get gain

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: Road X-Y-Z Edges
SPEED_TARGET_CONSTANT(1) 35 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                ! (deg/N-m), axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           ! M_KP_START_STEER_COMP)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -34, -29.77048564
 -33.66, -29.50225288
 -33.32, -29.23368071
 -32.98, -28.96476137
 -32.64, -28.69548708
 -32.3, -28.42585004
 -31.96, -28.15584247
 -31.62, -27.88545657
 -31.28, -27.61468451
 -30.94, -27.3435185
 -30.6, -27.07195069
 -30.26, -26.79997325
 -29.92, -26.52757835
 -29.58, -26.25475814
 -29.24, -25.98150476
 -28.9, -25.70781034
 -28.56, -25.43366702
 -28.22, -25.15906692
 -27.88, -24.88400216
 -27.54, -24.60846485
 -27.2, -24.33244708
 -26.86, -24.05594096
 -26.52, -23.77893858
 -26.18, -23.50143201
 -25.84, -23.22341335
 -25.5, -22.94487467
 -25.16, -22.66580804
 -24.82, -22.38620552
 -24.48, -22.10605917
 -24.14, -21.82536106
 -23.8, -21.54410323
 -23.46, -21.26227775
 -23.12, -20.97987666
 -22.78, -20.696892
 -22.44, -20.41331583
 -22.1, -20.12914019
 -21.76, -19.84435713
 -21.42, -19.55895869
 -21.08, -19.27293691
 -20.74, -18.98628386
 -20.4, -18.69899156
 -20.06, -18.41105209
 -19.72, -18.12245749
 -19.38, -17.83319983
 -19.04, -17.54327117
 -18.7, -17.25266358
 -18.36, -16.96136915
 -18.02, -16.66937996
 -17.68, -16.3766881
 -17.34, -16.08328567
 -17, -15.7891648
 -16.66, -15.4943176
 -16.32, -15.19873622
 -15.98, -14.9024128
 -15.64, -14.60533952
 -15.3, -14.30750855
 -14.96, -14.00891209
 -14.62, -13.70954236
 -14.28, -13.4093916
 -13.94, -13.10845206
 -13.6, -12.80671602
 -13.26, -12.50417577
 -12.92, -12.20082366
 -12.58, -11.89665203
 -12.24, -11.59165326
 -11.9, -11.28581976
 -11.56, -10.97914397
 -11.22, -10.67161836
 -10.88, -10.36323544
 -10.54, -10.05398776
 -10.2, -9.743867889
 -9.86, -9.43286845
 -9.52, -9.120982102
 -9.18, -8.808201551
 -8.84, -8.494519544
 -8.5, -8.179928876
 -8.16, -7.864422393
 -7.82, -7.547992988
 -7.48, -7.230633612
 -7.14, -6.912337269
 -6.8, -6.593097019
 -6.46, -6.272905984
 -6.12, -5.951757349
 -5.78, -5.62964436
 -5.44, -5.306560335
 -5.1, -4.982498657
 -4.76, -4.657452782
 -4.42, -4.331416244
 -4.08, -4.004382648
 -3.74, -3.676345685
 -3.4, -3.347299125
 -3.06, -3.017236823
 -2.72, -2.686152726
 -2.38, -2.354040866
 -2.04, -2.020895376
 -1.7, -1.686710479
 -1.36, -1.351480503
 -1.02, -1.015199877
 -0.68, -0.677863136
 -0.34, -0.339464925
 0, 0
 0.34, 0.340536765
 0.68, 0.682150378
 1.02, 1.024845726
 1.36, 1.368627569
 1.7, 1.713500536
 2.04, 2.059469128
 2.38, 2.406537705
 2.72, 2.75471049
 3.06, 3.103991562
 3.4, 3.454384854
 3.74, 3.805894147
 4.08, 4.158523069
 4.42, 4.512275089
 4.76, 4.867153516
 5.1, 5.223161492
 5.44, 5.58030199
 5.78, 5.93857781
 6.12, 6.297991576
 6.46, 6.658545731
 6.8, 7.020242532
 7.14, 7.383084049
 7.48, 7.747072158
 7.82, 8.112208542
 8.16, 8.47849468
 8.5, 8.845931849
 8.84, 9.214521117
 9.18, 9.584263341
 9.52, 9.955159162
 9.86, 10.327209
 10.2, 10.70041305
 10.54, 11.07477129
 10.88, 11.45028345
 11.22, 11.82694904
 11.56, 12.20476732
 11.9, 12.58373732
 12.24, 12.9638578
 12.58, 13.3451273
 12.92, 13.72754409
 13.26, 14.11110618
 13.6, 14.49581132
 13.94, 14.88165701
 14.28, 15.26864047
 14.62, 15.65675866
 14.96, 16.04600824
 15.3, 16.43638561
 15.64, 16.82788691
 15.98, 17.22050796
 16.32, 17.61424431
 16.66, 18.00909123
 17, 18.40504368
 17.34, 18.80209634
 17.68, 19.20024358
 18.02, 19.5994795
 18.36, 19.99979785
 18.7, 20.40119212
 19.04, 20.80365547
 19.38, 21.20718076
 19.72, 21.61176055
 20.06, 22.01738707
 20.4, 22.42405226
 20.74, 22.83174772
 21.08, 23.24046476
 21.42, 23.65019437
 21.76, 24.06092721
 22.1, 24.47265364
 22.44, 24.88536369
 22.78, 25.29904708
 23.12, 25.71369322
 23.46, 26.12929118
 23.8, 26.54582975
 24.14, 26.96329736
 24.48, 27.38168217
 24.82, 27.80097199
 25.16, 28.22115433
 25.5, 28.6422164
 25.84, 29.06414509
 26.18, 29.48692697
 26.52, 29.91054833
 26.86, 30.33499514
 27.2, 30.76025308
 27.54, 31.18630752
 27.88, 31.61314353
 28.22, 32.04074592
 28.56, 32.46909919
 28.9, 32.89818754
 29.24, 33.32799492
 29.58, 33.75850499
 29.92, 34.18970114
 30.26, 34.62156649
 30.6, 35.0540839
 30.94, 35.48723597
 31.28, 35.92100507
 31.62, 36.35537328
 31.96, 36.79032247
 32.3, 37.22583429
 32.64, 37.66189012
 32.98, 38.09847115
 33.32, 38.53555834
 33.66, 38.97313245
 34, 39.41117404
ENDTABLE
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -34, -39.41117404
 -33.66, -38.97313245
 -33.32, -38.53555834
 -32.98, -38.09847115
 -32.64, -37.66189012
 -32.3, -37.22583429
 -31.96, -36.79032247
 -31.62, -36.35537328
 -31.28, -35.92100507
 -30.94, -35.48723597
 -30.6, -35.0540839
 -30.26, -34.62156649
 -29.92, -34.18970114
 -29.58, -33.75850499
 -29.24, -33.32799492
 -28.9, -32.89818754
 -28.56, -32.46909919
 -28.22, -32.04074592
 -27.88, -31.61314353
 -27.54, -31.18630752
 -27.2, -30.76025308
 -26.86, -30.33499514
 -26.52, -29.91054833
 -26.18, -29.48692697
 -25.84, -29.06414509
 -25.5, -28.6422164
 -25.16, -28.22115433
 -24.82, -27.80097199
 -24.48, -27.38168217
 -24.14, -26.96329736
 -23.8, -26.54582975
 -23.46, -26.12929118
 -23.12, -25.71369322
 -22.78, -25.29904708
 -22.44, -24.88536369
 -22.1, -24.47265364
 -21.76, -24.06092721
 -21.42, -23.65019437
 -21.08, -23.24046476
 -20.74, -22.83174772
 -20.4, -22.42405226
 -20.06, -22.01738707
 -19.72, -21.61176055
 -19.38, -21.20718076
 -19.04, -20.80365547
 -18.7, -20.40119212
 -18.36, -19.99979785
 -18.02, -19.5994795
 -17.68, -19.20024358
 -17.34, -18.80209634
 -17, -18.40504368
 -16.66, -18.00909123
 -16.32, -17.61424431
 -15.98, -17.22050796
 -15.64, -16.82788691
 -15.3, -16.43638561
 -14.96, -16.04600824
 -14.62, -15.65675866
 -14.28, -15.26864047
 -13.94, -14.88165701
 -13.6, -14.49581132
 -13.26, -14.11110618
 -12.92, -13.72754409
 -12.58, -13.3451273
 -12.24, -12.9638578
 -11.9, -12.58373732
 -11.56, -12.20476732
 -11.22, -11.82694904
 -10.88, -11.45028345
 -10.54, -11.07477129
 -10.2, -10.70041305
 -9.86, -10.327209
 -9.52, -9.955159162
 -9.18, -9.584263341
 -8.84, -9.214521117
 -8.5, -8.845931849
 -8.16, -8.47849468
 -7.82, -8.112208542
 -7.48, -7.747072158
 -7.14, -7.383084049
 -6.8, -7.020242532
 -6.46, -6.658545731
 -6.12, -6.297991576
 -5.78, -5.93857781
 -5.44, -5.58030199
 -5.1, -5.223161492
 -4.76, -4.867153516
 -4.42, -4.512275089
 -4.08, -4.158523069
 -3.74, -3.805894147
 -3.4, -3.454384854
 -3.06, -3.103991562
 -2.72, -2.75471049
 -2.38, -2.406537705
 -2.04, -2.059469128
 -1.7, -1.713500536
 -1.36, -1.368627569
 -1.02, -1.024845726
 -0.68, -0.682150378
 -0.34, -0.340536765
 0, 0
 0.34, 0.339464925
 0.68, 0.677863136
 1.02, 1.015199877
 1.36, 1.351480503
 1.7, 1.686710479
 2.04, 2.020895376
 2.38, 2.354040866
 2.72, 2.686152726
 3.06, 3.017236823
 3.4, 3.347299125
 3.74, 3.676345685
 4.08, 4.004382648
 4.42, 4.331416244
 4.76, 4.657452782
 5.1, 4.982498657
 5.44, 5.306560335
 5.78, 5.62964436
 6.12, 5.951757349
 6.46, 6.272905984
 6.8, 6.593097019
 7.14, 6.912337269
 7.48, 7.230633612
 7.82, 7.547992988
 8.16, 7.864422393
 8.5, 8.179928876
 8.84, 8.494519544
 9.18, 8.808201551
 9.52, 9.120982102
 9.86, 9.43286845
 10.2, 9.743867889
 10.54, 10.05398776
 10.88, 10.36323544
 11.22, 10.67161836
 11.56, 10.97914397
 11.9, 11.28581976
 12.24, 11.59165326
 12.58, 11.89665203
 12.92, 12.20082366
 13.26, 12.50417577
 13.6, 12.80671602
 13.94, 13.10845206
 14.28, 13.4093916
 14.62, 13.70954236
 14.96, 14.00891209
 15.3, 14.30750855
 15.64, 14.60533952
 15.98, 14.9024128
 16.32, 15.19873622
 16.66, 15.4943176
 17, 15.7891648
 17.34, 16.08328567
 17.68, 16.3766881
 18.02, 16.66937996
 18.36, 16.96136915
 18.7, 17.25266358
 19.04, 17.54327117
 19.38, 17.83319983
 19.72, 18.12245749
 20.06, 18.41105209
 20.4, 18.69899156
 20.74, 18.98628386
 21.08, 19.27293691
 21.42, 19.55895869
 21.76, 19.84435713
 22.1, 20.12914019
 22.44, 20.41331583
 22.78, 20.696892
 23.12, 20.97987666
 23.46, 21.26227775
 23.8, 21.54410323
 24.14, 21.82536106
 24.48, 22.10605917
 24.82, 22.38620552
 25.16, 22.66580804
 25.5, 22.94487467
 25.84, 23.22341335
 26.18, 23.50143201
 26.52, 23.77893858
 26.86, 24.05594096
 27.2, 24.33244708
 27.54, 24.60846485
 27.88, 24.88400216
 28.22, 25.15906692
 28.56, 25.43366702
 28.9, 25.70781034
 29.24, 25.98150476
 29.58, 26.25475814
 29.92, 26.52757835
 30.26, 26.79997325
 30.6, 27.07195069
 30.94, 27.3435185
 31.28, 27.61468451
 31.62, 27.88545657
 31.96, 28.15584247
 32.3, 28.42585004
 32.64, 28.69548708
 32.98, 28.96476137
 33.32, 29.23368071
 33.66, 29.50225288
 34, 29.77048564
ENDTABLE
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IAXLE is used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1,
                                         ! right side

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.

SUSP_DIVE_AXLE_CONSTANT(2) 0 ; deg ! Constant suspension dive, axle 2
SUSP_DIVE_AXLE_OFFSET(2) 0 ; deg ! Offset added (after gain) to get suspension dive

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IAXLE is used to
! identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X axle movement forward (mm)
SUSP_X_AXLE_TABLE(2) SPLINE ! axle 2
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_AXLE_GAIN(2) 1 ! Gain multiplied with calculated value to get X axle movement
                      ! forward
SUSP_X_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward
JNC_START_SUSP_X_AXLE(2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X_AXLE(2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_X_AXLE)

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2) SPLINE ! axle 2
 -10.053, 16.793
 -8.3636, 14.014
 -6.6819, 11.23
 -5.0063, 8.4357
 -3.335, 5.6313
 -1.6668, 2.8181
 0, 0
 1.6668, -2.8181
 3.335, -5.6313
 5.0063, -8.4357
 6.6819, -11.23
 8.3636, -14.014
 10.053, -16.793
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT    0.6 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 331
 0.2, 331
 0.8, 1277
 1, 1277
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 426
 0.2, 426
 0.8, 2188
 1, 2188
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 600
 0.2, 600
 0.8, 2809
 1, 2809
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 845
 0.2, 845
 0.8, 3960
 1, 3960
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 984
 0.2, 984
 0.8, 5577
 1, 5577
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

! 1D table: col 1 = distance travelled (m), col 2 = elevation increment (mm)
Z_PROFILE_TABLE(1) LINEAR_LOOP ! linear interpolation, repeat in loop
 0.3048, 0.406
 0.4572, 0.1777932488
 0.6096, 0.07527383606
 0.762, 0.3543091085
 0.9144, 0.5548917594
 1.0668, 0.2760328901
 1.2192, 0.04920215595
 1.3716, 0.1694384089
 1.524, 0.2638413752
 1.6764, 0.2128593832
 1.8288, 0.5081367103
 1.9812, 0.7304598902
 2.1336, 0.7343670472
 2.286, 0.9388870937
 2.4384, 1.226505963
 2.5908, 1.616167638
 2.7432, 1.622565394
 2.8956, 1.622660925
 3.048, 1.274036457
 3.2004, 1.047215781
 3.3528, 0.9901105665
 3.5052, 0.7573987463
 3.6576, 0.7724207273
 3.81, 1.073428591
 3.9624, 1.184961263
 4.1148, 1.168616576
 4.2672, 0.6909445938
 4.4196, 0.2269598207
 4.572, 0.7783336652
 4.7244, 1.2112894
 4.8768, 1.203259069
 5.0292, 1.299808156
 5.1816, 1.333754339
 5.334, 1.661730022
 5.4864, 1.962461733
 5.6388, 1.837505987
 5.7912, 1.78166573
 5.9436, 1.71065893
 6.096, 1.75927
 6.2484, 1.937334976
 6.4008, 2.046223645
 6.5532, 1.917907756
 6.7056, 1.645969557
 6.858, 1.726746108
 7.0104, 1.916448633
 7.1628, 1.736204534
 7.3152, 1.324034563
 7.4676, 1.389517558
 7.62, 1.726510286
 7.7724, 1.597634024
 7.9248, 1.867
 8.0772, 1.85237681
 8.2296, 1.378362951
 8.382, 1.683189227
 8.5344, 1.71617606
 8.6868, 1.511630467
 8.8392, 1.505139788
 8.9916, 1.241593257
 9.144, 1.283756282
 9.2964, 1.62302305
 9.4488, 1.512896788
 9.6012, 1.234419158
 9.7536, 1.482887176
 9.906, 2.00909162
 10.0584, 2.100822241
 10.2108, 1.669565226
 10.3632, 1.298274075
 10.5156, 1.316914058
 10.668, 1.899527178
 10.8204, 2.109922945
 10.9728, 1.863006661
 11.1252, 1.429455307
 11.2776, 1.330986345
 11.43, 1.584439731
 11.5824, 1.76249986
 11.7348, 1.47181672
 11.8872, 1.086197418
 12.0396, 1.044361403
 12.192, 0.8528349156
 12.3444, 0.516151261
 12.4968, 0.2354709497
 12.6492, 0.4034833501
 12.8016, 0.4388037629
 12.954, 0.1234489217
 13.1064, -0.3025635775
 13.2588, -0.3714315235
 13.4112, -0.1404149842
 13.5636, 0.2567709559
 13.716, 0.740740004
 13.8684, 0.3609511459
 14.0208, 0.03312550827
 14.1732, 0.1442099265
 14.3256, 0.2244681715
 14.478, 0.7551980841
 14.6304, 0.3120038467
 14.7828, -0.5159717995
 14.9352, -0.5135078811
 15.0876, -0.1541435711
 15.24, -0.1787518165
 15.3924, -0.203269418
 15.5448, -0.076
 15.6972, -0.356
 15.8496, -0.229
 16.002, -0.178
 16.1544, 0.152
 16.3068, 0.203
 16.4592, -0.229
 16.6116, 0.279
 16.764, 1.016
 16.9164, 0.584
 17.0688, -0.127
 17.2212, 0.076
 17.3736, 0.838
 17.526, 1.372
 17.6784, 0.991
 17.8308, 0.406
 17.9832, 0.254
 18.1356, 0.559
 18.288, 0.229
 18.4404, 0.102
 18.5928, 0.076
 18.7452, -0.406
 18.8976, 0.152
 19.05, 0.051
 19.2024, -0.686
 19.3548, -0.838
 19.5072, -0.991
 19.6596, -1.346
 19.812, -1.372
 19.9644, -1.803
 20.1168, -2.591
 20.2692, -2.616
 20.4216, -2.261
 20.574, -1.981
 20.7264, -2.083
 20.8788, -2.083
 21.0312, -2.235
 21.1836, -2.286
 21.336, -2.489
 21.4884, -2.642
 21.6408, -2.464
 21.7932, -2.413
 21.9456, -2.337
 22.098, -2.134
 22.2504, -1.93
 22.4028, -2.337
 22.5552, -2.464
 22.7076, -2.362
 22.86, -2.591
 23.0124, -2.692
 23.1648, -2.413
 23.3172, -2.235
 23.4696, -2.159
 23.622, -2.438
 23.7744, -2.718
 23.9268, -2.794
 24.0792, -3.048
 24.2316, -2.743
 24.384, -2.388
 24.5364, -2.21
 24.6888, -2.311
 24.8412, -2.311
 24.9936, -1.905
 25.146, -1.854
 25.2984, -2.362
 25.4508, -2.184
 25.6032, -2.083
 25.7556, -2.438
 25.908, -2.184
 26.0604, -1.93
 26.2128, -1.829
 26.3652, -2.057
 26.5176, -2.413
 26.67, -2.057
 26.8224, -2.057
 26.9748, -2.438
 27.1272, -1.854
 27.2796, -1.346
 27.432, -1.778
 27.5844, -2.261
 27.7368, -1.981
 27.8892, -1.524
 28.0416, -1.499
 28.194, -1.727
 28.3464, -1.981
 28.4988, -1.956
 28.6512, -1.956
 28.8036, -1.676
 28.956, -1.168
 29.1084, -1.448
 29.2608, -1.88
 29.4132, -1.753
 29.5656, -1.981
 29.718, -2.21
 29.8704, -2.159
 30.0228, -2.337
 30.1752, -2.286
 30.3276, -2.083
 30.48, -2.54
 30.6324, -2.87
 30.7848, -2.464
 30.9372, -2.286
 31.0896, -2.083
 31.242, -1.905
 31.3944, -2.413
 31.5468, -2.819
 31.6992, -2.489
 31.8516, -2.311
 32.004, -2.718
 32.1564, -2.997
 32.3088, -2.997
 32.4612, -2.489
 32.6136, -2.235
 32.766, -2.743
 32.9184, -2.997
 33.0708, -2.769
 33.2232, -2.083
 33.3756, -2.413
 33.528, -2.388
 33.6804, -1.956
 33.8328, -2.286
 33.9852, -2.057
 34.1376, -1.88
 34.29, -1.499
 34.4424, -1.372
 34.5948, -1.448
 34.7472, -0.991
 34.8996, -0.762
 35.052, -0.737
 35.2044, -0.559
 35.3568, -0.813
 35.5092, -0.737
 35.6616, -0.152
 35.814, 0.025
 35.9664, 0
 36.1188, -0.178
 36.2712, 0.025
 36.4236, 0.483
 36.576, 0.533
 36.7284, 0.711
 36.8808, 1.092
 37.0332, 1.016
 37.1856, 0.914
 37.338, 0.889
 37.4904, 1.321
 37.6428, 1.829
 37.7952, 1.854
 37.9476, 1.981
 38.1, 2.362
 38.2524, 2.769
 38.4048, 2.438
 38.5572, 2.083
 38.7096, 2.134
 38.862, 2.108
 39.0144, 2.515
 39.1668, 2.337
 39.3192, 2.159
 39.4716, 2.235
 39.624, 1.6
 39.7764, 1.067
 39.9288, 1.143
 40.0812, 0.991
 40.2336, 0.432
 40.386, 0.076
 40.5384, 0
 40.6908, -0.051
 40.8432, -0.381
 40.9956, -0.635
 41.148, -0.838
 41.3004, -1.346
 41.4528, -1.422
 41.6052, -1.651
 41.7576, -2.235
 41.91, -2.362
 42.0624, -2.87
 42.2148, -3.073
 42.3672, -3.2
 42.5196, -3.607
 42.672, -3.353
 42.8244, -3.073
 42.9768, -3.048
 43.1292, -3.226
 43.2816, -3.531
 43.434, -3.124
 43.5864, -2.591
 43.7388, -2.489
 43.8912, -2.261
 44.0436, -2.261
 44.196, -2.388
 44.3484, -2.464
 44.5008, -2.184
 44.6532, -1.778
 44.8056, -1.956
 44.958, -1.956
 45.1104, -1.626
 45.2628, -1.6
 45.4152, -1.753
 45.5676, -1.626
 45.72, -1.321
 45.8724, -1.321
 46.0248, -1.245
 46.1772, -0.864
 46.3296, -0.838
 46.482, -1.041
 46.6344, -0.914
 46.7868, -0.838
 46.9392, -0.66
 47.0916, -0.787
 47.244, -1.143
 47.3964, -0.762
 47.5488, -0.635
 47.7012, -0.483
 47.8536, -0.152
 48.006, 0.025
 48.1584, -0.102
 48.3108, -0.203
 48.4632, 0.127
 48.6156, 0.584
 48.768, 0.584
 48.9204, 0.508
 49.0728, 1.219
 49.2252, 1.956
 49.3776, 2.489
 49.53, 2.489
 49.6824, 2.261
 49.8348, 2.642
 49.9872, 2.692
 50.1396, 2.489
 50.292, 2.489
 50.4444, 2.083
 50.5968, 2.362
 50.7492, 2.921
 50.9016, 2.718
 51.054, 2.108
 51.2064, 2.007
 51.3588, 1.803
 51.5112, 0.991
 51.6636, 0.584
 51.816, 0.279
 51.9684, -0.076
 52.1208, 0.025
 52.2732, 0.406
 52.4256, -0.025
 52.578, -0.838
 52.7304, -1.346
 52.8828, -1.372
 53.0352, -1.016
 53.1876, -0.508
 53.34, -0.533
 53.4924, -0.762
 53.6448, -0.254
 53.7972, -0.432
 53.9496, -0.762
 54.102, -0.686
 54.2544, -0.813
 54.4068, -0.66
 54.5592, -0.483
 54.7116, -0.686
 54.864, -1.016
 55.0164, -0.584
 55.1688, 0.279
 55.3212, 0.127
 55.4736, 0.279
 55.626, 0.305
 55.7784, 0.025
 55.9308, 0.991
 56.0832, 0.991
 56.2356, 0.559
 56.388, 1.067
 56.5404, 1.194
 56.6928, 0.914
 56.8452, 0.864
 56.9976, 1.168
 57.15, 1.092
 57.3024, 1.041
 57.4548, 1.321
 57.6072, 1.473
 57.7596, 1.6
 57.912, 1.829
 58.0644, 2.083
 58.2168, 2.54
 58.3692, 2.515
 58.5216, 2.362
 58.674, 2.794
 58.8264, 3.073
 58.9788, 3.226
 59.1312, 3.175
 59.2836, 3.15
 59.436, 2.972
 59.5884, 2.946
 59.7408, 3.2
 59.8932, 2.819
 60.0456, 2.438
 60.198, 2.54
 60.3504, 2.667
 60.5028, 2.286
 60.6552, 1.854
 60.8076, 1.981
 60.96, 1.93
 61.1124, 1.753
 61.2648, 2.159
 61.4172, 2.489
 61.5696, 2.565
 61.722, 2.057
 61.8744, 1.575
 62.0268, 2.057
 62.1792, 2.438
 62.3316, 2.54
 62.484, 2.413
 62.6364, 2.007
 62.7888, 2.21
 62.9412, 2.388
 63.0936, 2.134
 63.246, 2.007
 63.3984, 1.956
 63.5508, 1.753
 63.7032, 1.702
 63.8556, 1.829
 64.008, 1.753
 64.1604, 1.473
 64.3128, 1.549
 64.4652, 1.397
 64.6176, 1.397
 64.77, 1.397
 64.9224, 1.041
 65.0748, 1.321
 65.2272, 1.854
 65.3796, 1.6
 65.532, 1.168
 65.6844, 1.27
 65.8368, 1.143
 65.9892, 1.016
 66.1416, 1.118
 66.294, 1.422
 66.4464, 1.6
 66.5988, 1.473
 66.7512, 1.194
 66.9036, 1.041
 67.056, 1.143
 67.2084, 1.143
 67.3608, 1.524
 67.5132, 2.032
 67.6656, 1.88
 67.818, 1.397
 67.9704, 1.956
 68.1228, 2.388
 68.2752, 2.413
 68.4276, 2.565
 68.58, 2.565
 68.7324, 2.997
 68.8848, 2.591
 69.0372, 2.692
 69.1896, 3.124
 69.342, 2.896
 69.4944, 3.353
 69.6468, 3.759
 69.7992, 3.353
 69.9516, 3.327
 70.104, 3.886
 70.2564, 3.962
 70.4088, 3.785
 70.5612, 3.912
 70.7136, 3.607
 70.866, 3.581
 71.0184, 4.166
 71.1708, 4.318
 71.3232, 4.166
 71.4756, 4.064
 71.628, 3.962
 71.7804, 3.886
 71.9328, 4.166
 72.0852, 4.343
 72.2376, 4.242
 72.39, 4.521
 72.5424, 4.775
 72.6948, 4.547
 72.8472, 4.445
 72.9996, 4.623
 73.152, 4.724
 73.3044, 4.496
 73.4568, 3.759
 73.6092, 3.023
 73.7616, 2.438
 73.914, 2.007
 74.0664, 2.616
 74.2188, 2.692
 74.3712, 2.286
 74.5236, 2.591
 74.676, 2.642
 74.8284, 2.794
 74.9808, 2.718
 75.1332, 2.438
 75.2856, 2.286
 75.438, 2.108
 75.5904, 2.286
 75.7428, 2.464
 75.8952, 2.311
 76.0476, 2.134
 76.2, 2.032
 76.3524, 2.438
 76.5048, 2.616
 76.6572, 2.057
 76.8096, 1.6
 76.962, 1.168
 77.1144, 1.473
 77.2668, 1.422
 77.4192, 0.635
 77.5716, 0.711
 77.724, 0.889
 77.8764, 1.346
 78.0288, 1.067
 78.1812, 0.229
 78.3336, 0.432
 78.486, 0.889
 78.6384, 1.448
 78.7908, 1.168
 78.9432, 0.178
 79.0956, -0.305
 79.248, -0.737
 79.4004, -0.432
 79.5528, -0.127
 79.7052, -0.584
 79.8576, -0.94
 80.01, -0.864
 80.1624, -0.711
 80.3148, -1.016
 80.4672, -1.143
 80.6196, -0.914
 80.772, -0.61
 80.9244, -0.406
 81.0768, -0.635
 81.2292, -0.965
 81.3816, -1.295
 81.534, -1.245
 81.6864, -0.838
 81.8388, -1.321
 81.9912, -1.422
 82.1436, -0.838
 82.296, -0.406
 82.4484, -0.483
 82.6008, -0.813
 82.7532, -0.991
 82.9056, -0.914
 83.058, -0.305
 83.2104, -0.051
 83.3628, -0.61
 83.5152, -0.914
 83.6676, -0.864
 83.82, -0.305
 83.9724, 0.279
 84.1248, -0.102
 84.2772, -0.356
 84.4296, -0.533
 84.582, -0.483
 84.7344, 0.203
 84.8868, 0.076
 85.0392, -0.457
 85.1916, -0.178
 85.344, 0.508
 85.4964, 0.889
 85.6488, 0.66
 85.8012, 0.635
 85.9536, 0.787
 86.106, 0.813
 86.2584, 1.118
 86.4108, 0.889
 86.5632, 0.051
 86.7156, -0.356
 86.868, -0.279
 87.0204, 0.025
 87.1728, 0.406
 87.3252, 0.508
 87.4776, 0.33
 87.63, 0.051
 87.7824, 0.076
 87.9348, 0.508
 88.0872, 0.483
 88.2396, 0.152
 88.392, 0.33
 88.5444, 0.838
 88.6968, 0.991
 88.8492, 0.737
 89.0016, 0.635
 89.154, 0.584
 89.3064, 0.635
 89.4588, 1.118
 89.6112, 1.702
 89.7636, 1.473
 89.916, 1.27
 90.0684, 1.473
 90.2208, 1.448
 90.3732, 1.702
 90.5256, 1.829
 90.678, 2.134
 90.8304, 2.489
 90.9828, 1.854
 91.1352, 1.499
 91.2876, 2.007
 91.44, 2.489
 91.5924, 2.616
 91.7448, 2.337
 91.8972, 2.057
 92.0496, 2.159
 92.202, 2.235
 92.3544, 2.159
 92.5068, 2.007
 92.6592, 1.168
 92.8116, 0.152
 92.964, -0.508
 93.1164, -0.864
 93.2688, -1.067
 93.4212, -1.422
 93.5736, -1.753
 93.726, -1.346
 93.8784, -0.889
 94.0308, -0.94
 94.1832, -1.295
 94.3356, -1.372
 94.488, -0.965
 94.6404, -1.092
 94.7928, -1.524
 94.9452, -1.473
 95.0976, -1.143
 95.25, -1.27
 95.4024, -1.727
 95.5548, -1.803
 95.7072, -1.854
 95.8596, -2.108
 96.012, -1.803
 96.1644, -1.245
 96.3168, -1.372
 96.4692, -1.422
 96.6216, -1.092
 96.774, -0.889
 96.9264, -0.711
 97.0788, -0.66
 97.2312, -0.889
 97.3836, -0.711
 97.536, -0.711
 97.6884, -1.219
 97.8408, -1.092
 97.9932, -0.762
 98.1456, -0.61
 98.298, -0.203
 98.4504, 0
 98.6028, 0.152
 98.7552, 0
 98.9076, -0.152
 99.06, 0.127
 99.2124, 0.406
 99.3648, 0.559
 99.5172, 0.66
 99.6696, 0.838
 99.822, 0.711
 99.9744, 0.762
 100.1268, 0.889
 100.2792, 0.381
 100.4316, 0.279
 100.584, 0.483
 100.7364, 0.178
 100.8888, 0
 101.0412, -0.076
 101.1936, -0.533
 101.346, -1.067
 101.4984, -1.168
 101.6508, -0.965
 101.8032, -1.245
 101.9556, -1.549
 102.108, -1.321
 102.2604, -1.422
 102.4128, -1.245
 102.5652, -0.914
 102.7176, -0.991
 102.87, -1.041
 103.0224, -0.94
 103.1748, -0.864
 103.3272, -0.94
 103.4796, -0.813
 103.632, -0.762
 103.7844, -0.483
 103.9368, -0.178
 104.0892, -0.406
 104.2416, -0.508
 104.394, -0.076
 104.5464, -0.025
 104.6988, -0.076
 104.8512, 0.305
 105.0036, 0.711
 105.156, 1.473
 105.3084, 1.422
 105.4608, 1.168
 105.6132, 1.422
 105.7656, 2.007
 105.918, 1.956
 106.0704, 1.194
 106.2228, 1.219
 106.3752, 1.651
 106.5276, 1.803
 106.68, 1.27
 106.8324, 1.041
 106.9848, 1.194
 107.1372, 0.914
 107.2896, 1.753
 107.442, 2.083
 107.5944, 1.372
 107.7468, 1.27
 107.8992, 1.194
 108.0516, 1.346
 108.204, 1.499
 108.3564, 1.524
 108.5088, 1.549
 108.6612, 1.473
 108.8136, 1.727
 108.966, 1.829
 109.1184, 1.422
 109.2708, 1.041
 109.4232, 1.118
 109.5756, 1.245
 109.728, 1.27
 109.8804, 1.6
 110.0328, 1.524
 110.1852, 0.787
 110.3376, 1.041
 110.49, 1.753
 110.6424, 1.702
 110.7948, 0.94
 110.9472, 0.406
 111.0996, 0.533
 111.252, 0.533
 111.4044, 0.305
 111.5568, 0.203
 111.7092, 0.178
 111.8616, 0.102
 112.014, 0.178
 112.1664, 0.229
 112.3188, -0.076
 112.4712, -0.127
 112.6236, 0.152
 112.776, -0.102
 112.9284, -0.381
 113.0808, -0.432
 113.2332, -0.432
 113.3856, -0.508
 113.538, -1.168
 113.6904, -1.676
 113.8428, -0.991
 113.9952, -0.305
 114.1476, -0.864
 114.3, -1.905
 114.4524, -2.438
 114.6048, -2.769
 114.7572, -2.692
 114.9096, -2.413
 115.062, -2.642
 115.2144, -3.073
 115.3668, -3.327
 115.5192, -2.819
 115.6716, -2.718
 115.824, -3.353
 115.9764, -3.556
 116.1288, -3.327
 116.2812, -2.921
 116.4336, -3.378
 116.586, -3.683
 116.7384, -3.708
 116.8908, -4.039
 117.0432, -4.343
 117.1956, -4.699
 117.348, -4.597
 117.5004, -4.801
 117.6528, -5.207
 117.8052, -5.283
 117.9576, -5.461
 118.11, -5.639
 118.2624, -5.613
 118.4148, -5.69
 118.5672, -5.867
 118.7196, -5.715
 118.872, -5.613
 119.0244, -5.283
 119.1768, -5.385
 119.3292, -5.41
 119.4816, -5.08
 119.634, -5.258
 119.7864, -5.512
 119.9388, -5.283
 120.0912, -5.055
 120.2436, -5.258
 120.396, -5.156
 120.5484, -5.207
 120.7008, -5.385
 120.8532, -5.385
 121.0056, -5.537
 121.158, -5.385
 121.3104, -5.41
 121.4628, -5.639
 121.6152, -5.258
 121.7676, -5.283
 121.92, -5.563
 122.0724, -5.613
 122.2248, -5.613
 122.3772, -4.674
 122.5296, -5.182
 122.682, -6.223
 122.8344, -5.766
 122.9868, -5.74
 123.1392, -5.334
 123.2916, -5.334
 123.444, -5.867
 123.5964, -5.994
 123.7488, -5.867
 123.9012, -5.131
 124.0536, -4.597
 124.206, -4.699
 124.3584, -5.055
 124.5108, -5.385
 124.6632, -5.359
 124.8156, -5.055
 124.968, -4.826
 125.1204, -4.724
 125.2728, -4.394
 125.4252, -4.191
 125.5776, -4.394
 125.73, -4.42
 125.8824, -4.013
 126.0348, -3.912
 126.1872, -4.013
 126.3396, -3.988
 126.492, -3.962
 126.6444, -4.039
 126.7968, -3.861
 126.9492, -3.277
 127.1016, -3.15
 127.254, -3.404
 127.4064, -3.632
 127.5588, -3.835
 127.7112, -3.886
 127.8636, -3.81
 128.016, -3.785
 128.1684, -4.013
 128.3208, -3.759
 128.4732, -2.616
 128.6256, -2.946
 128.778, -3.785
 128.9304, -3.404
 129.0828, -3.048
 129.2352, -2.692
 129.3876, -2.642
 129.54, -2.921
 129.6924, -3.226
 129.8448, -3.404
 129.9972, -2.87
 130.1496, -2.743
 130.302, -3.124
 130.4544, -3.048
 130.6068, -3.023
 130.7592, -2.642
 130.9116, -2.692
 131.064, -3.048
 131.2164, -3.15
 131.3688, -3.581
 131.5212, -4.166
 131.6736, -4.597
 131.826, -4.47
 131.9784, -4.115
 132.1308, -3.988
 132.2832, -3.607
 132.4356, -3.15
 132.588, -3.327
 132.7404, -3.302
 132.8928, -2.565
 133.0452, -1.778
 133.1976, -2.007
 133.35, -2.464
 133.5024, -2.311
 133.6548, -1.829
 133.8072, -1.676
 133.9596, -1.372
 134.112, -0.914
 134.2644, -0.813
 134.4168, -0.559
 134.5692, -0.254
 134.7216, -0.66
 134.874, -1.067
 135.0264, -0.457
 135.1788, 0.178
 135.3312, -0.025
 135.4836, -0.305
 135.636, -0.61
 135.7884, -0.991
 135.9408, -0.66
 136.0932, -0.025
 136.2456, -0.051
 136.398, 0.025
 136.5504, 0.051
 136.7028, -0.076
 136.8552, 0.229
 137.0076, 0.406
ENDTABLE
Z_PROFILE_GAIN(1)   1 ! Gain multiplied with calculated value to get elevation
                      ! increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment
SSTART_Z_PROFILE(1) 0 ; m ! Offset subtracted from distance travelled
SSCALE_Z_PROFILE(1) 1 ! Scale factor divided into (distance travelled -
                      ! SSTART_Z_PROFILE)

! 1D table: col 1 = distance travelled (m), col 2 = elevation increment (mm)
Z_PROFILE_TABLE(2) LINEAR_LOOP ! linear interpolation, repeat in loop
 0.3048, -1.829
 0.4572, -1.523887249
 0.6096, -1.54867441
 0.762, -1.852084988
 0.9144, -2.101991402
 1.0668, -2.075182096
 1.2192, -1.953520215
 1.3716, -1.350900939
 1.524, -0.690382649
 1.6764, -0.5446140969
 1.8288, -0.2856909057
 1.9812, -0.6855395078
 2.1336, -1.40858688
 2.286, -0.8776833931
 2.4384, -0.3083913395
 2.5908, 0.0452143991
 2.7432, 0.443507883
 2.8956, 0.6803567807
 3.048, 0.4265230646
 3.2004, -0.01625251362
 3.3528, 0.1723359914
 3.5052, 0.626447806
 3.6576, 0.9022824482
 3.81, 0.946121288
 3.9624, 1.14198128
 4.1148, 0.7270242597
 4.2672, 0.3328934337
 4.4196, 0.3888962492
 4.572, 0.2652221116
 4.7244, 0.403905511
 4.8768, 0.2148385434
 5.0292, 0.5423973527
 5.1816, 1.414763619
 5.334, 1.397130858
 5.4864, 1.10847301
 5.6388, 1.179352471
 5.7912, 1.756877016
 5.9436, 2.039691746
 6.096, 1.908488375
 6.2484, 1.733921525
 6.4008, 1.592946924
 6.5532, 2.068727525
 6.7056, 2.419471251
 6.858, 2.162802396
 7.0104, 2.120379416
 7.1628, 2.043167943
 7.3152, 1.562221323
 7.4676, 1.344903512
 7.62, 1.574461594
 7.7724, 2.14374139
 7.9248, 2.54
 8.0772, 2.481785694
 8.2296, 1.874179228
 8.382, 1.443668855
 8.5344, 1.633237337
 8.6868, 1.819677392
 8.8392, 1.93280386
 8.9916, 1.954647904
 9.144, 2.009291808
 9.2964, 2.104203324
 9.4488, 1.8271398
 9.6012, 1.549872041
 9.7536, 1.91261646
 9.906, 2.317588206
 10.0584, 2.668621579
 10.2108, 3.338469811
 10.3632, 3.663101241
 10.5156, 3.255177912
 10.668, 2.823038605
 10.8204, 2.676204608
 10.9728, 2.7419537
 11.1252, 2.925262294
 11.2776, 3.007487643
 11.43, 3.131489909
 11.5824, 3.167543908
 11.7348, 3.243482936
 11.8872, 3.081020018
 12.0396, 2.511205359
 12.192, 2.484848318
 12.3444, 2.450997279
 12.4968, 2.210848187
 12.6492, 2.478948212
 12.8016, 3.138743039
 12.954, 3.295179553
 13.1064, 2.88089987
 13.2588, 2.276167638
 13.4112, 1.918501859
 13.5636, 2.220247417
 13.716, 2.269989468
 13.8684, 2.108689534
 14.0208, 1.941233419
 14.1732, 2.011332863
 14.3256, 2.092040246
 14.478, 1.818596041
 14.6304, 1.444174046
 14.7828, 1.240463154
 14.9352, 1.088794626
 15.0876, 0.8374363695
 15.24, 0.6101746345
 15.3924, 0.8381191657
 15.5448, 1.295
 15.6972, 1.626
 15.8496, 1.219
 16.002, 1.27
 16.1544, 1.727
 16.3068, 1.422
 16.4592, 1.245
 16.6116, 1.702
 16.764, 2.311
 16.9164, 1.93
 17.0688, 0.965
 17.2212, 0.356
 17.3736, 0.178
 17.526, 0.737
 17.6784, 1.118
 17.8308, 0.737
 17.9832, 0.457
 18.1356, 0.127
 18.288, -0.178
 18.4404, 0.229
 18.5928, 0.965
 18.7452, 1.219
 18.8976, 0.787
 19.05, 0.229
 19.2024, -0.051
 19.3548, -0.457
 19.5072, -0.635
 19.6596, -1.016
 19.812, -1.676
 19.9644, -1.626
 20.1168, -1.346
 20.2692, -1.422
 20.4216, -2.083
 20.574, -2.692
 20.7264, -3.175
 20.8788, -3.505
 21.0312, -3.15
 21.1836, -2.667
 21.336, -2.591
 21.4884, -2.667
 21.6408, -2.616
 21.7932, -2.667
 21.9456, -2.769
 22.098, -2.388
 22.2504, -1.88
 22.4028, -2.083
 22.5552, -2.819
 22.7076, -3.454
 22.86, -3.505
 23.0124, -3.099
 23.1648, -2.54
 23.3172, -2.007
 23.4696, -2.464
 23.622, -3.48
 23.7744, -3.785
 23.9268, -2.921
 24.0792, -2.032
 24.2316, -2.007
 24.384, -1.956
 24.5364, -2.261
 24.6888, -2.667
 24.8412, -2.464
 24.9936, -2.235
 25.146, -2.083
 25.2984, -1.854
 25.4508, -1.702
 25.6032, -1.702
 25.7556, -1.702
 25.908, -2.134
 26.0604, -2.235
 26.2128, -1.829
 26.3652, -1.651
 26.5176, -1.524
 26.67, -1.372
 26.8224, -1.397
 26.9748, -1.651
 27.1272, -1.702
 27.2796, -1.397
 27.432, -1.219
 27.5844, -1.702
 27.7368, -1.092
 27.8892, -0.584
 28.0416, -1.499
 28.194, -1.88
 28.3464, -1.854
 28.4988, -1.727
 28.6512, -1.575
 28.8036, -1.651
 28.956, -2.007
 29.1084, -2.311
 29.2608, -2.057
 29.4132, -1.702
 29.5656, -1.676
 29.718, -1.651
 29.8704, -1.524
 30.0228, -1.575
 30.1752, -1.88
 30.3276, -2.108
 30.48, -2.311
 30.6324, -2.438
 30.7848, -2.591
 30.9372, -2.819
 31.0896, -2.718
 31.242, -2.667
 31.3944, -2.769
 31.5468, -2.616
 31.6992, -2.464
 31.8516, -2.337
 32.004, -2.515
 32.1564, -3.226
 32.3088, -4.013
 32.4612, -4.293
 32.6136, -3.658
 32.766, -2.896
 32.9184, -2.819
 33.0708, -2.667
 33.2232, -2.743
 33.3756, -2.743
 33.528, -2.54
 33.6804, -2.642
 33.8328, -2.362
 33.9852, -2.235
 34.1376, -2.489
 34.29, -2.489
 34.4424, -2.286
 34.5948, -2.032
 34.7472, -1.321
 34.8996, -1.041
 35.052, -1.905
 35.2044, -1.676
 35.3568, -0.737
 35.5092, -0.737
 35.6616, -0.762
 35.814, -0.406
 35.9664, -0.102
 36.1188, -0.457
 36.2712, -1.067
 36.4236, -1.168
 36.576, -0.965
 36.7284, -0.559
 36.8808, -0.508
 37.0332, -0.737
 37.1856, -0.635
 37.338, -0.279
 37.4904, -0.254
 37.6428, -0.305
 37.7952, 0.381
 37.9476, 0.559
 38.1, -0.025
 38.2524, 0.305
 38.4048, 1.245
 38.5572, 1.245
 38.7096, 0.762
 38.862, 0.61
 39.0144, 0.483
 39.1668, 0.457
 39.3192, 0.61
 39.4716, 1.016
 39.624, 0.61
 39.7764, 0.127
 39.9288, 0.229
 40.0812, -0.051
 40.2336, -0.61
 40.386, -0.965
 40.5384, -0.737
 40.6908, -0.762
 40.8432, -0.711
 40.9956, -0.61
 41.148, -0.965
 41.3004, -1.88
 41.4528, -2.184
 41.6052, -1.549
 41.7576, -1.067
 41.91, -1.905
 42.0624, -2.997
 42.2148, -3.099
 42.3672, -3.404
 42.5196, -3.099
 42.672, -2.819
 42.8244, -3.048
 42.9768, -3.2
 43.1292, -2.87
 43.2816, -2.362
 43.434, -2.286
 43.5864, -1.524
 43.7388, -0.889
 43.8912, -1.499
 44.0436, -2.362
 44.196, -2.388
 44.3484, -1.854
 44.5008, -1.727
 44.6532, -1.549
 44.8056, -1.397
 44.958, -1.626
 45.1104, -1.727
 45.2628, -1.397
 45.4152, -0.965
 45.5676, -0.584
 45.72, -0.508
 45.8724, -0.686
 46.0248, -0.635
 46.1772, -0.432
 46.3296, -0.203
 46.482, -0.102
 46.6344, 0.076
 46.7868, 0.127
 46.9392, -0.025
 47.0916, -0.229
 47.244, -0.381
 47.3964, 0.229
 47.5488, 0.94
 47.7012, 0.864
 47.8536, 0.838
 48.006, 0.965
 48.1584, 0.635
 48.3108, 0.508
 48.4632, 1.245
 48.6156, 1.981
 48.768, 2.032
 48.9204, 1.905
 49.0728, 2.057
 49.2252, 1.93
 49.3776, 1.041
 49.53, 0.61
 49.6824, 1.041
 49.8348, 1.448
 49.9872, 1.626
 50.1396, 1.778
 50.292, 1.803
 50.4444, 1.829
 50.5968, 1.981
 50.7492, 2.032
 50.9016, 2.083
 51.054, 2.21
 51.2064, 2.337
 51.3588, 2.438
 51.5112, 1.93
 51.6636, 0.762
 51.816, -0.432
 51.9684, -1.041
 52.1208, -0.991
 52.2732, -0.432
 52.4256, -0.127
 52.578, -0.686
 52.7304, -1.6
 52.8828, -1.803
 53.0352, -1.727
 53.1876, -2.159
 53.34, -2.413
 53.4924, -2.388
 53.6448, -1.549
 53.7972, -0.483
 53.9496, 0.152
 54.102, 0.508
 54.2544, 0.305
 54.4068, 0.025
 54.5592, -0.279
 54.7116, -0.533
 54.864, -0.305
 55.0164, 0.381
 55.1688, 0.559
 55.3212, 0.457
 55.4736, 0.762
 55.626, 1.143
 55.7784, 0.889
 55.9308, 0.838
 56.0832, 1.118
 56.2356, 0.965
 56.388, 1.346
 56.5404, 1.6
 56.6928, 1.422
 56.8452, 1.422
 56.9976, 1.6
 57.15, 1.956
 57.3024, 2.108
 57.4548, 2.083
 57.6072, 2.261
 57.7596, 2.515
 57.912, 2.692
 58.0644, 2.743
 58.2168, 2.692
 58.3692, 3.251
 58.5216, 3.2
 58.674, 2.388
 58.8264, 2.921
 58.9788, 3.683
 59.1312, 3.912
 59.2836, 4.166
 59.436, 4.369
 59.5884, 3.683
 59.7408, 2.946
 59.8932, 2.667
 60.0456, 2.286
 60.198, 2.21
 60.3504, 2.235
 60.5028, 2.083
 60.6552, 2.515
 60.8076, 3.251
 60.96, 2.896
 61.1124, 2.565
 61.2648, 2.184
 61.4172, 1.956
 61.5696, 2.464
 61.722, 3.099
 61.8744, 3.48
 62.0268, 3.15
 62.1792, 2.769
 62.3316, 2.261
 62.484, 2.21
 62.6364, 3.658
 62.7888, 4.14
 62.9412, 3.099
 63.0936, 2.921
 63.246, 2.87
 63.3984, 2.184
 63.5508, 2.032
 63.7032, 2.184
 63.8556, 2.184
 64.008, 2.311
 64.1604, 1.829
 64.3128, 1.702
 64.4652, 1.956
 64.6176, 1.473
 64.77, 1.041
 64.9224, 0.94
 65.0748, 1.118
 65.2272, 1.219
 65.3796, 1.473
 65.532, 1.753
 65.6844, 1.727
 65.8368, 1.651
 65.9892, 1.422
 66.1416, 1.27
 66.294, 1.829
 66.4464, 2.286
 66.5988, 1.803
 66.7512, 1.397
 66.9036, 1.448
 67.056, 2.438
 67.2084, 3.404
 67.3608, 3.429
 67.5132, 3.378
 67.6656, 3.556
 67.818, 3.531
 67.9704, 3.353
 68.1228, 3.404
 68.2752, 3.277
 68.4276, 3.429
 68.58, 3.861
 68.7324, 3.912
 68.8848, 3.785
 69.0372, 3.581
 69.1896, 3.835
 69.342, 4.521
 69.4944, 4.953
 69.6468, 4.877
 69.7992, 4.013
 69.9516, 3.454
 70.104, 3.632
 70.2564, 3.886
 70.4088, 4.445
 70.5612, 5.105
 70.7136, 4.877
 70.866, 4.521
 71.0184, 4.699
 71.1708, 4.293
 71.3232, 3.81
 71.4756, 3.886
 71.628, 4.039
 71.7804, 3.835
 71.9328, 3.581
 72.0852, 3.734
 72.2376, 4.369
 72.39, 4.877
 72.5424, 5.004
 72.6948, 4.902
 72.8472, 4.572
 72.9996, 4.699
 73.152, 4.674
 73.3044, 4.369
 73.4568, 4.75
 73.6092, 5.055
 73.7616, 4.623
 73.914, 4.318
 74.0664, 4.318
 74.2188, 4.597
 74.3712, 4.648
 74.5236, 4.445
 74.676, 4.547
 74.8284, 4.47
 74.9808, 3.937
 75.1332, 3.429
 75.2856, 3.327
 75.438, 3.251
 75.5904, 3.531
 75.7428, 3.556
 75.8952, 3.505
 76.0476, 3.886
 76.2, 3.734
 76.3524, 3.15
 76.5048, 3.404
 76.6572, 3.454
 76.8096, 3.251
 76.962, 3.581
 77.1144, 2.896
 77.2668, 2.21
 77.4192, 2.438
 77.5716, 2.946
 77.724, 2.667
 77.8764, 2.134
 78.0288, 1.905
 78.1812, 1.676
 78.3336, 1.575
 78.486, 1.448
 78.6384, 1.626
 78.7908, 1.981
 78.9432, 1.626
 79.0956, 0.457
 79.248, 0.33
 79.4004, 0.914
 79.5528, 0.66
 79.7052, 0.076
 79.8576, -0.305
 80.01, -0.254
 80.1624, 0.102
 80.3148, 0.076
 80.4672, -0.178
 80.6196, 0.025
 80.772, 0.025
 80.9244, 0.152
 81.0768, 0.559
 81.2292, 0.584
 81.3816, 0.279
 81.534, -0.152
 81.6864, -0.33
 81.8388, -0.254
 81.9912, -0.229
 82.1436, -0.432
 82.296, -0.864
 82.4484, -1.092
 82.6008, -1.041
 82.7532, -1.067
 82.9056, -1.524
 83.058, -1.397
 83.2104, -1.041
 83.3628, -1.219
 83.5152, -1.041
 83.6676, -0.838
 83.82, -1.067
 83.9724, -1.397
 84.1248, -0.965
 84.2772, -1.067
 84.4296, -1.753
 84.582, -1.6
 84.7344, -0.991
 84.8868, -0.686
 85.0392, -0.686
 85.1916, -0.533
 85.344, -0.076
 85.4964, 0.229
 85.6488, 0.457
 85.8012, 0.864
 85.9536, 0.838
 86.106, 0.406
 86.2584, -0.178
 86.4108, -0.279
 86.5632, -0.457
 86.7156, -0.737
 86.868, -0.66
 87.0204, -0.203
 87.1728, -0.076
 87.3252, -0.356
 87.4776, 0.127
 87.63, 0.025
 87.7824, -0.584
 87.9348, -0.686
 88.0872, -0.94
 88.2396, -1.092
 88.392, -0.991
 88.5444, -0.508
 88.6968, -0.076
 88.8492, -0.381
 89.0016, -0.66
 89.154, -0.533
 89.3064, -0.305
 89.4588, -0.152
 89.6112, 0.127
 89.7636, 0.381
 89.916, 0.356
 90.0684, 0.356
 90.2208, 1.168
 90.3732, 1.803
 90.5256, 1.753
 90.678, 1.803
 90.8304, 1.702
 90.9828, 1.727
 91.1352, 2.286
 91.2876, 2.845
 91.44, 3.023
 91.5924, 2.972
 91.7448, 2.667
 91.8972, 2.54
 92.0496, 2.743
 92.202, 2.616
 92.3544, 2.362
 92.5068, 2.032
 92.6592, 0.965
 92.8116, 0.381
 92.964, 0.584
 93.1164, 0.66
 93.2688, 0.076
 93.4212, -0.965
 93.5736, -1.575
 93.726, -1.727
 93.8784, -1.676
 94.0308, -1.829
 94.1832, -1.829
 94.3356, -1.727
 94.488, -1.829
 94.6404, -1.575
 94.7928, -1.651
 94.9452, -1.168
 95.0976, -0.254
 95.25, -0.965
 95.4024, -1.981
 95.5548, -2.261
 95.7072, -2.362
 95.8596, -1.981
 96.012, -1.778
 96.1644, -2.464
 96.3168, -3.099
 96.4692, -3.175
 96.6216, -2.692
 96.774, -2.565
 96.9264, -2.489
 97.0788, -2.235
 97.2312, -1.651
 97.3836, -0.864
 97.536, -1.092
 97.6884, -1.549
 97.8408, -1.245
 97.9932, -0.965
 98.1456, -1.041
 98.298, -0.965
 98.4504, -0.762
 98.6028, -0.635
 98.7552, -0.686
 98.9076, -0.737
 99.06, -0.737
 99.2124, -0.61
 99.3648, -0.787
 99.5172, -0.864
 99.6696, -0.991
 99.822, -0.864
 99.9744, -0.533
 100.1268, -1.346
 100.2792, -1.448
 100.4316, -0.406
 100.584, -0.127
 100.7364, -0.457
 100.8888, -0.711
 101.0412, -0.965
 101.1936, -1.219
 101.346, -1.219
 101.4984, -1.27
 101.6508, -2.591
 101.8032, -3.759
 101.9556, -3.378
 102.108, -2.896
 102.2604, -2.743
 102.4128, -2.845
 102.5652, -3.2
 102.7176, -3.226
 102.87, -2.769
 103.0224, -1.905
 103.1748, -1.473
 103.3272, -2.057
 103.4796, -2.667
 103.632, -2.845
 103.7844, -2.642
 103.9368, -2.718
 104.0892, -2.769
 104.2416, -2.438
 104.394, -2.362
 104.5464, -2.362
 104.6988, -2.337
 104.8512, -2.007
 105.0036, -1.778
 105.156, -1.88
 105.3084, -2.388
 105.4608, -2.845
 105.6132, -2.819
 105.7656, -2.642
 105.918, -2.515
 106.0704, -2.489
 106.2228, -2.489
 106.3752, -2.515
 106.5276, -2.159
 106.68, -1.168
 106.8324, -0.508
 106.9848, -0.838
 107.1372, -1.143
 107.2896, -1.143
 107.442, -0.762
 107.5944, -0.127
 107.7468, 0.305
 107.8992, 0.762
 108.0516, 0.94
 108.204, 0.533
 108.3564, 0.305
 108.5088, 0.152
 108.6612, 0.152
 108.8136, 0.152
 108.966, 0.152
 109.1184, 0.635
 109.2708, 0.991
 109.4232, 0.965
 109.5756, 1.194
 109.728, 1.346
 109.8804, 0.965
 110.0328, 0.61
 110.1852, 0.61
 110.3376, 0.737
 110.49, 0.889
 110.6424, 1.016
 110.7948, 1.448
 110.9472, 1.651
 111.0996, 1.092
 111.252, 0.584
 111.4044, 0.406
 111.5568, 1.041
 111.7092, 1.473
 111.8616, 1.067
 112.014, 0.914
 112.1664, 1.092
 112.3188, 1.143
 112.4712, 0.737
 112.6236, 0.508
 112.776, 0.33
 112.9284, 0.025
 113.0808, 0.127
 113.2332, -0.203
 113.3856, -0.838
 113.538, -1.092
 113.6904, -1.422
 113.8428, -1.067
 113.9952, -0.483
 114.1476, -0.965
 114.3, -1.524
 114.4524, -1.321
 114.6048, -1.092
 114.7572, -1.397
 114.9096, -1.626
 115.062, -1.524
 115.2144, -1.372
 115.3668, -1.727
 115.5192, -1.93
 115.6716, -1.524
 115.824, -1.702
 115.9764, -2.362
 116.1288, -2.464
 116.2812, -2.235
 116.4336, -2.159
 116.586, -2.565
 116.7384, -3.226
 116.8908, -3.378
 117.0432, -3.048
 117.1956, -3.404
 117.348, -4.064
 117.5004, -4.318
 117.6528, -4.496
 117.8052, -3.912
 117.9576, -3.683
 118.11, -4.039
 118.2624, -3.962
 118.4148, -4.064
 118.5672, -4.191
 118.7196, -4.166
 118.872, -3.937
 119.0244, -3.785
 119.1768, -4.394
 119.3292, -4.42
 119.4816, -4.42
 119.634, -5.08
 119.7864, -5.055
 119.9388, -4.521
 120.0912, -3.556
 120.2436, -3.886
 120.396, -4.547
 120.5484, -4.293
 120.7008, -4.089
 120.8532, -4.318
 121.0056, -4.597
 121.158, -4.369
 121.3104, -4.064
 121.4628, -3.81
 121.6152, -3.48
 121.7676, -3.505
 121.92, -3.81
 122.0724, -3.835
 122.2248, -4.115
 122.3772, -4.318
 122.5296, -4.166
 122.682, -3.658
 122.8344, -3.48
 122.9868, -3.581
 123.1392, -3.099
 123.2916, -3.15
 123.444, -3.835
 123.5964, -4.369
 123.7488, -4.039
 123.9012, -4.089
 124.0536, -4.242
 124.206, -3.937
 124.3584, -4.242
 124.5108, -4.166
 124.6632, -4.242
 124.8156, -4.47
 124.968, -4.445
 125.1204, -3.785
 125.2728, -2.87
 125.4252, -2.972
 125.5776, -3.505
 125.73, -3.937
 125.8824, -4.191
 126.0348, -4.242
 126.1872, -4.394
 126.3396, -4.267
 126.492, -3.937
 126.6444, -3.861
 126.7968, -3.962
 126.9492, -4.191
 127.1016, -4.47
 127.254, -4.623
 127.4064, -4.674
 127.5588, -4.826
 127.7112, -4.851
 127.8636, -4.75
 128.016, -4.699
 128.1684, -4.572
 128.3208, -4.293
 128.4732, -4.216
 128.6256, -4.267
 128.778, -4.242
 128.9304, -4.242
 129.0828, -3.81
 129.2352, -3.785
 129.3876, -4.394
 129.54, -4.877
 129.6924, -5.105
 129.8448, -5.258
 129.9972, -5.131
 130.1496, -4.851
 130.302, -5.156
 130.4544, -4.724
 130.6068, -4.115
 130.7592, -3.861
 130.9116, -3.962
 131.064, -4.877
 131.2164, -5.156
 131.3688, -4.216
 131.5212, -4.013
 131.6736, -4.674
 131.826, -4.547
 131.9784, -3.81
 132.1308, -3.556
 132.2832, -4.267
 132.4356, -4.42
 132.588, -4.166
 132.7404, -4.166
 132.8928, -4.293
 133.0452, -4.699
 133.1976, -4.826
 133.35, -4.75
 133.5024, -4.801
 133.6548, -4.242
 133.8072, -3.759
 133.9596, -3.607
 134.112, -3.277
 134.2644, -2.997
 134.4168, -2.718
 134.5692, -2.591
 134.7216, -2.057
 134.874, -1.092
 135.0264, -0.737
 135.1788, -1.092
 135.3312, -1.346
 135.4836, -1.803
 135.636, -2.667
 135.7884, -2.87
 135.9408, -2.692
 136.0932, -2.616
 136.2456, -2.616
 136.398, -2.54
 136.5504, -2.362
 136.7028, -2.184
 136.8552, -2.108
 137.0076, -1.829
ENDTABLE
Z_PROFILE_GAIN(2)   1 ! Gain multiplied with calculated value to get elevation
                      ! increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment
SSTART_Z_PROFILE(2) 0 ; m ! Offset subtracted from distance travelled
SSCALE_Z_PROFILE(2) 1 ! Scale factor divided into (distance travelled -
                      ! SSTART_Z_PROFILE)

!------------------------------------------------------------------------------------
! SPLINE X-Y TABLES FOR PATH SEGMENTS
!------------------------------------------------------------------------------------
! Following are up to 500 tables of X-Y global coordinates used to make spline
! segments for reference paths. Tables are listed here only if used in a path. If
! indices shown below are not used, e.g., SEGMENT_XY_TABLE(1), the current value
! of the index ITAB_XY is used to identify the table when reading data.

! NTAB_XY 1 ! CALC -- Current number of XY spline tables for path segments

XY_TABLE_ID(1)      1 ; X-Y-Z Edges, Looped Road
SEGMENT_XY_TABLE(1) ! table with X (m), Y (m), and calculated station S (m)
 -54.277, 154.002, 0
 -51.138, 155.758, 3.597
 -47.559, 157.371, 7.522
 -43.74, 158.766, 11.588
 -39.879, 159.866, 15.603
 -36.176, 160.597, 19.377
 -32.617, 160.94, 22.953
 -29.071, 160.946, 26.499
 -25.557, 160.641, 30.026
 -22.093, 160.055, 33.539
 -18.7, 159.215, 37.035
 -15.372, 158.113, 40.54
 -12.094, 156.732, 44.097
 -8.878, 155.081, 47.713
 -5.731, 153.172, 51.393
 -2.663, 151.016, 55.143
 0.341, 148.574, 59.014
 3.288, 145.838, 63.036
 6.155, 142.867, 67.164
 8.917, 139.719, 71.352
 11.551, 136.453, 75.548
 13.989, 133.038, 79.744
 16.246, 129.437, 83.994
 18.425, 125.693, 88.326
 20.63, 121.852, 92.755
 22.962, 117.957, 97.294
 25.451, 113.906, 102.049
 28.028, 109.669, 107.008
 30.65, 105.401, 112.017
 33.274, 101.256, 116.923
 35.859, 97.39, 121.574
 38.352, 93.771, 125.968
 40.781, 90.298, 130.206
 43.226, 87.014, 134.301
 45.761, 83.967, 138.264
 48.465, 81.201, 142.132
 51.189, 78.741, 145.803
 53.878, 76.556, 149.268
 56.761, 74.61, 152.746
 60.06, 72.868, 156.476
 64.003, 71.293, 160.722
 68.467, 70.224, 165.313
 72.838, 69.849, 169.7
 76.597, 69.906, 173.459
 79.231, 70.132, 176.103
 80.224, 70.265, 177.105
 81.499, 70.59, 178.42
 84.763, 71.381, 181.779
 89.168, 72.361, 186.292
 93.872, 73.253, 191.079
 98.029, 73.779, 195.27
 101.706, 73.979, 198.952
 105.468, 74.036, 202.714
 109.211, 73.893, 206.46
 112.834, 73.497, 210.105
 116.233, 72.79, 213.576
 119.351, 71.81, 216.845
 122.256, 70.595, 219.994
 125.035, 69.087, 223.156
 127.774, 67.234, 226.462
 130.56, 64.978, 230.047
 133.482, 62.216, 234.068
 136.479, 58.984, 238.476
 139.422, 55.44, 243.082
 142.184, 51.74, 247.7
 144.632, 48.043, 252.134
 146.733, 44.414, 256.327
 148.575, 40.747, 260.431
 150.208, 36.945, 264.568
 151.682, 32.911, 268.863
 153.048, 28.547, 273.436
 154.341, 23.909, 278.251
 155.526, 19.062, 283.241
 156.552, 13.922, 288.482
 157.37, 8.405, 294.059
 157.929, 2.428, 300.063
 158.243, -3.963, 306.461
 158.323, -10.539, 313.038
 158.115, -17.109, 319.611
 157.564, -23.483, 326.009
 156.618, -29.47, 332.07
 155.45, -34.733, 337.461
 154.255, -39.277, 342.16
 153.016, -43.412, 346.476
 151.711, -47.451, 350.721
 150.321, -51.706, 355.197
 148.831, -56.121, 359.857
 147.255, -60.487, 364.499
 145.615, -64.89, 369.197
 143.932, -69.417, 374.027
 142.231, -74.157, 379.063
 140.478, -79.207, 384.408
 138.658, -84.513, 390.018
 136.821, -89.922, 395.73
 135.013, -95.285, 401.39
 133.281, -100.452, 406.839
 131.695, -105.276, 411.917
 130.221, -109.857, 416.73
 128.758, -114.417, 421.519
 127.209, -119.174, 426.521
 125.473, -124.354, 431.985
 123.475, -129.565, 437.566
 121.259, -134.301, 442.794
 118.899, -138.615, 447.712
 116.469, -142.554, 452.34
 114.042, -146.17, 456.695
 111.577, -149.395, 460.754
 109.024, -152.197, 464.545
 106.446, -154.675, 468.121
 103.907, -156.928, 471.515
 101.469, -159.059, 474.753
 98.928, -161.037, 477.973
 96.071, -162.786, 481.323
 92.95, -164.327, 484.804
 89.62, -165.682, 488.399
 86.131, -166.874, 492.086
 82.444, -167.689, 495.862
 78.581, -168.067, 499.743
 74.699, -168.258, 503.63
 70.95, -168.517, 507.388
 67.49, -169.092, 510.895
 64.276, -170, 514.235
 61.209, -171.075, 517.485
 58.346, -172.289, 520.595
 55.749, -173.623, 523.514
 53.479, -175.05, 526.196
 51.422, -176.522, 528.725
 49.369, -178.137, 531.337
 47.243, -180.089, 534.224
 44.964, -182.57, 537.592
 42.45, -185.774, 541.665
 40.104, -189.168, 545.791
 38.21, -192.145, 549.319
 36.525, -194.783, 552.449
 34.803, -197.161, 555.385
 32.799, -199.355, 558.357
 30.521, -201.328, 561.371
 28.132, -203.03, 564.304
 25.62, -204.513, 567.221
 22.979, -205.835, 570.174
 20.196, -207.051, 573.211
 17.126, -208.017, 576.43
 13.761, -208.589, 579.843
 10.284, -208.824, 583.328
 6.89, -208.778, 586.722
 3.763, -208.507, 589.861
 0.752, -207.833, 592.947
 -2.362, -206.683, 596.266
 -5.478, -205.271, 599.687
 -8.5, -203.81, 603.044
 -11.328, -202.514, 606.155
 -14.066, -201.297, 609.151
 -16.945, -200.093, 612.271
 -20.06, -199.153, 615.525
 -23.507, -198.725, 618.999
 -27.382, -199.059, 622.888
 -30.838, -199.891, 626.443
 -33.259, -200.81, 629.032
 -35.086, -201.837, 631.128
 -36.763, -202.996, 633.167
 -38.733, -204.307, 635.533
 -40.905, -206.11, 638.356
 -42.936, -208.546, 641.528
 -44.874, -211.338, 644.926
 -46.769, -214.205, 648.363
 -48.668, -216.867, 651.633
 -50.629, -219.231, 654.704
 -52.673, -221.366, 657.66
 -54.804, -223.242, 660.499
 -57.026, -224.831, 663.231
 -59.344, -226.106, 665.876
 -61.712, -227.046, 668.424
 -64.128, -227.669, 670.919
 -66.659, -228.008, 673.473
 -69.371, -228.092, 676.186
 -72.332, -227.952, 679.15
 -75.467, -227.331, 682.346
 -78.59, -226.095, 685.705
 -81.593, -224.47, 689.119
 -84.37, -222.685, 692.421
 -86.813, -220.962, 695.41
 -89.284, -219.089, 698.511
 -92.073, -216.828, 702.101
 -94.967, -214.373, 705.896
 -97.752, -211.915, 709.611
 -100.217, -209.647, 712.96
 -102.596, -207.363, 716.258
 -105.215, -204.765, 719.947
 -107.997, -201.915, 723.93
 -110.863, -198.871, 728.111
 -113.735, -195.694, 732.394
 -116.772, -191.92, 737.238
 -120.047, -187.317, 742.887
 -123.354, -182.288, 748.906
 -126.488, -177.238, 754.849
 -129.243, -172.571, 760.269
 -131.567, -168.324, 765.11
 -133.595, -164.226, 769.682
 -135.408, -160.224, 774.076
 -137.088, -156.263, 778.378
 -138.715, -152.289, 782.673
 -140.279, -148.31, 786.948
 -141.727, -144.365, 791.15
 -143.072, -140.438, 795.301
 -144.33, -136.511, 799.425
 -145.516, -132.572, 803.539
 -146.61, -128.78, 807.485
 -147.603, -125.144, 811.254
 -148.523, -121.425, 815.085
 -149.398, -117.381, 819.223
 -150.256, -112.771, 823.912
 -151.135, -107.328, 829.426
 -152.017, -101.217, 835.6
 -152.844, -94.832, 842.038
 -153.557, -88.571, 848.34
 -154.098, -82.832, 854.104
 -154.463, -77.816, 859.134
 -154.69, -73.26, 863.695
 -154.786, -68.859, 868.097
 -154.757, -64.31, 872.646
 -154.609, -59.308, 877.651
 -154.356, -53.738, 883.226
 -153.992, -47.803, 889.172
 -153.499, -41.675, 895.32
 -152.856, -35.528, 901.501
 -152.044, -29.535, 907.549
 -150.998, -23.633, 913.542
 -149.732, -17.707, 919.602
 -148.341, -11.849, 925.623
 -146.924, -6.154, 931.492
 -145.577, -0.71, 937.1
 -144.234, 4.624, 942.6
 -142.832, 9.913, 948.072
 -141.468, 14.936, 953.277
 -140.241, 19.478, 957.982
 -139.25, 23.321, 961.95
 -138.585, 26.24, 964.944
 -138.181, 28.382, 967.124
 -137.901, 30.081, 968.846
 -137.612, 31.673, 970.464
 -137.179, 33.489, 972.331
 -136.693, 35.27, 974.177
 -136.245, 36.792, 975.764
 -135.696, 38.448, 977.508
 -134.91, 40.633, 979.83
 -133.748, 43.741, 983.148
 -132.17, 47.932, 987.627
 -130.267, 52.944, 992.988
 -128.101, 58.536, 998.985
 -125.733, 64.466, 1005.37
 -123.225, 70.494, 1011.899
 -120.642, 76.358, 1018.307
 -118.035, 81.842, 1024.379
 -115.436, 86.777, 1029.956
 -112.882, 90.992, 1034.885
 -110.408, 94.316, 1039.028
 -108.191, 96.997, 1042.507
 -106.272, 99.474, 1045.641
 -104.48, 101.862, 1048.626
 -102.643, 104.277, 1051.66
 -100.59, 106.833, 1054.939
 -98.285, 109.564, 1058.512
 -95.842, 112.392, 1062.25
 -93.315, 115.269, 1066.079
 -90.758, 118.148, 1069.929
 -88.223, 120.981, 1073.731
 -85.681, 123.801, 1077.528
 -83.095, 126.641, 1081.369
 -80.512, 129.45, 1085.185
 -77.977, 132.175, 1088.906
 -75.535, 134.768, 1092.468
 -73.145, 137.329, 1095.971
 -70.779, 139.894, 1099.461
 -68.495, 142.307, 1102.783
 -66.356, 144.416, 1105.787
 -64.422, 146.066, 1108.329
 -62.664, 147.479, 1110.585
 -60.916, 148.98, 1112.889
 -59.032, 150.567, 1115.352
 -56.868, 152.241, 1118.088
 -54.277, 154.002, 1121.221
ENDTABLE


!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_AERO_ROAD_ID_1   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 1029.460755 ; m ! Road path station for tracked aero road point
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission
SV_AVX  -0.5118688838 ; deg/s ! ODE: Body-X roll rate of sprung-mass {AVx}
SV_AVX_A2 1.373655713 ; deg/s ! ODE: Roll rate of axle 2
SV_AVY   0.1413158195 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass {AVy}
SV_AVY_L1 245.7686928 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 245.7661735 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 245.6118798 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 245.6094787 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_R1 240.4729318 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 240.468792 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 240.2801247 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 240.2819738 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVZ   -6.692958221 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass {AVz}
SV_AV_CL  34.69964329 ; rpm ! Clutch relative spin
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_ENG 642.4896599 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}
SV_AV_SHAFT_L_D1 245.7686928 ; rpm ! ODE: Diff1 Left (first) output shaft speed
SV_AV_SHAFT_L_D2 245.6118798 ; rpm ! ODE: Diff2 Left (first) output shaft speed
SV_AV_SHAFT_L_D3 996.7953303 ; rpm ! ODE: Diff3 Left (first) output shaft speed
SV_AV_SHAFT_R_D1 240.4729318 ; rpm ! ODE: Diff1 Right (second) output shaft speed
SV_AV_SHAFT_R_D2 240.2801247 ; rpm ! ODE: Diff2 Right (second) output shaft speed
SV_AV_SHAFT_R_D3 996.0786094 ; rpm ! ODE: Diff3 Right (second) output shaft speed
SV_AV_SW -75.48108338 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC  607.7918199 ; rpm ! ODE: Torque coupling output shaft spin
SV_AV_TR_OUT 996.3800326 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BETA  -1.250930181 ; deg ! Sideslip (ISO)
SV_BETA_RD -1.210786225 ; deg ! Sideslip using road axes
SV_BRAKE_STATE      0 ; - ! Braking state, used for clutch control
SV_CL_2ND_DIFF_LOCKED_1 0 ; - ! 2nd Clutch lock state for 1st drive axle diff
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state for 2nd drive axle diff
SV_CL_2ND_DIFF_LOCKED_3 0 ; - ! 2nd Clutch lock state for transfer case
SV_CL_2ND_DIFF_SLIP_REF_1 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_3 0 ; deg ! 2nd Clutch ref. angle for transfer case
SV_CL_2ND_DIFF_SPIN_1 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff
SV_CL_2ND_DIFF_SPIN_3 0 ; rpm ! 2nd Clutch rel. spin for transfer case
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_CL_AUTO_BRAKE    0 ; - ! Boolean: 1 if auto clutch for low-speed braking
SV_CL_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto clutch for a gear shift
SV_CL_CON           0 ; - ! Transmission clutch control {ClutchTr}
SV_CL_DIFF_LOCKED_1 0 ; - ! Clutch lock state for 1st drive axle diff
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff
SV_CL_DIFF_LOCKED_3 0 ; - ! Clutch lock state for transfer case
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Clutch ref. angle for 1st drive axle diff
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff
SV_CL_DIFF_SLIP_REF_3 0 ; deg ! Clutch ref. angle for transfer case
SV_CL_DIFF_SPIN_1 5.297381523 ; rpm ! Clutch rel. spin for 1st drive axle diff
SV_CL_DIFF_SPIN_2 5.327504846 ; rpm ! Clutch rel. spin for 2nd drive axle diff
SV_CL_DIFF_SPIN_3 0.7042015902 ; rpm ! Clutch rel. spin for transfer case
SV_CL_LOCKED        0 ; - ! Clutch lockup state
SV_CL_PRESS         0 ; - ! Initial direction state for automatic clutch
SV_CL_TWIN_LOCKED_LF 0 ; - ! Lock state of LF twin clutch
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LOCKED_L_D3 0 ; - ! Lock state of L Diff3 twin clutch
SV_CL_TWIN_LOCKED_RF 0 ; - ! Lock state of RF twin clutch
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_LOCKED_R_D3 0 ; - ! Lock state of R Diff3 twin clutch
SV_CL_TWIN_SPIN_LF  0 ; rpm ! Rel. spin of LF twin clutch
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch
SV_CL_TWIN_SPIN_L_D3 0 ; rpm ! Rel. spin of L Diff3 twin clutch
SV_CL_TWIN_SPIN_RF  0 ; rpm ! Rel. spin of RF twin clutch
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch
SV_CL_TWIN_SPIN_R_D3 0 ; rpm ! Rel. spin of R Diff3 twin clutch
SV_CMP_S_L1 96.17401776 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 -35.3525893 ; mm ! Compression of ride spring L2
SV_CMP_S_R1 87.4910446 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 -43.77415767 ; mm ! Compression of ride spring R2
SV_CMP_T_L1I 22.49084667 ; mm ! Tire L1i compression
SV_CMP_T_L1O        0 ; mm ! Tire L1o compression
SV_CMP_T_L2I 8.040848594 ; mm ! Tire L2i compression
SV_CMP_T_L2O 8.486638104 ; mm ! Tire L2o compression
SV_CMP_T_R1I 18.86421914 ; mm ! Tire R1i compression
SV_CMP_T_R1O        0 ; mm ! Tire R1o compression
SV_CMP_T_R2I 6.436500551 ; mm ! Tire R2i compression
SV_CMP_T_R2O 6.001665467 ; mm ! Tire R2o compression
SV_CONTACT_ID_L1I   1 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O   1 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I   1 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O   1 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_R1I   1 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O   1 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I   1 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O   1 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_STA_L1I 1031.53361 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 0.001003788965 ; m ! Road path station for tire contact
                                  ! {S_Rd_L1O}
SV_CONTACT_STA_L2I 1027.468998 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O 1027.473823 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_R1I 1031.570824 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 1121.220847 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 1027.436716 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O 1027.431678 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio
SV_DZDX_GND -0.0357012094 ; - ! dZ/dX of ground at vehicle aero ref. pt
SV_DZDX_L1I -0.03589092296 ; - ! Ground X slope under tire L1i
SV_DZDX_L1O -0.03589092296 ; - ! Ground X slope under tire L1o
SV_DZDX_L2I -0.03363098087 ; - ! Ground X slope under tire L2i
SV_DZDX_L2O -0.03355599281 ; - ! Ground X slope under tire L2o
SV_DZDX_R1I -0.03602596599 ; - ! Ground X slope under tire R1i
SV_DZDX_R1O -0.03602596599 ; - ! Ground X slope under tire R1o
SV_DZDX_R2I -0.03498191273 ; - ! Ground X slope under tire R2i
SV_DZDX_R2O -0.03505791731 ; - ! Ground X slope under tire R2o
SV_DZDY_GND 0.003112348673 ; - ! dZ/dY of ground at vehicle aero ref. pt
SV_DZDY_L1I 0.005312624194 ; - ! Ground Y slope under tire L1i
SV_DZDY_L1O 0.005312624194 ; - ! Ground Y slope under tire L1o
SV_DZDY_L2I 0.004349570309 ; - ! Ground Y slope under tire L2i
SV_DZDY_L2O 0.004497834979 ; - ! Ground Y slope under tire L2o
SV_DZDY_R1I 0.005084794536 ; - ! Ground Y slope under tire R1i
SV_DZDY_R1O 0.005084794536 ; - ! Ground Y slope under tire R1o
SV_DZDY_R2I 0.001817122652 ; - ! Ground Y slope under tire R2i
SV_DZDY_R2O 0.001666493847 ; - ! Ground Y slope under tire R2o
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST           0 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  19242.70548 ; N ! Force from ride spring L1
SV_FS_L2  7350.846345 ; N ! Force from ride spring L2
SV_FS_R1  17485.59866 ; N ! Force from ride spring R1
SV_FS_R2  5375.933899 ; N ! Force from ride spring R2
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}
SV_FX_SM_L1 -429.0544816 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 -255.6714127 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_R1 -344.6456031 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 -143.1952428 ; N ! Tire force [sx] component, wheel R2
SV_FY_SM_L1 -1663.750215 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 -632.1953853 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_R1 -1562.930471 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 -498.1871288 ; N ! Tire force [sy] component, wheel R2
SV_FZ_SM_L1 11265.70367 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 8283.617212 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_R1 9437.295667 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 6232.494235 ; N ! Tire force force [sz] component, wheel R2
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_GEAR             6 ; - ! Automatic transmission gear {GearAuto}
SV_GEAR_DELAY       6 ; - ! Delayed transmission gear position
SV_GEAR_MEM         5 ; - ! Gear saved in memory, used for transition
SV_GEAR_STAT        6 ; - ! Transmission gear status {GearStat}
SV_IVERR -0.693905124 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_I_GEAR_SHIFT  0.04 ; kg-m2 ! Transmission gear inertia modulated by shift
SV_I_GEAR_SHIFT_START 0.04 ; kg-m2 ! Gear spin inertia when automatic shift started
SV_JNCR_A2 0.002602820377 ; m/s ! ODE: Jounce rate of axle 2
SV_JNCR_L1 0.04548377743 ; m/s ! ODE: Jounce rate at wheel L1
SV_JNCR_R1 -0.03253537589 ; m/s ! ODE: Jounce rate at wheel R1
SV_JNC_A2 -0.002953948883 ; m ! ODE: Jounce of axle 2
SV_JNC_L1 0.007537352398 ; m ! ODE: Jounce movement at wheel L1
SV_JNC_R1 -0.009867811805 ; m ! ODE: Jounce movement at wheel R1
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Is clutch locked while in neutral?
SV_MBOOST -165.8487134 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MY_BRK_L1 37.19029921 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 2.895260621 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_R1 26.3580507 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 -9.655949339 ; N-m ! Spin moment, wheel R2
SV_MZ_WHEEL_L1 61.08800243 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 22.97510256 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_R1 63.04615662 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 18.66940807 ; N-m ! Tire Mz, wheel R2
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff
SV_M_CL2_CAP_XC_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for transfer case
SV_M_CLUTCH_DEL     0 ; N-m ! ODE: Time delayed clutch torque capacity
SV_M_CL_CAP_FD_DYN  0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff
SV_M_CL_CAP_XC_DYN  0 ; N-m ! ODE: Clutch capacity for transfer case
SV_M_CL_LF_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle diff
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle diff
SV_M_CL_L_D3_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for transfer case
SV_M_CL_RF_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                      ! diff
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff
SV_M_CL_R_D3_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for transfer case
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request
SV_M_HYS_COL    -0.25 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1  -10 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 86.59747309 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_R1 107.6925654 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_TC   4.499697353 ; N-m ! Transmission input shaft torque
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1           0 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2           0 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_R1           0 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2           0 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PITCH  2.104192382 ; deg ! ODE: Pitch of sprung mass {Pitch}
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio
SV_ROLL   1.274224868 ; deg ! ODE: Roll (Euler) of sprung mass {Roll_E}
SV_ROLL_A2 0.4474681771 ; deg ! ODE: Roll of axle 2
SV_ROT_L1 415.0533555 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 414.8977176 ; rev ! ODE: Rotation of wheel L2
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_R1 410.9981847 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 410.5169166 ; rev ! ODE: Rotation of wheel R2
SV_ROT_SHAFT_1 1693.405657 ; rev ! ODE: 1st drive axle diff input shaft rotation
SV_ROT_SHAFT_2 1692.1 ; rev ! ODE: 2nd drive axle diff input shaft rotation
SV_ROT_SHAFT_3 1692.752829 ; rev ! ODE: Transfer case input shaft rotation
SV_ROT_SHAFT_L_D1 415.0533555 ; rev ! ODE: Diff1 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D2 414.8977176 ; rev ! ODE: Diff2 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D3 1693.405657 ; rev ! ODE: Diff3 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D1 410.9981847 ; rev ! ODE: Diff1 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D2 410.5169166 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D3 1692.1 ; rev ! ODE: Diff3 Right (second) output shaft rotation
SV_ROT_TC 1056.325257 ; rev ! ODE: Torque coupling output shaft rotation
SV_ROT_TR_OUT 1692.758299 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_SHIFT  0.61 ; - ! Transmission gear ratio modulated by gear shift
SV_R_GEAR_SHIFT_START 0.71 ; - ! Gear ratio when automatic shift started
SV_R_GEAR_TOTAL_SC 2.501 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.011415345 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.011811655 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1I 0.3795067944 ; m ! Deflected radius for tire L1i
SV_R_L1O 0.3795067944 ; m ! Deflected radius for tire L1o
SV_R_L2I 0.3939634494 ; m ! Deflected radius for tire L2i
SV_R_L2O 0.3935167203 ; m ! Deflected radius for tire L2o
SV_R_R1I 0.3831541877 ; m ! Deflected radius for tire R1i
SV_R_R1O 0.3831541877 ; m ! Deflected radius for tire R1o
SV_R_R2I 0.3955684518 ; m ! Deflected radius for tire R2i
SV_R_R2O 0.3960042367 ; m ! Deflected radius for tire R2o
SV_SHIFT_DELAY      0 ; - ! Is shifting delay in T.C. active?
SV_SLIP_LAT_L1I 0.0120095347 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I 0.005346699129 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O 0.005316268074 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_R1I 0.01315623309 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I 0.005497918003 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O 0.005534171264 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LONG_L1I -0.0004051891711 ; - ! ODE: Lagged long. slip, tire L1i
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o
SV_SLIP_LONG_L2I 0.001328395306 ; - ! ODE: Lagged long. slip, tire L2i
SV_SLIP_LONG_L2O -0.002029644291 ; - ! ODE: Lagged long. slip, tire L2o
SV_SLIP_LONG_R1I -0.0002498896696 ; - ! ODE: Lagged long. slip, tire R1i
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o
SV_SLIP_LONG_R2I -0.001759532285 ; - ! ODE: Lagged long. slip, tire R2i
SV_SLIP_LONG_R2O 0.001674756316 ; - ! ODE: Lagged long. slip, tire R2o
SV_SO_DIST 1018.359272 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION 1031.498954 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 1031.498954 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM -3.666614574 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD -3.664389671 ; deg ! Road-wheel steer from driver model (prev. time
                           ! step)
SV_STR_IN_DGR_A1 -1.432305855 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_GR_A1 -1.055814234 ; - ! ODE: Steering gear input position, axle 1
                             ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_KP_L1 -3.139462084 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD -3.137140134 ; deg ! Kingpin steer angle, wheel L1 (previous time
                              ! step)
SV_STR_KP_L2_OLD    0 ; deg ! Kingpin steer angle, wheel L2 (previous time step)
SV_STR_KP_R1 -3.249444293 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD -3.246955831 ; deg ! Kingpin steer angle, wheel R1 (previous time
                              ! step)
SV_STR_KP_R2_OLD    0 ; deg ! Kingpin steer angle, wheel R2 (previous time step)
SV_STR_OUT_GR_A1 -0.06228008788 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_SWA   -62.07908492 ; deg ! ODE: Steering wheel angle
SV_SWA_DM -62.04134438 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD -62.04134438 ; deg ! Steering wheel angle (previous time step)
SV_THROTTLE 1.413980593e-20 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          0 ; - ! Requested Throttle
SV_TH_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto throttle for a gear shift
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time of ESC control status changed
SV_T_SHIFT_START 14.5515 ; s ! Time when automatic gear shift started
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VERR_OLD -1.006473278 ; km/h ! Speed controller error at previous time step
SV_VXS    35.99837135 ; km/h ! ODE: Body-X speed of laden sprung-mass CG
SV_VYS  -0.2275259417 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG
SV_VZS   0.2131636183 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG
SV_XO    -113.1348256 ; m ! ODE: Global X coord. of sprung-mass origin {Xo}
SV_X_GND -114.0982863 ; m ! X coord, ground, vehicle aero ref. pt
SV_YAW   -298.7038435 ; deg ! ODE: Yaw of sprung mass {Yaw}
SV_YO     87.21918463 ; m ! ODE: Global Y coord. of sprung-mass origin {Yo}
SV_Y_GND  85.46189222 ; m ! Y coord, ground, vehicle aero ref. pt
SV_ZO     0.157740753 ; m ! ODE: Global Z coord. of sprung-mass origin {Zo}
SV_Z_CTC_L1I 0.2050426182 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O 0.2050426182 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I 0.2575383818 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O 0.2666902161 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_R1I 0.1450702951 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O 0.1450702951 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I 0.2076104822 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O 0.1984698245 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_GND 0.2015679986 ; m ! Z coord, ground, vehicle aero ref. pt


END
