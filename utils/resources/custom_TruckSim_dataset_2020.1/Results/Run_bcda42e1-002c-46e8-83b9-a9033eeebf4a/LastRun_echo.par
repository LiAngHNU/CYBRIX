PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT S_S I_S I_S S_S

DATASET_TITLE City, 4 Trucks, Pedestrians, 1 Solver
CATEGORY * TS 2020.1 - Multiple Vehicles
TITLE City, 4 Trucks, Pedestrians, 1 Solver <* TS 2020.1 - Multiple Vehicles>

! Echo: Results\Run_bcda42e1-002c-46e8-83b9-a9033eeebf4a\LastRun_echo.par
! This run was made 10:51 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   384 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      432 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              25 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    4 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG(1)  1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is', vehicle 1 [I]
OPT_INIT_SPEED(1)   1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is', vehicle 1 [I]
ROLL_MAX_STOP(1)   80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached, vehicle 1
VLOW_STOP(1)       -1 ; km/h ! [D] Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable, vehicle 1

OPT_INIT_CONFIG(2)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 2 [I]
OPT_INIT_SPEED(2)   1 ! [D] Initialize speed variables, vehicle 2 [I]
ROLL_MAX_STOP(2)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 2
VLOW_STOP(2)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 2

OPT_INIT_CONFIG(3)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 3 [I]
OPT_INIT_SPEED(3)   1 ! [D] Initialize speed variables, vehicle 3 [I]
ROLL_MAX_STOP(3)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 3
VLOW_STOP(3)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 3

OPT_INIT_CONFIG(4)  1 ! [D] Init. Zo, pitch, roll, and deflections, vehicle 4 [I]
OPT_INIT_SPEED(4)   1 ! [D] Initialize speed variables, vehicle 4 [I]
ROLL_MAX_STOP(4)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 4
VLOW_STOP(4)       -1 ; km/h ! [D] Minimum allowed absolute speed, vehicle 4

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATIONS
!------------------------------------------------------------------------------------
! N_VEHICLES        4 ! Number of vehicles (lead units) (read-only)
! VEHICLE_UNITS_MAP(1) 1 ! Number of units in vehicle 1 (read-only)
! VEHICLE_UNITS_MAP(2) 1 ! Number of units in vehicle 2 (read-only)
! VEHICLE_UNITS_MAP(3) 1 ! Number of units in vehicle 3 (read-only)
! VEHICLE_UNITS_MAP(4) 1 ! Number of units in vehicle 4 (read-only)
! VEHICLE_LEAD_UNIT(1) 1 ! Lead unit for vehicle 1 (read-only)
! VEHICLE_LEAD_UNIT(2) 2 ! Lead unit for vehicle 2 (read-only)
! VEHICLE_LEAD_UNIT(3) 3 ! Lead unit for vehicle 3 (read-only)
! VEHICLE_LEAD_UNIT(4) 4 ! Lead unit for vehicle 4 (read-only)
! VEHICLE_NUNITS    4 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    8 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 2 ! Number of axles on unit 2 (read-only)
! VEHICLE_AXLE_MAP(3) 2 ! Number of axles on unit 3 (read-only)
! VEHICLE_AXLE_MAP(4) 2 ! Number of axles on unit 4 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! Unit 1 is the lead unit for vehicle 1
! H_CG_TL(1) 1003.782688 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 1784.79808 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) -9.095779269e-12 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        6042 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 3253.384475 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 51686.11498 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 50614.7875 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! Unit 2 is the lead unit for vehicle 2
! H_CG_TL(2) 779.8479087 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 1819.967409 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(2) -7.784538247e-13 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)        3682 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 1656.30125 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 16422.35246 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 16179.40445 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

! Unit 3 is the lead unit for vehicle 3
! H_CG_TL(3) 619.7043364 ; mm ! CALC -- Height of TL CG, unit 3
! LX_CG_TL(3) 1062.483574 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(3) 4.402429405e-12 ; mm ! CALC -- Y coordinate of TL CG, unit 3
! M_TL(3)        1522 ; kg ! CALC -- TL mass, unit 3
! IXX_TL(3) 933.66485 ; kg-m2 ! CALC -- TL roll inertia moment, unit 3
! IYY_TL(3) 2345.26774 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 3
! IZZ_TL(3) 2378.52585 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 3

! Unit 4 is the lead unit for vehicle 4
! H_CG_TL(4) 1003.782688 ; mm ! CALC -- Height of TL CG, unit 4
! LX_CG_TL(4) 1784.79808 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(4) 9.231709573e-12 ; mm ! CALC -- Y coordinate of TL CG, unit 4
! M_TL(4)        6042 ; kg ! CALC -- TL mass, unit 4
! IXX_TL(4) 3256.284475 ; kg-m2 ! CALC -- TL roll inertia moment, unit 4
! IYY_TL(4) 51692.01497 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 4
! IZZ_TL(4) 50635.3875 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 4

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

! Unit 1 is the lead unit for vehicle 1
H_CG_SU(1)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)      1250 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)      2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)     35402.8 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)     34802.6 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(1)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(1)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 2 is the lead unit for vehicle 2
H_CG_SU(2)        850 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      1700 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          3160 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)        1310 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)       13630 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)       13310 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)         120 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(2)         1611 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)        4260 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(2)        2486 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 3 is the lead unit for vehicle 3
H_CG_SU(3)        665 ; mm ! Height of CG of sprung mass, unladen (SU), unit 3 [I]
LX_CG_SU(3)       970 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(3)          0 ; mm ! Y coordinate of SU CG, unit 3 [I]
M_SU(3)          1306 ; kg ! Mass of unladen sprung mass (SU), unit 3 [I]
IXX_SU(3)       846.6 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 3 [I]
IYY_SU(3)        1816 ; kg-m2 ! Pitch inertia for SU, unit 3 [I]
IZZ_SU(3)        1816 ; kg-m2 ! Yaw inertia for SU, unit 3 [I]
IXY_SU(3)           0 ; kg-m2 ! XY product of inertia for SU, unit 3 [I]
IXZ_SU(3)           0 ; kg-m2 ! XZ product of inertia for SU, unit 3 [I]
IYZ_SU(3)           0 ; kg-m2 ! YZ product of inertia for SU, unit 3 [I]

! N_PAYLOADS(3)     0 ! No. of payloads attached to this sprung mass (read only)

! HT_SM(3)       1530 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(3)        2780 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(3)        2272 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(3)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 4 is the lead unit for vehicle 4
H_CG_SU(4)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 4 [I]
LX_CG_SU(4)      1250 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(4)          0 ; mm ! Y coordinate of SU CG, unit 4 [I]
M_SU(4)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 4 [I]
IXX_SU(4)      2286.8 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 4 [I]
IYY_SU(4)     35408.7 ; kg-m2 ! Pitch inertia for SU, unit 4 [I]
IZZ_SU(4)     34823.2 ; kg-m2 ! Yaw inertia for SU, unit 4 [I]
IXY_SU(4)           0 ; kg-m2 ! XY product of inertia for SU, unit 4 [I]
IXZ_SU(4)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 4 [I]
IYZ_SU(4)           0 ; kg-m2 ! YZ product of inertia for SU, unit 4 [I]

! N_PAYLOADS(4)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(4)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(4)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(4)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(4)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)      6.8 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    5000 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)      3.2 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)    4000 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)   -2000 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

AREA_AERO(3)        3 ; m2 ! Frontal cross-section area, unit 3
H_REF_AERO(3)       0 ; mm ! Height of aerodynamic reference point, unit 3
L_REF_AERO(3)    2780 ; mm ! Aerodynamic reference length, unit 3
X_REF_AERO(3)   -1390 ; mm ! X coordinate of aerodynamic reference point, unit 3
Y_REF_AERO(3)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 3

AREA_AERO(4)       10 ; m2 ! Frontal cross-section area, unit 4
H_REF_AERO(4)       0 ; mm ! Height of aerodynamic reference point, unit 4
L_REF_AERO(4)    5000 ; mm ! Aerodynamic reference length, unit 4
X_REF_AERO(4)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 4
Y_REF_AERO(4)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 4

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. For solid-axle
! suspensions, these include the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE,
! SUSP_X_AXLE, and SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the
! origin of the sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1,1)    510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1,1)       510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
! ISPIN(1,1,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)          10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)          10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1,1)    290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1,1)    36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)       544 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CG_AXLE(1,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(1,2)    530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(1,2,1)       530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(1,2)           215 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(1,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)          20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)          20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     5000 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(1,2)    679 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(1,2,1)     0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)     0 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)      1043 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.3489932886 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(1,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Generic/independent suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R3 [I]
H_WC(2,1,1)       400 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(2,1,2)       400 ; mm ! Reference Z coordinate of wheel center R3 [I]
! ISPIN(2,1,1)    1.9 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(2,1,2)    1.9 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(2,1,1)         0.1 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(2,1,2)         0.1 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(2,1)     1750 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(2,1)        0 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_IND(2,1,1)    22 ; kg ! Unsteered suspension mass for wheel L3 [I]
M_US_IND(2,1,2)    22 ; kg ! Unsteered suspension mass for wheel R3 [I]
M_US_STR(2,1,1)    52 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(2,1,2)    52 ; kg ! Steered mass for wheel R3 [I]
! M_US(2,1)       210 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(2,1) 0.7904761905 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(2,2)    325 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(2,2,1)       325 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(2,2,2)       325 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(2,2)            57 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
! ISPIN(2,2,1)    3.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L4 [I]
! ISPIN(2,2,2)    3.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R4 [I]
! ISPIN_XXZZ(2,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L4 [I]
! ISPIN_XXZZ(2,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R4 [I]
IW(2,2,1)         0.2 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(2,2,2)         0.2 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(2,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(2,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(2,2)     1900 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(2,2)     4260 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(2,2)    188 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(2,2)       312 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(2,2) 0.3974358974 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
Y_CG_AXLE(2,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Generic/independent suspension for axle 1 on unit 3
OPT_JNC_DESIGN(3,1) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
A_CAMBER(3,1,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(3,1,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(3,1,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(3,1,2)        0 ; deg ! Static toe for wheel R5 [I]
H_WC(3,1,1)       340 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(3,1,2)       340 ; mm ! Reference Z coordinate of wheel center R5 [I]
! ISPIN(3,1,1)    2.3 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L5 [I]
! ISPIN(3,1,2)    2.3 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R5 [I]
! ISPIN_XXZZ(3,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L5 [I]
! ISPIN_XXZZ(3,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R5 [I]
IW(3,1,1)         1.1 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(3,1,2)         1.1 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(3,1,1)      0 ; kg-m2 ! [D] IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(3,1,2)      0 ; kg-m2 ! [D] IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(3,1,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(3,1,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(3,1)     1550 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(3,1)        0 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_IND(3,1,1)     9 ; kg ! Unsteered suspension mass for wheel L5 [I]
M_US_IND(3,1,2)     9 ; kg ! Unsteered suspension mass for wheel R5 [I]
M_US_STR(3,1,1)    14 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(3,1,2)    14 ; kg ! Steered mass for wheel R5 [I]
! M_US(3,1)        90 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(3,1)   0.8 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
! Y_CG_SUSP(3,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(3,1)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

! Solid-axle suspension for axle 2 on unit 3
OPT_JNC_DESIGN(3,2) 1 ! Specify JNC_DESIGN explicitly for axle 6? [I]
A_CAMBER(3,2,1)     0 ; deg ! Static camber for wheel L6 [I]
A_CAMBER(3,2,2)     0 ; deg ! Static camber for wheel R6 [I]
A_TOE(3,2,1)        0 ; deg ! Static toe for wheel L6 [I]
A_TOE(3,2,2)        0 ; deg ! Static toe for wheel R6 [I]
H_CG_AXLE(3,2)    350 ; mm ! Z coordinate of axle 6 CG [I]
H_WC(3,2,1)       340 ; mm ! Reference Z coordinate of wheel center L6 [I]
H_WC(3,2,2)       340 ; mm ! Reference Z coordinate of wheel center R6 [I]
IA(3,2)            11 ; kg-m2 ! Yaw and roll moment of inertia, axle 6 [I]
! ISPIN(3,2,1)    2.3 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L6 [I]
! ISPIN(3,2,2)    2.3 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R6 [I]
! ISPIN_XXZZ(3,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L6 [I]
! ISPIN_XXZZ(3,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R6 [I]
IW(3,2,1)         1.1 ; kg-m2 ! Spin inertia for wheel L6 [I]
IW(3,2,2)         1.1 ; kg-m2 ! Spin inertia for wheel R6 [I]
IW_XXZZ(3,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L6 [I]
IW_XXZZ(3,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R6 [I]
JNC_DESIGN(3,2,1)   0 ; mm ! Jounce when center of wheel L6 is at H_WC [I]
JNC_DESIGN(3,2,2)   0 ; mm ! Jounce when center of wheel R6 is at H_WC [I]
L_TRACK(3,2)     1650 ; mm ! Track width, wheel-center to wheel-center, axle 6 [I]
LX_AXLE(3,2)     2780 ; mm ! X dist. axle 6 is behind the sprung-mass origin [I]
M_US_AXLE(3,2)     82 ; kg ! Unsteered mass for axle 6 [I]
M_US_STR(3,2,1)     0 ; kg ! Steered mass for wheel L6 [I]
M_US_STR(3,2,2)     0 ; kg ! Steered mass for wheel R6 [I]
! M_US(3,2)       126 ; kg ! CALC -- Total unsprung mass for axle 6
! R_US_STR(3,2) 0.3492063492 ; - ! CALC -- Steered fraction of unsprung mass, axle 6
Y_CG_AXLE(3,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 6 [I]
Y_CL_SUSP(3,2)      0 ; mm ! Y coord. for suspension centerline, axle 6 [I]

! Solid-axle suspension for axle 1 on unit 4
OPT_JNC_DESIGN(4,1) 1 ! Specify JNC_DESIGN explicitly for axle 7? [I]
A_CAMBER(4,1,1)     0 ; deg ! Static camber for wheel L7 [I]
A_CAMBER(4,1,2)     0 ; deg ! Static camber for wheel R7 [I]
A_TOE(4,1,1)        0 ; deg ! Static toe for wheel L7 [I]
A_TOE(4,1,2)        0 ; deg ! Static toe for wheel R7 [I]
H_CG_AXLE(4,1)    510 ; mm ! Z coordinate of axle 7 CG [I]
H_WC(4,1,1)       510 ; mm ! Reference Z coordinate of wheel center L7 [I]
H_WC(4,1,2)       510 ; mm ! Reference Z coordinate of wheel center R7 [I]
IA(4,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 7 [I]
! ISPIN(4,1,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L7 [I]
! ISPIN(4,1,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R7 [I]
! ISPIN_XXZZ(4,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L7 [I]
! ISPIN_XXZZ(4,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R7 [I]
IW(4,1,1)          10 ; kg-m2 ! Spin inertia for wheel L7 [I]
IW(4,1,2)          10 ; kg-m2 ! Spin inertia for wheel R7 [I]
IW_XXZZ(4,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L7 [I]
IW_XXZZ(4,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R7 [I]
JNC_DESIGN(4,1,1)   0 ; mm ! Jounce when center of wheel L7 is at H_WC [I]
JNC_DESIGN(4,1,2)   0 ; mm ! Jounce when center of wheel R7 is at H_WC [I]
L_TRACK(4,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 7 [I]
LX_AXLE(4,1)        0 ; mm ! X dist. axle 7 is behind the sprung-mass origin [I]
M_US_AXLE(4,1)    290 ; kg ! Unsteered mass for axle 7 [I]
M_US_STR(4,1,1)    36 ; kg ! Steered mass for wheel L7 [I]
M_US_STR(4,1,2)    36 ; kg ! Steered mass for wheel R7 [I]
! M_US(4,1)       544 ; kg ! CALC -- Total unsprung mass for axle 7
! R_US_STR(4,1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 7
Y_CG_AXLE(4,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 7 [I]
Y_CL_SUSP(4,1)      0 ; mm ! Y coord. for suspension centerline, axle 7 [I]

! Solid-axle suspension for axle 2 on unit 4
OPT_JNC_DESIGN(4,2) 1 ! Specify JNC_DESIGN explicitly for axle 8? [I]
A_CAMBER(4,2,1)     0 ; deg ! Static camber for wheel L8 [I]
A_CAMBER(4,2,2)     0 ; deg ! Static camber for wheel R8 [I]
A_TOE(4,2,1)        0 ; deg ! Static toe for wheel L8 [I]
A_TOE(4,2,2)        0 ; deg ! Static toe for wheel R8 [I]
H_CG_AXLE(4,2)    530 ; mm ! Z coordinate of axle 8 CG [I]
H_WC(4,2,1)       530 ; mm ! Reference Z coordinate of wheel center L8 [I]
H_WC(4,2,2)       530 ; mm ! Reference Z coordinate of wheel center R8 [I]
IA(4,2)           215 ; kg-m2 ! Yaw and roll moment of inertia, axle 8 [I]
! ISPIN(4,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L8 [I]
! ISPIN(4,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R8 [I]
! ISPIN_XXZZ(4,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L8 [I]
! ISPIN_XXZZ(4,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R8 [I]
IW(4,2,1)          20 ; kg-m2 ! Spin inertia for wheel L8 [I]
IW(4,2,2)          20 ; kg-m2 ! Spin inertia for wheel R8 [I]
IW_XXZZ(4,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L8 [I]
IW_XXZZ(4,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R8 [I]
JNC_DESIGN(4,2,1)   0 ; mm ! Jounce when center of wheel L8 is at H_WC [I]
JNC_DESIGN(4,2,2)   0 ; mm ! Jounce when center of wheel R8 is at H_WC [I]
L_TRACK(4,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 8 [I]
LX_AXLE(4,2)     5000 ; mm ! X dist. axle 8 is behind the sprung-mass origin [I]
M_US_AXLE(4,2)    679 ; kg ! Unsteered mass for axle 8 [I]
M_US_STR(4,2,1)     0 ; kg ! Steered mass for wheel L8 [I]
M_US_STR(4,2,2)     0 ; kg ! Steered mass for wheel R8 [I]
! M_US(4,2)      1043 ; kg ! CALC -- Total unsprung mass for axle 8
! R_US_STR(4,2) 0.3489932886 ; - ! CALC -- Steered fraction of unsprung mass, axle 8
Y_CG_AXLE(4,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 8 [I]
Y_CL_SUSP(4,2)      0 ; mm ! Y coord. for suspension centerline, axle 8 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1,1) 65.53293862 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 65.53293862 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1,1)      0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,1,2)      0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1,1)      0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,1,2)      0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1,1) 32766.46931 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 32766.46931 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 16383.23466 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 16383.23466 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 38101.28691 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 38101.28691 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1,1)   1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1,1)  890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1,1)  890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1,1)    890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(1,2,1) 7.801540313 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 7.801540313 ; mm ! CALC -- Compression at design load, spring R2
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(1,2,1)      0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(1,2,2)      0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(1,2,1)      0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(1,2,2)      0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(1,2) 10922.15644 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 10922.15644 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 5461.078219 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 5461.078219 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 21150.49239 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 21150.49239 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 7608.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(1,2)   1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(1,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(1,2) 1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(1,2) 1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(1,2)   1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(1,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Generic/independent suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R3 [I]
! CMP_DESIGN(2,1,1) 93.11253033 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(2,1,2) 93.11253033 ; mm ! CALC -- Compression at design load, spring R3
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
! FSA_DESIGN(2,1) 18622.50607 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(2,1) 18622.50607 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(2,1,1) 18622.50607 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(2,1,2) 18622.50607 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(2,1) 20681.90257 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(2,1) 20681.90257 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(2,1,1) 10340.95128 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(2,1,2) 10340.95128 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(2,1) 5855.070834 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R4 [I]
! CMP_DESIGN(2,2,1) -33.9039288 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(2,2,2) -33.9039288 ; mm ! CALC -- Compression at design load, spring R4
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(2,2,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(2,2,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(2,2,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(2,2,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(2,2) 12366.50793 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(2,2) 12366.50793 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(2,2,1) 6870.282186 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(2,2,2) 6870.282186 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(2,2) 15426.18273 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(2,2) 15426.18273 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(2,2,1) 7713.091367 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(2,2,2) 7713.091367 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(2,2) 1964.953516 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(2,2)   1100 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(2,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(2,2) 1200 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(2,2) 1200 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(2,2)   1200 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(2,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(2,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(2,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(2,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(2,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Generic/independent suspension for axle 1 on unit 3
OPT_EXT_SP(3,1,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,1,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,1,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(3,1,2)   0 ; mm ! Initial compression of external spring R5 [I]
! CMP_DESIGN(3,1,1) 52.48219611 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(3,1,2) 52.48219611 ; mm ! CALC -- Compression at design load, spring R5
DAUX(3,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
! FSA_DESIGN(3,1) 8338.686212 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(3,1) 8338.686212 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(3,1,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(3,1,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(3,1,1) 6822.685495 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(3,1,2) 6822.685495 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(3,1) 9221.284712 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(3,1) 9221.284712 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(3,1,1) 4610.642356 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(3,1,2) 4610.642356 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(3,1) 3235.549793 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_SPG_ADJ(3,1,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(3,1,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(3,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(3,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(3,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(3,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

! Solid-axle suspension for axle 2 on unit 3
OPT_EXT_SP(3,2,1)   0 ! Disable built-in spring L6? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,2,2)   0 ! Disable built-in spring R6? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,2,1)   0 ; mm ! Initial compression of external spring L6 [I]
CMP_OFFSET(3,2,2)   0 ; mm ! Initial compression of external spring R6 [I]
! CMP_DESIGN(3,2,1) -54.08992357 ; mm ! CALC -- Compression at design load, spring
                                 ! L6
! CMP_DESIGN(3,2,2) -54.08992357 ; mm ! CALC -- Compression at design load, spring
                                 ! R6
DAUX(3,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 6
DMP_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L6 [I]
DMP_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R6 [I]
DMP_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L6 [I]
DMP_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R6 [I]
DMP_LEN(3,2,1)      0 ; mm ! [D] Length at design for damper L6 [I]
DMP_LEN(3,2,2)      0 ; mm ! [D] Length at design for damper R6 [I]
SPG_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L6 [I]
SPG_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R6 [I]
SPG_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L6 [I]
SPG_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R6 [I]
SPG_LEN(3,2,1)      0 ; mm ! [D] Length at design for spring L6 [I]
SPG_LEN(3,2,2)      0 ; mm ! [D] Length at design for spring R6 [I]
! FSA_DESIGN(3,2) 4468.798688 ; N ! CALC -- Design Load (susp., unladen), axle 6
! FSA_L(3,2) 4468.798688 ; N ! CALC -- Static suspension load, laden, axle  6
FS_OFFSET(3,2,1)    0 ; N ! Force offset subtracted from built-in spring L6 [I]
FS_OFFSET(3,2,2)    0 ; N ! Force offset subtracted from built-in spring R6 [I]
! FS_STATIC(3,2,1) 2234.399344 ; N ! CALC -- Static spring force, laden, spring L6
! FS_STATIC(3,2,2) 2234.399344 ; N ! CALC -- Static spring force, laden, spring R6
! FZA_L(3,2) 5704.436588 ; N ! CALC -- Static ground load, laden, axle 6
! FZA_UL(3,2) 5704.436588 ; N ! CALC -- Static ground load, unladen, axle 6
! FZ_STATIC(3,2,1) 2852.218294 ; N ! CALC -- Static ground force, laden, wheel L6
! FZ_STATIC(3,2,2) 2852.218294 ; N ! CALC -- Static ground force, laden, wheel R6
! KA_ROLL(3,2) 727.4693415 ; N-m/deg ! CALC -- Total roll stiffness, axle 6
L_DAMPERS(3,2)   1100 ; mm ! Distance between dampers on axle 6 [I]
Y_DAMPERS(3,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 6 [I]
L_JNC_STOPS(3,2) 1200 ; mm ! Distance between jounce stops on axle 6 [I]
L_REB_STOPS(3,2) 1200 ; mm ! Distance between rebound stops on axle 6 [I]
L_SPRINGS(3,2)   1200 ; mm ! Distance between springs on axle 6 [I]
Y_SPRINGS(3,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 6 [I]
L_SPG_ADJ(3,2,1)    0 ; mm ! Upper seat height increase for spring L6 [I]
L_SPG_ADJ(3,2,2)    0 ; mm ! Upper seat height increase for spring R6 [I]
SPRING_COMP_BETA(3,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L6
SPRING_COMP_BETA(3,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R6
SPRING_EXT_BETA(3,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L6
SPRING_EXT_BETA(3,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R6

! Solid-axle suspension for axle 1 on unit 4
OPT_EXT_SP(4,1,1)   0 ! Disable built-in spring L7? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,1,2)   0 ! Disable built-in spring R7? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,1,1)   0 ; mm ! Initial compression of external spring L7 [I]
CMP_OFFSET(4,1,2)   0 ; mm ! Initial compression of external spring R7 [I]
! CMP_DESIGN(4,1,1) 65.53293862 ; mm ! CALC -- Compression at design load, spring L7
! CMP_DESIGN(4,1,2) 65.53293862 ; mm ! CALC -- Compression at design load, spring R7
DAUX(4,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 7
DMP_AX(4,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L7 [I]
DMP_AX(4,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R7 [I]
DMP_AY(4,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L7 [I]
DMP_AY(4,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R7 [I]
DMP_LEN(4,1,1)      0 ; mm ! [D] Length at design for damper L7 [I]
DMP_LEN(4,1,2)      0 ; mm ! [D] Length at design for damper R7 [I]
SPG_AX(4,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L7 [I]
SPG_AX(4,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R7 [I]
SPG_AY(4,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L7 [I]
SPG_AY(4,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R7 [I]
SPG_LEN(4,1,1)      0 ; mm ! [D] Length at design for spring L7 [I]
SPG_LEN(4,1,2)      0 ; mm ! [D] Length at design for spring R7 [I]
! FSA_DESIGN(4,1) 32766.46931 ; N ! CALC -- Design Load (susp., unladen), axle 7
! FSA_L(4,1) 32766.46931 ; N ! CALC -- Static suspension load, laden, axle  7
FS_OFFSET(4,1,1)    0 ; N ! Force offset subtracted from built-in spring L7 [I]
FS_OFFSET(4,1,2)    0 ; N ! Force offset subtracted from built-in spring R7 [I]
! FS_STATIC(4,1,1) 16383.23466 ; N ! CALC -- Static spring force, laden, spring L7
! FS_STATIC(4,1,2) 16383.23466 ; N ! CALC -- Static spring force, laden, spring R7
! FZA_L(4,1) 38101.28691 ; N ! CALC -- Static ground load, laden, axle 7
! FZA_UL(4,1) 38101.28691 ; N ! CALC -- Static ground load, unladen, axle 7
! FZ_STATIC(4,1,1) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel L7
! FZ_STATIC(4,1,2) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel R7
! KA_ROLL(4,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 7
L_DAMPERS(4,1)   1100 ; mm ! Distance between dampers on axle 7 [I]
Y_DAMPERS(4,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 7 [I]
L_JNC_STOPS(4,1)  890 ; mm ! Distance between jounce stops on axle 7 [I]
L_REB_STOPS(4,1)  890 ; mm ! Distance between rebound stops on axle 7 [I]
L_SPRINGS(4,1)    890 ; mm ! Distance between springs on axle 7 [I]
Y_SPRINGS(4,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 7 [I]
L_SPG_ADJ(4,1,1)    0 ; mm ! Upper seat height increase for spring L7 [I]
L_SPG_ADJ(4,1,2)    0 ; mm ! Upper seat height increase for spring R7 [I]
SPRING_COMP_BETA(4,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L7
SPRING_COMP_BETA(4,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R7
SPRING_EXT_BETA(4,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L7
SPRING_EXT_BETA(4,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R7

! Solid-axle suspension for axle 2 on unit 4
OPT_EXT_SP(4,2,1)   0 ! Disable built-in spring L8? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,2,2)   0 ! Disable built-in spring R8? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,2,1)   0 ; mm ! Initial compression of external spring L8 [I]
CMP_OFFSET(4,2,2)   0 ; mm ! Initial compression of external spring R8 [I]
! CMP_DESIGN(4,2,1) 7.801540313 ; mm ! CALC -- Compression at design load, spring L8
! CMP_DESIGN(4,2,2) 7.801540313 ; mm ! CALC -- Compression at design load, spring R8
DAUX(4,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 8
DMP_AX(4,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L8 [I]
DMP_AX(4,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R8 [I]
DMP_AY(4,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L8 [I]
DMP_AY(4,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R8 [I]
DMP_LEN(4,2,1)      0 ; mm ! [D] Length at design for damper L8 [I]
DMP_LEN(4,2,2)      0 ; mm ! [D] Length at design for damper R8 [I]
SPG_AX(4,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L8 [I]
SPG_AX(4,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R8 [I]
SPG_AY(4,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L8 [I]
SPG_AY(4,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R8 [I]
SPG_LEN(4,2,1)      0 ; mm ! [D] Length at design for spring L8 [I]
SPG_LEN(4,2,2)      0 ; mm ! [D] Length at design for spring R8 [I]
! FSA_DESIGN(4,2) 10922.15644 ; N ! CALC -- Design Load (susp., unladen), axle 8
! FSA_L(4,2) 10922.15644 ; N ! CALC -- Static suspension load, laden, axle  8
FS_OFFSET(4,2,1)    0 ; N ! Force offset subtracted from built-in spring L8 [I]
FS_OFFSET(4,2,2)    0 ; N ! Force offset subtracted from built-in spring R8 [I]
! FS_STATIC(4,2,1) 5461.078219 ; N ! CALC -- Static spring force, laden, spring L8
! FS_STATIC(4,2,2) 5461.078219 ; N ! CALC -- Static spring force, laden, spring R8
! FZA_L(4,2) 21150.49239 ; N ! CALC -- Static ground load, laden, axle 8
! FZA_UL(4,2) 21150.49239 ; N ! CALC -- Static ground load, unladen, axle 8
! FZ_STATIC(4,2,1) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel L8
! FZ_STATIC(4,2,2) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel R8
! KA_ROLL(4,2) 7608.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 8
L_DAMPERS(4,2)   1000 ; mm ! Distance between dampers on axle 8 [I]
Y_DAMPERS(4,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 8 [I]
L_JNC_STOPS(4,2) 1000 ; mm ! Distance between jounce stops on axle 8 [I]
L_REB_STOPS(4,2) 1000 ; mm ! Distance between rebound stops on axle 8 [I]
L_SPRINGS(4,2)   1000 ; mm ! Distance between springs on axle 8 [I]
Y_SPRINGS(4,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 8 [I]
L_SPG_ADJ(4,2,1)    0 ; mm ! Upper seat height increase for spring L8 [I]
L_SPG_ADJ(4,2,2)    0 ; mm ! Upper seat height increase for spring R8 [I]
SPRING_COMP_BETA(4,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L8
SPRING_COMP_BETA(4,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R8
SPRING_EXT_BETA(4,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L8
SPRING_EXT_BETA(4,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R8

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC(1)    0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details), vehicle 1 [I]
OPT_POWER(1)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 1 [I]
OPT_STEER_DEF(1)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 1
BETA_COL(1)         2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(1)            0 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 1
HYS_COL(1)          0 ; N-m ! [D] Steering column friction torque, vehicle 1
A_STR_STOP_L(1)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(1)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(1)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 1
K_STR_STOP_R(1)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 1

OPT_M_SW_CALC(2)    1 ! Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 2 [I]
OPT_POWER(2)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 2 [I]
OPT_STEER_DEF(2)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 2
BETA_COL(2)       0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL(2)         0.01 ; N-m-s/deg ! Steering column viscous damping, vehicle 2
D_TBAR(2)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 2
HYS_COL(2)       0.25 ; N-m ! Steering column friction torque, vehicle 2
I_GEAR_IN(2) 0.000564 ; kg-m2 ! Steering system inertia, vehicle 2
M_BOOST_MAX(2)    400 ; N-m ! Maximum power steering boost torque
TC_BOOST(2)      0.02 ; s ! Time constant for power steering boost, vehicle 2
A_STR_STOP_L(2)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(2)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(2)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 2
K_STR_STOP_R(2)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 2

OPT_M_SW_CALC(3)    1 ! Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 3 [I]
OPT_POWER(3)        1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 3 [I]
OPT_STEER_DEF(3)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 3
BETA_COL(3)       0.5 ; deg ! Ref hysteretic angle for steering column friction
D_COL(3)         0.01 ; N-m-s/deg ! Steering column viscous damping, vehicle 3
D_TBAR(3)           0 ; N-m-s/deg ! [D] Torsion bar viscous damping, vehicle 3
HYS_COL(3)        0.1 ; N-m ! Steering column friction torque, vehicle 3
I_GEAR_IN(3)   0.0008 ; kg-m2 ! Steering system inertia, vehicle 3
M_BOOST_MAX(3)   1200 ; N-m ! Maximum power steering boost torque
TC_BOOST(3)      0.02 ; s ! Time constant for power steering boost, vehicle 3
A_STR_STOP_L(3)   -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R(3)    45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L(3)     0 ; N-m/deg ! Steering stop stiffness (Left), vehicle 3
K_STR_STOP_R(3)     0 ; N-m/deg ! Steering stop stiffness (Right), vehicle 3

OPT_M_SW_CALC(4)    0 ! [D] Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 4 [I]
OPT_POWER(4)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 4 [I]
OPT_STEER_DEF(4)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 4
BETA_COL(4)         2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(4)            0 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 4
HYS_COL(4)          0 ; N-m ! [D] Steering column friction torque, vehicle 4
A_STR_STOP_L(4)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(4)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(4)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 4
K_STR_STOP_R(4)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 4

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  0 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(2,1)         0 ! Compliant steer option, axle 3: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(2,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(2,1,1)   3.5 ; deg ! Caster for wheel L3 [I]
A_CASTER(2,1,2)   3.5 ; deg ! Caster for wheel R3 [I]
A_KPI(2,1,1)        8 ; deg ! Kingpin inclination for wheel L3 [I]
A_KPI(2,1,2)        8 ; deg ! Kingpin inclination for wheel R3 [I]
A_MZ_BETA(2,1,1)    2 ; deg ! Ref. hysteresis angle for L3 parking steer torque
A_MZ_BETA(2,1,2)    2 ; deg ! Ref. hysteresis angle for R3 parking steer torque
BETA_GEAR(2,1)    0.1 ; deg ! Ref hys. angle for steering gear friction, axle 3
D_GEAR(2,1)       2.5 ; N-m-s/deg ! Steering gear viscous damping, axle 3
HYS_GEAR(2,1)      10 ; N-m ! Steering gear hysteresis, axle 3
L_KPO(2,1,1)     39.5 ; mm ! Lateral kingpin offset to center of wheel L3 [I]
L_KPO(2,1,2)     39.5 ; mm ! Lateral kingpin offset to center of wheel R3 [I]
X_KPO(2,1,1)       -1 ; mm ! X coord. of kingpin at center of wheel L3 [I]
X_KPO(2,1,2)       -1 ; mm ! X coord. of kingpin at center of wheel R3 [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,1)  0 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(3,1)         0 ! Compliant steer option, axle 5: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(3,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(3,1,1)   3.5 ; deg ! Caster for wheel L5 [I]
A_CASTER(3,1,2)   3.5 ; deg ! Caster for wheel R5 [I]
A_KPI(3,1,1)        8 ; deg ! Kingpin inclination for wheel L5 [I]
A_KPI(3,1,2)        8 ; deg ! Kingpin inclination for wheel R5 [I]
A_MZ_BETA(3,1,1)  0.1 ; deg ! Ref. hysteresis angle for L5 parking steer torque
A_MZ_BETA(3,1,2)  0.1 ; deg ! Ref. hysteresis angle for R5 parking steer torque
BETA_GEAR(3,1)    0.5 ; deg ! Ref hys. angle for steering gear friction, axle 5
D_GEAR(3,1)         4 ; N-m-s/deg ! Steering gear viscous damping, axle 5
HYS_GEAR(3,1)     0.1 ; N-m ! Steering gear hysteresis, axle 5
L_KPO(3,1,1)     39.5 ; mm ! Lateral kingpin offset to center of wheel L5 [I]
L_KPO(3,1,2)     39.5 ; mm ! Lateral kingpin offset to center of wheel R5 [I]
X_KPO(3,1,1)       -1 ; mm ! X coord. of kingpin at center of wheel L5 [I]
X_KPO(3,1,2)       -1 ; mm ! X coord. of kingpin at center of wheel R5 [I]

OPT_STEER_EXT(3,2)  1 ! Steer model option for axle 6: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,1)  0 ! Steer model option for axle 7: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(4,1)         1 ! Compliant steer option, axle 7: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(4,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(4,1,1)   5.2 ; deg ! Caster for wheel L7 [I]
A_CASTER(4,1,2)   5.2 ; deg ! Caster for wheel R7 [I]
A_KPI(4,1,1)      7.2 ; deg ! Kingpin inclination for wheel L7 [I]
A_KPI(4,1,2)      7.2 ; deg ! Kingpin inclination for wheel R7 [I]
A_MZ_BETA(4,1,1)    1 ; deg ! Ref. hysteresis angle for L7 parking steer torque
A_MZ_BETA(4,1,2)    1 ; deg ! Ref. hysteresis angle for R7 parking steer torque
BETA_GEAR(4,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 7
CS_MZ_ROD(4,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 7
CS_MZ_SHAFT(4,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 7
C_WRAP(4,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 7
D_GEAR(4,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 7
HYS_GEAR(4,1)       0 ; N-m ! Steering gear hysteresis, axle 7
L_KPO(4,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L7 [I]
L_KPO(4,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R7 [I]
R_BMP_STR(4,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 7
R_WRAP_STR(4,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 7
X_KPO(4,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L7 [I]
X_KPO(4,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R7 [I]

OPT_STEER_EXT(4,2)  1 ! Steer model option for axle 8: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)       310 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(2,1)         0 ; mm ! Dual-tire spacing for axle 3 [I]
L_DUAL(2,2)       290 ; mm ! Dual-tire spacing for axle 4 [I]
L_DUAL(3,1)         0 ; mm ! Dual-tire spacing for axle 5 [I]
L_DUAL(3,2)         0 ; mm ! Dual-tire spacing for axle 6 [I]
L_DUAL(4,1)         0 ; mm ! Dual-tire spacing for axle 7 [I]
L_DUAL(4,2)       310 ; mm ! Dual-tire spacing for axle 8 [I]

OPT_TIRE_MODEL(1,1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 7 -> built-in Pacejka
                          ! 5.2; 8 -> TNO Delft-Tyre; 9 -> COSIN FTire; 10 ->
                          ! third-party STI tire model [I]
OPT_TIRE_COMB(1,1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                         ! theoretical combined slip; 1 -> use transition between
                         ! the normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1) 30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)    91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1,1)  0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1,1)      1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1,1) 2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                       ! RR_v*Vx)
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1) 30000 ; N ! Reference vertical force
IT(1,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)    91 ; kg ! Mass of tire R1i
MU_REF_X(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(1,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1) 30000 ; N ! Reference vertical force
IT(1,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)    91 ; kg ! Mass of tire L2i
MU_REF_X(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(1,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(1,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(1,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(1,2,1,2) 30000 ; N ! Reference vertical force
IT(1,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(1,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(1,2,1,2)    91 ; kg ! Mass of tire L2o
MU_REF_X(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(1,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(1,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(1,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1) 30000 ; N ! Reference vertical force
IT(1,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)    91 ; kg ! Mass of tire R2i
MU_REF_X(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(1,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(1,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(1,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(1,2,2,2) 30000 ; N ! Reference vertical force
IT(1,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(1,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(1,2,2,2)    91 ; kg ! Mass of tire R2o
MU_REF_X(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(1,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(1,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,1) 1 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_COMB(2,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 100000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(2,1,1,1) 11500 ; N ! Reference vertical force
IT(2,1,1,1)       1.8 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(2,1,1,1)    31 ; kg ! Mass of tire L3i
MU_REF_X(2,1,1,1)   1 ; - ! Ground friction during meas. of Fx data, tire L3i
MU_REF_Y(2,1,1,1)   1 ; - ! Ground friction during meas. of Fy data, tire L3i
R0(2,1,1,1)       402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,1)      393 ; mm ! Effective rolling radius (Vx/AVy), tire L3i [I]
RR_C(2,1,1,1)  0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,1) 2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,2,1) 1 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_COMB(2,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 100000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(2,1,2,1) 11500 ; N ! Reference vertical force
IT(2,1,2,1)       1.8 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(2,1,2,1)    31 ; kg ! Mass of tire R3i
MU_REF_X(2,1,2,1)   1 ; - ! Ground friction during meas. of Fx data, tire R3i
MU_REF_Y(2,1,2,1)   1 ; - ! Ground friction during meas. of Fy data, tire R3i
R0(2,1,2,1)       402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,1)      393 ; mm ! Effective rolling radius (Vx/AVy), tire R3i [I]
RR_C(2,1,2,1)  0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,1) 2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,2,1,1) 1 ! Internal tire shear-model option, L4i [I]
OPT_TIRE_COMB(2,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,1) 100000 ; N ! Maximum allowed vertical force, tire L4i [I]
FZ_REF(2,2,1,1) 11500 ; N ! Reference vertical force
IT(2,2,1,1)       1.8 ; kg-m2 ! Spin inertia for tire L4i [I]
IT_XXZZ(2,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L4i [I]
M_TIRE(2,2,1,1)    31 ; kg ! Mass of tire L4i
MU_REF_X(2,2,1,1)   1 ; - ! Ground friction during meas. of Fx data, tire L4i
MU_REF_Y(2,2,1,1)   1 ; - ! Ground friction during meas. of Fy data, tire L4i
R0(2,2,1,1)       402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,1)      393 ; mm ! Effective rolling radius (Vx/AVy), tire L4i [I]
RR_C(2,2,1,1)  0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,1) 2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,2) 1 ! Internal tire shear-model option, L4o [I]
OPT_TIRE_COMB(2,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,2) 100000 ; N ! Maximum allowed vertical force, tire L4o [I]
FZ_REF(2,2,1,2) 11500 ; N ! Reference vertical force
IT(2,2,1,2)       1.8 ; kg-m2 ! Spin inertia for tire L4o [I]
IT_XXZZ(2,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L4o [I]
M_TIRE(2,2,1,2)    31 ; kg ! Mass of tire L4o
MU_REF_X(2,2,1,2)   1 ; - ! Ground friction during meas. of Fx data, tire L4o
MU_REF_Y(2,2,1,2)   1 ; - ! Ground friction during meas. of Fy data, tire L4o
R0(2,2,1,2)       402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,2)      393 ; mm ! Effective rolling radius (Vx/AVy), tire L4o [I]
RR_C(2,2,1,2)  0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,2) 2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,1) 1 ! Internal tire shear-model option, R4i [I]
OPT_TIRE_COMB(2,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,1) 100000 ; N ! Maximum allowed vertical force, tire R4i [I]
FZ_REF(2,2,2,1) 11500 ; N ! Reference vertical force
IT(2,2,2,1)       1.8 ; kg-m2 ! Spin inertia for tire R4i [I]
IT_XXZZ(2,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R4i [I]
M_TIRE(2,2,2,1)    31 ; kg ! Mass of tire R4i
MU_REF_X(2,2,2,1)   1 ; - ! Ground friction during meas. of Fx data, tire R4i
MU_REF_Y(2,2,2,1)   1 ; - ! Ground friction during meas. of Fy data, tire R4i
R0(2,2,2,1)       402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,1)      393 ; mm ! Effective rolling radius (Vx/AVy), tire R4i [I]
RR_C(2,2,2,1)  0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,1) 2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,2) 1 ! Internal tire shear-model option, R4o [I]
OPT_TIRE_COMB(2,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,2) 100000 ; N ! Maximum allowed vertical force, tire R4o [I]
FZ_REF(2,2,2,2) 11500 ; N ! Reference vertical force
IT(2,2,2,2)       1.8 ; kg-m2 ! Spin inertia for tire R4o [I]
IT_XXZZ(2,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R4o [I]
M_TIRE(2,2,2,2)    31 ; kg ! Mass of tire R4o
MU_REF_X(2,2,2,2)   1 ; - ! Ground friction during meas. of Fx data, tire R4o
MU_REF_Y(2,2,2,2)   1 ; - ! Ground friction during meas. of Fy data, tire R4o
R0(2,2,2,2)       402 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,2)      393 ; mm ! Effective rolling radius (Vx/AVy), tire R4o [I]
RR_C(2,2,2,2)  0.0044 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,2) 2.8e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1,1) 1 ! Internal tire shear-model option, L5i [I]
OPT_TIRE_COMB(3,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1,1) 100000 ; N ! Maximum allowed vertical force, tire L5i [I]
FZ_REF(3,1,1,1)  8000 ; N ! Reference vertical force
IT(3,1,1,1)       1.2 ; kg-m2 ! Spin inertia for tire L5i [I]
IT_XXZZ(3,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L5i [I]
M_TIRE(3,1,1,1)    22 ; kg ! Mass of tire L5i
MU_REF_X(3,1,1,1)   1 ; - ! Ground friction during meas. of Fx data, tire L5i
MU_REF_Y(3,1,1,1)   1 ; - ! Ground friction during meas. of Fy data, tire L5i
R0(3,1,1,1)       341 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1,1)      329 ; mm ! Effective rolling radius (Vx/AVy), tire L5i [I]
RR_C(3,1,1,1)   0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1,1)      0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1,1) 2.3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(3,1,2,1) 1 ! Internal tire shear-model option, R5i [I]
OPT_TIRE_COMB(3,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2,1) 100000 ; N ! Maximum allowed vertical force, tire R5i [I]
FZ_REF(3,1,2,1)  8000 ; N ! Reference vertical force
IT(3,1,2,1)       1.2 ; kg-m2 ! Spin inertia for tire R5i [I]
IT_XXZZ(3,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R5i [I]
M_TIRE(3,1,2,1)    22 ; kg ! Mass of tire R5i
MU_REF_X(3,1,2,1)   1 ; - ! Ground friction during meas. of Fx data, tire R5i
MU_REF_Y(3,1,2,1)   1 ; - ! Ground friction during meas. of Fy data, tire R5i
R0(3,1,2,1)       341 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2,1)      329 ; mm ! Effective rolling radius (Vx/AVy), tire R5i [I]
RR_C(3,1,2,1)   0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2,1)      0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2,1) 2.3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(3,2,1,1) 1 ! Internal tire shear-model option, L6i [I]
OPT_TIRE_COMB(3,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,1) 100000 ; N ! Maximum allowed vertical force, tire L6i [I]
FZ_REF(3,2,1,1)  8000 ; N ! Reference vertical force
IT(3,2,1,1)       1.2 ; kg-m2 ! Spin inertia for tire L6i [I]
IT_XXZZ(3,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L6i [I]
M_TIRE(3,2,1,1)    22 ; kg ! Mass of tire L6i
MU_REF_X(3,2,1,1)   1 ; - ! Ground friction during meas. of Fx data, tire L6i
MU_REF_Y(3,2,1,1)   1 ; - ! Ground friction during meas. of Fy data, tire L6i
R0(3,2,1,1)       341 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,1)      329 ; mm ! Effective rolling radius (Vx/AVy), tire L6i [I]
RR_C(3,2,1,1)   0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,1)      0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,1) 2.3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(3,2,2,1) 1 ! Internal tire shear-model option, R6i [I]
OPT_TIRE_COMB(3,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,1) 100000 ; N ! Maximum allowed vertical force, tire R6i [I]
FZ_REF(3,2,2,1)  8000 ; N ! Reference vertical force
IT(3,2,2,1)       1.2 ; kg-m2 ! Spin inertia for tire R6i [I]
IT_XXZZ(3,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R6i [I]
M_TIRE(3,2,2,1)    22 ; kg ! Mass of tire R6i
MU_REF_X(3,2,2,1)   1 ; - ! Ground friction during meas. of Fx data, tire R6i
MU_REF_Y(3,2,2,1)   1 ; - ! Ground friction during meas. of Fy data, tire R6i
R0(3,2,2,1)       341 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,1)      329 ; mm ! Effective rolling radius (Vx/AVy), tire R6i [I]
RR_C(3,2,2,1)   0.004 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,1)      0 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,1) 2.3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(4,1,1,1) 1 ! Internal tire shear-model option, L7i [I]
OPT_TIRE_COMB(4,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L7i [I]
FZ_REF(4,1,1,1) 30000 ; N ! Reference vertical force
IT(4,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L7i [I]
IT_XXZZ(4,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L7i [I]
M_TIRE(4,1,1,1)    91 ; kg ! Mass of tire L7i
MU_REF_X(4,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7i
MU_REF_Y(4,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7i
R0(4,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L7i [I]
RR_C(4,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(4,1,2,1) 1 ! Internal tire shear-model option, R7i [I]
OPT_TIRE_COMB(4,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R7i [I]
FZ_REF(4,1,2,1) 30000 ; N ! Reference vertical force
IT(4,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R7i [I]
IT_XXZZ(4,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R7i [I]
M_TIRE(4,1,2,1)    91 ; kg ! Mass of tire R7i
MU_REF_X(4,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7i
MU_REF_Y(4,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7i
R0(4,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R7i [I]
RR_C(4,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(4,2,1,1) 1 ! Internal tire shear-model option, L8i [I]
OPT_TIRE_COMB(4,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L8i [I]
FZ_REF(4,2,1,1) 30000 ; N ! Reference vertical force
IT(4,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L8i [I]
IT_XXZZ(4,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L8i [I]
M_TIRE(4,2,1,1)    91 ; kg ! Mass of tire L8i
MU_REF_X(4,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L8i
MU_REF_Y(4,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L8i
R0(4,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L8i [I]
RR_C(4,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,1,2) 1 ! Internal tire shear-model option, L8o [I]
OPT_TIRE_COMB(4,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L8o [I]
FZ_REF(4,2,1,2) 30000 ; N ! Reference vertical force
IT(4,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L8o [I]
IT_XXZZ(4,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L8o [I]
M_TIRE(4,2,1,2)    91 ; kg ! Mass of tire L8o
MU_REF_X(4,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L8o
MU_REF_Y(4,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L8o
R0(4,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L8o [I]
RR_C(4,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2,1) 1 ! Internal tire shear-model option, R8i [I]
OPT_TIRE_COMB(4,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R8i [I]
FZ_REF(4,2,2,1) 30000 ; N ! Reference vertical force
IT(4,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R8i [I]
IT_XXZZ(4,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R8i [I]
M_TIRE(4,2,2,1)    91 ; kg ! Mass of tire R8i
MU_REF_X(4,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R8i
MU_REF_Y(4,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R8i
R0(4,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R8i [I]
RR_C(4,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2,2) 1 ! Internal tire shear-model option, R8o [I]
OPT_TIRE_COMB(4,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R8o [I]
FZ_REF(4,2,2,2) 30000 ; N ! Reference vertical force
IT(4,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R8o [I]
IT_XXZZ(4,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R8o [I]
M_TIRE(4,2,2,2)    91 ; kg ! Mass of tire R8o
MU_REF_X(4,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R8o
MU_REF_Y(4,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R8o
R0(4,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R8o [I]
RR_C(4,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL(1)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 1

OPT_BK_PEDAL(2)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 2

OPT_BK_PEDAL(3)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 3

OPT_BK_PEDAL(4)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 4

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1)  2 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)     0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)      0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2)  2 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)     0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)      0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1)  2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)     0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)      0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2)  2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)     0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)      0 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(2,1,1)     0.06 ; s ! Time constant for brake actuator L3
TLAG_BK(2,1,1)      0 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(2,1,2)     0.06 ; s ! Time constant for brake actuator R3
TLAG_BK(2,1,2)      0 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(2,2,1)     0.06 ; s ! Time constant for brake actuator L4
TLAG_BK(2,2,1)      0 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(2,2,2)     0.06 ; s ! Time constant for brake actuator R4
TLAG_BK(2,2,2)      0 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(3,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,1) 0.5 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(3,1,1)     0.06 ; s ! Time constant for brake actuator L5
TLAG_BK(3,1,1)      0 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(3,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,2) 0.5 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(3,1,2)     0.06 ; s ! Time constant for brake actuator R5
TLAG_BK(3,1,2)      0 ; s ! Transport time delay for fluid to reach brake R5 [I]

OPT_BK_DYN(3,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,1) 0 ! [D] Brake L6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,1) 0.5 ; N-m ! Bearing/brake friction, wheel L6
TC_BK(3,2,1)     0.06 ; s ! Time constant for brake actuator L6
TLAG_BK(3,2,1)      0 ; s ! Transport time delay for fluid to reach brake L6 [I]

OPT_BK_DYN(3,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,2) 0 ! [D] Brake R6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,2) 0.5 ; N-m ! Bearing/brake friction, wheel R6
TC_BK(3,2,2)     0.06 ; s ! Time constant for brake actuator R6
TLAG_BK(3,2,2)      0 ; s ! Transport time delay for fluid to reach brake R6 [I]

OPT_BK_DYN(4,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,1) 0 ! [D] Brake L7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,1)  2 ; N-m ! Bearing/brake friction, wheel L7
TC_BK(4,1,1)     0.06 ; s ! Time constant for brake actuator L7
TLAG_BK(4,1,1)      0 ; s ! Transport time delay for fluid to reach brake L7 [I]

OPT_BK_DYN(4,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,2) 0 ! [D] Brake R7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,2)  2 ; N-m ! Bearing/brake friction, wheel R7
TC_BK(4,1,2)     0.06 ; s ! Time constant for brake actuator R7
TLAG_BK(4,1,2)      0 ; s ! Transport time delay for fluid to reach brake R7 [I]

OPT_BK_DYN(4,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,1) 0 ! [D] Brake L8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,1)  2 ; N-m ! Bearing/brake friction, wheel L8
TC_BK(4,2,1)     0.06 ; s ! Time constant for brake actuator L8
TLAG_BK(4,2,1)      0 ; s ! Transport time delay for fluid to reach brake L8 [I]

OPT_BK_DYN(4,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,2) 0 ! [D] Brake R8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,2)  2 ; N-m ! Bearing/brake friction, wheel R8
TC_BK(4,2,2)     0.06 ; s ! Time constant for brake actuator R8
TLAG_BK(4,2,2)      0 ; s ! Transport time delay for fluid to reach brake R8 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT(1)           2 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise, vehicle
                      ! 1
OPT_PT(2)           3 ! Powertrain type, vehicle 2
OPT_PT(3)           2 ! Powertrain type, vehicle 3
OPT_PT(4)           2 ! Powertrain type, vehicle 4
R_DRIVE_SC(1,1)     0 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 1 [I]
R_DRIVE_SC(1,2)     1 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 1 [I]
R_DRIVE_SC(2,1)   0.5 ; - ! [D] Ratio: [axle drive torque]/[total drive torque],
                      ! vehicle 2 [I]
R_DRIVE_SC(2,2)   0.5 ; - ! [D] Ratio: [axle drive torque]/[total drive torque],
                      ! vehicle 2 [I]
R_DRIVE_SC(3,1)     0 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 3 [I]
R_DRIVE_SC(3,2)     1 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 3 [I]
R_DRIVE_SC(4,1)     0 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 4 [I]
R_DRIVE_SC(4,2)     1 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 4 [I]

OPT_HEV(1)          0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric, vehicle 1
R_MDRIVE(1)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 1 [I]
VLOW_IW(1)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 1

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 1 [I]
OPT_LOCKED_DIFF(1,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 1 [I]
LOCKED_DIFF_DAMP(1,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 1 [I]
LOCKED_DIFF_K(1,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 1 [I]
R_EFF_F_DIFF(1,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 1
                       ! [I]
R_EFF_R_DIFF(1,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 1
                       ! [I]
R_GEAR_DIFF(1,2)    5 ; - ! Gear ratio of 2nd drive axle diff, vehicle 1 [I]
IDS(1,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 1 [I]
IHS_L(1,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 1 [I]
IHS_R(1,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 1 [I]
OPT_CLUTCH_DIFF(1,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 1 [I]
OPT_TWIN_CLUTCH(1,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 1 [I]

OPT_HEV(2)          0 ! Propulsion type, vehicle 2
R_MDRIVE(2)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 2 [I]
VLOW_IW(2)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 2

OPT_DIFF_INTERNAL(2,1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,1) 0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,1) 1 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                        ! diff, vehicle 2 [I]
LOCKED_DIFF_K(2,1) 100 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                       ! diff, vehicle 2 [I]
R_EFF_F_DIFF(2,1) 0.99 ; - ! Forward efficiency of 1st drive axle diff, vehicle 2
                       ! [I]
R_EFF_R_DIFF(2,1) 0.99 ; - ! Reverse efficiency of 1st drive axle diff, vehicle 2
                       ! [I]
R_GEAR_DIFF(2,1)  4.1 ; - ! Gear ratio of 1st drive axle diff, vehicle 2 [I]
IDS(2,1)        0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft,
                      ! vehicle 2 [I]
IHS_L(2,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle
                      ! diff, vehicle 2 [I]
IHS_R(2,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,1) 0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]
OPT_TWIN_CLUTCH(2,1) 0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]

OPT_DIFF_INTERNAL(2,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 2 [I]
LOCKED_DIFF_K(2,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 2 [I]
R_EFF_F_DIFF(2,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 2
                       ! [I]
R_EFF_R_DIFF(2,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 2
                       ! [I]
R_GEAR_DIFF(2,2)  4.1 ; - ! Gear ratio of 2nd drive axle diff, vehicle 2 [I]
IDS(2,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 2 [I]
IHS_L(2,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 2 [I]
IHS_R(2,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]
OPT_TWIN_CLUTCH(2,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]

OPT_DIFF_INTERNAL(2,3) 1 ! Transfer case model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,3) 0 ! Is the transfer case locked? 0 -> no, 1 -> yes, vehicle 2
                       ! [I]
R_REAR_BIAS(2,3)  0.5 ; - ! Fraction: transfer case torque on the transfer case,
                      ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,3) 0.8 ; N-m-s/deg ! Torsional damping for locked transfer case,
                          ! vehicle 2 [I]
LOCKED_DIFF_K(2,3) 80 ; N-m/deg ! Torsional spring rate for locked transfer case,
                      ! vehicle 2 [I]
R_EFF_F_DIFF(2,3) 0.99 ; - ! Forward efficiency of transfer case, vehicle 2 [I]
R_EFF_R_DIFF(2,3) 0.99 ; - ! Reverse efficiency of transfer case, vehicle 2 [I]
R_GEAR_DIFF(2,3)    1 ; - ! Gear ratio of transfer case, vehicle 2 [I]
IDS(2,3)            0 ; kg-m2 ! [D] Spin inertia of transfer case input shaft,
                      ! vehicle 2 [I]
OPT_CLUTCH_DIFF(2,3) 0 ! [D] Clutch control for transfer case: 0 -> table lookup or
                       ! external, 1 -> Torsen parameters, 2 -> yaw control,
                       ! vehicle 2 [I]

OPT_HEV(3)          0 ! Propulsion type, vehicle 3
R_MDRIVE(3)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 3 [I]
VLOW_IW(3)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 3

OPT_DIFF_INTERNAL(3,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 3 [I]
OPT_LOCKED_DIFF(3,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 3 [I]
LOCKED_DIFF_DAMP(3,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 3 [I]
LOCKED_DIFF_K(3,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 3 [I]
R_EFF_F_DIFF(3,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 3
                       ! [I]
R_EFF_R_DIFF(3,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 3
                       ! [I]
R_GEAR_DIFF(3,2)  4.1 ; - ! Gear ratio of 2nd drive axle diff, vehicle 3 [I]
IDS(3,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 3 [I]
IHS_L(3,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 3 [I]
IHS_R(3,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 3 [I]
OPT_CLUTCH_DIFF(3,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 3 [I]
OPT_TWIN_CLUTCH(3,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 3 [I]

OPT_HEV(4)          0 ! Propulsion type, vehicle 4
R_MDRIVE(4)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 4 [I]
VLOW_IW(4)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 4

OPT_DIFF_INTERNAL(4,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 4 [I]
OPT_LOCKED_DIFF(4,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 4 [I]
LOCKED_DIFF_DAMP(4,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 4 [I]
LOCKED_DIFF_K(4,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 4 [I]
R_EFF_F_DIFF(4,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 4
                       ! [I]
R_EFF_R_DIFF(4,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 4
                       ! [I]
R_GEAR_DIFF(4,2)    5 ; - ! Gear ratio of 2nd drive axle diff, vehicle 4 [I]
IDS(4,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 4 [I]
IHS_L(4,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 4 [I]
IHS_R(4,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 4 [I]
OPT_CLUTCH_DIFF(4,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 4 [I]
OPT_TWIN_CLUTCH(4,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 4 [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE(1)     ! VS Command to install an engine, vehicle 1
INSTALL_ENGINE(2)     ! VS Command to install an engine, vehicle 2
INSTALL_ENGINE(3)     ! VS Command to install an engine, vehicle 3
INSTALL_ENGINE(4)     ! VS Command to install an engine, vehicle 4

OPT_ENGINE_INTERNAL(1) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(1) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(1) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(1)    725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(1)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(1)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(1) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(1)           1.4 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(2) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(2) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(2) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(2)    675 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(2)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(2)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(2) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(2)          0.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(3) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(3) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(3) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(3)    725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(3)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(3)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(3) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(3)           0.3 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(3) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(4) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(4) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(4) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(4)    725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(4)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(4)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(4) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(4)          1.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(4) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE(1)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 1
INSTALL_TORQUE_TRANSFER_DEVICE(2)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 2
INSTALL_TORQUE_TRANSFER_DEVICE(3)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 3
INSTALL_TORQUE_TRANSFER_DEVICE(4)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 4

OPT_CLUTCH(1)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE(1)  1 ! Clutch control mode: 0 -> open-loop, 1 -> closed-loop (based
                      ! on shifting) [I]
OPT_CLUTCH_DELAY(1) 1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(1) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE(1) 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE(1) 0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE(1) 0.1 ; s ! Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD(1) 0.1 ; s ! Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL(1) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(1) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL(1) 0.3 ; s ! Time applying the clutch to full pressure during shift
                        ! [I]
T_CL_RE_ENGAGE(1) 0.5 ; s ! Time clutch is fully re-engaged after starting shift [I]
T_GEAR_LAG(1)     0.1 ; s ! Time lag in shifting
! T_TH_RETURN(1)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED(1)  0.4 ; s ! Time when throttle has returned to pre-shift level [I]
T_TH_ZERO(1)      0.1 ; s ! Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD(1) 0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL(1) 0.3 ; s ! Time when starting to return throttle [I]
VLOW_CLUTCH(1)      5 ; km/h ! Press the clutch pedal when average of wheel speeds
                      ! is below this speed while deccelerating with brake during
                      ! the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

OPT_CLUTCH(2)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(2) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

OPT_CLUTCH(3)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(3) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

OPT_CLUTCH(4)       0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL(4) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION(1)  ! VS Command to install a transmission, vehicle 1
INSTALL_TRANSMISSION(2)  ! VS Command to install a transmission, vehicle 2
INSTALL_TRANSMISSION(3)  ! VS Command to install a transmission, vehicle 3
INSTALL_TRANSMISSION(4)  ! VS Command to install a transmission, vehicle 4

OPT_TRANS_INTERNAL(1) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(1) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(1)           7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(1) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(1) 0.09 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(1)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(1)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(1) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(1) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(1) -8 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(1)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1,1)         0.15 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 1
R_EFF_TR_F(1,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,1)   7.59 ; - ! 1st-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 1 [I]
T_SHIFT_DOWN(1,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 1 [I]

ITR(1,2)         0.15 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,2)   5.06 ; - ! 2nd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 1
T_SHIFT_DOWN(1,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 1

ITR(1,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,3)   3.38 ; - ! 3rd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 1
T_SHIFT_DOWN(1,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 1

ITR(1,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,4)   2.25 ; - ! 4th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 1
T_SHIFT_DOWN(1,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 1

ITR(1,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,5)    1.5 ; - ! 5th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 1
T_SHIFT_DOWN(1,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 1

ITR(1,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,6)      1 ; - ! 6th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,6)    -1 ; - ! [D] Duration of up-shift from 6th-gear, vehicle 1
T_SHIFT_DOWN(1,6)  -1 ; - ! [D] Duration of down-shift to 6th-gear, vehicle 1

ITR(1,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,7)   0.75 ; - ! 7th-gear ratio of transmission, vehicle 1

DRIVELINE_FREQ(1)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(1) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(2) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(2) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(2)           6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(2) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(2)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(2)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(2) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(2) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(2) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(2)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(2,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 2
R_EFF_TR_F(2,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,1)    3.1 ; - ! 1st-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 2 [I]
T_SHIFT_DOWN(2,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 2 [I]

ITR(2,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,2)   1.81 ; - ! 2nd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 2
T_SHIFT_DOWN(2,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 2

ITR(2,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,3)   1.41 ; - ! 3rd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 2
T_SHIFT_DOWN(2,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 2

ITR(2,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,4)      1 ; - ! 4th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 2
T_SHIFT_DOWN(2,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 2

ITR(2,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,5)   0.71 ; - ! 5th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 2
T_SHIFT_DOWN(2,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 2

ITR(2,6)         0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,6)  0.99 ; - ! 6th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,6)  0.99 ; - ! 6th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,6)   0.61 ; - ! 6th-gear ratio of transmission, vehicle 2

DRIVELINE_FREQ(2)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(2) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(3) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(3) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(3)           6 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(3) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(3) 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft
                          ! [I]
ITR_NEUTRAL(3)  0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(3)  0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(3) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(3) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(3) -3.168 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(3)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(3,1)        0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 3
R_EFF_TR_F(3,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,1)  3.538 ; - ! 1st-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 3 [I]
T_SHIFT_DOWN(3,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 3 [I]

ITR(3,2)        0.034 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,2)   2.06 ; - ! 2nd-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 3
T_SHIFT_DOWN(3,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 3

ITR(3,3)        0.042 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,3)  0.95 ; - ! 3rd-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,3)  0.95 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,3)  1.404 ; - ! 3rd-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 3
T_SHIFT_DOWN(3,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 3

ITR(3,4)         0.04 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,4)  0.95 ; - ! 4th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,4)  0.95 ; - ! 4th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,4)      1 ; - ! 4th-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 3
T_SHIFT_DOWN(3,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 3

ITR(3,5)         0.04 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,5)  0.98 ; - ! 5th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,5)  0.98 ; - ! 5th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,5)  0.713 ; - ! 5th-gear ratio of transmission, vehicle 3
T_SHIFT_UP(3,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 3
T_SHIFT_DOWN(3,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 3

ITR(3,6)         0.04 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 3
R_EFF_TR_F(3,6)  0.99 ; - ! 6th-gear forward efficiency of transmission, vehicle 3
R_EFF_TR_R(3,6)  0.99 ; - ! 6th-gear reverse efficiency of transmission, vehicle 3
R_GEAR_TR(3,6)  0.582 ; - ! 6th-gear ratio of transmission, vehicle 3

DRIVELINE_FREQ(3)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(3) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(4) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(4) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(4)           7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(4) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(4) 0.1 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(4)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(4)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(4) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(4) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(4) -6.15 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(4)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(4,1)         0.25 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 4
R_EFF_TR_F(4,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,1)    6.5 ; - ! 1st-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,1)   0.5 ; - ! Duration of up-shift from 1st-gear, vehicle 4 [I]
T_SHIFT_DOWN(4,1) 0.25 ; - ! Duration of down-shift to 1st-gear, vehicle 4 [I]

ITR(4,2)         0.25 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,2)    4.2 ; - ! 2nd-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 4
T_SHIFT_DOWN(4,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 4

ITR(4,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,3)   2.55 ; - ! 3rd-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 4
T_SHIFT_DOWN(4,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 4

ITR(4,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,4)   1.55 ; - ! 4th-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 4
T_SHIFT_DOWN(4,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 4

ITR(4,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,5)      1 ; - ! 5th-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 4
T_SHIFT_DOWN(4,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 4

ITR(4,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,6)   0.75 ; - ! 6th-gear ratio of transmission, vehicle 4
T_SHIFT_UP(4,6)    -1 ; - ! [D] Duration of up-shift from 6th-gear, vehicle 4
T_SHIFT_DOWN(4,6)  -1 ; - ! [D] Duration of down-shift to 6th-gear, vehicle 4

ITR(4,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 4
R_EFF_TR_F(4,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 4
R_EFF_TR_R(4,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 4
R_GEAR_TR(4,7)   0.65 ; - ! 7th-gear ratio of transmission, vehicle 4

DRIVELINE_FREQ(4)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(4) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             6 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        6 ! VS Command to install reference paths

PATH_ID(1)       1000 ; Ego Vehicle Path S to W
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1) 90 ; deg ! Heading at the start of this path
! X_PATH_START(1) 153.658 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(1,1)  1 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(1,1) 299.1816789 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 0 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 153.658 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) 180 ; deg ! CALC -- Heading at end of segment
DEFINE_XY_TABLES    5 ! No. of XY spline tables (see the SPLINE TABLES section)

PATH_ID(2)       1001 ; Cyclist Path S to N
OPT_PATH_START(2)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! Station at the start of this path
! HEADING_START(2) 90 ; deg ! Heading at the start of this path
! X_PATH_START(2) 153.658 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(2)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        1 ! Number of segments in this path
SEGMENT_TYPE(2,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(2,1)  2 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(2,1) 300 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 153.658 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) 300 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) 90 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1002 ; Pedestrian Path E to W
OPT_PATH_START(3)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)      0 ; m ! Station at the start of this path
! HEADING_START(3) 180 ; deg ! Heading at the start of this path
! X_PATH_START(3) 300 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(3) 153.658 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        1 ! Number of segments in this path
SEGMENT_TYPE(3,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(3,1)  3 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(3,1) 300 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 0 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 153.658 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 180 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       1003 ; Traffic Path W to E
OPT_PATH_START(4)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)      0 ; m ! Station at the start of this path
! HEADING_START(4)  0 ; deg ! Heading at the start of this path
! X_PATH_START(4)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(4) 146.342 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        1 ! Number of segments in this path
SEGMENT_TYPE(4,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(4,1)  4 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(4,1) 300 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) 300 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 146.342 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       1004 ; Traffic Path N to E
OPT_PATH_START(5)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)      0 ; m ! Station at the start of this path
! HEADING_START(5) -90 ; deg ! Heading at the start of this path
! X_PATH_START(5) 146.342 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(5) 300 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        1 ! Number of segments in this path
SEGMENT_TYPE(5,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(5,1)  5 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(5,1) 299.2209984 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) 300 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) 146.342 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(6)       9998 ; Straight North, ID = 9998
OPT_PATH_START(6)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(6)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(6)      0 ; m ! Station at the start of this path
HEADING_START(6)   90 ; deg ! Heading at the start of this path
X_PATH_START(6)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(6)     0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(6)        1 ! Number of segments in this path
SEGMENT_TYPE(6,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(6,1) 100 ; m ! Segment length
! S_SEGMENT_END(6,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,1) 6.123233996e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,1) 100 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,1) 90 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! A VS Terrain surface defines elevation Z, friction MU, and rolling resistance
! RR_SURF as functions of global X and Y coordinates. The terrain data is contained
! in a single vsterrain file loaded with the command VS_TERRAIN_FILE.

CURRENT_ROAD_ID(1)  1 ! [D] ROAD_ID during initialization, vehicle 1 [I]
CURRENT_ROAD_ID(2)  1 ! [D] ROAD_ID during initialization, vehicle 2 [I]
CURRENT_ROAD_ID(3)  1 ! [D] ROAD_ID during initialization, vehicle 3 [I]
CURRENT_ROAD_ID(4)  1 ! [D] ROAD_ID during initialization, vehicle 4 [I]

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             4 ! Number of LTARG datasets that are used in this run

PATH_ID_DM(1)    1000 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(1)      1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0), vehicle 1
OPT_INIT_PATH(1)    1 ! [D] Set Xo, Yo, and Yaw to match path PATH_ID_DM and
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION(1)    1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station, vehicle 1 [I]
SSTART(1)          80 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]

OPT_DM(1)           3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point, vehicle 1 [I]
OPT_DRIVER_ACTION(1) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ(1)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(1)    720 ; deg ! Limit steering wheel angle for DM, vehicle 1
AV_SW_MAX_DM(1)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 1
VLOW_DM(1)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(1)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(1)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(1)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(1)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(2)    1002 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(2)      2 ! LTARG_ID of LTARG for the DM, vehicle 2
OPT_INIT_PATH(2)    1 ! [D] Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(2) 1 ! [D] Find road station automatically, vehicle 2 [I]
OPT_DIRECTION(2)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 2 [I]
SSTART(2)          50 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(2)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 2 [I]
OPT_DRIVER_ACTION(2) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(2)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(2)    720 ; deg ! Limit steering wheel angle for DM, vehicle 2
AV_SW_MAX_DM(2)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 2
VLOW_DM(2)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(2)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(2)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(2)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(2)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(3)    1003 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(3)      3 ! LTARG_ID of LTARG for the DM, vehicle 3
OPT_INIT_PATH(3)    1 ! [D] Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(3) 1 ! [D] Find road station automatically, vehicle 3 [I]
OPT_DIRECTION(3)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 3 [I]
SSTART(3)          90 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(3)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 3 [I]
OPT_DRIVER_ACTION(3) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(3)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(3)    720 ; deg ! Limit steering wheel angle for DM, vehicle 3
AV_SW_MAX_DM(3)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 3
VLOW_DM(3)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(3)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(3)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(3)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(3)          0 ; mm ! [D] Local Y coordinate of DM ref. point

PATH_ID_DM(4)    1004 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(4)      4 ! LTARG_ID of LTARG for the DM, vehicle 4
OPT_INIT_PATH(4)    1 ! [D] Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_INIT_STA_ROAD(4) 1 ! [D] Find road station automatically, vehicle 4 [I]
OPT_DIRECTION(4)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 4 [I]
SSTART(4)          90 ; m ! Start station on path PATH_ID_DM [I]

OPT_DM(4)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 4 [I]
OPT_DRIVER_ACTION(4) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(4)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(4)    720 ; deg ! Limit steering wheel angle for DM, vehicle 4
AV_SW_MAX_DM(4)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 4
VLOW_DM(4)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(4)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(4)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(4)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(4)          0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      5 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC(1)           4 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd, vehicle 1 [I]
OPT_AUTO_RESET_IC(1) 1 ! Reset integral of speed error Vx_Err when Vx_Err changes
                       ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no,
                       ! vehicle 1
OPT_SC_3D(1)        0 ! Path preview for SC: 1 -> account for 3D ground curvature, 0
                      ! -> assume flat level ground [I]
OPT_SC_SKILL(1)     2 ! Speed controller skill: 2 -> high, 1 -> medium, 0 -> low [I]
OPT_SC_ENGINE_BRAKING(1) 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018(1)      0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC(1)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 1 [I]
BK_PERF_SC(1)     0.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(1)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(1) 4 ; m ! Speed controller: length of path used to calculate
                       ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP(1)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(1)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(1)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(1)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(1) 0 ; m ! Speed controller: path preview start (distance in
                         ! front of sprung mass origin), vehicle 1 [I]
SPEED_PREVIEW_STEP(1) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(1)  2 ; m ! Integral control deadband for auto reset

OPT_SC(2)           4 ! Speed controller option: 0 - 5, vehicle 2 [I]
OPT_AUTO_RESET_IC(2) 1 ! Auto-reset integral of speed error Vx_Err?, vehicle 2
OPT_SC_3D(2)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(2)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(2) 1 ! Use engine braking in SC?
OPT_SC_2018(2)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(2)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 2 [I]
BK_PERF_SC(2)     0.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(2)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(2) 4 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(2)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(2)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(2)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(2)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(2) 0 ; m ! Path preview start (front of Xo), vehicle 2 [I]
SPEED_PREVIEW_STEP(2) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(2)  2 ; m ! Integral control deadband for auto reset

OPT_SC(3)           4 ! Speed controller option: 0 - 5, vehicle 3 [I]
OPT_AUTO_RESET_IC(3) 1 ! Auto-reset integral of speed error Vx_Err?, vehicle 3
OPT_SC_3D(3)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(3)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(3) 1 ! Use engine braking in SC?
OPT_SC_2018(3)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(3)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 3 [I]
BK_PERF_SC(3)     0.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(3)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(3) 4 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(3)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(3)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(3)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(3)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(3) 0 ; m ! Path preview start (front of Xo), vehicle 3 [I]
SPEED_PREVIEW_STEP(3) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(3)  2 ; m ! Integral control deadband for auto reset

OPT_SC(4)           4 ! Speed controller option: 0 - 5, vehicle 4 [I]
OPT_AUTO_RESET_IC(4) 1 ! Auto-reset integral of speed error Vx_Err?, vehicle 4
OPT_SC_3D(4)        0 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(4)     2 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(4) 1 ! Use engine braking in SC?
OPT_SC_2018(4)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(4)   2000 ! SPEED_TARGET_ID for speed controller, vehicle 4 [I]
BK_PERF_SC(4)     0.1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(4)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(4) 4 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(4)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(4)        0 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(4)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(4)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(4) 0 ; m ! Path preview start (front of Xo), vehicle 4 [I]
SPEED_PREVIEW_STEP(4) 1 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(4)  2 ; m ! Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   2 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   2 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1) 0.15 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.5 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,1)   2 ! ABS control option, unit 3, axle 1
ABS_SLIP_ON(3,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,1)       3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,2)   2 ! ABS control option, unit 3, axle 2
ABS_SLIP_ON(3,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,2) 0.15 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,2)       3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,1)   2 ! ABS control option, unit 4, axle 1
ABS_SLIP_ON(4,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,2)   2 ! ABS control option, unit 4, axle 2
ABS_SLIP_ON(4,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,2)       6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           4 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      4 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; 160 deg Sensor (Blue)
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
IUNIT_SENSOR(1)     1 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(1) 1 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)       800 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      2550 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(2)      2 ; 160 deg Sensor (Red)
IOBJECT_SENSOR(2)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(2)     2 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(2) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(2) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(2) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(2) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(2)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(2) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(2) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(2) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(2)      -950 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(2)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(2)      1725 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(2)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(2) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(2)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(3)      3 ; 160 deg Sensor (Green)
IOBJECT_SENSOR(3)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(3)     3 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(3) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(3) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(3) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(3) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(3)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(3) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(3) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(3) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(3)      -900 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(3)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(3)      1700 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(3)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(3) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(3)  0 ; deg ! Roll of sensor axes about X, after Pitch

SENSOR_NAME(4)      4 ; 160 deg Sensor (Yellow)
IOBJECT_SENSOR(4)   0 ! [D] Moving object in which sensor is mounted
IUNIT_SENSOR(4)     4 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(4) 1 ! Can objects block this sensor view? 1 -> yes, 0 -> no
OPT_LEGACY_SENSOR(4) 0 ! [D] Use legacy sensor method? 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(4) 0 ! Automatically export detection variables? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(4) 1 ! Sort detect vars by: 1 -> proximity, 0 -> object no.
TYPE_SENSOR(4)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(4) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(4) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(4) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(4)      -500 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(4)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(4)      2350 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(4)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(4) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(4)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT          12 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 12 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; IUNIT_OBJ
IUNIT_OBJ(1)        1 ! Attach object to sprung mass of this vehicle unit, or 0 ->
                      ! don't attach to a sprung mass [I]
SHAPE_TYPE_OBJ(1)   1 ! Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment, 3
                      ! -> Polygonal (vertices)
H_OBJ(1)          1.5 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)       4 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(1)     1 ; m ! Distance from reference point to front of rectangular
                      ! object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)      1.6 ; m ! Width of rectangular object
MsgObj_1            4 ; - ! Output: User-defined Message (code) for object
TypeO_1           200 ; - ! Output: User-defined Type (code) for object
V_Obj_1       40.2336 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1       153.658 ; m ! Output: X coordinate of object 1
Y_Obj_1            80 ; m ! Output: Y coordinate of object 1
Z_Obj_1  0.7405606031 ; m ! Output: Z coordinate of object 1
YawO_1             90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO1 -0.06825164143 ; deg ! Output: Pitch angle of object 1
RollO_1 -1.619694291e-06 ; deg ! Output: Roll angle of object 1

OBJECT_NAME(2)      2 ; City Intersection, Stop Sign
IUNIT_OBJ(2)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(2)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(2)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(2)   2 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)          1.8 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)    0.01 ; m ! Length of rectangular or segment object
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
VIS_ANGLE_OBJ(2)  100 ; deg ! Visibility tolerance of angle to viewing sensor
MsgObj_2            3 ; - ! Output: User-defined Message (code) for object
TypeO_2           101 ; - ! Output: User-defined Type (code) for object
V_Obj_2             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_2        155.75 ; m ! Output: X coordinate of object 2
Y_Obj_2        138.25 ; m ! Output: Y coordinate of object 2
Z_Obj_2           1.8 ; m ! Output: Z coordinate of object 2
YawO_2            -90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO2             0 ; deg ! Output: Pitch angle of object 2
RollO_2             0 ; deg ! Output: Roll angle of object 2

OBJECT_NAME(3)      3 ; City Intersection, Stop Sign
IUNIT_OBJ(3)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(3)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(3)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(3)   2 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(3)          1.8 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(3)    0.01 ; m ! Length of rectangular or segment object
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
VIS_ANGLE_OBJ(3)  100 ; deg ! Visibility tolerance of angle to viewing sensor
MsgObj_3            3 ; - ! Output: User-defined Message (code) for object
TypeO_3           101 ; - ! Output: User-defined Type (code) for object
V_Obj_3             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_3        144.25 ; m ! Output: X coordinate of object 3
Y_Obj_3        161.75 ; m ! Output: Y coordinate of object 3
Z_Obj_3           1.8 ; m ! Output: Z coordinate of object 3
YawO_3             90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO3             0 ; deg ! Output: Pitch angle of object 3
RollO_3             0 ; deg ! Output: Roll angle of object 3

OBJECT_NAME(4)      4 ; Bicyclist: City Environment
IUNIT_OBJ(4)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(4)   9998 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(4)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(4)    0 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_RECYCLE_OBJ(4)  0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(4)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(4)   0 ! Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(4)    0 ! Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(4)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(4)         0.95 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(4)       2 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(4)   1.1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(4) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(4)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(4)      0.6 ; m ! Width of rectangular object
HeadO_4             0 ; deg ! Output: Heading of object relative to path
LatO_4           -155 ; m ! Output: Lateral offset, object 4
MsgObj_4            0 ; - ! Output: User-defined Message (code) for object
S_Obj_4            50 ; m ! Output and possibly ODE SV: Station of object
S_RdO_4           155 ; m ! Output: Station of object on road path
TypeO_4           201 ; - ! Output: User-defined Type (code) for object
V_Obj_4             0 ; km/h ! Output and possibly ODE SV: Speed of object
PitchO4             0 ; deg ! Output: Pitch angle of object 4
RollO_4             0 ; deg ! Output: Roll angle of object 4

OBJECT_NAME(5)      5 ; Woman: City Environment
IUNIT_OBJ(5)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(5)   9998 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
LTARG_ID_OBJ(5)     0 ! [D] LTARG_ID for LTARG dataset for lateral offset [I]
OPT_SPEED_OBJ(5)    0 ! Use speed in ODEs? 0 -> no, 1 -> ODE for S, 2 -> 2 ODEs
OPT_RECYCLE_OBJ(5)  0 ! Can this object be recycled? 1 -> yes, 0 -> no
ROAD_ID_OBJ(5)      1 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(5)   0 ! Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(5)    0 ! Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(5)   0 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
DIAMETER_OBJ(5)   0.4 ; m ! Diameter of cylinder object
H_OBJ(5)         0.85 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(5) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(5)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
HeadO_5             0 ; deg ! Output: Heading of object relative to path
LatO_5           -141 ; m ! Output: Lateral offset, object 5
MsgObj_5            0 ; - ! Output: User-defined Message (code) for object
S_Obj_5           142 ; m ! Output and possibly ODE SV: Station of object
S_RdO_5           141 ; m ! Output: Station of object on road path
TypeO_5           201 ; - ! Output: User-defined Type (code) for object
V_Obj_5             0 ; km/h ! Output and possibly ODE SV: Speed of object
PitchO5             0 ; deg ! Output: Pitch angle of object 5
RollO_5             0 ; deg ! Output: Roll angle of object 5

OBJECT_NAME(6)      6 ; City Environment: Building
IUNIT_OBJ(6)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(6)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(6)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(6)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(6)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(6) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(6) 1 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(6)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(6) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(6)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_6            0 ; - ! Output: User-defined Message (code) for object
TypeO_6             0 ; - ! Output: User-defined Type (code) for object
V_Obj_6             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_6           150 ; m ! Output: X coordinate of object 6
Y_Obj_6           150 ; m ! Output: Y coordinate of object 6
Z_Obj_6             0 ; m ! Output: Z coordinate of object 6
YawO_6              0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO6             0 ; deg ! Output: Pitch angle of object 6
RollO_6             0 ; deg ! Output: Roll angle of object 6

OBJECT_NAME(7)      7 ; City Environment: Building
IUNIT_OBJ(7)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(7)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(7)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(7)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(7)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(7) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(7) 2 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(7)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(7) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(7)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_7            0 ; - ! Output: User-defined Message (code) for object
TypeO_7             0 ; - ! Output: User-defined Type (code) for object
V_Obj_7             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_7           150 ; m ! Output: X coordinate of object 7
Y_Obj_7           150 ; m ! Output: Y coordinate of object 7
Z_Obj_7             0 ; m ! Output: Z coordinate of object 7
YawO_7             90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO7             0 ; deg ! Output: Pitch angle of object 7
RollO_7             0 ; deg ! Output: Roll angle of object 7

OBJECT_NAME(8)      8 ; City Environment: Building
IUNIT_OBJ(8)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(8)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(8)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(8)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(8)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(8) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(8) 3 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(8)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(8) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(8)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_8            0 ; - ! Output: User-defined Message (code) for object
TypeO_8             0 ; - ! Output: User-defined Type (code) for object
V_Obj_8             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_8           150 ; m ! Output: X coordinate of object 8
Y_Obj_8           150 ; m ! Output: Y coordinate of object 8
Z_Obj_8             0 ; m ! Output: Z coordinate of object 8
YawO_8            180 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO8             0 ; deg ! Output: Pitch angle of object 8
RollO_8             0 ; deg ! Output: Roll angle of object 8

OBJECT_NAME(9)      9 ; City Environment: Building
IUNIT_OBJ(9)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(9)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(9)      0 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
SHAPE_TYPE_OBJ(9)   3 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
OPT_POLY_COORD(9)   1 ! Polygon vertices: SL or XY? 0 -> SL, 1 -> XY
OPT_FORCE_GLOBAL_REF(9) 0 ! [D] Polygon coordinates in global reference?
POLY_SHAPE_ID_OBJ(9) 4 ! POLY_SHAPE_ID of a POLY_SHAPE_TABLE
H_OBJ(9)           -1 ; m ! Height of detection point; if negative use sensor height
MATERIAL_TYPE_OBJ(9) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(9)      1 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
MsgObj_9            0 ; - ! Output: User-defined Message (code) for object
TypeO_9             0 ; - ! Output: User-defined Type (code) for object
V_Obj_9             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_9           150 ; m ! Output: X coordinate of object 9
Y_Obj_9           150 ; m ! Output: Y coordinate of object 9
Z_Obj_9             0 ; m ! Output: Z coordinate of object 9
YawO_9            270 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO9             0 ; deg ! Output: Pitch angle of object 9
RollO_9             0 ; deg ! Output: Roll angle of object 9

OBJECT_NAME(10)    10 ; IUNIT_OBJ
IUNIT_OBJ(10)       2 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(10)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(10)       1.611 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(10)   4.26 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(10)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(10) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(10)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(10)   2.486 ; m ! Width of rectangular object
MsgObj_10           4 ; - ! Output: User-defined Message (code) for object
TypeO_10          200 ; - ! Output: User-defined Type (code) for object
V_Obj_10      40.2336 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_10          250 ; m ! Output: X coordinate of object 10
Y_Obj_10      153.658 ; m ! Output: Y coordinate of object 10
Z_Obj_10  0.786904508 ; m ! Output: Z coordinate of object 10
YawO_10           180 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO10  1.182292545 ; deg ! Output: Pitch angle of object 10
RollO_10 -1.656283523e-06 ; deg ! Output: Roll angle of object 10

OBJECT_NAME(11)    11 ; IUNIT_OBJ
IUNIT_OBJ(11)       3 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(11)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(11)        1.53 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(11)   2.78 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(11)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(11) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(11)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(11)   2.272 ; m ! Width of rectangular object
MsgObj_11           4 ; - ! Output: User-defined Message (code) for object
TypeO_11          200 ; - ! Output: User-defined Type (code) for object
V_Obj_11      40.2336 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_11           90 ; m ! Output: X coordinate of object 11
Y_Obj_11      146.342 ; m ! Output: Y coordinate of object 11
Z_Obj_11 0.7520283853 ; m ! Output: Z coordinate of object 11
YawO_11             0 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO11 0.1098215312 ; deg ! Output: Pitch angle of object 11
RollO_11 -5.836259484e-07 ; deg ! Output: Roll angle of object 11

OBJECT_NAME(12)    12 ; IUNIT_OBJ
IUNIT_OBJ(12)       4 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(12)  1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(12)         1.5 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(12)      4 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(12)    1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(12) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(12)     1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(12)     1.6 ; m ! Width of rectangular object
MsgObj_12           4 ; - ! Output: User-defined Message (code) for object
TypeO_12          200 ; - ! Output: User-defined Type (code) for object
V_Obj_12  38.71681498 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_12      146.342 ; m ! Output: X coordinate of object 12
Y_Obj_12          210 ; m ! Output: Y coordinate of object 12
Z_Obj_12  0.740560583 ; m ! Output: Z coordinate of object 12
YawO_12           -90 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO12 -0.06825176426 ; deg ! Output: Pitch angle of object 12
RollO_12 -7.560595803e-07 ; deg ! Output: Roll angle of object 12

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 16 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 2, axle
                                             ! 1, right side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(3,1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(3,1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 3, axle
                                             ! 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(3,1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(3,1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; deg ! Constant camber component due
                                             ! to jounce (other side), unit 3, axle
                                             ! 1, right side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CC_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CC_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CC_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CC_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CC_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CC_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CC_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CC_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CD_MY_COEFFICIENT(2,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CD_MY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CD_MY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(3,1,1) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CD_MY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(3,1,1) 1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(3,1,2) 0 ! Coefficient: dive displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CD_MY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(3,1,2) 1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CI_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CI_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CI_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CI_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CI_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CI_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CI_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CI_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CI_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CI_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CI_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CI_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CI_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CI_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CI_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CI_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 36 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IVEHICLE and IDIFF are used to
! identify the dataset when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, 1st drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,3) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, transfer case
CLUTCH_CONTROL_DIFF_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,3) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 3, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(4,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 4, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 900
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(1) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(1) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(1) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 36 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IDIFF are used to identify the
! dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1,2) 0 ; N-m ! [D] Constant available torque, veh 1, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,1) 0 ; N-m ! [D] Constant available torque, veh 2, 1st
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,2) 0 ; N-m ! [D] Constant available torque, veh 2, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,3) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! transfer case
CLUTCH_TORQUE_DIFF_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3,2) 0 ; N-m ! [D] Constant available torque, veh 3, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(3,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(4,2) 0 ; N-m ! [D] Constant available torque, veh 4, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(4,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 16 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 0.5 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 0.5 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 0.9 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 0.9 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,1) 0.614 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 3, axle 1, left side
CMP_DAMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,2) 0.614 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), unit 3, axle 1, right side
CMP_DAMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, left side
CMP_DAMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, right side
CMP_DAMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, left side
CMP_DAMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, right side
CMP_DAMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, left side
CMP_DAMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, right side
CMP_DAMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 0.5 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                 ! side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 0.5 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                 ! side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 0.9 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                 ! side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 0.9 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                 ! side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,1) 0.614 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                   ! side
CMP_JSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,2) 0.614 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                   ! side
CMP_JSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, left side
CMP_JSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, right side
CMP_JSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, left side
CMP_JSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, right side
CMP_JSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, left side
CMP_JSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, right side
CMP_JSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 0.5 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                 ! side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 0.5 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                 ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 0.9 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                 ! side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 0.9 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                 ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,1) 0.614 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                   ! side
CMP_RSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,2) 0.614 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                   ! side
CMP_RSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, left side
CMP_RSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, right
                               ! side
CMP_RSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, left side
CMP_RSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, right
                               ! side
CMP_RSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, left side
CMP_RSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, right
                               ! side
CMP_RSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 16 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 0.5 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), unit 2, axle 1,
                                    ! left side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 0.5 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), unit 2, axle 1,
                                    ! right side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 0.9 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), unit 2, axle 2,
                                    ! left side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 0.9 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), unit 2, axle 2,
                                    ! right side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,1) 0.6111 ! Coefficient: lower spring seat movement per
                                       ! unit jounce at wheel (mm/mm), unit 3, axle
                                       ! 1, left side
CMP_SPR_SEAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,2) 0.6111 ! Coefficient: lower spring seat movement per
                                       ! unit jounce at wheel (mm/mm), unit 3, axle
                                       ! 1, right side
CMP_SPR_SEAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 1, left side
CS_FY_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 1, right side
CS_FY_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 2, left side
CS_FY_GAIN(2,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 2, axle 2, right side
CS_FY_GAIN(2,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 1, left side
CS_FY_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 1, right side
CS_FY_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,1) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 2, left side
CS_FY_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,2) -5.6e-06 ! Coefficient: Steer displacement per unit force
                                  ! (deg/N), unit 3, axle 2, right side
CS_FY_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 1, left side
CS_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 1, right side
CS_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CS_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CS_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 16 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) 0.00095 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_GAIN(2,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) 0.00095 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_GAIN(2,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 3, axle 1, left side
CS_MZ_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 3, axle 1, right side
CS_MZ_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,1) 0.00095 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 3, axle 2, left side
CS_MZ_GAIN(3,2,1)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,2) 0.00095 ! Coefficient: steer displacement per unit moment
                                 ! (deg/N-m), unit 3, axle 2, right side
CS_MZ_GAIN(3,2,2)   1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CS_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CS_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CS_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CS_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 2, axle 1, left side
CT_FX_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 2, axle 1, right side
CT_FX_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 3, axle 1, left side
CT_FX_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                                 ! (deg/N), unit 3, axle 1, right side
CT_FX_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CT_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CT_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 1, left side
CT_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 1, right side
CT_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CT_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CT_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 16 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE,
! and ISIDE are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(2,1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 2, axle 1, left side
C_LAT_GAIN(2,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 2, axle 1, right side
C_LAT_GAIN(2,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(3,1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 3, axle 1, left side
C_LAT_GAIN(3,1,1)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(3,1,1) 1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(3,1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                                 ! (mm/N), unit 3, axle 1, right side
C_LAT_GAIN(3,1,2)   1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(3,1,2) 1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 8 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 1
C_LAT_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 2
C_LAT_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,2) 3.8e-05 ! Coefficient: C_LAT_AXLE displacement per unit
                                    ! force (mm/N), unit 2, axle 2
C_LAT_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get C_LAT_AXLE
                       ! displacement
C_LAT_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,2) 3.8e-05 ! Coefficient: C_LAT_AXLE displacement per unit
                                    ! force (mm/N), unit 3, axle 2
C_LAT_AXLE_GAIN(3,2) 1 ! Gain multiplied with calculated value to get C_LAT_AXLE
                       ! displacement
C_LAT_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 1
C_LAT_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 2
C_LAT_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

C_LONG_COEFFICIENT(2,1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 2, axle 1, left side
C_LONG_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 2, axle 1, right side
C_LONG_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(3,1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 3, axle 1, left side
C_LONG_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(3,1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(3,1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                                ! unit 3, axle 1, right side
C_LONG_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(3,1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 1
C_LONG_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 2
C_LONG_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,2) 7e-05 ! Coefficient: C_LONG_AXLE displacement per unit
                                   ! force (mm/N), unit 2, axle 2
C_LONG_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get C_LONG_AXLE
                        ! displacement
C_LONG_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,2) 7e-05 ! Coefficient: C_LONG_AXLE displacement per unit
                                   ! force (mm/N), unit 3, axle 2
C_LONG_AXLE_GAIN(3,2) 1 ! Gain multiplied with calculated value to get C_LONG_AXLE
                        ! displacement
C_LONG_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 1
C_LONG_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 2
C_LONG_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 68 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IGEAR are used to identify the
! dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 135.08
 0.1, 135.08
 0.2, 108.98
 0.3, 107.22
 0.4, 107.19
 0.5, 107.32
 0.6, 107.87
 0.7, 108.43
 0.8, 108.99
 0.9, 109.55
 1, 109.55
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 328.98
 0.1, 328.98
 0.2, 297.51
 0.3, 270.94
 0.4, 245.64
 0.5, 239.65
 0.6, 280.65
 0.7, 321.66
 0.8, 362.66
 0.9, 403.66
 1, 403.66
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 512.29
 0.1, 512.29
 0.2, 443.86
 0.3, 411.55
 0.4, 411.55
 0.5, 428.66
 0.6, 471.3
 0.7, 513.94
 0.8, 556.58
 0.9, 599.22
 1, 599.22
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 657.15
 0.2, 657.15
 0.3, 617.12
 0.4, 617.04
 0.5, 623.12
 0.6, 682.18
 0.7, 741.24
 0.8, 800.3
 0.9, 859.36
 1, 859.36
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 921.2
 0.2, 921.2
 0.3, 914.58
 0.4, 914.76
 0.5, 915.55
 0.6, 957.02
 0.7, 1079
 0.8, 1200.9
 0.9, 1322.8
 1, 1322.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,6) LINEAR_FLAT ! vehicle 1, gear shift 6<->7
 0, 2034.8
 0.8, 2034.8
 0.9, 2034.8
 1, 2034.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 298
 0.2, 298
 0.8, 1150
 1, 1150
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 383
 0.2, 383
 0.8, 1969
 1, 1969
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 540
 0.2, 540
 0.8, 2528
 1, 2528
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 761
 0.2, 761
 0.8, 3564
 1, 3564
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 885
 0.2, 885
 0.8, 5020
 1, 5020
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,1) LINEAR_FLAT ! vehicle 3, gear shift 1<->2
 0, 699
 0.4, 699
 0.8, 1240
 1, 1240
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,2) LINEAR_FLAT ! vehicle 3, gear shift 2<->3
 0, 1026
 0.4, 1026
 0.8, 2130
 1, 2130
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,3) LINEAR_FLAT ! vehicle 3, gear shift 3<->4
 0, 1440
 0.4, 1440
 0.8, 3125
 1, 3125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,4) LINEAR_FLAT ! vehicle 3, gear shift 4<->5
 0, 2020
 0.4, 2020
 0.8, 4388
 1, 4388
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3,5) LINEAR_FLAT ! vehicle 3, gear shift 5<->6
 0, 2474
 0.4, 2474
 0.8, 6154
 1, 6154
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(3,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,1) LINEAR_FLAT ! vehicle 4, gear shift 1<->2
 0, 70
 0.2, 70
 0.8, 110
 1, 110
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,2) LINEAR_FLAT ! vehicle 4, gear shift 2<->3
 0, 213
 0.2, 213
 0.8, 480
 1, 480
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,3) LINEAR_FLAT ! vehicle 4, gear shift 3<->4
 0, 320
 0.2, 320
 0.8, 740
 1, 740
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,4) LINEAR_FLAT ! vehicle 4, gear shift 4<->5
 0, 480
 0.75, 480
 0.9, 1067
 1, 1067
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,5) LINEAR_FLAT ! vehicle 4, gear shift 5<->6
 0, 620
 0.75, 620
 0.9, 1250
 1, 1250
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4,6) LINEAR_FLAT ! vehicle 4, gear shift 6<->7
 0, 960
 0.75, 960
 0.9, 1500
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(4,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 16 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, left side
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, right side
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, left side
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, right side
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,1) 20 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, left side
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,2) 20 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, right side
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,1) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, left side
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,2) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, right side
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(3,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(3,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(3,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -1410, -7316
 -720, -5019
 -390, -3395
 -210, -2618
 -90, -1472
 -20, -333
 0, 0
 20, 333
 90, 870
 200, 1145
 390, 1607
 760, 2623
 1160, 3740
ENDTABLE
FD_GAIN(3,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 1, left side
FD_GAIN(4,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 1, right side
FD_GAIN(4,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 2, left side
FD_GAIN(4,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 4, axle 2, right side
FD_GAIN(4,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(2,1,1) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -150, -3892.56
 -135, -2486.52
 -120, -1038.05
 -105, 456.366
 -90, 1996.21
 -75, 3580.1
 -60, 5207.64
 -45, 6880.58
 -30, 8603.86
 -15, 10386.6
 0, 12243.5
 15, 14196
 30, 16275.3
 45, 18526
 60, 21013.2
 75, 23834.4
 90, 27142.4
 105, 31188.8
 120, 36406
 135, 43542.4
 150, 53748.6
ENDTABLE
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

FS_COMP_COEFFICIENT(3,1,1) 130 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, left side
FS_COMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, left side

FS_COMP_COEFFICIENT(3,1,2) 130 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, right side
FS_COMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -150, -1946.28
 -135, -1243.26
 -120, -519.027
 -105, 228.183
 -90, 998.104
 -75, 1790.05
 -60, 2603.82
 -45, 3440.29
 -30, 4301.93
 -15, 5193.32
 0, 6121.73
 15, 7097.99
 30, 8137.64
 45, 9263.02
 60, 10506.6
 75, 11917.2
 90, 13571.2
 105, 15594.4
 120, 18203
 135, 21771.2
 150, 26874.3
ENDTABLE
FS_COMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -150, -1946.28
 -135, -1243.26
 -120, -519.027
 -105, 228.183
 -90, 998.104
 -75, 1790.05
 -60, 2603.82
 -45, 3440.29
 -30, 4301.93
 -15, 5193.32
 0, 6121.73
 15, 7097.99
 30, 8137.64
 45, 9263.02
 60, 10506.6
 75, 11917.2
 90, 13571.2
 105, 15594.4
 120, 18203
 135, 21771.2
 150, 26874.3
ENDTABLE
FS_COMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, right side

FS_COMP_COEFFICIENT(4,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 1, left side
FS_COMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, left side

FS_COMP_COEFFICIENT(4,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 1, right side
FS_COMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, right side

FS_COMP_COEFFICIENT(4,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 2, left side
FS_COMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, left side

FS_COMP_COEFFICIENT(4,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 2, right side
FS_COMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 16 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(2,1,1) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -150, -9517
 0, 9794.8
 15, 11356.8
 30, 13020.2
 45, 14820.8
 60, 16810.6
 75, 19067.5
 90, 21713.9
 105, 24951
 120, 29124.8
 135, 34833.9
 150, 42998.9
ENDTABLE
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

FS_EXT_COEFFICIENT(3,1,1) 130 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, left side
FS_EXT_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, left side

FS_EXT_COEFFICIENT(3,1,2) 130 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, right side
FS_EXT_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -150, -4758
 0, 4897.38
 15, 5678.39
 30, 6510.11
 45, 7410.42
 60, 8405.28
 75, 9533.76
 90, 10857
 105, 12475.5
 120, 14562.4
 135, 17417
 150, 21499.4
ENDTABLE
FS_EXT_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -150, -4758
 0, 4897.38
 15, 5678.39
 30, 6510.11
 45, 7410.42
 60, 8405.28
 75, 9533.76
 90, 10857
 105, 12475.5
 120, 14562.4
 135, 17417
 150, 21499.4
ENDTABLE
FS_EXT_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, right side

FS_EXT_COEFFICIENT(4,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, left side
FS_EXT_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, left side

FS_EXT_COEFFICIENT(4,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, right side
FS_EXT_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, right side

FS_EXT_COEFFICIENT(4,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 2, left side
FS_EXT_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, left side

FS_EXT_COEFFICIENT(4,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 2, right side
FS_EXT_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

FUEL_RATE_CONSTANT(1) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(1)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(1) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(1) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(2) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(2)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(2) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(2) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(3) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(3)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(3) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(3) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(4) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(4)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(4) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(4) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 1.26
 -15, 1.17
 -10, 0.97
 -5, 0.82
 0, 0.69
 5, 0.82
 10, 0.97
 15, 1.17
 20, 1.26
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(4) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(4) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(4) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(4) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 32 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.02, 659.98, 1310.49, 1949.71, 2576.32, 3189.21, 3787.34, 4369.71, 4935.36
 0.04, 1213.62, 2408.05, 3579.67, 4725.96, 5844.79, 6934.2, 7992.38, 9017.56
 0.06, 1619.31, 3210.25, 4767.62, 6287.9, 7768.15, 9205.77, 10598.36, 11943.63
 0.08, 1893.6, 3751.15, 5566.2, 7334.49, 9052.54, 10717.34, 12326.12, 13876.34
 0.1, 2072.48, 4103, 6084.23, 8011.39, 9880.67, 11688.8, 13432.84, 15110.11
 0.12, 2187.92, 4329.57, 6416.99, 8445.04, 10409.72, 12307.6, 14135.69, 15891.24
 0.14, 2262.4, 4475.42, 6630.65, 8722.77, 10747.62, 12701.71, 14582, 16385.75
 0.16, 2310.35, 4569.09, 6767.52, 8900.16, 10962.77, 12951.84, 14864.31, 16697.45
 0.18, 2340.84, 4628.48, 6854, 9011.81, 11097.64, 13107.96, 15039.71, 16890.18
 0.2, 2359.6, 4664.84, 6906.65, 9079.39, 11178.75, 13201.2, 15143.7, 17003.56
 0.22, 2370.27, 4685.35, 6936.06, 9116.71, 11222.99, 13251.38, 15198.83, 17062.69
 0.24, 2375.27, 4694.74, 6949.15, 9132.81, 11241.4, 13271.38, 15219.76, 17083.89
 0.26, 2376.19, 4696.14, 6950.56, 9133.73, 11241.33, 13269.85, 15216.3, 17078.07
 0.28, 2374.15, 4691.75, 6943.48, 9123.62, 11227.86, 13252.7, 15195.17, 17052.68
 0.3, 2369.92, 4683.08, 6930.15, 9105.4, 11204.54, 13224.08, 15161.08, 17012.97
 0.32, 2364.06, 4671.23, 6912.16, 9081.15, 11173.91, 13186.98, 15117.42, 16962.69
 0.34, 2356.98, 4657, 6890.71, 9052.42, 11137.85, 13143.57, 15066.65, 16904.58
 0.36, 2348.99, 4640.99, 6866.67, 9020.34, 11097.75, 13095.47, 15010.61, 16840.68
 0.38, 2340.31, 4623.65, 6840.69, 8985.77, 11054.65, 13043.91, 14950.7, 16772.53
 0.4, 2331.13, 4605.33, 6813.3, 8949.37, 11009.35, 12989.83, 14887.97, 16701.31
 0.42, 2321.58, 4586.3, 6784.87, 8911.66, 10962.48, 12933.96, 14823.25, 16627.94
 0.44, 2311.76, 4566.76, 6755.72, 8873.04, 10914.53, 12876.85, 14757.19, 16553.12
 0.46, 2301.77, 4546.88, 6726.1, 8833.81, 10865.88, 12818.96, 14690.27, 16477.41
 0.48, 2291.67, 4526.8, 6696.18, 8794.24, 10816.83, 12760.65, 14622.92, 16401.26
 0.5, 2281.52, 4506.62, 6666.14, 8754.51, 10767.63, 12702.19, 14555.44, 16325.02
 0.52, 2271.35, 4486.43, 6636.09, 8714.8, 10718.46, 12643.81, 14488.09, 16248.97
 0.54, 2261.2, 4466.28, 6606.13, 8675.22, 10669.5, 12585.69, 14421.08, 16173.33
 0.56, 2251.1, 4446.25, 6576.34, 8635.89, 10620.85, 12527.97, 14354.56, 16098.29
 0.58, 2241.08, 4426.36, 6546.78, 8596.88, 10572.62, 12470.78, 14288.66, 16023.99
 0.6, 2231.15, 4406.66, 6517.51, 8558.26, 10524.89, 12414.2, 14223.5, 15950.53
 0.62, 2221.32, 4387.18, 6488.57, 8520.09, 10477.73, 12358.3, 14159.15, 15878.01
 0.64, 2211.61, 4367.93, 6459.99, 8482.4, 10431.17, 12303.14, 14095.67, 15806.5
 0.66, 2202.03, 4348.93, 6431.79, 8445.23, 10385.27, 12248.77, 14033.11, 15736.04
 0.68, 2192.58, 4330.21, 6404, 8408.59, 10340.05, 12195.23, 13971.51, 15666.69
 0.7, 2183.26, 4311.76, 6376.62, 8372.52, 10295.53, 12142.52, 13910.9, 15598.46
 0.72, 2174.1, 4293.6, 6349.68, 8337.03, 10251.73, 12090.68, 13851.29, 15531.38
 0.74, 2165.07, 4275.73, 6323.17, 8302.11, 10208.65, 12039.71, 13792.7, 15465.45
 0.76, 2156.2, 4258.16, 6297.11, 8267.79, 10166.31, 11989.61, 13735.13, 15400.69
 0.78, 2147.47, 4240.88, 6271.49, 8234.05, 10124.71, 11940.4, 13678.58, 15337.09
 0.8, 2138.89, 4223.89, 6246.31, 8200.9, 10083.84, 11892.07, 13623.05, 15274.65
 0.82, 2130.46, 4207.21, 6221.57, 8168.35, 10043.71, 11844.61, 13568.54, 15213.36
 0.84, 2122.18, 4190.82, 6197.28, 8136.38, 10004.3, 11798.02, 13515.03, 15153.22
 0.86, 2114.04, 4174.72, 6173.43, 8104.99, 9965.61, 11752.28, 13462.52, 15094.2
 0.88, 2106.05, 4158.91, 6150, 8074.17, 9927.63, 11707.4, 13410.99, 15036.29
 0.9, 2098.2, 4143.39, 6127.01, 8043.92, 9890.36, 11663.35, 13360.43, 14979.48
 0.92, 2090.5, 4128.15, 6104.43, 8014.23, 9853.78, 11620.13, 13310.82, 14923.75
 0.94, 2082.94, 4113.19, 6082.27, 7985.08, 9817.89, 11577.72, 13262.15, 14869.08
 0.96, 2075.51, 4098.51, 6060.52, 7956.48, 9782.66, 11536.11, 13214.39, 14815.45
 0.98, 2068.22, 4084.09, 6039.17, 7928.41, 9748.09, 11495.28, 13167.55, 14762.84
 1, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
 1.02, 2061.06, 4069.94, 6018.22, 7900.86, 9714.16, 11455.21, 13121.59, 14711.23
ENDTABLE
FX_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 486.65, 975.08, 1463.43, 1949.07, 2428.89, 2899.38, 3356.75, 3796.93
 0.04, 897.9, 1792.27, 2678.43, 3550.79, 4403.14, 5228.81, 6020.83, 6771.99
 0.06, 1204.74, 2394.36, 3561.16, 4697.09, 5793.76, 6842.61, 7835.01, 8762.42
 0.08, 1418.95, 2809.48, 4161.49, 5465.45, 6712.01, 7891.98, 8996.45, 10016.85
 0.1, 1565.49, 3090.53, 4563.4, 5973.93, 7312.54, 8570.17, 9738.24, 10808.67
 0.12, 1666.36, 3282.46, 4835.57, 6315.27, 7712.15, 9017.51, 10223.29, 11322.03
 0.14, 1737.06, 3416.18, 5023.95, 6549.95, 7985.03, 9320.92, 10550.06, 11665.54
 0.16, 1787.68, 3511.43, 5157.42, 6715.3, 8176.19, 9532.21, 10776.23, 11901.82
 0.18, 1824.64, 3580.68, 5253.97, 6834.27, 8312.96, 9682.48, 10936.09, 12067.72
 0.2, 1852.08, 3631.85, 5324.95, 6921.24, 8412.32, 9790.93, 11050.62, 12185.64
 0.22, 1872.7, 3670.11, 5377.71, 6985.46, 8485.17, 9869.79, 11133.14, 12269.74
 0.24, 1888.32, 3698.92, 5417.16, 7033.1, 8538.69, 9927.12, 11192.42, 12329.33
 0.26, 1900.19, 3720.65, 5446.65, 7068.33, 8577.8, 9968.42, 11234.41, 12370.7
 0.28, 1909.19, 3736.97, 5468.54, 7094.11, 8605.94, 9997.52, 11263.27, 12398.27
 0.3, 1915.96, 3749.09, 5484.53, 7112.57, 8625.58, 10017.21, 11282, 12415.2
 0.32, 1920.97, 3757.89, 5495.87, 7125.27, 8638.55, 10029.51, 11292.81, 12423.85
 0.34, 1924.56, 3764.04, 5503.51, 7133.38, 8646.23, 10035.95, 11297.36, 12425.95
 0.36, 1927.02, 3768.05, 5508.16, 7137.8, 8649.66, 10037.72, 11296.91, 12422.86
 0.38, 1928.55, 3770.33, 5510.38, 7139.24, 8649.65, 10035.72, 11292.46, 12415.62
 0.4, 1929.32, 3771.18, 5510.63, 7138.24, 8646.86, 10030.66, 11284.78, 12405.04
 0.42, 1929.46, 3770.86, 5509.24, 7135.25, 8641.78, 10023.13, 11274.49, 12391.79
 0.44, 1929.07, 3769.57, 5506.52, 7130.61, 8634.85, 10013.58, 11262.09, 12376.39
 0.46, 1928.25, 3767.46, 5502.67, 7124.63, 8626.39, 10002.38, 11247.98, 12359.27
 0.48, 1927.06, 3764.69, 5497.91, 7117.54, 8616.68, 9989.85, 11232.5, 12340.77
 0.5, 1925.57, 3761.35, 5492.38, 7109.52, 8605.95, 9976.24, 11215.91, 12321.18
 0.52, 1923.83, 3757.54, 5486.23, 7100.76, 8594.39, 9961.76, 11198.44, 12300.74
 0.54, 1921.87, 3753.35, 5479.54, 7091.38, 8582.15, 9946.58, 11180.29, 12279.64
 0.56, 1919.73, 3748.84, 5472.43, 7081.49, 8569.38, 9930.84, 11161.6, 12258.05
 0.58, 1917.45, 3744.06, 5464.97, 7071.2, 8556.17, 9914.68, 11142.51, 12236.1
 0.6, 1915.04, 3739.06, 5457.22, 7060.59, 8542.63, 9898.2, 11123.12, 12213.91
 0.62, 1912.53, 3733.88, 5449.25, 7049.73, 8528.83, 9881.48, 11103.54, 12191.58
 0.64, 1909.93, 3728.56, 5441.09, 7038.67, 8514.85, 9864.6, 11083.84, 12169.17
 0.66, 1907.27, 3723.13, 5432.8, 7027.47, 8500.74, 9847.62, 11064.08, 12146.77
 0.68, 1904.56, 3717.61, 5424.4, 7016.17, 8486.55, 9830.6, 11044.32, 12124.42
 0.7, 1901.8, 3712.02, 5415.94, 7004.81, 8472.32, 9813.57, 11024.61, 12102.17
 0.72, 1899.02, 3706.39, 5407.42, 6993.41, 8458.09, 9796.59, 11004.99, 12080.07
 0.74, 1896.21, 3700.73, 5398.89, 6982.02, 8443.88, 9779.67, 10985.49, 12058.15
 0.76, 1893.39, 3695.05, 5390.35, 6970.64, 8429.74, 9762.85, 10966.13, 12036.43
 0.78, 1890.56, 3689.37, 5381.82, 6959.3, 8415.66, 9746.15, 10946.95, 12014.93
 0.8, 1887.73, 3683.7, 5373.32, 6948.02, 8401.68, 9729.59, 10927.95, 11993.68
 0.82, 1884.9, 3678.04, 5364.85, 6936.81, 8387.82, 9713.18, 10909.16, 11972.69
 0.84, 1882.08, 3672.41, 5356.44, 6925.68, 8374.07, 9696.95, 10890.59, 11951.96
 0.86, 1879.27, 3666.81, 5348.09, 6914.65, 8360.46, 9680.89, 10872.25, 11931.52
 0.88, 1876.48, 3661.24, 5339.8, 6903.72, 8346.99, 9665.03, 10854.15, 11911.37
 0.9, 1873.7, 3655.72, 5331.58, 6892.9, 8333.68, 9649.36, 10836.29, 11891.51
 0.92, 1870.95, 3650.24, 5323.45, 6882.19, 8320.52, 9633.89, 10818.68, 11871.94
 0.94, 1868.21, 3644.81, 5315.39, 6871.6, 8307.52, 9618.63, 10801.32, 11852.67
 0.96, 1865.5, 3639.43, 5307.42, 6861.14, 8294.69, 9603.57, 10784.22, 11833.7
 0.98, 1862.81, 3634.11, 5299.55, 6850.81, 8282.03, 9588.73, 10767.37, 11815.04
 1, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
 1.02, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
ENDTABLE
FX_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 486.65, 975.08, 1463.43, 1949.07, 2428.89, 2899.38, 3356.75, 3796.93
 0.04, 897.9, 1792.27, 2678.43, 3550.79, 4403.14, 5228.81, 6020.83, 6771.99
 0.06, 1204.74, 2394.36, 3561.16, 4697.09, 5793.76, 6842.61, 7835.01, 8762.42
 0.08, 1418.95, 2809.48, 4161.49, 5465.45, 6712.01, 7891.98, 8996.45, 10016.85
 0.1, 1565.49, 3090.53, 4563.4, 5973.93, 7312.54, 8570.17, 9738.24, 10808.67
 0.12, 1666.36, 3282.46, 4835.57, 6315.27, 7712.15, 9017.51, 10223.29, 11322.03
 0.14, 1737.06, 3416.18, 5023.95, 6549.95, 7985.03, 9320.92, 10550.06, 11665.54
 0.16, 1787.68, 3511.43, 5157.42, 6715.3, 8176.19, 9532.21, 10776.23, 11901.82
 0.18, 1824.64, 3580.68, 5253.97, 6834.27, 8312.96, 9682.48, 10936.09, 12067.72
 0.2, 1852.08, 3631.85, 5324.95, 6921.24, 8412.32, 9790.93, 11050.62, 12185.64
 0.22, 1872.7, 3670.11, 5377.71, 6985.46, 8485.17, 9869.79, 11133.14, 12269.74
 0.24, 1888.32, 3698.92, 5417.16, 7033.1, 8538.69, 9927.12, 11192.42, 12329.33
 0.26, 1900.19, 3720.65, 5446.65, 7068.33, 8577.8, 9968.42, 11234.41, 12370.7
 0.28, 1909.19, 3736.97, 5468.54, 7094.11, 8605.94, 9997.52, 11263.27, 12398.27
 0.3, 1915.96, 3749.09, 5484.53, 7112.57, 8625.58, 10017.21, 11282, 12415.2
 0.32, 1920.97, 3757.89, 5495.87, 7125.27, 8638.55, 10029.51, 11292.81, 12423.85
 0.34, 1924.56, 3764.04, 5503.51, 7133.38, 8646.23, 10035.95, 11297.36, 12425.95
 0.36, 1927.02, 3768.05, 5508.16, 7137.8, 8649.66, 10037.72, 11296.91, 12422.86
 0.38, 1928.55, 3770.33, 5510.38, 7139.24, 8649.65, 10035.72, 11292.46, 12415.62
 0.4, 1929.32, 3771.18, 5510.63, 7138.24, 8646.86, 10030.66, 11284.78, 12405.04
 0.42, 1929.46, 3770.86, 5509.24, 7135.25, 8641.78, 10023.13, 11274.49, 12391.79
 0.44, 1929.07, 3769.57, 5506.52, 7130.61, 8634.85, 10013.58, 11262.09, 12376.39
 0.46, 1928.25, 3767.46, 5502.67, 7124.63, 8626.39, 10002.38, 11247.98, 12359.27
 0.48, 1927.06, 3764.69, 5497.91, 7117.54, 8616.68, 9989.85, 11232.5, 12340.77
 0.5, 1925.57, 3761.35, 5492.38, 7109.52, 8605.95, 9976.24, 11215.91, 12321.18
 0.52, 1923.83, 3757.54, 5486.23, 7100.76, 8594.39, 9961.76, 11198.44, 12300.74
 0.54, 1921.87, 3753.35, 5479.54, 7091.38, 8582.15, 9946.58, 11180.29, 12279.64
 0.56, 1919.73, 3748.84, 5472.43, 7081.49, 8569.38, 9930.84, 11161.6, 12258.05
 0.58, 1917.45, 3744.06, 5464.97, 7071.2, 8556.17, 9914.68, 11142.51, 12236.1
 0.6, 1915.04, 3739.06, 5457.22, 7060.59, 8542.63, 9898.2, 11123.12, 12213.91
 0.62, 1912.53, 3733.88, 5449.25, 7049.73, 8528.83, 9881.48, 11103.54, 12191.58
 0.64, 1909.93, 3728.56, 5441.09, 7038.67, 8514.85, 9864.6, 11083.84, 12169.17
 0.66, 1907.27, 3723.13, 5432.8, 7027.47, 8500.74, 9847.62, 11064.08, 12146.77
 0.68, 1904.56, 3717.61, 5424.4, 7016.17, 8486.55, 9830.6, 11044.32, 12124.42
 0.7, 1901.8, 3712.02, 5415.94, 7004.81, 8472.32, 9813.57, 11024.61, 12102.17
 0.72, 1899.02, 3706.39, 5407.42, 6993.41, 8458.09, 9796.59, 11004.99, 12080.07
 0.74, 1896.21, 3700.73, 5398.89, 6982.02, 8443.88, 9779.67, 10985.49, 12058.15
 0.76, 1893.39, 3695.05, 5390.35, 6970.64, 8429.74, 9762.85, 10966.13, 12036.43
 0.78, 1890.56, 3689.37, 5381.82, 6959.3, 8415.66, 9746.15, 10946.95, 12014.93
 0.8, 1887.73, 3683.7, 5373.32, 6948.02, 8401.68, 9729.59, 10927.95, 11993.68
 0.82, 1884.9, 3678.04, 5364.85, 6936.81, 8387.82, 9713.18, 10909.16, 11972.69
 0.84, 1882.08, 3672.41, 5356.44, 6925.68, 8374.07, 9696.95, 10890.59, 11951.96
 0.86, 1879.27, 3666.81, 5348.09, 6914.65, 8360.46, 9680.89, 10872.25, 11931.52
 0.88, 1876.48, 3661.24, 5339.8, 6903.72, 8346.99, 9665.03, 10854.15, 11911.37
 0.9, 1873.7, 3655.72, 5331.58, 6892.9, 8333.68, 9649.36, 10836.29, 11891.51
 0.92, 1870.95, 3650.24, 5323.45, 6882.19, 8320.52, 9633.89, 10818.68, 11871.94
 0.94, 1868.21, 3644.81, 5315.39, 6871.6, 8307.52, 9618.63, 10801.32, 11852.67
 0.96, 1865.5, 3639.43, 5307.42, 6861.14, 8294.69, 9603.57, 10784.22, 11833.7
 0.98, 1862.81, 3634.11, 5299.55, 6850.81, 8282.03, 9588.73, 10767.37, 11815.04
 1, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
 1.02, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
ENDTABLE
FX_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 486.65, 975.08, 1463.43, 1949.07, 2428.89, 2899.38, 3356.75, 3796.93
 0.04, 897.9, 1792.27, 2678.43, 3550.79, 4403.14, 5228.81, 6020.83, 6771.99
 0.06, 1204.74, 2394.36, 3561.16, 4697.09, 5793.76, 6842.61, 7835.01, 8762.42
 0.08, 1418.95, 2809.48, 4161.49, 5465.45, 6712.01, 7891.98, 8996.45, 10016.85
 0.1, 1565.49, 3090.53, 4563.4, 5973.93, 7312.54, 8570.17, 9738.24, 10808.67
 0.12, 1666.36, 3282.46, 4835.57, 6315.27, 7712.15, 9017.51, 10223.29, 11322.03
 0.14, 1737.06, 3416.18, 5023.95, 6549.95, 7985.03, 9320.92, 10550.06, 11665.54
 0.16, 1787.68, 3511.43, 5157.42, 6715.3, 8176.19, 9532.21, 10776.23, 11901.82
 0.18, 1824.64, 3580.68, 5253.97, 6834.27, 8312.96, 9682.48, 10936.09, 12067.72
 0.2, 1852.08, 3631.85, 5324.95, 6921.24, 8412.32, 9790.93, 11050.62, 12185.64
 0.22, 1872.7, 3670.11, 5377.71, 6985.46, 8485.17, 9869.79, 11133.14, 12269.74
 0.24, 1888.32, 3698.92, 5417.16, 7033.1, 8538.69, 9927.12, 11192.42, 12329.33
 0.26, 1900.19, 3720.65, 5446.65, 7068.33, 8577.8, 9968.42, 11234.41, 12370.7
 0.28, 1909.19, 3736.97, 5468.54, 7094.11, 8605.94, 9997.52, 11263.27, 12398.27
 0.3, 1915.96, 3749.09, 5484.53, 7112.57, 8625.58, 10017.21, 11282, 12415.2
 0.32, 1920.97, 3757.89, 5495.87, 7125.27, 8638.55, 10029.51, 11292.81, 12423.85
 0.34, 1924.56, 3764.04, 5503.51, 7133.38, 8646.23, 10035.95, 11297.36, 12425.95
 0.36, 1927.02, 3768.05, 5508.16, 7137.8, 8649.66, 10037.72, 11296.91, 12422.86
 0.38, 1928.55, 3770.33, 5510.38, 7139.24, 8649.65, 10035.72, 11292.46, 12415.62
 0.4, 1929.32, 3771.18, 5510.63, 7138.24, 8646.86, 10030.66, 11284.78, 12405.04
 0.42, 1929.46, 3770.86, 5509.24, 7135.25, 8641.78, 10023.13, 11274.49, 12391.79
 0.44, 1929.07, 3769.57, 5506.52, 7130.61, 8634.85, 10013.58, 11262.09, 12376.39
 0.46, 1928.25, 3767.46, 5502.67, 7124.63, 8626.39, 10002.38, 11247.98, 12359.27
 0.48, 1927.06, 3764.69, 5497.91, 7117.54, 8616.68, 9989.85, 11232.5, 12340.77
 0.5, 1925.57, 3761.35, 5492.38, 7109.52, 8605.95, 9976.24, 11215.91, 12321.18
 0.52, 1923.83, 3757.54, 5486.23, 7100.76, 8594.39, 9961.76, 11198.44, 12300.74
 0.54, 1921.87, 3753.35, 5479.54, 7091.38, 8582.15, 9946.58, 11180.29, 12279.64
 0.56, 1919.73, 3748.84, 5472.43, 7081.49, 8569.38, 9930.84, 11161.6, 12258.05
 0.58, 1917.45, 3744.06, 5464.97, 7071.2, 8556.17, 9914.68, 11142.51, 12236.1
 0.6, 1915.04, 3739.06, 5457.22, 7060.59, 8542.63, 9898.2, 11123.12, 12213.91
 0.62, 1912.53, 3733.88, 5449.25, 7049.73, 8528.83, 9881.48, 11103.54, 12191.58
 0.64, 1909.93, 3728.56, 5441.09, 7038.67, 8514.85, 9864.6, 11083.84, 12169.17
 0.66, 1907.27, 3723.13, 5432.8, 7027.47, 8500.74, 9847.62, 11064.08, 12146.77
 0.68, 1904.56, 3717.61, 5424.4, 7016.17, 8486.55, 9830.6, 11044.32, 12124.42
 0.7, 1901.8, 3712.02, 5415.94, 7004.81, 8472.32, 9813.57, 11024.61, 12102.17
 0.72, 1899.02, 3706.39, 5407.42, 6993.41, 8458.09, 9796.59, 11004.99, 12080.07
 0.74, 1896.21, 3700.73, 5398.89, 6982.02, 8443.88, 9779.67, 10985.49, 12058.15
 0.76, 1893.39, 3695.05, 5390.35, 6970.64, 8429.74, 9762.85, 10966.13, 12036.43
 0.78, 1890.56, 3689.37, 5381.82, 6959.3, 8415.66, 9746.15, 10946.95, 12014.93
 0.8, 1887.73, 3683.7, 5373.32, 6948.02, 8401.68, 9729.59, 10927.95, 11993.68
 0.82, 1884.9, 3678.04, 5364.85, 6936.81, 8387.82, 9713.18, 10909.16, 11972.69
 0.84, 1882.08, 3672.41, 5356.44, 6925.68, 8374.07, 9696.95, 10890.59, 11951.96
 0.86, 1879.27, 3666.81, 5348.09, 6914.65, 8360.46, 9680.89, 10872.25, 11931.52
 0.88, 1876.48, 3661.24, 5339.8, 6903.72, 8346.99, 9665.03, 10854.15, 11911.37
 0.9, 1873.7, 3655.72, 5331.58, 6892.9, 8333.68, 9649.36, 10836.29, 11891.51
 0.92, 1870.95, 3650.24, 5323.45, 6882.19, 8320.52, 9633.89, 10818.68, 11871.94
 0.94, 1868.21, 3644.81, 5315.39, 6871.6, 8307.52, 9618.63, 10801.32, 11852.67
 0.96, 1865.5, 3639.43, 5307.42, 6861.14, 8294.69, 9603.57, 10784.22, 11833.7
 0.98, 1862.81, 3634.11, 5299.55, 6850.81, 8282.03, 9588.73, 10767.37, 11815.04
 1, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
 1.02, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
ENDTABLE
FX_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 486.65, 975.08, 1463.43, 1949.07, 2428.89, 2899.38, 3356.75, 3796.93
 0.04, 897.9, 1792.27, 2678.43, 3550.79, 4403.14, 5228.81, 6020.83, 6771.99
 0.06, 1204.74, 2394.36, 3561.16, 4697.09, 5793.76, 6842.61, 7835.01, 8762.42
 0.08, 1418.95, 2809.48, 4161.49, 5465.45, 6712.01, 7891.98, 8996.45, 10016.85
 0.1, 1565.49, 3090.53, 4563.4, 5973.93, 7312.54, 8570.17, 9738.24, 10808.67
 0.12, 1666.36, 3282.46, 4835.57, 6315.27, 7712.15, 9017.51, 10223.29, 11322.03
 0.14, 1737.06, 3416.18, 5023.95, 6549.95, 7985.03, 9320.92, 10550.06, 11665.54
 0.16, 1787.68, 3511.43, 5157.42, 6715.3, 8176.19, 9532.21, 10776.23, 11901.82
 0.18, 1824.64, 3580.68, 5253.97, 6834.27, 8312.96, 9682.48, 10936.09, 12067.72
 0.2, 1852.08, 3631.85, 5324.95, 6921.24, 8412.32, 9790.93, 11050.62, 12185.64
 0.22, 1872.7, 3670.11, 5377.71, 6985.46, 8485.17, 9869.79, 11133.14, 12269.74
 0.24, 1888.32, 3698.92, 5417.16, 7033.1, 8538.69, 9927.12, 11192.42, 12329.33
 0.26, 1900.19, 3720.65, 5446.65, 7068.33, 8577.8, 9968.42, 11234.41, 12370.7
 0.28, 1909.19, 3736.97, 5468.54, 7094.11, 8605.94, 9997.52, 11263.27, 12398.27
 0.3, 1915.96, 3749.09, 5484.53, 7112.57, 8625.58, 10017.21, 11282, 12415.2
 0.32, 1920.97, 3757.89, 5495.87, 7125.27, 8638.55, 10029.51, 11292.81, 12423.85
 0.34, 1924.56, 3764.04, 5503.51, 7133.38, 8646.23, 10035.95, 11297.36, 12425.95
 0.36, 1927.02, 3768.05, 5508.16, 7137.8, 8649.66, 10037.72, 11296.91, 12422.86
 0.38, 1928.55, 3770.33, 5510.38, 7139.24, 8649.65, 10035.72, 11292.46, 12415.62
 0.4, 1929.32, 3771.18, 5510.63, 7138.24, 8646.86, 10030.66, 11284.78, 12405.04
 0.42, 1929.46, 3770.86, 5509.24, 7135.25, 8641.78, 10023.13, 11274.49, 12391.79
 0.44, 1929.07, 3769.57, 5506.52, 7130.61, 8634.85, 10013.58, 11262.09, 12376.39
 0.46, 1928.25, 3767.46, 5502.67, 7124.63, 8626.39, 10002.38, 11247.98, 12359.27
 0.48, 1927.06, 3764.69, 5497.91, 7117.54, 8616.68, 9989.85, 11232.5, 12340.77
 0.5, 1925.57, 3761.35, 5492.38, 7109.52, 8605.95, 9976.24, 11215.91, 12321.18
 0.52, 1923.83, 3757.54, 5486.23, 7100.76, 8594.39, 9961.76, 11198.44, 12300.74
 0.54, 1921.87, 3753.35, 5479.54, 7091.38, 8582.15, 9946.58, 11180.29, 12279.64
 0.56, 1919.73, 3748.84, 5472.43, 7081.49, 8569.38, 9930.84, 11161.6, 12258.05
 0.58, 1917.45, 3744.06, 5464.97, 7071.2, 8556.17, 9914.68, 11142.51, 12236.1
 0.6, 1915.04, 3739.06, 5457.22, 7060.59, 8542.63, 9898.2, 11123.12, 12213.91
 0.62, 1912.53, 3733.88, 5449.25, 7049.73, 8528.83, 9881.48, 11103.54, 12191.58
 0.64, 1909.93, 3728.56, 5441.09, 7038.67, 8514.85, 9864.6, 11083.84, 12169.17
 0.66, 1907.27, 3723.13, 5432.8, 7027.47, 8500.74, 9847.62, 11064.08, 12146.77
 0.68, 1904.56, 3717.61, 5424.4, 7016.17, 8486.55, 9830.6, 11044.32, 12124.42
 0.7, 1901.8, 3712.02, 5415.94, 7004.81, 8472.32, 9813.57, 11024.61, 12102.17
 0.72, 1899.02, 3706.39, 5407.42, 6993.41, 8458.09, 9796.59, 11004.99, 12080.07
 0.74, 1896.21, 3700.73, 5398.89, 6982.02, 8443.88, 9779.67, 10985.49, 12058.15
 0.76, 1893.39, 3695.05, 5390.35, 6970.64, 8429.74, 9762.85, 10966.13, 12036.43
 0.78, 1890.56, 3689.37, 5381.82, 6959.3, 8415.66, 9746.15, 10946.95, 12014.93
 0.8, 1887.73, 3683.7, 5373.32, 6948.02, 8401.68, 9729.59, 10927.95, 11993.68
 0.82, 1884.9, 3678.04, 5364.85, 6936.81, 8387.82, 9713.18, 10909.16, 11972.69
 0.84, 1882.08, 3672.41, 5356.44, 6925.68, 8374.07, 9696.95, 10890.59, 11951.96
 0.86, 1879.27, 3666.81, 5348.09, 6914.65, 8360.46, 9680.89, 10872.25, 11931.52
 0.88, 1876.48, 3661.24, 5339.8, 6903.72, 8346.99, 9665.03, 10854.15, 11911.37
 0.9, 1873.7, 3655.72, 5331.58, 6892.9, 8333.68, 9649.36, 10836.29, 11891.51
 0.92, 1870.95, 3650.24, 5323.45, 6882.19, 8320.52, 9633.89, 10818.68, 11871.94
 0.94, 1868.21, 3644.81, 5315.39, 6871.6, 8307.52, 9618.63, 10801.32, 11852.67
 0.96, 1865.5, 3639.43, 5307.42, 6861.14, 8294.69, 9603.57, 10784.22, 11833.7
 0.98, 1862.81, 3634.11, 5299.55, 6850.81, 8282.03, 9588.73, 10767.37, 11815.04
 1, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
 1.02, 1860.16, 3628.85, 5291.76, 6840.61, 8269.54, 9574.11, 10750.78, 11796.67
ENDTABLE
FX_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(4) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(4) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(4) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(4) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 32 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 2819.41, 5638.82, 8458.24, 11277.65, 14097.06, 16916.47, 19735.88, 22555.3
 0.5, 329.58, 633.8, 909.33, 1154.7, 1369.28, 1552.96, 1705.99, 1828.89
 1, 648.04, 1246.9, 1790, 2274.43, 2698.83, 3062.86, 3366.88, 3611.83
 1.5, 945.81, 1821.35, 2617.08, 3328.56, 3953.62, 4491.51, 4942.48, 5307.63
 2, 1215.89, 2343.97, 3371.97, 4293.99, 5106.92, 5809.37, 6401.27, 6883.54
 2.5, 1454.34, 2807.04, 4043.54, 5156.52, 6141.82, 6997.3, 7722.26, 8317.22
 3, 1659.96, 3208.03, 4627.74, 5910.47, 7051.03, 8046.37, 8895.04, 9596.91
 3.5, 1833.72, 3548.45, 5126.18, 6557.19, 7835.24, 8956.38, 9918.31, 10720.1
 4, 1978.06, 3832.57, 5544.42, 7102.92, 8500.93, 9733.58, 10797.72, 11691.54
 4.5, 2096.12, 4066.18, 5890.26, 7556.89, 9058.15, 10388.36, 11543.5, 12520.93
 5, 2191.36, 4255.65, 6172.44, 7929.66, 9518.74, 10933.28, 12168.49, 13220.91
 5.5, 2267.11, 4407.27, 6399.73, 8231.98, 9894.93, 11381.59, 12686.5, 13805.43
 6, 2326.48, 4526.89, 6580.35, 8474.05, 10198.51, 11746.24, 13111.19, 14288.52
 6.5, 2372.2, 4619.73, 6721.71, 8665.16, 10440.3, 12039.24, 13455.47, 14683.59
 7, 2406.62, 4690.32, 6830.31, 8813.51, 10629.93, 12271.41, 13731.04, 15002.96
 7.5, 2431.75, 4742.52, 6911.69, 8926.16, 10775.81, 12452.25, 13948.28, 15257.68
 8, 2449.26, 4779.59, 6970.57, 9009.16, 10885.14, 12589.98, 14116.27, 15457.46
 8.5, 2460.54, 4804.23, 7010.91, 9067.59, 10964.04, 12691.63, 14242.79, 15610.74
 9, 2466.74, 4818.71, 7036, 9105.72, 11017.68, 12763.18, 14334.52, 15724.78
 9.5, 2468.82, 4824.88, 7048.58, 9127.13, 11050.39, 12809.64, 14397.12, 15805.77
 10, 2467.54, 4824.29, 7050.91, 9134.78, 11065.79, 12835.26, 14435.38, 15859
 10.5, 2463.55, 4818.2, 7044.88, 9131.13, 11066.91, 12843.59, 14453.33, 15888.94
 11, 2457.38, 4807.65, 7032.05, 9118.23, 11056.28, 12837.6, 14454.37, 15899.37
 11.5, 2449.45, 4793.52, 7013.68, 9097.78, 11036, 12819.78, 14441.37, 15893.5
 12, 2440.13, 4776.5, 6990.86, 9071.2, 11007.82, 12792.23, 14416.71, 15874.03
 12.5, 2429.71, 4757.19, 6964.46, 9039.66, 10973.21, 12756.69, 14382.43, 15843.24
 13, 2418.42, 4736.06, 6935.2, 9004.14, 10933.38, 12714.62, 14340.23, 15803.06
 13.5, 2406.46, 4713.53, 6903.71, 8965.44, 10889.36, 12667.24, 14291.54, 15755.13
 14, 2394, 4689.91, 6870.46, 8924.25, 10842, 12615.6, 14237.56, 15700.82
 14.5, 2381.18, 4665.49, 6835.89, 8881.12, 10792.02, 12560.55, 14179.31, 15641.29
 15, 2368.09, 4640.49, 6800.34, 8836.52, 10739.99, 12502.81, 14117.64, 15577.54
 15.5, 2354.84, 4615.09, 6764.08, 8790.84, 10686.43, 12442.99, 14053.28, 15510.4
 16, 2341.5, 4589.44, 6727.37, 8744.41, 10631.75, 12381.61, 13986.82, 15440.58
 16.5, 2328.13, 4563.69, 6690.39, 8697.5, 10576.3, 12319.09, 13918.79, 15368.66
 17, 2314.78, 4537.92, 6653.31, 8650.33, 10520.36, 12255.79, 13849.62, 15295.17
 17.5, 2301.5, 4512.23, 6616.26, 8603.08, 10464.17, 12192.01, 13779.66, 15220.53
 18, 2288.3, 4486.68, 6579.35, 8555.92, 10407.94, 12128, 13709.23, 15145.11
 18.5, 2275.23, 4461.33, 6542.67, 8508.96, 10351.84, 12063.98, 13638.59, 15069.2
 19, 2262.31, 4436.23, 6506.29, 8462.3, 10296, 12000.11, 13567.94, 14993.07
 19.5, 2249.54, 4411.41, 6470.28, 8416.05, 10240.54, 11936.55, 13497.46, 14916.94
 20, 2236.94, 4386.91, 6434.68, 8370.25, 10185.54, 11873.42, 13427.32, 14840.99
 20.5, 2224.53, 4362.74, 6399.52, 8324.97, 10131.08, 11810.8, 13357.63, 14765.37
 21, 2212.32, 4338.92, 6364.84, 8280.26, 10077.23, 11748.79, 13288.49, 14690.22
 21.5, 2200.29, 4315.46, 6330.66, 8236.14, 10024.04, 11687.45, 13220, 14615.63
 22, 2188.47, 4292.38, 6296.99, 8192.64, 9971.53, 11626.82, 13152.21, 14541.7
 22.5, 2176.85, 4269.68, 6263.85, 8149.78, 9919.75, 11566.97, 13085.19, 14468.5
 23, 2165.43, 4247.36, 6231.25, 8107.58, 9868.7, 11507.9, 13018.98, 14396.08
 23.5, 2154.22, 4225.42, 6199.18, 8066.04, 9818.42, 11449.65, 12953.62, 14324.5
 24, 2143.21, 4203.87, 6167.65, 8025.17, 9768.9, 11392.24, 12889.12, 14253.78
 24.5, 2132.4, 4182.7, 6136.65, 7984.96, 9720.15, 11335.67, 12825.51, 14183.97
 25, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
 26, 2121.78, 4161.9, 6106.2, 7945.43, 9672.17, 11279.95, 12762.8, 14115.07
ENDTABLE
FY_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 250.31, 481.36, 690.6, 876.93, 1039.87, 1179.33, 1295.5, 1388.8
 1, 493.11, 948.72, 1361.83, 1730.22, 2052.89, 2329.57, 2560.56, 2746.58
 1.5, 721.68, 1389.53, 1996.27, 2538.54, 3014.7, 3424.2, 3767.3, 4044.84
 2, 930.76, 1793.91, 2580.06, 3284.7, 3905.51, 4441.47, 4892.59, 5259.66
 2.5, 1116.96, 2155.31, 3103.81, 3956.89, 4711.4, 5365.76, 5919.54, 6373.24
 3, 1278.74, 2470.61, 3562.87, 4548.9, 5424.74, 6188.12, 6838.03, 7374.47
 3.5, 1416.23, 2739.82, 3956.83, 5059.72, 6043.73, 6905.85, 7644.41, 8258.78
 4, 1530.8, 2965.3, 4288.62, 5492.47, 6571.34, 7521.51, 8340.58, 9027.25
 4.5, 1624.63, 3150.95, 4563.44, 5853.16, 7013.97, 8041.48, 8932.61, 9685.35
 5, 1700.3, 3301.52, 4787.69, 6149.42, 7380.04, 8474.58, 9429.31, 10241.58
 5.5, 1760.46, 3421.92, 4968.2, 6389.56, 7678.91, 8830.8, 9840.96, 10706.13
 6, 1807.61, 3516.91, 5111.61, 6581.75, 7919.94, 9120.35, 10178.25, 11089.87
 6.5, 1844.03, 3590.79, 5224.03, 6733.63, 8112, 9353.01, 10451.59, 11403.54
 7, 1871.69, 3647.37, 5310.86, 6852.01, 8263.08, 9537.73, 10670.63, 11657.23
 7.5, 1892.25, 3689.86, 5376.76, 6942.81, 8380.2, 9682.45, 10844.04, 11860.14
 8, 1907.12, 3720.97, 5425.66, 7011.08, 8469.39, 9794.05, 10979.39, 12020.4
 8.5, 1917.43, 3742.93, 5460.81, 7061.02, 8535.74, 9878.38, 11083.2, 12145.04
 9, 1924.1, 3757.57, 5484.89, 7096.13, 8583.49, 9940.38, 11161, 12240.13
 9.5, 1927.89, 3766.37, 5500.11, 7119.29, 8616.15, 9984.14, 11217.43, 12310.76
 10, 1929.39, 3770.53, 5508.25, 7132.84, 8636.62, 10013.07, 11256.38, 12361.26
 10.5, 1929.1, 3771.01, 5510.74, 7138.69, 8647.26, 10029.97, 11281.04, 12395.19
 11, 1927.41, 3768.6, 5508.76, 7138.4, 8650.01, 10037.15, 11294.09, 12415.57
 11.5, 1924.61, 3763.91, 5503.25, 7133.24, 8646.43, 10036.49, 11297.7, 12424.85
 12, 1920.97, 3757.46, 5494.97, 7124.21, 8637.83, 10029.53, 11293.69, 12425.11
 12.5, 1916.68, 3749.64, 5484.53, 7112.15, 8625.23, 10017.55, 11283.54, 12418.03
 13, 1911.9, 3740.79, 5472.43, 7097.73, 8609.5, 10001.58, 11268.45, 12405.02
 13.5, 1906.76, 3731.15, 5459.07, 7081.5, 8591.32, 9982.46, 11249.45, 12387.23
 14, 1901.36, 3720.94, 5444.76, 7063.88, 8571.26, 9960.88, 11227.34, 12365.63
 14.5, 1895.78, 3710.33, 5429.77, 7045.24, 8549.78, 9937.41, 11202.8, 12341
 15, 1890.09, 3699.45, 5414.3, 7025.87, 8527.24, 9912.51, 11176.39, 12314
 15.5, 1884.34, 3688.4, 5398.53, 7005.99, 8503.95, 9886.55, 11148.57, 12285.16
 16, 1878.56, 3677.28, 5382.58, 6985.8, 8480.15, 9859.84, 11119.7, 12254.93
 16.5, 1872.8, 3666.16, 5366.57, 6965.45, 8456.05, 9832.64, 11090.09, 12223.68
 17, 1867.07, 3655.08, 5350.58, 6945.05, 8431.8, 9805.15, 11060.01, 12191.69
 17.5, 1861.41, 3644.08, 5334.68, 6924.71, 8407.54, 9777.53, 11029.64, 12159.23
 18, 1855.81, 3633.22, 5318.92, 6904.5, 8383.37, 9749.91, 10999.16, 12126.5
 18.5, 1850.3, 3622.49, 5303.35, 6884.49, 8359.36, 9722.41, 10968.7, 12093.67
 19, 1844.89, 3611.94, 5288, 6864.72, 8335.6, 9695.12, 10938.38, 12060.87
 19.5, 1839.57, 3601.57, 5272.89, 6845.23, 8312.12, 9668.1, 10908.28, 12028.2
 20, 1834.36, 3591.39, 5258.04, 6826.05, 8288.98, 9641.4, 10878.48, 11995.78
 20.5, 1829.25, 3581.41, 5243.46, 6807.19, 8266.2, 9615.07, 10849.02, 11963.66
 21, 1824.26, 3571.64, 5229.17, 6788.68, 8243.79, 9589.14, 10819.97, 11931.9
 21.5, 1819.37, 3562.07, 5215.17, 6770.52, 8221.79, 9563.64, 10791.34, 11900.55
 22, 1814.6, 3552.71, 5201.46, 6752.73, 8200.2, 9538.59, 10763.17, 11869.65
 22.5, 1809.93, 3543.56, 5188.04, 6735.29, 8179.03, 9513.98, 10735.47, 11839.22
 23, 1805.37, 3534.61, 5174.92, 6718.22, 8158.28, 9489.84, 10708.26, 11809.29
 23.5, 1800.92, 3525.87, 5162.08, 6701.51, 8137.96, 9466.17, 10681.54, 11779.86
 24, 1796.57, 3517.32, 5149.52, 6685.16, 8118.05, 9442.97, 10655.33, 11750.94
 24.5, 1792.32, 3508.97, 5137.25, 6669.17, 8098.56, 9420.23, 10629.61, 11722.55
 25, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
 26, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
ENDTABLE
FY_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 250.31, 481.36, 690.6, 876.93, 1039.87, 1179.33, 1295.5, 1388.8
 1, 493.11, 948.72, 1361.83, 1730.22, 2052.89, 2329.57, 2560.56, 2746.58
 1.5, 721.68, 1389.53, 1996.27, 2538.54, 3014.7, 3424.2, 3767.3, 4044.84
 2, 930.76, 1793.91, 2580.06, 3284.7, 3905.51, 4441.47, 4892.59, 5259.66
 2.5, 1116.96, 2155.31, 3103.81, 3956.89, 4711.4, 5365.76, 5919.54, 6373.24
 3, 1278.74, 2470.61, 3562.87, 4548.9, 5424.74, 6188.12, 6838.03, 7374.47
 3.5, 1416.23, 2739.82, 3956.83, 5059.72, 6043.73, 6905.85, 7644.41, 8258.78
 4, 1530.8, 2965.3, 4288.62, 5492.47, 6571.34, 7521.51, 8340.58, 9027.25
 4.5, 1624.63, 3150.95, 4563.44, 5853.16, 7013.97, 8041.48, 8932.61, 9685.35
 5, 1700.3, 3301.52, 4787.69, 6149.42, 7380.04, 8474.58, 9429.31, 10241.58
 5.5, 1760.46, 3421.92, 4968.2, 6389.56, 7678.91, 8830.8, 9840.96, 10706.13
 6, 1807.61, 3516.91, 5111.61, 6581.75, 7919.94, 9120.35, 10178.25, 11089.87
 6.5, 1844.03, 3590.79, 5224.03, 6733.63, 8112, 9353.01, 10451.59, 11403.54
 7, 1871.69, 3647.37, 5310.86, 6852.01, 8263.08, 9537.73, 10670.63, 11657.23
 7.5, 1892.25, 3689.86, 5376.76, 6942.81, 8380.2, 9682.45, 10844.04, 11860.14
 8, 1907.12, 3720.97, 5425.66, 7011.08, 8469.39, 9794.05, 10979.39, 12020.4
 8.5, 1917.43, 3742.93, 5460.81, 7061.02, 8535.74, 9878.38, 11083.2, 12145.04
 9, 1924.1, 3757.57, 5484.89, 7096.13, 8583.49, 9940.38, 11161, 12240.13
 9.5, 1927.89, 3766.37, 5500.11, 7119.29, 8616.15, 9984.14, 11217.43, 12310.76
 10, 1929.39, 3770.53, 5508.25, 7132.84, 8636.62, 10013.07, 11256.38, 12361.26
 10.5, 1929.1, 3771.01, 5510.74, 7138.69, 8647.26, 10029.97, 11281.04, 12395.19
 11, 1927.41, 3768.6, 5508.76, 7138.4, 8650.01, 10037.15, 11294.09, 12415.57
 11.5, 1924.61, 3763.91, 5503.25, 7133.24, 8646.43, 10036.49, 11297.7, 12424.85
 12, 1920.97, 3757.46, 5494.97, 7124.21, 8637.83, 10029.53, 11293.69, 12425.11
 12.5, 1916.68, 3749.64, 5484.53, 7112.15, 8625.23, 10017.55, 11283.54, 12418.03
 13, 1911.9, 3740.79, 5472.43, 7097.73, 8609.5, 10001.58, 11268.45, 12405.02
 13.5, 1906.76, 3731.15, 5459.07, 7081.5, 8591.32, 9982.46, 11249.45, 12387.23
 14, 1901.36, 3720.94, 5444.76, 7063.88, 8571.26, 9960.88, 11227.34, 12365.63
 14.5, 1895.78, 3710.33, 5429.77, 7045.24, 8549.78, 9937.41, 11202.8, 12341
 15, 1890.09, 3699.45, 5414.3, 7025.87, 8527.24, 9912.51, 11176.39, 12314
 15.5, 1884.34, 3688.4, 5398.53, 7005.99, 8503.95, 9886.55, 11148.57, 12285.16
 16, 1878.56, 3677.28, 5382.58, 6985.8, 8480.15, 9859.84, 11119.7, 12254.93
 16.5, 1872.8, 3666.16, 5366.57, 6965.45, 8456.05, 9832.64, 11090.09, 12223.68
 17, 1867.07, 3655.08, 5350.58, 6945.05, 8431.8, 9805.15, 11060.01, 12191.69
 17.5, 1861.41, 3644.08, 5334.68, 6924.71, 8407.54, 9777.53, 11029.64, 12159.23
 18, 1855.81, 3633.22, 5318.92, 6904.5, 8383.37, 9749.91, 10999.16, 12126.5
 18.5, 1850.3, 3622.49, 5303.35, 6884.49, 8359.36, 9722.41, 10968.7, 12093.67
 19, 1844.89, 3611.94, 5288, 6864.72, 8335.6, 9695.12, 10938.38, 12060.87
 19.5, 1839.57, 3601.57, 5272.89, 6845.23, 8312.12, 9668.1, 10908.28, 12028.2
 20, 1834.36, 3591.39, 5258.04, 6826.05, 8288.98, 9641.4, 10878.48, 11995.78
 20.5, 1829.25, 3581.41, 5243.46, 6807.19, 8266.2, 9615.07, 10849.02, 11963.66
 21, 1824.26, 3571.64, 5229.17, 6788.68, 8243.79, 9589.14, 10819.97, 11931.9
 21.5, 1819.37, 3562.07, 5215.17, 6770.52, 8221.79, 9563.64, 10791.34, 11900.55
 22, 1814.6, 3552.71, 5201.46, 6752.73, 8200.2, 9538.59, 10763.17, 11869.65
 22.5, 1809.93, 3543.56, 5188.04, 6735.29, 8179.03, 9513.98, 10735.47, 11839.22
 23, 1805.37, 3534.61, 5174.92, 6718.22, 8158.28, 9489.84, 10708.26, 11809.29
 23.5, 1800.92, 3525.87, 5162.08, 6701.51, 8137.96, 9466.17, 10681.54, 11779.86
 24, 1796.57, 3517.32, 5149.52, 6685.16, 8118.05, 9442.97, 10655.33, 11750.94
 24.5, 1792.32, 3508.97, 5137.25, 6669.17, 8098.56, 9420.23, 10629.61, 11722.55
 25, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
 26, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
ENDTABLE
FY_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 250.31, 481.36, 690.6, 876.93, 1039.87, 1179.33, 1295.5, 1388.8
 1, 493.11, 948.72, 1361.83, 1730.22, 2052.89, 2329.57, 2560.56, 2746.58
 1.5, 721.68, 1389.53, 1996.27, 2538.54, 3014.7, 3424.2, 3767.3, 4044.84
 2, 930.76, 1793.91, 2580.06, 3284.7, 3905.51, 4441.47, 4892.59, 5259.66
 2.5, 1116.96, 2155.31, 3103.81, 3956.89, 4711.4, 5365.76, 5919.54, 6373.24
 3, 1278.74, 2470.61, 3562.87, 4548.9, 5424.74, 6188.12, 6838.03, 7374.47
 3.5, 1416.23, 2739.82, 3956.83, 5059.72, 6043.73, 6905.85, 7644.41, 8258.78
 4, 1530.8, 2965.3, 4288.62, 5492.47, 6571.34, 7521.51, 8340.58, 9027.25
 4.5, 1624.63, 3150.95, 4563.44, 5853.16, 7013.97, 8041.48, 8932.61, 9685.35
 5, 1700.3, 3301.52, 4787.69, 6149.42, 7380.04, 8474.58, 9429.31, 10241.58
 5.5, 1760.46, 3421.92, 4968.2, 6389.56, 7678.91, 8830.8, 9840.96, 10706.13
 6, 1807.61, 3516.91, 5111.61, 6581.75, 7919.94, 9120.35, 10178.25, 11089.87
 6.5, 1844.03, 3590.79, 5224.03, 6733.63, 8112, 9353.01, 10451.59, 11403.54
 7, 1871.69, 3647.37, 5310.86, 6852.01, 8263.08, 9537.73, 10670.63, 11657.23
 7.5, 1892.25, 3689.86, 5376.76, 6942.81, 8380.2, 9682.45, 10844.04, 11860.14
 8, 1907.12, 3720.97, 5425.66, 7011.08, 8469.39, 9794.05, 10979.39, 12020.4
 8.5, 1917.43, 3742.93, 5460.81, 7061.02, 8535.74, 9878.38, 11083.2, 12145.04
 9, 1924.1, 3757.57, 5484.89, 7096.13, 8583.49, 9940.38, 11161, 12240.13
 9.5, 1927.89, 3766.37, 5500.11, 7119.29, 8616.15, 9984.14, 11217.43, 12310.76
 10, 1929.39, 3770.53, 5508.25, 7132.84, 8636.62, 10013.07, 11256.38, 12361.26
 10.5, 1929.1, 3771.01, 5510.74, 7138.69, 8647.26, 10029.97, 11281.04, 12395.19
 11, 1927.41, 3768.6, 5508.76, 7138.4, 8650.01, 10037.15, 11294.09, 12415.57
 11.5, 1924.61, 3763.91, 5503.25, 7133.24, 8646.43, 10036.49, 11297.7, 12424.85
 12, 1920.97, 3757.46, 5494.97, 7124.21, 8637.83, 10029.53, 11293.69, 12425.11
 12.5, 1916.68, 3749.64, 5484.53, 7112.15, 8625.23, 10017.55, 11283.54, 12418.03
 13, 1911.9, 3740.79, 5472.43, 7097.73, 8609.5, 10001.58, 11268.45, 12405.02
 13.5, 1906.76, 3731.15, 5459.07, 7081.5, 8591.32, 9982.46, 11249.45, 12387.23
 14, 1901.36, 3720.94, 5444.76, 7063.88, 8571.26, 9960.88, 11227.34, 12365.63
 14.5, 1895.78, 3710.33, 5429.77, 7045.24, 8549.78, 9937.41, 11202.8, 12341
 15, 1890.09, 3699.45, 5414.3, 7025.87, 8527.24, 9912.51, 11176.39, 12314
 15.5, 1884.34, 3688.4, 5398.53, 7005.99, 8503.95, 9886.55, 11148.57, 12285.16
 16, 1878.56, 3677.28, 5382.58, 6985.8, 8480.15, 9859.84, 11119.7, 12254.93
 16.5, 1872.8, 3666.16, 5366.57, 6965.45, 8456.05, 9832.64, 11090.09, 12223.68
 17, 1867.07, 3655.08, 5350.58, 6945.05, 8431.8, 9805.15, 11060.01, 12191.69
 17.5, 1861.41, 3644.08, 5334.68, 6924.71, 8407.54, 9777.53, 11029.64, 12159.23
 18, 1855.81, 3633.22, 5318.92, 6904.5, 8383.37, 9749.91, 10999.16, 12126.5
 18.5, 1850.3, 3622.49, 5303.35, 6884.49, 8359.36, 9722.41, 10968.7, 12093.67
 19, 1844.89, 3611.94, 5288, 6864.72, 8335.6, 9695.12, 10938.38, 12060.87
 19.5, 1839.57, 3601.57, 5272.89, 6845.23, 8312.12, 9668.1, 10908.28, 12028.2
 20, 1834.36, 3591.39, 5258.04, 6826.05, 8288.98, 9641.4, 10878.48, 11995.78
 20.5, 1829.25, 3581.41, 5243.46, 6807.19, 8266.2, 9615.07, 10849.02, 11963.66
 21, 1824.26, 3571.64, 5229.17, 6788.68, 8243.79, 9589.14, 10819.97, 11931.9
 21.5, 1819.37, 3562.07, 5215.17, 6770.52, 8221.79, 9563.64, 10791.34, 11900.55
 22, 1814.6, 3552.71, 5201.46, 6752.73, 8200.2, 9538.59, 10763.17, 11869.65
 22.5, 1809.93, 3543.56, 5188.04, 6735.29, 8179.03, 9513.98, 10735.47, 11839.22
 23, 1805.37, 3534.61, 5174.92, 6718.22, 8158.28, 9489.84, 10708.26, 11809.29
 23.5, 1800.92, 3525.87, 5162.08, 6701.51, 8137.96, 9466.17, 10681.54, 11779.86
 24, 1796.57, 3517.32, 5149.52, 6685.16, 8118.05, 9442.97, 10655.33, 11750.94
 24.5, 1792.32, 3508.97, 5137.25, 6669.17, 8098.56, 9420.23, 10629.61, 11722.55
 25, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
 26, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
ENDTABLE
FY_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 250.31, 481.36, 690.6, 876.93, 1039.87, 1179.33, 1295.5, 1388.8
 1, 493.11, 948.72, 1361.83, 1730.22, 2052.89, 2329.57, 2560.56, 2746.58
 1.5, 721.68, 1389.53, 1996.27, 2538.54, 3014.7, 3424.2, 3767.3, 4044.84
 2, 930.76, 1793.91, 2580.06, 3284.7, 3905.51, 4441.47, 4892.59, 5259.66
 2.5, 1116.96, 2155.31, 3103.81, 3956.89, 4711.4, 5365.76, 5919.54, 6373.24
 3, 1278.74, 2470.61, 3562.87, 4548.9, 5424.74, 6188.12, 6838.03, 7374.47
 3.5, 1416.23, 2739.82, 3956.83, 5059.72, 6043.73, 6905.85, 7644.41, 8258.78
 4, 1530.8, 2965.3, 4288.62, 5492.47, 6571.34, 7521.51, 8340.58, 9027.25
 4.5, 1624.63, 3150.95, 4563.44, 5853.16, 7013.97, 8041.48, 8932.61, 9685.35
 5, 1700.3, 3301.52, 4787.69, 6149.42, 7380.04, 8474.58, 9429.31, 10241.58
 5.5, 1760.46, 3421.92, 4968.2, 6389.56, 7678.91, 8830.8, 9840.96, 10706.13
 6, 1807.61, 3516.91, 5111.61, 6581.75, 7919.94, 9120.35, 10178.25, 11089.87
 6.5, 1844.03, 3590.79, 5224.03, 6733.63, 8112, 9353.01, 10451.59, 11403.54
 7, 1871.69, 3647.37, 5310.86, 6852.01, 8263.08, 9537.73, 10670.63, 11657.23
 7.5, 1892.25, 3689.86, 5376.76, 6942.81, 8380.2, 9682.45, 10844.04, 11860.14
 8, 1907.12, 3720.97, 5425.66, 7011.08, 8469.39, 9794.05, 10979.39, 12020.4
 8.5, 1917.43, 3742.93, 5460.81, 7061.02, 8535.74, 9878.38, 11083.2, 12145.04
 9, 1924.1, 3757.57, 5484.89, 7096.13, 8583.49, 9940.38, 11161, 12240.13
 9.5, 1927.89, 3766.37, 5500.11, 7119.29, 8616.15, 9984.14, 11217.43, 12310.76
 10, 1929.39, 3770.53, 5508.25, 7132.84, 8636.62, 10013.07, 11256.38, 12361.26
 10.5, 1929.1, 3771.01, 5510.74, 7138.69, 8647.26, 10029.97, 11281.04, 12395.19
 11, 1927.41, 3768.6, 5508.76, 7138.4, 8650.01, 10037.15, 11294.09, 12415.57
 11.5, 1924.61, 3763.91, 5503.25, 7133.24, 8646.43, 10036.49, 11297.7, 12424.85
 12, 1920.97, 3757.46, 5494.97, 7124.21, 8637.83, 10029.53, 11293.69, 12425.11
 12.5, 1916.68, 3749.64, 5484.53, 7112.15, 8625.23, 10017.55, 11283.54, 12418.03
 13, 1911.9, 3740.79, 5472.43, 7097.73, 8609.5, 10001.58, 11268.45, 12405.02
 13.5, 1906.76, 3731.15, 5459.07, 7081.5, 8591.32, 9982.46, 11249.45, 12387.23
 14, 1901.36, 3720.94, 5444.76, 7063.88, 8571.26, 9960.88, 11227.34, 12365.63
 14.5, 1895.78, 3710.33, 5429.77, 7045.24, 8549.78, 9937.41, 11202.8, 12341
 15, 1890.09, 3699.45, 5414.3, 7025.87, 8527.24, 9912.51, 11176.39, 12314
 15.5, 1884.34, 3688.4, 5398.53, 7005.99, 8503.95, 9886.55, 11148.57, 12285.16
 16, 1878.56, 3677.28, 5382.58, 6985.8, 8480.15, 9859.84, 11119.7, 12254.93
 16.5, 1872.8, 3666.16, 5366.57, 6965.45, 8456.05, 9832.64, 11090.09, 12223.68
 17, 1867.07, 3655.08, 5350.58, 6945.05, 8431.8, 9805.15, 11060.01, 12191.69
 17.5, 1861.41, 3644.08, 5334.68, 6924.71, 8407.54, 9777.53, 11029.64, 12159.23
 18, 1855.81, 3633.22, 5318.92, 6904.5, 8383.37, 9749.91, 10999.16, 12126.5
 18.5, 1850.3, 3622.49, 5303.35, 6884.49, 8359.36, 9722.41, 10968.7, 12093.67
 19, 1844.89, 3611.94, 5288, 6864.72, 8335.6, 9695.12, 10938.38, 12060.87
 19.5, 1839.57, 3601.57, 5272.89, 6845.23, 8312.12, 9668.1, 10908.28, 12028.2
 20, 1834.36, 3591.39, 5258.04, 6826.05, 8288.98, 9641.4, 10878.48, 11995.78
 20.5, 1829.25, 3581.41, 5243.46, 6807.19, 8266.2, 9615.07, 10849.02, 11963.66
 21, 1824.26, 3571.64, 5229.17, 6788.68, 8243.79, 9589.14, 10819.97, 11931.9
 21.5, 1819.37, 3562.07, 5215.17, 6770.52, 8221.79, 9563.64, 10791.34, 11900.55
 22, 1814.6, 3552.71, 5201.46, 6752.73, 8200.2, 9538.59, 10763.17, 11869.65
 22.5, 1809.93, 3543.56, 5188.04, 6735.29, 8179.03, 9513.98, 10735.47, 11839.22
 23, 1805.37, 3534.61, 5174.92, 6718.22, 8158.28, 9489.84, 10708.26, 11809.29
 23.5, 1800.92, 3525.87, 5162.08, 6701.51, 8137.96, 9466.17, 10681.54, 11779.86
 24, 1796.57, 3517.32, 5149.52, 6685.16, 8118.05, 9442.97, 10655.33, 11750.94
 24.5, 1792.32, 3508.97, 5137.25, 6669.17, 8098.56, 9420.23, 10629.61, 11722.55
 25, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
 26, 1788.17, 3500.82, 5125.25, 6653.52, 8079.48, 9397.95, 10604.39, 11694.68
ENDTABLE
FY_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(4) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(4) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(4) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(4) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 32 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, right, inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, outer
FZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, outer
FZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 502 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 502 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,1) 502 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, inner
FZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,2) 502 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, outer
FZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,1) 502 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, inner
FZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,2) 502 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, outer
FZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1,1) 330 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, left, inner
FZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2,1) 330 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, right, inner
FZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,1) 330 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, left, inner
FZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,1) 330 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, right, inner
FZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, left, inner
FZ_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, right, inner
FZ_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, left, inner
FZ_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, left, outer
FZ_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, right, inner
FZ_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, right, outer
FZ_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 16 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 148, 0
 149, 0
 150, 10000
ENDTABLE
F_JNC_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,1,1) LINEAR ! unit 4, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,1,2) LINEAR ! unit 4, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(4,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(4,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 16 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 -110, -10000
 -109, 0
 -108, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,1,1) LINEAR ! unit 4, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,1,2) LINEAR ! unit 4, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,2,1) LINEAR ! unit 4, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(4,2,2) LINEAR ! unit 4, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(4,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(4,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(2,1) 0.05902776548 ! Coefficient: pitman arm angle per unit
                                        ! steering gear input angle (deg/deg), unit
                                        ! 2, axle 1
GEAR_ROT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(3,1) 0.04444444444 ! Coefficient: pitman arm angle per unit
                                        ! steering gear input angle (deg/deg), unit
                                        ! 3, axle 1
GEAR_ROT_GAIN(3,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(4,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 4, axle 1
GEAR_ROT_GAIN(4,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

GEAR_TRANS_CONSTANT(1) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(2) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(3) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(3)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(3) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(4) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(4)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(4) 0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.0084852815
 0.1, 0.0084012685
 0.2, 0.0083189025
 0.3, 0.0082380885
 0.4, 0.008158069
 0.5, 0.0080733285
 0.6, 0.0079565795
 0.7, 0.007706162
 0.8, 0.007013131
 0.9, 0.005070318
 0.95, 0.003109434
 0.99, 0.0007382575
 1, 0
 1.01, -0.0007382575
 1.05, -0.003109434
 1.1, -0.005070318
 1.2, -0.007013131
 1.3, -0.007706162
 1.4, -0.0079565795
 1.5, -0.0080733285
 1.6, -0.008158069
 1.7, -0.0082380885
 1.8, -0.0083189025
 1.9, -0.0084852815
 2, -0.0084852815
ENDTABLE
INV_CAP_TC_GAIN(2)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(2) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(2) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(2) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.00819756
 0.1, 0.0081164
 0.2, 0.00803682
 0.3, 0.00795875
 0.4, 0.00788144
 0.5, 0.00779958
 0.6, 0.00768679
 0.7, 0.00744486
 0.8, 0.00677533
 0.9, 0.00489839
 0.95, 0.003004
 0.99, 0.000713225
 1, 0
 1.01, -0.000713225
 1.05, -0.003004
 1.1, -0.00489839
 1.2, -0.00677533
 1.3, -0.00744486
 1.4, -0.00768679
 1.5, -0.00779958
 1.6, -0.00788144
 1.7, -0.00795875
 1.8, -0.00803682
 1.9, -0.00819756
 2, -0.00819756
ENDTABLE
INV_CAP_TC_GAIN(3)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(3) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(3) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(3) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE(4) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.010583005
 0.1, 0.010478223
 0.2, 0.010375494
 0.3, 0.010274702
 0.4, 0.0101749
 0.5, 0.01006921
 0.6, 0.009923598
 0.7, 0.009611272
 0.8, 0.008746911
 0.9, 0.006323798
 0.95, 0.003878145
 0.99, 0.000920769
 1, 0
 1.01, -0.000920769
 1.05, -0.003878145
 1.1, -0.006323798
 1.2, -0.008746911
 1.3, -0.009611272
 1.4, -0.009923598
 1.5, -0.01006921
 1.6, -0.0101749
 1.7, -0.010274702
 1.8, -0.010375494
 1.9, -0.010583005
 2, -0.010583005
ENDTABLE
INV_CAP_TC_GAIN(4)  1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET(4) 0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                       ! converter capacity)
RSPIN_START_INV_CAP_TC(4) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC(4) 1 ! Scale factor divided into (speed ratio -
                            ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IVEHICLE is used to identify the dataset when reading data.

ISHAFT_KIN_COEFFICIENT(1) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(1)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(1) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(2) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(2)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(2) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(3) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(3)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(3) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(4) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(4)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(4) 0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 32 datasets; if indices shown
! below are not used, e.g., (1,1,1,2), the current values of the indices IUNIT,
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, left, inner
KGAMMA_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, right, inner
KGAMMA_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, inner
KGAMMA_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, outer
KGAMMA_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, inner
KGAMMA_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, outer
KGAMMA_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,1,1) SPLINE ! unit 2, axle 2, left, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,1,2) SPLINE ! unit 2, axle 2, left, outer
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,2,1) SPLINE ! unit 2, axle 2, right, inner
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2,2,2) SPLINE ! unit 2, axle 2, right, outer
 0, 0
 784.532, -5.3499
 1569.064, -11.1711
 2353.596, -17.1934
 3138.128, -23.3524
 3922.66, -29.616
 4707.192, -35.965
 5491.724, -42.3862
 6276.256, -48.8703
 7060.788, -55.4101
 7845.32, -62
 8629.852, -68.6354
 9414.384, -75.3126
 10198.916, -82.0284
 10983.448, -88.7802
 11767.98, -95.5655
 12552.512, -102.3825
 13337.044, -109.2292
 14121.576, -116.1042
 14906.108, -123.006
 15690.64, -129.9333
ENDTABLE
KGAMMA_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,1,1,1) SPLINE ! unit 3, axle 1, left, inner
 0, 0
 784.532, -7.2276
 1569.064, -13.0328
 2353.596, -18.4315
 3138.128, -23.5889
 3922.66, -28.5774
 4707.192, -33.4374
 5491.724, -38.1943
 6276.256, -42.8657
 7060.788, -47.4644
 7845.32, -52
 8629.852, -56.48
 9414.384, -60.9104
 10198.916, -65.2962
 10983.448, -69.6414
 11767.98, -73.9496
 12552.512, -78.2236
 13337.044, -82.4661
 14121.576, -86.6792
 14906.108, -90.8649
 15690.64, -95.0248
ENDTABLE
KGAMMA_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,1,2,1) SPLINE ! unit 3, axle 1, right, inner
 0, 0
 784.532, -7.2276
 1569.064, -13.0328
 2353.596, -18.4315
 3138.128, -23.5889
 3922.66, -28.5774
 4707.192, -33.4374
 5491.724, -38.1943
 6276.256, -42.8657
 7060.788, -47.4644
 7845.32, -52
 8629.852, -56.48
 9414.384, -60.9104
 10198.916, -65.2962
 10983.448, -69.6414
 11767.98, -73.9496
 12552.512, -78.2236
 13337.044, -82.4661
 14121.576, -86.6792
 14906.108, -90.8649
 15690.64, -95.0248
ENDTABLE
KGAMMA_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,2,1,1) SPLINE ! unit 3, axle 2, left, inner
 0, 0
 784.532, -7.2276
 1569.064, -13.0328
 2353.596, -18.4315
 3138.128, -23.5889
 3922.66, -28.5774
 4707.192, -33.4374
 5491.724, -38.1943
 6276.256, -42.8657
 7060.788, -47.4644
 7845.32, -52
 8629.852, -56.48
 9414.384, -60.9104
 10198.916, -65.2962
 10983.448, -69.6414
 11767.98, -73.9496
 12552.512, -78.2236
 13337.044, -82.4661
 14121.576, -86.6792
 14906.108, -90.8649
 15690.64, -95.0248
ENDTABLE
KGAMMA_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(3,2,2,1) SPLINE ! unit 3, axle 2, right, inner
 0, 0
 784.532, -7.2276
 1569.064, -13.0328
 2353.596, -18.4315
 3138.128, -23.5889
 3922.66, -28.5774
 4707.192, -33.4374
 5491.724, -38.1943
 6276.256, -42.8657
 7060.788, -47.4644
 7845.32, -52
 8629.852, -56.48
 9414.384, -60.9104
 10198.916, -65.2962
 10983.448, -69.6414
 11767.98, -73.9496
 12552.512, -78.2236
 13337.044, -82.4661
 14121.576, -86.6792
 14906.108, -90.8649
 15690.64, -95.0248
ENDTABLE
KGAMMA_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, left, inner
KGAMMA_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, right, inner
KGAMMA_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, left, inner
KGAMMA_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, left, outer
KGAMMA_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, right, inner
KGAMMA_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, right, outer
KGAMMA_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.75s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! 0.75s Single Preview
LTARG_CONSTANT(2)   0 ; m ! Constant lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(3)         3  ! 0.75s Single Preview
LTARG_CONSTANT(3)   0 ; m ! Constant lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(4)         4  ! 0.75s Single Preview
LTARG_CONSTANT(4)   0 ; m ! Constant lateral offset
LTARG_OFFSET(4)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 32
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 85 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 1, left, inner
L_CONTACT_X_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 85 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 1, right, inner
L_CONTACT_X_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,1) 85 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 2, left, inner
L_CONTACT_X_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,2) 85 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 2, left, outer
L_CONTACT_X_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,1) 85 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 2, right, inner
L_CONTACT_X_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,2) 85 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 2, right, outer
L_CONTACT_X_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,1,1) 90 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 1, left, inner
L_CONTACT_X_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,2,1) 90 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 1, right, inner
L_CONTACT_X_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,1) 90 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 2, left, inner
L_CONTACT_X_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,1) 90 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 2, right, inner
L_CONTACT_X_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact length
L_CONTACT_X_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(4,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(4,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(4,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(4,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(4,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(4,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 32
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 265 ; mm ! Constant tire contact width, unit 2, axle
                                  ! 1, left, inner
L_CONTACT_Y_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 265 ; mm ! Constant tire contact width, unit 2, axle
                                  ! 1, right, inner
L_CONTACT_Y_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,1) 265 ; mm ! Constant tire contact width, unit 2, axle
                                  ! 2, left, inner
L_CONTACT_Y_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,2) 265 ; mm ! Constant tire contact width, unit 2, axle
                                  ! 2, left, outer
L_CONTACT_Y_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,1) 265 ; mm ! Constant tire contact width, unit 2, axle
                                  ! 2, right, inner
L_CONTACT_Y_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,2) 265 ; mm ! Constant tire contact width, unit 2, axle
                                  ! 2, right, outer
L_CONTACT_Y_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,1,1) 215 ; mm ! Constant tire contact width, unit 3, axle
                                  ! 1, left, inner
L_CONTACT_Y_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,2,1) 215 ; mm ! Constant tire contact width, unit 3, axle
                                  ! 1, right, inner
L_CONTACT_Y_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,1) 215 ; mm ! Constant tire contact width, unit 3, axle
                                  ! 2, left, inner
L_CONTACT_Y_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,1) 215 ; mm ! Constant tire contact width, unit 3, axle
                                  ! 2, right, inner
L_CONTACT_Y_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get tire
                            ! contact width
L_CONTACT_Y_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 32 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1,1) LINEAR ! unit 1, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2,1) LINEAR ! unit 1, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,1) LINEAR ! unit 1, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,2) LINEAR ! unit 1, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,1) LINEAR ! unit 1, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,2) LINEAR ! unit 1, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,1) 0.0786 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,1) LINEAR ! unit 2, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,1) 0.0786 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,1) LINEAR ! unit 2, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,1) 0.0786 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,1) LINEAR ! unit 2, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,2) 0.0786 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,2) LINEAR ! unit 2, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,1) 0.0786 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,1) LINEAR ! unit 2, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,2) 0.0786 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,2) LINEAR ! unit 2, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1,1) 0.0658 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1,1) LINEAR ! unit 3, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2,1) 0.0658 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2,1) LINEAR ! unit 3, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,1) 0.0658 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,1) LINEAR ! unit 3, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,1) 0.0658 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,1) LINEAR ! unit 3, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,1,1) SPLINE_FLAT ! unit 4, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,1,1) LINEAR ! unit 4, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,2,1) SPLINE_FLAT ! unit 4, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,2,1) LINEAR ! unit 4, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,1,1) SPLINE_FLAT ! unit 4, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,1,1) LINEAR ! unit 4, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,1,2) SPLINE_FLAT ! unit 4, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,1,2) LINEAR ! unit 4, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,2,1) SPLINE_FLAT ! unit 4, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,2,1) LINEAR ! unit 4, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,2,2) SPLINE_FLAT ! unit 4, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,2,2) LINEAR ! unit 4, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 32 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1,1) SPLINE ! unit 1, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2,1) SPLINE ! unit 1, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,1) SPLINE ! unit 1, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,2) SPLINE ! unit 1, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,1) SPLINE ! unit 1, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,2) SPLINE ! unit 1, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,1) 0.786 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,1) 0.786 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,1) 0.786 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,1) SPLINE ! unit 2, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,2) 0.786 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,2) SPLINE ! unit 2, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,1) 0.786 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,1) SPLINE ! unit 2, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,1) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,2) 0.786 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,2) SPLINE ! unit 2, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,2) 11500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1,1) 0.658 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1,1) SPLINE ! unit 3, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2,1) 0.658 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2,1) SPLINE ! unit 3, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,1) 0.658 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,1) SPLINE ! unit 3, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,1) 0.658 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,1) SPLINE ! unit 3, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,1,1) SPLINE_FLAT ! unit 4, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,1,1) SPLINE ! unit 4, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,2,1) SPLINE_FLAT ! unit 4, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,2,1) SPLINE ! unit 4, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,1,1) SPLINE_FLAT ! unit 4, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,1,1) SPLINE ! unit 4, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,1,2) SPLINE_FLAT ! unit 4, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,1,2) SPLINE ! unit 4, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,2,1) SPLINE_FLAT ! unit 4, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,2,1) SPLINE ! unit 4, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,2,2) SPLINE_FLAT ! unit 4, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,2,2) SPLINE ! unit 4, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(1) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 27.8, 74.2, 129.9, 185.6, 222.7, 278.4, 334.1, 389.8, 436.2, 482.6
 1000, -18.6, 43.7, 105.9, 168.2, 230.4, 292.7, 355, 417.2, 479.5, 541.7, 604
 1200, -22.3, 44.5, 111.4, 178.2, 245, 311.8, 378.6, 445.5, 512.3, 579.1, 645.9
 1400, -26, 45.1, 116.1, 187.2, 258.2, 329.3, 400.3, 471.4, 542.4, 613.5, 684.5
 1600, -29.7, 43.7, 117.2, 190.6, 264, 337.4, 410.9, 484.3, 557.7, 631.1, 704.6
 1800, -33.4, 40.4, 114.2, 188, 261.8, 335.6, 409.4, 483.2, 557, 630.8, 704.6
 2000, -37.1, 34.8, 106.7, 178.6, 250.5, 322.4, 394.3, 466.2, 538.1, 610, 681.9
 2200, -40.8, 29.2, 99.2, 169.2, 239.2, 309.2, 379.2, 449.2, 519.3, 589.3, 659.3
 2400, -44.5, 23.3, 91.2, 159.1, 227, 294.9, 362.8, 430.7, 498.6, 566.5, 634.4
 2600, -48.3, 17.5, 83.2, 149, 214.7, 280.5, 346.2, 411.9, 477.7, 543.4, 609.2
 2800, -52, 11.5, 75.1, 138.6, 202.1, 265.6, 329.1, 392.6, 456.1, 519.7, 583.2
 3000, -55.7, 5.6, 66.9, 128.2, 189.5, 250.8, 312, 373.3, 434.6, 495.9, 557.2
 3100, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7
 3150, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2
ENDTABLE
MENGINE_GAIN(1)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(1)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(1) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(1) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(1) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(1) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(2) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 5, 15, 20, 30, 40, 60, 75, 90, 98, 100
 500, 25, 30, 40, 60, 80, 120, 150, 180, 196, 200
 600, 10, 45, 60, 90, 120, 180, 225, 270, 294, 300
 800, -15, 59.25, 79, 118.5, 158, 237, 296.25, 355.5, 387.1, 395
 1000, -25, 75, 100, 150, 200, 300, 375, 450, 490, 500
 1200, -40, 97.5, 130, 195, 260, 390, 487.5, 585, 637, 650
 1400, -50, 108.75, 145, 217.5, 290, 435, 543.75, 652.5, 710.5, 725
 1600, -65, 123.75, 165, 247.5, 330, 495, 618.75, 742.5, 808.5, 825
 1800, -90, 135, 180, 270, 360, 540, 675, 810, 882, 900
 2000, -105, 133.5, 178, 267, 356, 534, 667.5, 801, 872.2, 890
 2200, -125, 133.2, 177.6, 266.4, 355.2, 532.8, 666, 799.2, 870.24, 888
 2400, -150, 131.25, 175, 262.5, 350, 525, 656.25, 787.5, 857.5, 875
 2600, -170, 127.5, 170, 255, 340, 510, 637.5, 765, 833, 850
 2800, -190, 126, 168, 252, 336, 504, 630, 756, 823.2, 840
 3000, -210, 124.5, 166, 249, 332, 498, 622.5, 747, 813.4, 830
 3200, -225, 120, 160, 240, 320, 480, 600, 720, 784, 800
 3400, -230, 105, 140, 210, 280, 420, 525, 630, 686, 700
 3600, -240, 82.5, 110, 165, 220, 330, 412.5, 495, 539, 550
 4000, -250, 75, 100, 150, 200, 300, 375, 450, 490, 500
 4400, -275, -275, -275, -275, -275, -275, -275, -275, -275, -275
 4500, -280, -280, -280, -280, -280, -280, -280, -280, -280, -280
ENDTABLE
MENGINE_GAIN(2)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(2)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(2) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(2) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(2) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(2) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET(3) 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 508, 33, 101.48, 135.16, 137.91, 139.47, 140.24, 140.51, 140.57, 140.61, 140.57
 617, 39.6, 123.83, 186.22, 198.86, 200.89, 201.71, 202, 202.03, 202.03, 202.03
 725, 0, 116.94, 196.72, 214.19, 218.83, 220.51, 221.13, 221.18, 221.17, 221.15
 1083, -13.2, 94.17, 231.45, 264.88, 278.15, 282.69, 284.38, 284.54, 284.5, 284.38
 1442, -19.8, 62.82, 223.08, 277.2, 294.86, 302.87, 306.78, 307.69, 308.29, 314.16
 1800, -22.44, 34.32, 198, 282.13, 311.58, 323.05, 329.18, 330.85, 332.08, 340.56
 2158, -26.89, 13.2, 156.87, 271.56, 316.8, 343.2, 347.16, 351.12, 355.08, 363.84
 2517, -33.76, -8.54, 108.4, 242.77, 319.44, 355.99, 365.64, 372.32, 376.2, 382.8
 2875, -40.18, -20.21, 75.21, 204.67, 310.83, 359.87, 380.3, 385.44, 393.36, 399.96
 3233, -45.85, -29.41, 50.22, 163.32, 297.93, 356.4, 382.8, 393.36, 401.28, 409.2
 3592, -51.42, -37.47, 31.31, 128.71, 268.05, 345.84, 384.12, 396, 405.24, 413.16
 3950, -57.02, -44.95, 15.74, 101.9, 232.47, 331.5, 380.16, 394.68, 403.92, 409.2
 4308, -62.94, -52.5, 0.37, 76.6, 200.32, 316.39, 373.56, 386.76, 396, 403.84
 4667, -69.1, -60.01, -13.29, 54.92, 166.75, 293.75, 363, 376.2, 389.4, 396
 5025, -75.65, -67.43, -25.45, 35.99, 136.87, 265.28, 349.8, 363, 376.2, 382.8
 5383, -82.23, -74.99, -36.71, 19.26, 111.36, 235.45, 329.12, 341.88, 359.52, 363.32
 5742, -89.59, -82.89, -47.62, 3.76, 88.26, 204.37, 295.22, 315.36, 324.81, 328.55
 6100, -97.61, -91.21, -58.51, -10.89, 67.17, 174.21, 258.48, 277.23, 286.03, 289.4
 6500, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92, -106.92
 6700, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24, -108.24
ENDTABLE
MENGINE_GAIN(3)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(3)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(3) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(3) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(3) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(3) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(4) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 27.8, 74.2, 129.9, 185.6, 222.7, 278.4, 334.1, 389.8, 436.2, 482.6
 1000, -18.6, 43.7, 105.9, 168.2, 230.4, 292.7, 355, 417.2, 479.5, 541.7, 604
 1200, -22.3, 44.5, 111.4, 178.2, 245, 311.8, 378.6, 445.5, 512.3, 579.1, 645.9
 1400, -26, 45.1, 116.1, 187.2, 258.2, 329.3, 400.3, 471.4, 542.4, 613.5, 684.5
 1600, -29.7, 43.7, 117.2, 190.6, 264, 337.4, 410.9, 484.3, 557.7, 631.1, 704.6
 1800, -33.4, 40.4, 114.2, 188, 261.8, 335.6, 409.4, 483.2, 557, 630.8, 704.6
 2000, -37.1, 34.8, 106.7, 178.6, 250.5, 322.4, 394.3, 466.2, 538.1, 610, 681.9
 2200, -40.8, 29.2, 99.2, 169.2, 239.2, 309.2, 379.2, 449.2, 519.3, 589.3, 659.3
 2400, -44.5, 23.3, 91.2, 159.1, 227, 294.9, 362.8, 430.7, 498.6, 566.5, 634.4
 2600, -48.3, 17.5, 83.2, 149, 214.7, 280.5, 346.2, 411.9, 477.7, 543.4, 609.2
 2800, -52, 11.5, 75.1, 138.6, 202.1, 265.6, 329.1, 392.6, 456.1, 519.7, 583.2
 3000, -55.7, 5.6, 66.9, 128.2, 189.5, 250.8, 312, 373.3, 434.6, 495.9, 557.2
 3100, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7
 3150, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2
ENDTABLE
MENGINE_GAIN(4)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(4)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(4) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(4) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(4) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(4) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

MODE_TRANS_CONSTANT(1) 7 ; - ! Constant transmission mode
MODE_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(2) 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(3) 6 ; - ! Constant transmission mode
MODE_TRANS_GAIN(3)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(3) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(4) 7 ; - ! Constant transmission mode
MODE_TRANS_GAIN(4)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(4) 0 ; - ! Offset added (after gain) to get transmission mode

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(2) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(3) SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(4) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(4) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(4) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(4) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 8 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 1500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(2,1) 510 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 510 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

MX_AUX_COEFFICIENT(3,1) 510 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 1
MX_AUX_GAIN(3,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 1

MX_AUX_CONSTANT(3,2) 0 ; N-m ! Constant auxiliary roll moment component due to
                       ! relative axle roll, unit 3, axle 2
MX_AUX_GAIN(3,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 2

MX_AUX_COEFFICIENT(4,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 1
MX_AUX_GAIN(4,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 1

MX_AUX_COEFFICIENT(4,2) 1500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 2
MX_AUX_GAIN(4,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(4) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(4) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(4) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(4) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 16 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,1) 500 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 1, left side
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1,2) 500 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 1, right side
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2,1) 300 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 2, left side
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2,2) 300 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 2, axle 2, right side
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,1,1) 300 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 1, left side
MY_BRAKE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,1,2) 300 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 1, right side
MY_BRAKE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,2,1) 150 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 2, left side
MY_BRAKE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(3,2,2) 150 ! Coefficient: brake torque per unit wheel cylinder
                                ! pressure (N-m/MPa), unit 3, axle 2, right side
MY_BRAKE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,2,2) SPLINE ! unit 4, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN(3) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(3) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(3) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(4) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(4) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(4) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(4) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 16 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(2,1,1) LINEAR_FLAT ! unit 2, axle 1, left side
 0, 180
 0.1, 162.45
 0.2, 145.8
 0.3, 130.05
 0.4, 115.2
 0.5, 101.25
 0.6, 88.2
 0.7, 76.05
 0.8, 64.8
 0.9, 54.45
 1, 45
 1.1, 36.45
 1.2, 28.8
 1.3, 22.05
 1.4, 16.2
 1.5, 11.25
 1.6, 7.2
 1.7, 4.05
 1.8, 1.8
 1.9, 0.45
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(2,1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(2,1,1) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(2,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(2,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, left side

! 1D table: col 1 = vehicle speed (km/h), col 2 = steering torque at kingpin (N-m)
MZ_PARKING_STEER_TABLE(2,1,2) LINEAR_FLAT ! unit 2, axle 1, right side
 0, 180
 0.1, 162.45
 0.2, 145.8
 0.3, 130.05
 0.4, 115.2
 0.5, 101.25
 0.6, 88.2
 0.7, 76.05
 0.8, 64.8
 0.9, 54.45
 1, 45
 1.1, 36.45
 1.2, 28.8
 1.3, 22.05
 1.4, 16.2
 1.5, 11.25
 1.6, 7.2
 1.7, 4.05
 1.8, 1.8
 1.9, 0.45
 2, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(2,1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(2,1,2) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
MZ_PARKING_STEER_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(2,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(2,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(3,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 3, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(3,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(3,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 3,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(3,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 3, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(3,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(3,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 3,
                                      ! axle 1, right side

! 2D table: row 1 has "0" (place holder) followed by 2 values of vertical load (N).
! Other rows have vehicle speed (km/h) followed by 2 values of steering torque at
! kingpin (N-m).
MZ_PARKING_STEER_CARPET(4,1,1) 2D_LINEAR ! unit 4, axle 1, left side
 0, 1000, 20000
 0, 200, 300
 5, 0, 0
 6, 0, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(4,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(4,1,1) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(4,1,1) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
FZ_START_MZ_PARKING_STEER(4,1,1) 0 ; N ! Offset subtracted from vertical load
FZ_SCALE_MZ_PARKING_STEER(4,1,1) 1 ! Scale factor divided into (vertical load -
                                   ! FZ_START_MZ_PARKING_STEER)

! 2D table: row 1 has "0" (place holder) followed by 2 values of vertical load (N).
! Other rows have vehicle speed (km/h) followed by 2 values of steering torque at
! kingpin (N-m).
MZ_PARKING_STEER_CARPET(4,1,2) 2D_LINEAR ! unit 4, axle 1, right side
 0, 1000, 20000
 0, 200, 300
 5, 0, 0
 6, 0, 0
ENDTABLE
MZ_PARKING_STEER_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(4,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
VX_START_MZ_PARKING_STEER(4,1,2) 0 ; km/h ! Offset subtracted from vehicle speed
VX_SCALE_MZ_PARKING_STEER(4,1,2) 1 ! Scale factor divided into (vehicle speed -
                                   ! VX_START_MZ_PARKING_STEER)
FZ_START_MZ_PARKING_STEER(4,1,2) 0 ; N ! Offset subtracted from vertical load
FZ_SCALE_MZ_PARKING_STEER(4,1,2) 1 ! Scale factor divided into (vertical load -
                                   ! FZ_START_MZ_PARKING_STEER)

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 32 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 11.91, 23.1, 33.46, 42.94, 51.51, 59.16, 65.86, 71.63
 1, 24.18, 46.93, 68.03, 87.36, 104.85, 120.44, 134.1, 145.83
 1.5, 34.42, 67.26, 98.19, 126.98, 153.41, 177.33, 198.58, 217.06
 2, 38.63, 76.55, 113.43, 148.94, 182.72, 214.4, 243.6, 269.96
 2.5, 36.19, 72.89, 110.01, 147.29, 184.41, 220.92, 256.33, 290.06
 3, 30.22, 61.78, 94.81, 129.29, 165.09, 201.98, 239.57, 277.38
 3.5, 23.75, 49.13, 76.42, 105.8, 137.34, 171.07, 206.87, 244.54
 4, 18.12, 37.85, 59.54, 83.44, 109.79, 138.77, 170.52, 205.08
 4.5, 13.59, 28.65, 45.54, 64.54, 85.94, 110, 137, 167.18
 5, 10.03, 21.38, 34.36, 49.26, 66.38, 86.01, 108.47, 134.11
 5.5, 7.25, 15.65, 25.51, 37.08, 50.64, 66.49, 84.97, 106.44
 6, 5.05, 11.11, 18.47, 27.35, 38, 50.72, 65.82, 83.66
 6.5, 3.28, 7.48, 12.82, 19.51, 27.8, 37.92, 50.2, 64.96
 7, 1.86, 4.53, 8.22, 13.13, 19.47, 27.46, 37.38, 49.56
 7.5, 0.68, 2.1, 4.44, 7.88, 12.61, 18.82, 26.78, 36.78
 8, -0.3, 0.08, 1.3, 3.51, 6.89, 11.62, 17.93, 26.09
 8.5, -1.12, -1.62, -1.35, -0.17, 2.07, 5.55, 10.47, 17.08
 9, -1.82, -3.07, -3.6, -3.3, -2.02, 0.39, 4.13, 9.4
 9.5, -2.42, -4.31, -5.54, -5.99, -5.54, -4.04, -1.32, 2.81
 10, -2.94, -5.38, -7.21, -8.32, -8.58, -7.87, -6.03, -2.88
 10.5, -3.39, -6.32, -8.67, -10.34, -11.23, -11.21, -10.14, -7.85
 11, -3.79, -7.15, -9.96, -12.13, -13.56, -14.14, -13.74, -12.2
 11.5, -4.15, -7.88, -11.1, -13.71, -15.62, -16.73, -16.92, -16.05
 12, -4.47, -8.53, -12.11, -15.11, -17.45, -19.04, -19.75, -19.47
 12.5, -4.75, -9.12, -13.02, -16.37, -19.09, -21.1, -22.28, -22.52
 13, -5, -9.64, -13.83, -17.5, -20.56, -22.95, -24.55, -25.26
 13.5, -5.23, -10.12, -14.57, -18.52, -21.89, -24.62, -26.6, -27.73
 14, -5.44, -10.55, -15.24, -19.44, -23.1, -26.13, -28.45, -29.96
 14.5, -5.63, -10.94, -15.85, -20.29, -24.2, -27.51, -30.14, -32
 15, -5.81, -11.3, -16.41, -21.06, -25.2, -28.77, -31.69, -33.85
 15.5, -5.97, -11.63, -16.92, -21.77, -26.13, -29.93, -33.1, -35.55
 16, -6.12, -11.94, -17.39, -22.42, -26.97, -30.99, -34.4, -37.11
 16.5, -6.26, -12.22, -17.82, -23.02, -27.76, -31.97, -35.6, -38.55
 17, -6.38, -12.48, -18.23, -23.58, -28.48, -32.88, -36.7, -39.89
 17.5, -6.5, -12.72, -18.6, -24.1, -29.15, -33.72, -37.73, -41.12
 18, -6.61, -12.95, -18.95, -24.58, -29.78, -34.5, -38.69, -42.27
 18.5, -6.71, -13.16, -19.28, -25.03, -30.36, -35.23, -39.58, -43.33
 19, -6.81, -13.35, -19.58, -25.45, -30.91, -35.91, -40.41, -44.33
 19.5, -6.9, -13.54, -19.87, -25.84, -31.42, -36.55, -41.18, -45.26
 20, -6.98, -13.71, -20.14, -26.21, -31.9, -37.15, -41.91, -46.14
 20.5, -7.06, -13.87, -20.39, -26.56, -32.35, -37.71, -42.6, -46.96
 21, -7.14, -14.03, -20.62, -26.89, -32.77, -38.24, -43.24, -47.73
 21.5, -7.21, -14.17, -20.85, -27.19, -33.17, -38.74, -43.85, -48.46
 22, -7.27, -14.31, -21.06, -27.49, -33.55, -39.21, -44.42, -49.14
 22.5, -7.34, -14.44, -21.26, -27.76, -33.9, -39.65, -44.96, -49.79
 23, -7.4, -14.56, -21.45, -28.02, -34.24, -40.08, -45.48, -50.4
 23.5, -7.45, -14.68, -21.63, -28.27, -34.56, -40.48, -45.96, -50.99
 24, -7.51, -14.79, -21.8, -28.51, -34.87, -40.86, -46.43, -51.54
 24.5, -7.56, -14.9, -21.97, -28.73, -35.16, -41.22, -46.87, -52.06
 25, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
 26, -7.61, -15, -22.12, -28.94, -35.44, -41.56, -47.28, -52.56
ENDTABLE
MZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 7.83, 15.36, 22.55, 29.36, 35.8, 41.84, 47.48, 52.72
 1, 15.94, 31.27, 45.9, 59.77, 72.86, 85.14, 96.6, 107.24
 1.5, 23.69, 46.55, 68.43, 89.25, 108.97, 127.54, 144.93, 161.12
 2, 29.35, 57.89, 85.48, 112.01, 137.39, 161.55, 184.42, 205.95
 2.5, 31.34, 62.21, 92.5, 122.08, 150.87, 178.76, 205.64, 231.41
 3, 29.76, 59.5, 89.15, 118.66, 147.92, 176.86, 205.36, 233.31
 3.5, 26.08, 52.46, 79.18, 106.21, 133.51, 161.03, 188.7, 216.44
 4, 21.75, 44, 66.82, 90.22, 114.23, 138.82, 163.98, 189.68
 4.5, 17.66, 35.87, 54.75, 74.34, 94.69, 115.81, 137.73, 160.44
 5, 14.11, 28.78, 44.12, 60.2, 77.08, 94.79, 113.39, 132.9
 5.5, 11.15, 22.84, 35.18, 48.22, 62.04, 76.69, 92.23, 108.7
 6, 8.73, 17.96, 27.78, 38.27, 49.5, 61.51, 74.37, 88.13
 6.5, 6.74, 13.94, 21.7, 30.07, 39.11, 48.89, 59.47, 70.89
 7, 5.11, 10.64, 16.67, 23.28, 30.51, 38.41, 47.05, 56.49
 7.5, 3.76, 7.9, 12.5, 17.63, 23.34, 29.67, 36.68, 44.42
 8, 2.62, 5.6, 9.01, 12.91, 17.33, 22.34, 27.97, 34.27
 8.5, 1.67, 3.67, 6.07, 8.92, 12.26, 16.13, 20.59, 25.67
 9, 0.86, 2.02, 3.56, 5.52, 7.93, 10.84, 14.3, 18.34
 9.5, 0.16, 0.61, 1.41, 2.6, 4.22, 6.3, 8.9, 12.03
 10, -0.44, -0.61, -0.45, 0.07, 1, 2.37, 4.22, 6.58
 10.5, -0.97, -1.68, -2.08, -2.13, -1.79, -1.05, 0.15, 1.82
 11, -1.43, -2.61, -3.5, -4.06, -4.25, -4.05, -3.43, -2.35
 11.5, -1.84, -3.44, -4.76, -5.76, -6.42, -6.7, -6.58, -6.03
 12, -2.2, -4.17, -5.87, -7.27, -8.34, -9.05, -9.38, -9.3
 12.5, -2.52, -4.83, -6.87, -8.62, -10.06, -11.15, -11.88, -12.21
 13, -2.81, -5.41, -7.76, -9.83, -11.6, -13.04, -14.12, -14.82
 13.5, -3.07, -5.94, -8.57, -10.93, -12.99, -14.73, -16.14, -17.18
 14, -3.31, -6.42, -9.3, -11.92, -14.24, -16.27, -17.96, -19.3
 14.5, -3.53, -6.86, -9.96, -12.81, -15.39, -17.66, -19.62, -21.24
 15, -3.72, -7.26, -10.57, -13.63, -16.43, -18.93, -21.13, -23
 15.5, -3.9, -7.62, -11.12, -14.38, -17.38, -20.1, -22.52, -24.61
 16, -4.07, -7.96, -11.63, -15.07, -18.26, -21.17, -23.79, -26.09
 16.5, -4.22, -8.27, -12.1, -15.71, -19.07, -22.15, -24.96, -27.45
 17, -4.36, -8.55, -12.54, -16.3, -19.81, -23.06, -26.04, -28.71
 17.5, -4.49, -8.82, -12.94, -16.84, -20.5, -23.91, -27.04, -29.88
 18, -4.62, -9.06, -13.31, -17.35, -21.14, -24.69, -27.96, -30.96
 18.5, -4.73, -9.29, -13.66, -17.82, -21.74, -25.42, -28.83, -31.96
 19, -4.83, -9.51, -13.99, -18.26, -22.3, -26.09, -29.63, -32.9
 19.5, -4.93, -9.71, -14.29, -18.67, -22.82, -26.73, -30.39, -33.78
 20, -5.03, -9.89, -14.58, -19.05, -23.31, -27.32, -31.09, -34.6
 20.5, -5.11, -10.07, -14.84, -19.41, -23.76, -27.88, -31.75, -35.37
 21, -5.19, -10.24, -15.09, -19.75, -24.19, -28.41, -32.38, -36.09
 21.5, -5.27, -10.39, -15.33, -20.07, -24.6, -28.9, -32.96, -36.77
 22, -5.34, -10.54, -15.55, -20.37, -24.98, -29.37, -33.51, -37.41
 22.5, -5.41, -10.68, -15.77, -20.66, -25.34, -29.81, -34.04, -38.02
 23, -5.48, -10.81, -15.97, -20.93, -25.69, -30.22, -34.53, -38.59
 23.5, -5.54, -10.93, -16.15, -21.18, -26.01, -30.62, -35, -39.13
 24, -5.6, -11.05, -16.33, -21.43, -26.32, -30.99, -35.44, -39.65
 24.5, -5.66, -11.17, -16.51, -21.66, -26.61, -31.35, -35.86, -40.14
 25, -5.71, -11.27, -16.67, -21.88, -26.89, -31.69, -36.26, -40.6
ENDTABLE
MZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 7.83, 15.36, 22.55, 29.36, 35.8, 41.84, 47.48, 52.72
 1, 15.94, 31.27, 45.9, 59.77, 72.86, 85.14, 96.6, 107.24
 1.5, 23.69, 46.55, 68.43, 89.25, 108.97, 127.54, 144.93, 161.12
 2, 29.35, 57.89, 85.48, 112.01, 137.39, 161.55, 184.42, 205.95
 2.5, 31.34, 62.21, 92.5, 122.08, 150.87, 178.76, 205.64, 231.41
 3, 29.76, 59.5, 89.15, 118.66, 147.92, 176.86, 205.36, 233.31
 3.5, 26.08, 52.46, 79.18, 106.21, 133.51, 161.03, 188.7, 216.44
 4, 21.75, 44, 66.82, 90.22, 114.23, 138.82, 163.98, 189.68
 4.5, 17.66, 35.87, 54.75, 74.34, 94.69, 115.81, 137.73, 160.44
 5, 14.11, 28.78, 44.12, 60.2, 77.08, 94.79, 113.39, 132.9
 5.5, 11.15, 22.84, 35.18, 48.22, 62.04, 76.69, 92.23, 108.7
 6, 8.73, 17.96, 27.78, 38.27, 49.5, 61.51, 74.37, 88.13
 6.5, 6.74, 13.94, 21.7, 30.07, 39.11, 48.89, 59.47, 70.89
 7, 5.11, 10.64, 16.67, 23.28, 30.51, 38.41, 47.05, 56.49
 7.5, 3.76, 7.9, 12.5, 17.63, 23.34, 29.67, 36.68, 44.42
 8, 2.62, 5.6, 9.01, 12.91, 17.33, 22.34, 27.97, 34.27
 8.5, 1.67, 3.67, 6.07, 8.92, 12.26, 16.13, 20.59, 25.67
 9, 0.86, 2.02, 3.56, 5.52, 7.93, 10.84, 14.3, 18.34
 9.5, 0.16, 0.61, 1.41, 2.6, 4.22, 6.3, 8.9, 12.03
 10, -0.44, -0.61, -0.45, 0.07, 1, 2.37, 4.22, 6.58
 10.5, -0.97, -1.68, -2.08, -2.13, -1.79, -1.05, 0.15, 1.82
 11, -1.43, -2.61, -3.5, -4.06, -4.25, -4.05, -3.43, -2.35
 11.5, -1.84, -3.44, -4.76, -5.76, -6.42, -6.7, -6.58, -6.03
 12, -2.2, -4.17, -5.87, -7.27, -8.34, -9.05, -9.38, -9.3
 12.5, -2.52, -4.83, -6.87, -8.62, -10.06, -11.15, -11.88, -12.21
 13, -2.81, -5.41, -7.76, -9.83, -11.6, -13.04, -14.12, -14.82
 13.5, -3.07, -5.94, -8.57, -10.93, -12.99, -14.73, -16.14, -17.18
 14, -3.31, -6.42, -9.3, -11.92, -14.24, -16.27, -17.96, -19.3
 14.5, -3.53, -6.86, -9.96, -12.81, -15.39, -17.66, -19.62, -21.24
 15, -3.72, -7.26, -10.57, -13.63, -16.43, -18.93, -21.13, -23
 15.5, -3.9, -7.62, -11.12, -14.38, -17.38, -20.1, -22.52, -24.61
 16, -4.07, -7.96, -11.63, -15.07, -18.26, -21.17, -23.79, -26.09
 16.5, -4.22, -8.27, -12.1, -15.71, -19.07, -22.15, -24.96, -27.45
 17, -4.36, -8.55, -12.54, -16.3, -19.81, -23.06, -26.04, -28.71
 17.5, -4.49, -8.82, -12.94, -16.84, -20.5, -23.91, -27.04, -29.88
 18, -4.62, -9.06, -13.31, -17.35, -21.14, -24.69, -27.96, -30.96
 18.5, -4.73, -9.29, -13.66, -17.82, -21.74, -25.42, -28.83, -31.96
 19, -4.83, -9.51, -13.99, -18.26, -22.3, -26.09, -29.63, -32.9
 19.5, -4.93, -9.71, -14.29, -18.67, -22.82, -26.73, -30.39, -33.78
 20, -5.03, -9.89, -14.58, -19.05, -23.31, -27.32, -31.09, -34.6
 20.5, -5.11, -10.07, -14.84, -19.41, -23.76, -27.88, -31.75, -35.37
 21, -5.19, -10.24, -15.09, -19.75, -24.19, -28.41, -32.38, -36.09
 21.5, -5.27, -10.39, -15.33, -20.07, -24.6, -28.9, -32.96, -36.77
 22, -5.34, -10.54, -15.55, -20.37, -24.98, -29.37, -33.51, -37.41
 22.5, -5.41, -10.68, -15.77, -20.66, -25.34, -29.81, -34.04, -38.02
 23, -5.48, -10.81, -15.97, -20.93, -25.69, -30.22, -34.53, -38.59
 23.5, -5.54, -10.93, -16.15, -21.18, -26.01, -30.62, -35, -39.13
 24, -5.6, -11.05, -16.33, -21.43, -26.32, -30.99, -35.44, -39.65
 24.5, -5.66, -11.17, -16.51, -21.66, -26.61, -31.35, -35.86, -40.14
 25, -5.71, -11.27, -16.67, -21.88, -26.89, -31.69, -36.26, -40.6
ENDTABLE
MZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 7.83, 15.36, 22.55, 29.36, 35.8, 41.84, 47.48, 52.72
 1, 15.94, 31.27, 45.9, 59.77, 72.86, 85.14, 96.6, 107.24
 1.5, 23.69, 46.55, 68.43, 89.25, 108.97, 127.54, 144.93, 161.12
 2, 29.35, 57.89, 85.48, 112.01, 137.39, 161.55, 184.42, 205.95
 2.5, 31.34, 62.21, 92.5, 122.08, 150.87, 178.76, 205.64, 231.41
 3, 29.76, 59.5, 89.15, 118.66, 147.92, 176.86, 205.36, 233.31
 3.5, 26.08, 52.46, 79.18, 106.21, 133.51, 161.03, 188.7, 216.44
 4, 21.75, 44, 66.82, 90.22, 114.23, 138.82, 163.98, 189.68
 4.5, 17.66, 35.87, 54.75, 74.34, 94.69, 115.81, 137.73, 160.44
 5, 14.11, 28.78, 44.12, 60.2, 77.08, 94.79, 113.39, 132.9
 5.5, 11.15, 22.84, 35.18, 48.22, 62.04, 76.69, 92.23, 108.7
 6, 8.73, 17.96, 27.78, 38.27, 49.5, 61.51, 74.37, 88.13
 6.5, 6.74, 13.94, 21.7, 30.07, 39.11, 48.89, 59.47, 70.89
 7, 5.11, 10.64, 16.67, 23.28, 30.51, 38.41, 47.05, 56.49
 7.5, 3.76, 7.9, 12.5, 17.63, 23.34, 29.67, 36.68, 44.42
 8, 2.62, 5.6, 9.01, 12.91, 17.33, 22.34, 27.97, 34.27
 8.5, 1.67, 3.67, 6.07, 8.92, 12.26, 16.13, 20.59, 25.67
 9, 0.86, 2.02, 3.56, 5.52, 7.93, 10.84, 14.3, 18.34
 9.5, 0.16, 0.61, 1.41, 2.6, 4.22, 6.3, 8.9, 12.03
 10, -0.44, -0.61, -0.45, 0.07, 1, 2.37, 4.22, 6.58
 10.5, -0.97, -1.68, -2.08, -2.13, -1.79, -1.05, 0.15, 1.82
 11, -1.43, -2.61, -3.5, -4.06, -4.25, -4.05, -3.43, -2.35
 11.5, -1.84, -3.44, -4.76, -5.76, -6.42, -6.7, -6.58, -6.03
 12, -2.2, -4.17, -5.87, -7.27, -8.34, -9.05, -9.38, -9.3
 12.5, -2.52, -4.83, -6.87, -8.62, -10.06, -11.15, -11.88, -12.21
 13, -2.81, -5.41, -7.76, -9.83, -11.6, -13.04, -14.12, -14.82
 13.5, -3.07, -5.94, -8.57, -10.93, -12.99, -14.73, -16.14, -17.18
 14, -3.31, -6.42, -9.3, -11.92, -14.24, -16.27, -17.96, -19.3
 14.5, -3.53, -6.86, -9.96, -12.81, -15.39, -17.66, -19.62, -21.24
 15, -3.72, -7.26, -10.57, -13.63, -16.43, -18.93, -21.13, -23
 15.5, -3.9, -7.62, -11.12, -14.38, -17.38, -20.1, -22.52, -24.61
 16, -4.07, -7.96, -11.63, -15.07, -18.26, -21.17, -23.79, -26.09
 16.5, -4.22, -8.27, -12.1, -15.71, -19.07, -22.15, -24.96, -27.45
 17, -4.36, -8.55, -12.54, -16.3, -19.81, -23.06, -26.04, -28.71
 17.5, -4.49, -8.82, -12.94, -16.84, -20.5, -23.91, -27.04, -29.88
 18, -4.62, -9.06, -13.31, -17.35, -21.14, -24.69, -27.96, -30.96
 18.5, -4.73, -9.29, -13.66, -17.82, -21.74, -25.42, -28.83, -31.96
 19, -4.83, -9.51, -13.99, -18.26, -22.3, -26.09, -29.63, -32.9
 19.5, -4.93, -9.71, -14.29, -18.67, -22.82, -26.73, -30.39, -33.78
 20, -5.03, -9.89, -14.58, -19.05, -23.31, -27.32, -31.09, -34.6
 20.5, -5.11, -10.07, -14.84, -19.41, -23.76, -27.88, -31.75, -35.37
 21, -5.19, -10.24, -15.09, -19.75, -24.19, -28.41, -32.38, -36.09
 21.5, -5.27, -10.39, -15.33, -20.07, -24.6, -28.9, -32.96, -36.77
 22, -5.34, -10.54, -15.55, -20.37, -24.98, -29.37, -33.51, -37.41
 22.5, -5.41, -10.68, -15.77, -20.66, -25.34, -29.81, -34.04, -38.02
 23, -5.48, -10.81, -15.97, -20.93, -25.69, -30.22, -34.53, -38.59
 23.5, -5.54, -10.93, -16.15, -21.18, -26.01, -30.62, -35, -39.13
 24, -5.6, -11.05, -16.33, -21.43, -26.32, -30.99, -35.44, -39.65
 24.5, -5.66, -11.17, -16.51, -21.66, -26.61, -31.35, -35.86, -40.14
 25, -5.71, -11.27, -16.67, -21.88, -26.89, -31.69, -36.26, -40.6
ENDTABLE
MZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 7.83, 15.36, 22.55, 29.36, 35.8, 41.84, 47.48, 52.72
 1, 15.94, 31.27, 45.9, 59.77, 72.86, 85.14, 96.6, 107.24
 1.5, 23.69, 46.55, 68.43, 89.25, 108.97, 127.54, 144.93, 161.12
 2, 29.35, 57.89, 85.48, 112.01, 137.39, 161.55, 184.42, 205.95
 2.5, 31.34, 62.21, 92.5, 122.08, 150.87, 178.76, 205.64, 231.41
 3, 29.76, 59.5, 89.15, 118.66, 147.92, 176.86, 205.36, 233.31
 3.5, 26.08, 52.46, 79.18, 106.21, 133.51, 161.03, 188.7, 216.44
 4, 21.75, 44, 66.82, 90.22, 114.23, 138.82, 163.98, 189.68
 4.5, 17.66, 35.87, 54.75, 74.34, 94.69, 115.81, 137.73, 160.44
 5, 14.11, 28.78, 44.12, 60.2, 77.08, 94.79, 113.39, 132.9
 5.5, 11.15, 22.84, 35.18, 48.22, 62.04, 76.69, 92.23, 108.7
 6, 8.73, 17.96, 27.78, 38.27, 49.5, 61.51, 74.37, 88.13
 6.5, 6.74, 13.94, 21.7, 30.07, 39.11, 48.89, 59.47, 70.89
 7, 5.11, 10.64, 16.67, 23.28, 30.51, 38.41, 47.05, 56.49
 7.5, 3.76, 7.9, 12.5, 17.63, 23.34, 29.67, 36.68, 44.42
 8, 2.62, 5.6, 9.01, 12.91, 17.33, 22.34, 27.97, 34.27
 8.5, 1.67, 3.67, 6.07, 8.92, 12.26, 16.13, 20.59, 25.67
 9, 0.86, 2.02, 3.56, 5.52, 7.93, 10.84, 14.3, 18.34
 9.5, 0.16, 0.61, 1.41, 2.6, 4.22, 6.3, 8.9, 12.03
 10, -0.44, -0.61, -0.45, 0.07, 1, 2.37, 4.22, 6.58
 10.5, -0.97, -1.68, -2.08, -2.13, -1.79, -1.05, 0.15, 1.82
 11, -1.43, -2.61, -3.5, -4.06, -4.25, -4.05, -3.43, -2.35
 11.5, -1.84, -3.44, -4.76, -5.76, -6.42, -6.7, -6.58, -6.03
 12, -2.2, -4.17, -5.87, -7.27, -8.34, -9.05, -9.38, -9.3
 12.5, -2.52, -4.83, -6.87, -8.62, -10.06, -11.15, -11.88, -12.21
 13, -2.81, -5.41, -7.76, -9.83, -11.6, -13.04, -14.12, -14.82
 13.5, -3.07, -5.94, -8.57, -10.93, -12.99, -14.73, -16.14, -17.18
 14, -3.31, -6.42, -9.3, -11.92, -14.24, -16.27, -17.96, -19.3
 14.5, -3.53, -6.86, -9.96, -12.81, -15.39, -17.66, -19.62, -21.24
 15, -3.72, -7.26, -10.57, -13.63, -16.43, -18.93, -21.13, -23
 15.5, -3.9, -7.62, -11.12, -14.38, -17.38, -20.1, -22.52, -24.61
 16, -4.07, -7.96, -11.63, -15.07, -18.26, -21.17, -23.79, -26.09
 16.5, -4.22, -8.27, -12.1, -15.71, -19.07, -22.15, -24.96, -27.45
 17, -4.36, -8.55, -12.54, -16.3, -19.81, -23.06, -26.04, -28.71
 17.5, -4.49, -8.82, -12.94, -16.84, -20.5, -23.91, -27.04, -29.88
 18, -4.62, -9.06, -13.31, -17.35, -21.14, -24.69, -27.96, -30.96
 18.5, -4.73, -9.29, -13.66, -17.82, -21.74, -25.42, -28.83, -31.96
 19, -4.83, -9.51, -13.99, -18.26, -22.3, -26.09, -29.63, -32.9
 19.5, -4.93, -9.71, -14.29, -18.67, -22.82, -26.73, -30.39, -33.78
 20, -5.03, -9.89, -14.58, -19.05, -23.31, -27.32, -31.09, -34.6
 20.5, -5.11, -10.07, -14.84, -19.41, -23.76, -27.88, -31.75, -35.37
 21, -5.19, -10.24, -15.09, -19.75, -24.19, -28.41, -32.38, -36.09
 21.5, -5.27, -10.39, -15.33, -20.07, -24.6, -28.9, -32.96, -36.77
 22, -5.34, -10.54, -15.55, -20.37, -24.98, -29.37, -33.51, -37.41
 22.5, -5.41, -10.68, -15.77, -20.66, -25.34, -29.81, -34.04, -38.02
 23, -5.48, -10.81, -15.97, -20.93, -25.69, -30.22, -34.53, -38.59
 23.5, -5.54, -10.93, -16.15, -21.18, -26.01, -30.62, -35, -39.13
 24, -5.6, -11.05, -16.33, -21.43, -26.32, -30.99, -35.44, -39.65
 24.5, -5.66, -11.17, -16.51, -21.66, -26.61, -31.35, -35.86, -40.14
 25, -5.71, -11.27, -16.67, -21.88, -26.89, -31.69, -36.26, -40.6
ENDTABLE
MZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 36 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IDIFF are used to identify the dataset when
! reading data.

M_DIFF_VISC_CONSTANT(1,2) 0 ; N-m ! Constant this torque difference, veh 1, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2,1) SPLINE ! veh 2, 1st drive axle diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2,1) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(2,1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2,1) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2,2) SPLINE ! veh 2, 2nd drive axle diff
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2,2) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(2,2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2,2) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2,3) SPLINE ! veh 2, transfer case
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2,3) 1 ! Gain multiplied with calculated value to get this torque
                        ! difference
M_DIFF_VISC_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference
DSPIN_START_M_DIFF_VISC(2,3) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2,3) 1 ! Scale factor divided into (speed difference -
                               ! DSPIN_START_M_DIFF_VISC)

M_DIFF_VISC_CONSTANT(3,2) 0 ; N-m ! Constant this torque difference, veh 3, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(3,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(4,2) 0 ; N-m ! Constant this torque difference, veh 4, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(4,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

M_SW_COEFFICIENT(1) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(1)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(1)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(1) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(1)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

M_SW_CONSTANT(2)    0 ; N-m ! [D] Constant torque at steering wheel component due to
                      ! total steering torque about kingpin axes of both front
                      ! wheels
M_SW_GAIN(2)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(2)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(2) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(2)  1 ; - ! [D] Constant torque at steering wheel component due to
                      ! vehicle speed

M_SW_CONSTANT(3)    0 ; N-m ! [D] Constant torque at steering wheel component due to
                      ! total steering torque about kingpin axes of both front
                      ! wheels
M_SW_GAIN(3)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(3)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(3) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(3)  1 ; - ! [D] Constant torque at steering wheel component due to
                      ! vehicle speed

M_SW_COEFFICIENT(4) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(4)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(4)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(4) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(4)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_AV_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(3) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(4) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_ROT_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(3) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(4) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

PBK_CON_CONSTANT(1) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(1)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(2) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(2)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(3) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(3)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(4) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(4)   0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 16
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

PBK_DL_COEFFICIENT(3,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, left
                            ! side
PBK_DL_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, left side

PBK_DL_COEFFICIENT(3,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, right
                            ! side
PBK_DL_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, right side

PBK_DL_COEFFICIENT(3,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, left
                            ! side
PBK_DL_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, left side

PBK_DL_COEFFICIENT(3,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, right
                            ! side
PBK_DL_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(3,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, right side

PBK_DL_COEFFICIENT(4,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, left
                            ! side
PBK_DL_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(4,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, left side

PBK_DL_COEFFICIENT(4,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, right
                            ! side
PBK_DL_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(4,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, right side

PBK_DL_COEFFICIENT(4,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 2, left
                            ! side
PBK_DL_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(4,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, left side

PBK_DL_COEFFICIENT(4,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 2, right
                            ! side
PBK_DL_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(4,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, right side

! POLY_SHAPE: Coordinates for polygonal shape vertices. Each Y or L coordinate is
! paired with a X or S coordinate. This configurable function supports 200 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IPOLYGON is used to identify the dataset when reading data.

POLY_SHAPE_ID(1)    1  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(1)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

POLY_SHAPE_ID(2)    2  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(2)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

POLY_SHAPE_ID(3)    3  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(3)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

POLY_SHAPE_ID(4)    4  ! User-defined ID number for this dataset

! 1D table: col 1 = X or S coordinate (m), col 2 = Y or L coordinate (m)
POLY_SHAPE_TABLE(4)  ! table of coordinates
 -11.5, -11.5
 -11.5, -188.5
 -150, -188.5
 -150, -150
 -188.5, -150
 -188.5, -11.5
 -11.5, -11.5
ENDTABLE

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(2)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(2)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(2) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(2) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(3) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN(3)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(3)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(3) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(3) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE(4) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 2.05
 0.91, 1
 1, 1
ENDTABLE
RM_TC_GAIN(4)       1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET(4)     0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC(4) 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC(4) 1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 8 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(2,1) 1 ; - ! Constant gain, unit 2, axle 1
R_STEER_SPEED_GAIN(2,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(3,1) 1 ; - ! Constant gain, unit 3, axle 1
R_STEER_SPEED_GAIN(3,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(4,1) 1 ; - ! Constant gain, unit 4, axle 1
R_STEER_SPEED_GAIN(4,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(2) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(2) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(2) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(3) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(3) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(3) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

SENSOR_ANTENNA_ELEVATION_CONSTANT(4) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(4) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(4) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(2) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(2) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(2) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(2) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(3) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(3) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(3) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(3) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

SENSOR_ANTENNA_RANGE_CONSTANT(4) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(4) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(4) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(4) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AX_BRAKE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(2) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(3) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(3) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(3) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(4) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(4) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(4) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AX_THROTTLE_CONSTANT(1) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(2) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(3) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(3) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(3) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(4) 0.15 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(4) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(4) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AY_LEFT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(3) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(3) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(3) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(4) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(4) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(4) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AY_RIGHT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(3) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(3) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(3) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(3) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(3) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(4) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(4) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(4) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(4) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(4) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1) 2001  ! Need to Stop
SPEED_TARGET_CONSTANT(1) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(1) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(1) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(1) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)
SET_UNITS SPEED_TARGET_CARPET(2) mi/h ;

SPEED_TARGET_ID(2) 2000  ! Path Preview: 0.15/0.2 G Max Ax/Ay, SPEED_LIMIT_ID
SPEED_TARGET_CONSTANT(2) 25 ; mi/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; mi/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) mi/h ;
SPEED_TARGET_S_CONSTANT(2) 0 ; mi/h ! Constant speed component due to station

SPEED_TARGET_ID(3) 2002  ! Need to Stop, v2
SPEED_TARGET_CONSTANT(3) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(3) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(3) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(3) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(3) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(3) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(3) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(3) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(4) 2003  ! Need to Stop, v3
SPEED_TARGET_CONSTANT(4) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(4) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(4) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(4) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(4) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(4) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(4) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(4) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(5) 2004  ! Need to Stop, v4
SPEED_TARGET_CONSTANT(5) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(5) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(5) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(5) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(5) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(5) STEP ! step interpolation, flat-line extrapolation
 -1, 3.6
 0, 0
ENDTABLE
SSTART_SPEED_TARGET(5) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(5) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(2,1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 2, axle 1
STEER_COMP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(2,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(2,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

STEER_COMP_COEFFICIENT(3,1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                  ! (deg/N-m), unit 3, axle 1
STEER_COMP_GAIN(3,1) 1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(3,1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(3,1) 1 ! Scale factor divided into (total kingpin moment -
                             ! M_KP_START_STEER_COMP)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 16 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -34, -29.77048564
 -33.66, -29.50225288
 -33.32, -29.23368071
 -32.98, -28.96476137
 -32.64, -28.69548708
 -32.3, -28.42585004
 -31.96, -28.15584247
 -31.62, -27.88545657
 -31.28, -27.61468451
 -30.94, -27.3435185
 -30.6, -27.07195069
 -30.26, -26.79997325
 -29.92, -26.52757835
 -29.58, -26.25475814
 -29.24, -25.98150476
 -28.9, -25.70781034
 -28.56, -25.43366702
 -28.22, -25.15906692
 -27.88, -24.88400216
 -27.54, -24.60846485
 -27.2, -24.33244708
 -26.86, -24.05594096
 -26.52, -23.77893858
 -26.18, -23.50143201
 -25.84, -23.22341335
 -25.5, -22.94487467
 -25.16, -22.66580804
 -24.82, -22.38620552
 -24.48, -22.10605917
 -24.14, -21.82536106
 -23.8, -21.54410323
 -23.46, -21.26227775
 -23.12, -20.97987666
 -22.78, -20.696892
 -22.44, -20.41331583
 -22.1, -20.12914019
 -21.76, -19.84435713
 -21.42, -19.55895869
 -21.08, -19.27293691
 -20.74, -18.98628386
 -20.4, -18.69899156
 -20.06, -18.41105209
 -19.72, -18.12245749
 -19.38, -17.83319983
 -19.04, -17.54327117
 -18.7, -17.25266358
 -18.36, -16.96136915
 -18.02, -16.66937996
 -17.68, -16.3766881
 -17.34, -16.08328567
 -17, -15.7891648
 -16.66, -15.4943176
 -16.32, -15.19873622
 -15.98, -14.9024128
 -15.64, -14.60533952
 -15.3, -14.30750855
 -14.96, -14.00891209
 -14.62, -13.70954236
 -14.28, -13.4093916
 -13.94, -13.10845206
 -13.6, -12.80671602
 -13.26, -12.50417577
 -12.92, -12.20082366
 -12.58, -11.89665203
 -12.24, -11.59165326
 -11.9, -11.28581976
 -11.56, -10.97914397
 -11.22, -10.67161836
 -10.88, -10.36323544
 -10.54, -10.05398776
 -10.2, -9.743867889
 -9.86, -9.43286845
 -9.52, -9.120982102
 -9.18, -8.808201551
 -8.84, -8.494519544
 -8.5, -8.179928876
 -8.16, -7.864422393
 -7.82, -7.547992988
 -7.48, -7.230633612
 -7.14, -6.912337269
 -6.8, -6.593097019
 -6.46, -6.272905984
 -6.12, -5.951757349
 -5.78, -5.62964436
 -5.44, -5.306560335
 -5.1, -4.982498657
 -4.76, -4.657452782
 -4.42, -4.331416244
 -4.08, -4.004382648
 -3.74, -3.676345685
 -3.4, -3.347299125
 -3.06, -3.017236823
 -2.72, -2.686152726
 -2.38, -2.354040866
 -2.04, -2.020895376
 -1.7, -1.686710479
 -1.36, -1.351480503
 -1.02, -1.015199877
 -0.68, -0.677863136
 -0.34, -0.339464925
 0, 0
 0.34, 0.340536765
 0.68, 0.682150378
 1.02, 1.024845726
 1.36, 1.368627569
 1.7, 1.713500536
 2.04, 2.059469128
 2.38, 2.406537705
 2.72, 2.75471049
 3.06, 3.103991562
 3.4, 3.454384854
 3.74, 3.805894147
 4.08, 4.158523069
 4.42, 4.512275089
 4.76, 4.867153516
 5.1, 5.223161492
 5.44, 5.58030199
 5.78, 5.93857781
 6.12, 6.297991576
 6.46, 6.658545731
 6.8, 7.020242532
 7.14, 7.383084049
 7.48, 7.747072158
 7.82, 8.112208542
 8.16, 8.47849468
 8.5, 8.845931849
 8.84, 9.214521117
 9.18, 9.584263341
 9.52, 9.955159162
 9.86, 10.327209
 10.2, 10.70041305
 10.54, 11.07477129
 10.88, 11.45028345
 11.22, 11.82694904
 11.56, 12.20476732
 11.9, 12.58373732
 12.24, 12.9638578
 12.58, 13.3451273
 12.92, 13.72754409
 13.26, 14.11110618
 13.6, 14.49581132
 13.94, 14.88165701
 14.28, 15.26864047
 14.62, 15.65675866
 14.96, 16.04600824
 15.3, 16.43638561
 15.64, 16.82788691
 15.98, 17.22050796
 16.32, 17.61424431
 16.66, 18.00909123
 17, 18.40504368
 17.34, 18.80209634
 17.68, 19.20024358
 18.02, 19.5994795
 18.36, 19.99979785
 18.7, 20.40119212
 19.04, 20.80365547
 19.38, 21.20718076
 19.72, 21.61176055
 20.06, 22.01738707
 20.4, 22.42405226
 20.74, 22.83174772
 21.08, 23.24046476
 21.42, 23.65019437
 21.76, 24.06092721
 22.1, 24.47265364
 22.44, 24.88536369
 22.78, 25.29904708
 23.12, 25.71369322
 23.46, 26.12929118
 23.8, 26.54582975
 24.14, 26.96329736
 24.48, 27.38168217
 24.82, 27.80097199
 25.16, 28.22115433
 25.5, 28.6422164
 25.84, 29.06414509
 26.18, 29.48692697
 26.52, 29.91054833
 26.86, 30.33499514
 27.2, 30.76025308
 27.54, 31.18630752
 27.88, 31.61314353
 28.22, 32.04074592
 28.56, 32.46909919
 28.9, 32.89818754
 29.24, 33.32799492
 29.58, 33.75850499
 29.92, 34.18970114
 30.26, 34.62156649
 30.6, 35.0540839
 30.94, 35.48723597
 31.28, 35.92100507
 31.62, 36.35537328
 31.96, 36.79032247
 32.3, 37.22583429
 32.64, 37.66189012
 32.98, 38.09847115
 33.32, 38.53555834
 33.66, 38.97313245
 34, 39.41117404
ENDTABLE
STEER_KIN_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -34, -39.41117404
 -33.66, -38.97313245
 -33.32, -38.53555834
 -32.98, -38.09847115
 -32.64, -37.66189012
 -32.3, -37.22583429
 -31.96, -36.79032247
 -31.62, -36.35537328
 -31.28, -35.92100507
 -30.94, -35.48723597
 -30.6, -35.0540839
 -30.26, -34.62156649
 -29.92, -34.18970114
 -29.58, -33.75850499
 -29.24, -33.32799492
 -28.9, -32.89818754
 -28.56, -32.46909919
 -28.22, -32.04074592
 -27.88, -31.61314353
 -27.54, -31.18630752
 -27.2, -30.76025308
 -26.86, -30.33499514
 -26.52, -29.91054833
 -26.18, -29.48692697
 -25.84, -29.06414509
 -25.5, -28.6422164
 -25.16, -28.22115433
 -24.82, -27.80097199
 -24.48, -27.38168217
 -24.14, -26.96329736
 -23.8, -26.54582975
 -23.46, -26.12929118
 -23.12, -25.71369322
 -22.78, -25.29904708
 -22.44, -24.88536369
 -22.1, -24.47265364
 -21.76, -24.06092721
 -21.42, -23.65019437
 -21.08, -23.24046476
 -20.74, -22.83174772
 -20.4, -22.42405226
 -20.06, -22.01738707
 -19.72, -21.61176055
 -19.38, -21.20718076
 -19.04, -20.80365547
 -18.7, -20.40119212
 -18.36, -19.99979785
 -18.02, -19.5994795
 -17.68, -19.20024358
 -17.34, -18.80209634
 -17, -18.40504368
 -16.66, -18.00909123
 -16.32, -17.61424431
 -15.98, -17.22050796
 -15.64, -16.82788691
 -15.3, -16.43638561
 -14.96, -16.04600824
 -14.62, -15.65675866
 -14.28, -15.26864047
 -13.94, -14.88165701
 -13.6, -14.49581132
 -13.26, -14.11110618
 -12.92, -13.72754409
 -12.58, -13.3451273
 -12.24, -12.9638578
 -11.9, -12.58373732
 -11.56, -12.20476732
 -11.22, -11.82694904
 -10.88, -11.45028345
 -10.54, -11.07477129
 -10.2, -10.70041305
 -9.86, -10.327209
 -9.52, -9.955159162
 -9.18, -9.584263341
 -8.84, -9.214521117
 -8.5, -8.845931849
 -8.16, -8.47849468
 -7.82, -8.112208542
 -7.48, -7.747072158
 -7.14, -7.383084049
 -6.8, -7.020242532
 -6.46, -6.658545731
 -6.12, -6.297991576
 -5.78, -5.93857781
 -5.44, -5.58030199
 -5.1, -5.223161492
 -4.76, -4.867153516
 -4.42, -4.512275089
 -4.08, -4.158523069
 -3.74, -3.805894147
 -3.4, -3.454384854
 -3.06, -3.103991562
 -2.72, -2.75471049
 -2.38, -2.406537705
 -2.04, -2.059469128
 -1.7, -1.713500536
 -1.36, -1.368627569
 -1.02, -1.024845726
 -0.68, -0.682150378
 -0.34, -0.340536765
 0, 0
 0.34, 0.339464925
 0.68, 0.677863136
 1.02, 1.015199877
 1.36, 1.351480503
 1.7, 1.686710479
 2.04, 2.020895376
 2.38, 2.354040866
 2.72, 2.686152726
 3.06, 3.017236823
 3.4, 3.347299125
 3.74, 3.676345685
 4.08, 4.004382648
 4.42, 4.331416244
 4.76, 4.657452782
 5.1, 4.982498657
 5.44, 5.306560335
 5.78, 5.62964436
 6.12, 5.951757349
 6.46, 6.272905984
 6.8, 6.593097019
 7.14, 6.912337269
 7.48, 7.230633612
 7.82, 7.547992988
 8.16, 7.864422393
 8.5, 8.179928876
 8.84, 8.494519544
 9.18, 8.808201551
 9.52, 9.120982102
 9.86, 9.43286845
 10.2, 9.743867889
 10.54, 10.05398776
 10.88, 10.36323544
 11.22, 10.67161836
 11.56, 10.97914397
 11.9, 11.28581976
 12.24, 11.59165326
 12.58, 11.89665203
 12.92, 12.20082366
 13.26, 12.50417577
 13.6, 12.80671602
 13.94, 13.10845206
 14.28, 13.4093916
 14.62, 13.70954236
 14.96, 14.00891209
 15.3, 14.30750855
 15.64, 14.60533952
 15.98, 14.9024128
 16.32, 15.19873622
 16.66, 15.4943176
 17, 15.7891648
 17.34, 16.08328567
 17.68, 16.3766881
 18.02, 16.66937996
 18.36, 16.96136915
 18.7, 17.25266358
 19.04, 17.54327117
 19.38, 17.83319983
 19.72, 18.12245749
 20.06, 18.41105209
 20.4, 18.69899156
 20.74, 18.98628386
 21.08, 19.27293691
 21.42, 19.55895869
 21.76, 19.84435713
 22.1, 20.12914019
 22.44, 20.41331583
 22.78, 20.696892
 23.12, 20.97987666
 23.46, 21.26227775
 23.8, 21.54410323
 24.14, 21.82536106
 24.48, 22.10605917
 24.82, 22.38620552
 25.16, 22.66580804
 25.5, 22.94487467
 25.84, 23.22341335
 26.18, 23.50143201
 26.52, 23.77893858
 26.86, 24.05594096
 27.2, 24.33244708
 27.54, 24.60846485
 27.88, 24.88400216
 28.22, 25.15906692
 28.56, 25.43366702
 28.9, 25.70781034
 29.24, 25.98150476
 29.58, 26.25475814
 29.92, 26.52757835
 30.26, 26.79997325
 30.6, 27.07195069
 30.94, 27.3435185
 31.28, 27.61468451
 31.62, 27.88545657
 31.96, 28.15584247
 32.3, 28.42585004
 32.64, 28.69548708
 32.98, 28.96476137
 33.32, 29.23368071
 33.66, 29.50225288
 34, 29.77048564
ENDTABLE
STEER_KIN_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -28.8, -25.49
 -27.65, -24.57
 -26.5, -23.64
 -25.34, -22.7
 -24.19, -21.76
 -23.04, -20.82
 -21.89, -19.86
 -20.74, -18.9
 -19.58, -17.94
 -18.43, -16.96
 -17.28, -15.97
 -16.13, -14.98
 -14.98, -13.98
 -13.82, -12.97
 -12.67, -11.95
 -11.52, -10.92
 -10.37, -9.88
 -9.22, -8.82
 -8.06, -7.76
 -6.91, -6.69
 -5.76, -5.6
 -4.61, -4.51
 -3.46, -3.4
 -2.3, -2.28
 -1.15, -1.15
 0, 0
 1.15, 1.16
 2.3, 2.33
 3.46, 3.52
 4.61, 4.71
 5.76, 5.93
 6.91, 7.15
 8.06, 8.39
 9.22, 9.64
 10.37, 10.91
 11.52, 12.19
 12.67, 13.49
 13.82, 14.8
 14.98, 16.12
 16.13, 17.46
 17.28, 18.81
 18.43, 20.17
 19.58, 21.55
 20.74, 22.94
 21.89, 24.34
 23.04, 25.76
 24.19, 27.18
 25.34, 28.62
 26.5, 30.07
 27.65, 31.53
 28.8, 32.99
ENDTABLE
STEER_KIN_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -28.8, -32.99
 -27.65, -31.53
 -26.5, -30.07
 -25.34, -28.62
 -24.19, -27.18
 -23.04, -25.76
 -21.89, -24.34
 -20.74, -22.94
 -19.58, -21.55
 -18.43, -20.17
 -17.28, -18.81
 -16.13, -17.46
 -14.98, -16.12
 -13.82, -14.8
 -12.67, -13.49
 -11.52, -12.19
 -10.37, -10.91
 -9.22, -9.64
 -8.06, -8.39
 -6.91, -7.15
 -5.76, -5.93
 -4.61, -4.71
 -3.46, -3.52
 -2.3, -2.33
 -1.15, -1.16
 0, 0
 1.15, 1.15
 2.3, 2.28
 3.46, 3.4
 4.61, 4.51
 5.76, 5.6
 6.91, 6.69
 8.06, 7.76
 9.22, 8.82
 10.37, 9.88
 11.52, 10.92
 12.67, 11.95
 13.82, 12.97
 14.98, 13.98
 16.13, 14.98
 17.28, 15.97
 18.43, 16.96
 19.58, 17.94
 20.74, 18.9
 21.89, 19.86
 23.04, 20.82
 24.19, 21.76
 25.34, 22.7
 26.5, 23.64
 27.65, 24.57
 28.8, 25.49
ENDTABLE
STEER_KIN_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IUNIT and IAXLE are used to identify the dataset when reading
! data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,2) 0.10639 ! Coefficient: steer per unit roll
                                              ! (deg/deg), unit 3, axle 2
SUSP_AXLE_ROLL_STEER_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                                 ! steer
SUSP_AXLE_ROLL_STEER_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(4,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 16 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 2, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(3,1,1) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(3,1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 3, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get suspension
                        ! dive
SUSP_DIVE_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(3,1,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(3,1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; deg ! Constant suspension dive
                                           ! component due to jounce (other side),
                                           ! unit 3, axle 1, right side

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 8 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IUNIT and IAXLE are used to identify
! the dataset when reading data.

SUSP_DIVE_AXLE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive, unit 1, axle 1
SUSP_DIVE_AXLE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive, unit 1, axle 2
SUSP_DIVE_AXLE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,2) 0 ; deg ! Constant suspension dive, unit 2, axle 2
SUSP_DIVE_AXLE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,2) 0 ; deg ! Constant suspension dive, unit 3, axle 2
SUSP_DIVE_AXLE_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,1) 0 ; deg ! Constant suspension dive, unit 4, axle 1
SUSP_DIVE_AXLE_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,2) 0 ; deg ! Constant suspension dive, unit 4, axle 2
SUSP_DIVE_AXLE_OFFSET(4,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 16 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 2, axle 1, right
                                          ! side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(3,1,1) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(3,1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 3, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get Lateral
                       ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                         ! inward of unsteered wheel
JNC_START_SUSP_LAT(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(3,1,2) 1 ! Scale factor divided into (jounce -
                            ! JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(3,1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; mm ! Constant Lateral movement inward of
                                          ! unsteered wheel component due to jounce
                                          ! (other side), unit 3, axle 1, right
                                          ! side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 16 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 2, axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(3,1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(3,1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 3, axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get X movement forward of
                       ! unsteered wheel
JNC_START_SUSP_X(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(3,1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(3,1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; mm ! Constant X movement forward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), unit 3, axle 1, right side

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 8 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IUNIT and IAXLE
! are used to identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1,1) 0 ; mm ! Constant X axle movement forward, unit 1, axle 1
SUSP_X_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(1,2) 0 ; mm ! Constant X axle movement forward, unit 1, axle 2
SUSP_X_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

! 1D table: col 1 = jounce (mm), col 2 = X axle movement forward (mm)
SUSP_X_AXLE_TABLE(2,2) SPLINE ! unit 2, axle 2
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_AXLE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
JNC_START_SUSP_X_AXLE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X_AXLE(2,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_X_AXLE)

! 1D table: col 1 = jounce (mm), col 2 = X axle movement forward (mm)
SUSP_X_AXLE_TABLE(3,2) SPLINE ! unit 3, axle 2
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_AXLE_GAIN(3,2) 1 ! Gain multiplied with calculated value to get X axle
                        ! movement forward
SUSP_X_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward
JNC_START_SUSP_X_AXLE(3,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X_AXLE(3,2) 1 ! Scale factor divided into (jounce -
                             ! JNC_START_SUSP_X_AXLE)

SUSP_X_AXLE_CONSTANT(4,1) 0 ; mm ! Constant X axle movement forward, unit 4, axle 1
SUSP_X_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,2) 0 ; mm ! Constant X axle movement forward, unit 4, axle 2
SUSP_X_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,1) SPLINE ! unit 1, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10.053, 16.793
 -8.3636, 14.014
 -6.6819, 11.23
 -5.0063, 8.4357
 -3.335, 5.6313
 -1.6668, 2.8181
 0, 0
 1.6668, -2.8181
 3.335, -5.6313
 5.0063, -8.4357
 6.6819, -11.23
 8.3636, -14.014
 10.053, -16.793
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,2) SPLINE ! unit 3, axle 2
 -10.053, 16.793
 -8.3636, 14.014
 -6.6819, 11.23
 -5.0063, 8.4357
 -3.335, 5.6313
 -1.6668, 2.8181
 0, 0
 1.6668, -2.8181
 3.335, -5.6313
 5.0063, -8.4357
 6.6819, -11.23
 8.3636, -14.014
 10.053, -16.793
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,1) SPLINE ! unit 4, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,2) SPLINE ! unit 4, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

THROTTLE_ENGINE_CONSTANT(1) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(2) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(3) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(4) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(4) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 16
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(2,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 2, axle 1,
                                          ! right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(3,1,1)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(3,1,1)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(3,1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(3,1,1) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(3,1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(3,1,1) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 3, axle 1,
                                          ! left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(3,1,2)     1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(3,1,2)   0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(3,1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(3,1,2) 1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(3,1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(3,1,2) 0 ; deg ! Constant toe component due to
                                          ! jounce (other side), unit 3, axle 1,
                                          ! right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

TPREV_CONSTANT(1) 0.75 ; s ! Constant preview time
TPREV_GAIN(1)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(1)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(2) 0.75 ; s ! Constant preview time
TPREV_GAIN(2)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(2)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(3) 0.75 ; s ! Constant preview time
TPREV_GAIN(3)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(3)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(4) 0.75 ; s ! Constant preview time
TPREV_GAIN(4)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(4)     0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 68 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IGEAR are used to identify the dataset when
! reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 160.83
 0.1, 160.83
 0.2, 170.65
 0.3, 180.46
 0.4, 190.27
 0.5, 200.09
 0.6, 209.9
 0.7, 219.71
 0.8, 229.53
 0.9, 218.96
 1, 218.96
ENDTABLE
UPSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 352.09
 0.1, 352.09
 0.2, 368.75
 0.3, 385.41
 0.4, 402.08
 0.5, 418.74
 0.6, 435.41
 0.7, 452.07
 0.8, 468.74
 0.9, 485.4
 1, 485.4
ENDTABLE
UPSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 513.32
 0.1, 513.32
 0.2, 553.91
 0.3, 594.49
 0.4, 635.08
 0.5, 675.66
 0.6, 716.25
 0.7, 756.84
 0.8, 797.42
 0.9, 838.01
 1, 838.01
ENDTABLE
UPSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 807.14
 0.2, 807.14
 0.3, 874.84
 0.4, 942.55
 0.5, 1010.3
 0.6, 1078
 0.7, 1145.7
 0.8, 1213.4
 0.9, 1281.1
 1, 1281.1
ENDTABLE
UPSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 1030.9
 0.2, 1030.9
 0.3, 1163
 0.4, 1295.2
 0.5, 1427.4
 0.6, 1559.5
 0.7, 1691.7
 0.8, 1823.9
 0.9, 1934
 1, 1934
ENDTABLE
UPSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,6) LINEAR_FLAT ! vehicle 1, gear shift 6<->7
 0, 2743.9
 0.8, 2743.9
 0.9, 2907.8
 1, 2907.8
ENDTABLE
UPSHIFT_TRANS_GAIN(1,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 331
 0.2, 331
 0.8, 1277
 1, 1277
ENDTABLE
UPSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 426
 0.2, 426
 0.8, 2188
 1, 2188
ENDTABLE
UPSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 600
 0.2, 600
 0.8, 2809
 1, 2809
ENDTABLE
UPSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 845
 0.2, 845
 0.8, 3960
 1, 3960
ENDTABLE
UPSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 984
 0.2, 984
 0.8, 5577
 1, 5577
ENDTABLE
UPSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,1) LINEAR_FLAT ! vehicle 3, gear shift 1<->2
 0, 874
 0.2, 874
 0.8, 1653
 1, 1653
ENDTABLE
UPSHIFT_TRANS_GAIN(3,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,2) LINEAR_FLAT ! vehicle 3, gear shift 2<->3
 0, 1282
 0.2, 1282
 0.8, 2840
 1, 2840
ENDTABLE
UPSHIFT_TRANS_GAIN(3,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,3) LINEAR_FLAT ! vehicle 3, gear shift 3<->4
 0, 1800
 0.2, 1800
 0.8, 4167
 1, 4167
ENDTABLE
UPSHIFT_TRANS_GAIN(3,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,4) LINEAR_FLAT ! vehicle 3, gear shift 4<->5
 0, 2525
 0.2, 2525
 0.8, 5850
 1, 5850
ENDTABLE
UPSHIFT_TRANS_GAIN(3,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3,5) LINEAR_FLAT ! vehicle 3, gear shift 5<->6
 0, 3093
 0.2, 3093
 0.8, 8205
 1, 8205
ENDTABLE
UPSHIFT_TRANS_GAIN(3,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(3,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(3,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,1) LINEAR_FLAT ! vehicle 4, gear shift 1<->2
 0, 158
 0.2, 158
 0.8, 260
 1, 260
ENDTABLE
UPSHIFT_TRANS_GAIN(4,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,2) LINEAR_FLAT ! vehicle 4, gear shift 2<->3
 0, 237
 0.2, 237
 0.8, 500
 1, 500
ENDTABLE
UPSHIFT_TRANS_GAIN(4,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,3) LINEAR_FLAT ! vehicle 4, gear shift 3<->4
 0, 356
 0.2, 356
 0.8, 950
 1, 950
ENDTABLE
UPSHIFT_TRANS_GAIN(4,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,4) LINEAR_FLAT ! vehicle 4, gear shift 4<->5
 0, 633
 0.1, 633
 0.8, 1545
 1, 1545
ENDTABLE
UPSHIFT_TRANS_GAIN(4,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,5) LINEAR_FLAT ! vehicle 4, gear shift 5<->6
 0, 800
 0.1, 800
 0.8, 2374
 1, 2374
ENDTABLE
UPSHIFT_TRANS_GAIN(4,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4,6) LINEAR_FLAT ! vehicle 4, gear shift 6<->7
 0, 1067
 0.2, 1067
 0.8, 2790
 1, 2790
ENDTABLE
UPSHIFT_TRANS_GAIN(4,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(4,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(4,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! SPLINE X-Y TABLES FOR PATH SEGMENTS
!------------------------------------------------------------------------------------
! Following are up to 500 tables of X-Y global coordinates used to make spline
! segments for reference paths. Tables are listed here only if used in a path. If
! indices shown below are not used, e.g., SEGMENT_XY_TABLE(1), the current value
! of the index ITAB_XY is used to identify the table when reading data.

! NTAB_XY 5 ! CALC -- Current number of XY spline tables for path segments

XY_TABLE_ID(1)      1 ; Ego Vehicle Path S to W Segment 1
SEGMENT_XY_TABLE(1) ! table with X (m), Y (m), and calculated station S (m)
 153.658, 0, 0
 153.658, 100, 100
 153.658, 102.5658, 102.566
 153.4551, 106.5096, 106.515
 152.9314, 109.9028, 109.948
 152.2155, 112.9876, 113.115
 151.436, 116.0061, 116.232
 150.7212, 119.2005, 119.506
 150.1997, 122.8128, 123.156
 150, 127.0854, 127.433
 150, 142.5051, 142.853
 149.7048, 145.0657, 145.43
 148.864, 147.4145, 147.925
 147.5447, 149.4851, 150.38
 145.8141, 151.2112, 152.824
 143.7392, 152.5263, 155.281
 141.3873, 153.364, 157.778
 138.8255, 153.658, 160.356
 100, 153.658, 199.182
 0, 153.658, 299.182
ENDTABLE

XY_TABLE_ID(2)      2 ; Cyclist Path S to N Segment 1
SEGMENT_XY_TABLE(2) ! table with X (m), Y (m), and calculated station S (m)
 153.658, 0, 0
 153.658, 100, 100
 153.658, 104.7619, 104.762
 153.658, 109.5238, 109.524
 153.658, 114.2857, 114.286
 153.658, 119.0476, 119.048
 153.658, 123.8095, 123.809
 153.658, 128.5714, 128.571
 153.658, 133.3333, 133.333
 153.658, 138.0952, 138.095
 153.658, 142.8571, 142.857
 153.658, 147.619, 147.619
 153.658, 152.381, 152.381
 153.658, 157.1429, 157.143
 153.658, 161.9048, 161.905
 153.658, 166.6667, 166.667
 153.658, 171.4286, 171.429
 153.658, 176.1905, 176.19
 153.658, 180.9524, 180.952
 153.658, 185.7143, 185.714
 153.658, 190.4762, 190.476
 153.658, 195.2381, 195.238
 153.658, 200, 200
 153.658, 300, 300
ENDTABLE

XY_TABLE_ID(3)      3 ; Pedestrian Path E to W Segment 1
SEGMENT_XY_TABLE(3) ! table with X (m), Y (m), and calculated station S (m)
 300, 153.658, 0
 200, 153.658, 100
 195.2381, 153.658, 104.762
 190.4762, 153.658, 109.524
 185.7143, 153.658, 114.286
 180.9524, 153.658, 119.048
 176.1905, 153.658, 123.81
 171.4286, 153.658, 128.571
 166.6667, 153.658, 133.333
 161.9048, 153.658, 138.095
 157.1429, 153.658, 142.857
 152.381, 153.658, 147.619
 147.619, 153.658, 152.381
 142.8571, 153.658, 157.143
 138.0952, 153.658, 161.905
 133.3333, 153.658, 166.667
 128.5714, 153.658, 171.429
 123.8095, 153.658, 176.19
 119.0476, 153.658, 180.952
 114.2857, 153.658, 185.714
 109.5238, 153.658, 190.476
 104.7619, 153.658, 195.238
 100, 153.658, 200
 0, 153.658, 300
ENDTABLE

XY_TABLE_ID(4)      4 ; Traffic Path W to E Segment 1
SEGMENT_XY_TABLE(4) ! table with X (m), Y (m), and calculated station S (m)
 0, 146.342, 0
 100, 146.342, 100
 200, 146.342, 200
 300, 146.342, 300
ENDTABLE

XY_TABLE_ID(5)      5 ; Traffic Path N to E Segment 1
SEGMENT_XY_TABLE(5) ! table with X (m), Y (m), and calculated station S (m)
 146.342, 300, 0
 146.342, 200, 100
 146.342, 196.4177, 103.582
 146.352, 195.6376, 104.362
 146.3812, 194.882, 105.119
 146.4282, 194.1489, 105.853
 146.492, 193.4362, 106.569
 146.5712, 192.742, 107.267
 146.6645, 192.0641, 107.952
 146.7708, 191.4005, 108.624
 146.922, 190.5776, 109.461
 147.0895, 189.7701, 110.285
 147.2706, 188.974, 111.102
 147.4629, 188.185, 111.914
 147.6639, 187.399, 112.725
 147.8709, 186.6118, 113.539
 148.0816, 185.8193, 114.359
 148.308, 184.9612, 115.246
 148.5325, 184.0871, 116.149
 148.7521, 183.1921, 117.071
 148.9636, 182.2708, 118.016
 149.164, 181.3184, 118.989
 149.3501, 180.3297, 119.995
 149.519, 179.2996, 121.039
 149.6365, 178.4655, 121.881
 149.7402, 177.6007, 122.752
 149.8285, 176.703, 123.654
 149.9002, 175.7699, 124.59
 149.9536, 174.799, 125.563
 149.9874, 173.7879, 126.574
 150, 172.7342, 127.628
 150, 157.5652, 142.797
 150.0138, 157.003, 143.359
 150.0547, 156.4476, 143.916
 150.1222, 155.8999, 144.468
 150.2155, 155.3605, 145.015
 150.334, 154.83, 145.559
 150.4772, 154.3091, 146.099
 150.6442, 153.7985, 146.637
 150.8593, 153.2388, 147.236
 151.1029, 152.6938, 147.833
 151.3739, 152.1646, 148.428
 151.6715, 151.652, 149.02
 151.9948, 151.157, 149.612
 152.3429, 150.6806, 150.202
 152.7149, 150.2237, 150.791
 153.1453, 149.7503, 151.431
 153.6016, 149.3023, 152.07
 154.0827, 148.8808, 152.71
 154.5875, 148.4873, 153.35
 155.1147, 148.1228, 153.991
 155.6633, 147.7885, 154.633
 156.232, 147.4858, 155.277
 156.8762, 147.1919, 155.985
 157.5417, 146.9389, 156.697
 158.2269, 146.7283, 157.414
 158.9302, 146.5617, 158.137
 159.6502, 146.4407, 158.867
 160.3852, 146.3669, 159.606
 161.1339, 146.342, 160.355
 200, 146.342, 199.221
 300, 146.342, 299.221
ENDTABLE


!------------------------------------------------------------------------------------
! VS TERRAIN
!------------------------------------------------------------------------------------
VS_TERRAIN_FILE Scene_Import\VS_Scene_Builder\City_Intersection_Many_Paths.vsterrain ;

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER SPEED_SIGN = 100; - ; Speed limit sign (object type)
DEFINE_PARAMETER STOP_SIGN = 101; - ; Stop sign (object type)
DEFINE_PARAMETER YIELD_SIGN = 102; - ; Yield sign (object type)
DEFINE_PARAMETER LIGHT_GREEN = 110; - ; Traffic light green (object type)
DEFINE_PARAMETER LIGHT_YELLOW = 111; - ; Traffic light yellow (object type)
DEFINE_PARAMETER LIGHT_RED = 112; - ; Traffic light red (object type)
DEFINE_PARAMETER WALL = 150; - ; Wall (object type)
DEFINE_PARAMETER BUILDING = 151; - ; Building (object type)
DEFINE_PARAMETER TRAFFIC = 200; - ; Traffic vehicle (object type)
DEFINE_PARAMETER PEDESTRIAN = 201; - ; Pedestrian or bike (object type)
DEFINE_PARAMETER VEHICLE = 200; - ; Vehicle (object type)
DEFINE_PARAMETER SPEED_LIMIT_ID = 2000; - ; ID for speed limit dataset for path preview
DEFINE_PARAMETER STOP_ID = 2001; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_SIG_PERIOD = 30; s ; Period of a signal cycle
DEFINE_PARAMETER R_SIG_START = 0.75; - ; Fraction of signal period at T = 0
DEFINE_PARAMETER AX_BRAKE = 4; m/s2 ; Deceleration level to apply brakes
DEFINE_PARAMETER S1 = 1; - ; Sensor installed for current vehicle
DEFINE_PARAMETER S2 = 2; - ; Sensor installed for vehicle 2
DEFINE_PARAMETER STOP_ID_2 = 2002; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_EVENT2_START = 0; s ; Reference time for T_Event2
DEFINE_PARAMETER S3 = 3; - ; Sensor installed for vehicle 3
DEFINE_PARAMETER STOP_ID_3 = 2003; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_EVENT3_START = 0; s ; Reference time for T_Event3
DEFINE_PARAMETER S4 = 4; - ; Sensor installed for vehicle 4
DEFINE_PARAMETER STOP_ID_4 = 2004; - ; ID for target speed that has V=0 at S=0
DEFINE_PARAMETER T_EVENT4_START = 0; s ; Reference time for T_Event4

DEFINE_VARIABLE V_CMD_OBJ_4 = 18; km/h ; Speed command
DEFINE_VARIABLE HEADV_O_4 = 0; - ; Heading vector for ODEs
DEFINE_VARIABLE V_CMD_OBJ_5 = 4.5; km/h ; Speed command
DEFINE_VARIABLE HEADV_O_5 = 0; - ; Heading vector for ODEs

DEFINE_OUTPUT ObjCrit = 1; - ; Critical object for this vehicle 
DEFINE_OUTPUT AxCrit = 0; m/s2 ; Required decel for ObjCrit 
DEFINE_OUTPUT IDcrit = 7; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB = 0; - ; Boolean: apply brakes? 
DEFINE_OUTPUT DistCrit = 0; m ; Distance to object bdry 
DEFINE_OUTPUT TypeNear = 0; - ; Type of nearest object 
DEFINE_OUTPUT ID_near = 7; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo = 1; - ; Boolean: 1 if clear to go 
DEFINE_OUTPUT T_Event2 = 0; s ; Event time for vehicle 2 
DEFINE_OUTPUT ObjCrit2 = 1; - ; Critical object for vehicle 2 
DEFINE_OUTPUT AxCrit2 = 0; m/s2 ; Required decel for ObjCrit2 
DEFINE_OUTPUT IDcrit2 = 8; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB2 = 0; - ; Boolean: apply brakes for vehicl 
DEFINE_OUTPUT DistCrit2 = 0; m ; Distance to critical object 
DEFINE_OUTPUT TypeNear2 = 0; - ; Type of nearest object 
DEFINE_OUTPUT ID_near2 = 8; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB2 = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo2 = 1; - ; Boolean: 1 if clear to go 
DEFINE_OUTPUT T_Event3 = 0; s ; Event time for vehicle 3 
DEFINE_OUTPUT ObjCrit3 = 1; - ; Critical object for vehicle 3 
DEFINE_OUTPUT AxCrit3 = 0; m/s2 ; Required decel for ObjCrit3 
DEFINE_OUTPUT IDcrit3 = 6; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB3 = 0; - ; Boolean: apply brakes for vehicl 
DEFINE_OUTPUT DistCrit3 = 0; m ; Distance to critical object 
DEFINE_OUTPUT TypeNear3 = 0; - ; Type of nearest object 
DEFINE_OUTPUT ID_near3 = 6; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB3 = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo3 = 1; - ; Boolean: 1 if clear to go 
DEFINE_OUTPUT T_Event4 = 0; s ; Event time for vehicle 4 
DEFINE_OUTPUT ObjCrit4 = 1; - ; Critical object for vehicle 4 
DEFINE_OUTPUT AxCrit4 = 0; m/s2 ; Required decel for ObjCrit4 
DEFINE_OUTPUT IDcrit4 = 3; - ; ID of critical Obj 
DEFINE_OUTPUT ApplyAEB4 = 0; - ; Boolean: apply brakes for vehicl 
DEFINE_OUTPUT DistCrit4 = 0; m ; Distance to critical object 
DEFINE_OUTPUT TypeNear4 = 101; - ; Type of nearest object 
DEFINE_OUTPUT ID_near4 = 3; - ; ID of nearest 
DEFINE_OUTPUT NeedAEB4 = 0; - ; Boolean: 1 if AEB is needed 
DEFINE_OUTPUT ClearGo4 = 1; - ; Boolean: 1 if clear to go 

!------------------------------------------------------------------------------------
! DEFINED FUNCTIONS
!------------------------------------------------------------------------------------
! Each defined function has optional variables, a sequence of equations, and an
! optional return statement. A defined function may also have arguments.
BEGIN_FUNCTION LIGHT_TYPE(R_TIME); r_time is fraction of cycle for a light
  DEFINE_LOCAL T_CYCLE
  T_CYCLE = FMOD(T + R_TIME*T_SIG_PERIOD, T_SIG_PERIOD);
  RETURN LIGHT_GREEN + T_CYCLE > (T_SIG_PERIOD/2 -5) + T_CYCLE > (T_SIG_PERIOD/2 -2);
END_FUNCTION

BEGIN_FUNCTION DIST_BDRY(IDS, IDO); X distance from vehicle bumper to object boundary
  RETURN IF(IDO & (DETECT_TYPE(IDS, IDO) >= VEHICLE), DETECT_X(IDS, IDO) + X_SENSOR(IDS) -1 -DETECT_MSG(IDS, IDO), 0);
END_FUNCTION

BEGIN_FUNCTION AX_AEB(IDS, IDO); Ax needed for target within 3m laterally
  DEFINE_LOCAL COND, DISTX, VX
  DISTX = IF(IDO, DIST_BDRY(IDS, IDO), 0);
  VX = IF(IDO, DETECT_VX(IDS, IDO), 0);
  COND = IF(DISTX & (VX < 0), ABS(DETECT_Y(IDS, IDO) -(DETECT_VY(IDS, IDO)*DISTX/VX)) < 3, 0);
  RETURN IF(COND, VX*VX/(2*DISTX), 0);
END_FUNCTION

BEGIN_FUNCTION OBJ_CRIT(IDS); find object requiring most decel among the 1st 4
  DEFINE_LOCAL IOBJ, AX_CRIT, AX
  IOBJ = 1;
  AX_CRIT = 0;
  AX = AX_AEB(IDS, 1);
  AX_CRIT = IF(AX > AX_CRIT, AX, AX_CRIT);
  AX = AX_AEB(IDS, 2);
  IOBJ = IF(AX > AX_CRIT, 2, IOBJ);
  AX_CRIT = IF(AX > AX_CRIT, AX, AX_CRIT);
  AX = AX_AEB(IDS, 3);
  IOBJ = IF(AX > AX_CRIT, 3, IOBJ);
  AX_CRIT = IF(AX > AX_CRIT, AX, AX_CRIT);
  AX = AX_AEB(IDS, 4);
  IOBJ = IF(AX > AX_CRIT, 4, IOBJ);
  RETURN IOBJ;
END_FUNCTION

BEGIN_FUNCTION IS_CLR(IDS, IOBJ); True if there's a clear path for object iobj
  DEFINE_LOCAL DIST
  DIST = DETECT_DIST(IDS, IOBJ);
  RETURN (((DETECT_TYPE(IDS, IOBJ) < VEHICLE) | (DIST > 45)) | (DIST <= 0)) | (AX_AEB(IDS, IOBJ) < 0.01);
END_FUNCTION

BEGIN_FUNCTION NEED_AEB(IDS, IOBJ); Need to brake?
  RETURN IF(IOBJ, AX_AEB(IDS, IOBJ) > AX_BRAKE, 0);
END_FUNCTION

!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST AFTER INITIALIZATION)
!------------------------------------------------------------------------------------
EQ_INIT X_OBJ_2 = 155.75;
EQ_INIT Y_OBJ_2 = 138.25;
EQ_INIT X_OBJ_3 = 144.25;
EQ_INIT Y_OBJ_3 = 161.75;
EQ_INIT HEADO_4 = 0;
EQ_INIT S_OBJ_4 = 50;
EQ_INIT LATO_4 = -155;
EQ_INIT HEADO_5 = 0;
EQ_INIT S_OBJ_5 = 142;
EQ_INIT LATO_5 = -141;
EQ_INIT X_OBJ_6 = 150;
EQ_INIT Y_OBJ_6 = 150;
EQ_INIT X_OBJ_7 = 150;
EQ_INIT Y_OBJ_7 = 150;
EQ_INIT X_OBJ_8 = 150;
EQ_INIT Y_OBJ_8 = 150;
EQ_INIT X_OBJ_9 = 150;
EQ_INIT Y_OBJ_9 = 150;

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN CLEARGO = ((IS_CLR(S1, 1) & IS_CLR(S1, 2)) & IS_CLR(S1, 3)) & IS_CLR(S1, 4);
EQ_IN YAWO_2 = -PI/2;
EQ_IN YAWO_3 = PI/2;
EQ_IN CLEARGO2 = ((IS_CLR(S2, 1) & IS_CLR(S2, 2)) & IS_CLR(S2, 3)) & IS_CLR(S2, 4);
EQ_IN CLEARGO3 = ((IS_CLR(S3, 1) & IS_CLR(S3, 2)) & IS_CLR(S3, 3)) & IS_CLR(S3, 4);
EQ_IN CLEARGO4 = ((IS_CLR(S4, 1) & IS_CLR(S4, 2)) & IS_CLR(S4, 3)) & IS_CLR(S4, 4);

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT OBJCRIT = OBJ_CRIT(S1);
EQ_OUT AXCRIT = AX_AEB(S1, OBJCRIT);
EQ_OUT IDCRIT = DETECT_ID(S1, OBJCRIT);
EQ_OUT APPLYAEB = AXCRIT > AX_BRAKE;
EQ_OUT DISTCRIT = DIST_BDRY(S1, OBJCRIT);
EQ_OUT TYPENEAR = DETECT_TYPE(S1, 1);
EQ_OUT ID_NEAR = DETECT_ID(S1, 1);
EQ_OUT NEEDAEB = ((NEED_AEB(S1, 1) | NEED_AEB(S1, 2)) | NEED_AEB(S1, 3)) | NEED_AEB(S1, 4);
EQ_OUT AX_SCCMD = -AXCRIT;
EQ_OUT V_CMD_OBJ_4 = 5;
EQ_OUT V_CMD_OBJ_5 = 1.25;
EQ_OUT T_EVENT2 = T -T_EVENT2_START;
EQ_OUT OBJCRIT2 = OBJ_CRIT(S2);
EQ_OUT AXCRIT2 = AX_AEB(S2, OBJCRIT2);
EQ_OUT IDCRIT2 = DETECT_ID(S2, OBJCRIT2);
EQ_OUT APPLYAEB2 = AXCRIT2 > AX_BRAKE;
EQ_OUT DISTCRIT2 = DIST_BDRY(S2, OBJCRIT2);
EQ_OUT TYPENEAR2 = DETECT_TYPE(S2, 1);
EQ_OUT ID_NEAR2 = DETECT_ID(S2, 1);
EQ_OUT NEEDAEB2 = ((NEED_AEB(S2, 1) | NEED_AEB(S2, 2)) | NEED_AEB(S2, 3)) | NEED_AEB(S2, 4);
EQ_OUT AX_SCCMD_2 = -AXCRIT2;
EQ_OUT T_EVENT3 = T -T_EVENT3_START;
EQ_OUT OBJCRIT3 = OBJ_CRIT(S3);
EQ_OUT AXCRIT3 = AX_AEB(S3, OBJCRIT3);
EQ_OUT IDCRIT3 = DETECT_ID(S3, OBJCRIT3);
EQ_OUT APPLYAEB3 = AXCRIT3 > AX_BRAKE;
EQ_OUT DISTCRIT3 = DIST_BDRY(S3, OBJCRIT3);
EQ_OUT TYPENEAR3 = DETECT_TYPE(S3, 1);
EQ_OUT ID_NEAR3 = DETECT_ID(S3, 1);
EQ_OUT NEEDAEB3 = ((NEED_AEB(S3, 1) | NEED_AEB(S3, 2)) | NEED_AEB(S3, 3)) | NEED_AEB(S3, 4);
EQ_OUT AX_SCCMD_3 = -AXCRIT3;
EQ_OUT T_EVENT4 = T -T_EVENT4_START;
EQ_OUT OBJCRIT4 = OBJ_CRIT(S4);
EQ_OUT AXCRIT4 = AX_AEB(S4, OBJCRIT4);
EQ_OUT IDCRIT4 = DETECT_ID(S4, OBJCRIT4);
EQ_OUT APPLYAEB4 = AXCRIT4 > AX_BRAKE;
EQ_OUT DISTCRIT4 = DIST_BDRY(S4, OBJCRIT4);
EQ_OUT TYPENEAR4 = DETECT_TYPE(S4, 1);
EQ_OUT ID_NEAR4 = DETECT_ID(S4, 1);
EQ_OUT NEEDAEB4 = ((NEED_AEB(S4, 1) | NEED_AEB(S4, 2)) | NEED_AEB(S4, 3)) | NEED_AEB(S4, 4);
EQ_OUT AX_SCCMD_4 = -AXCRIT4;

!------------------------------------------------------------------------------------
! DIFFERENTIAL EQUATIONS FOR NEW STATE VARIABLES (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_DIFFERENTIAL LATO_4 = SIN(HEADV_O_4)*V_CMD_OBJ_4;
EQ_DIFFERENTIAL S_OBJ_4 = COS(HEADV_O_4)*V_CMD_OBJ_4;
EQ_DIFFERENTIAL LATO_5 = SIN(HEADV_O_5)*V_CMD_OBJ_5;
EQ_DIFFERENTIAL S_OBJ_5 = COS(HEADV_O_5)*V_CMD_OBJ_5;

!------------------------------------------------------------------------------------
! EVENTS
!------------------------------------------------------------------------------------
! Each event is defined with a formula and an optional pathname for a parsfile to
! read if the specified formula is not zero. If no pathname is specified and the
! specified formula is not zero, then the run stops.
SET_EVENT_ID 1
DEFINE_EVENT TYPENEAR == STOP_SIGN; Events\Events_9d20bfb6-eef3-46f2-bffa-ccb64c03094a.par ! ID 1
DEFINE_EVENT APPLYAEB; Events\Events_c1762db0-7fe2-40b0-8c82-ff4ffc49c022.par ! ID 1
DEFINE_EVENT VXZ_FWD < 0.277778; Events\Events_61d9f76f-f0bc-4944-b31b-0b46f6a68e35.par ! ID 1
SET_EVENT_ID 2
DEFINE_EVENT TYPENEAR2 == STOP_SIGN; Events\Events_176a7475-7c4c-4f88-9cff-979a0066afdf.par ! ID 2
DEFINE_EVENT APPLYAEB2; Events\Events_2e95037c-61b4-41d9-91aa-1bcddd42c2cf.par ! ID 2
DEFINE_EVENT VXZ_FWD_2 < 0.277778; Events\Events_6c2f4ad3-a543-4255-b120-33435533c6b9.par ! ID 2
SET_EVENT_ID 3
DEFINE_EVENT TYPENEAR3 == STOP_SIGN; Events\Events_b248ae5d-bcf0-44c4-8bf3-b5707d315675.par ! ID 3
DEFINE_EVENT APPLYAEB3; Events\Events_acffe74c-af43-4d5f-aa62-05379a49096c.par ! ID 3
DEFINE_EVENT ((VXZ_FWD_3 < TYPENEAR2)== LIGHT_RED) | (TYPENEAR2 == LIGHT_YELLOW); Events\Events_7d2b2703-87ff-435a-a675-dd7ae6117f98.par ! ID 3
SET_EVENT_ID 4
DEFINE_EVENT TYPENEAR4 == STOP_SIGN; Events\Events_96b2daa5-7055-4265-85b4-aea2549ae5b6.par ! ID 4
DEFINE_EVENT APPLYAEB4; Events\Events_ecdada3f-44c4-41b4-a3e8-3aee41b03b6c.par ! ID 4
DEFINE_EVENT VXZ_FWD_4 < 0.277778; Events\Events_b2d8a1d9-d28e-4d84-b9a6-b84e54d7af55.par ! ID 4
SET_EVENT_ID 0


END
