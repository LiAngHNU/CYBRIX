PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT S_S

DATASET_TITLE Atlas: 3D Highway Exit (Raw GPS)
CATEGORY Scene Import
TITLE Atlas: 3D Highway Exit (Raw GPS) <Scene Import>

! Echo: Results\Run_266521ee-5ffd-4618-9c3c-a584c2686076\LastRun_echo.par
! This run was made 11:30 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    48 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE       88 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            1 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP             100 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 1003.782688 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1784.79808 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL 1.191269305e-10 ; mm ! CALC -- Y coordinate of TL CG
! M_TL           6042 ; kg ! CALC -- TL mass
! IXX_TL  3253.384475 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  51686.11498 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL   50614.7875 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU          1175 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1250 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             4455 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU         2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU        35402.8 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU        34802.6 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU           1626 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

HT_SM            1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM           4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM           1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM          1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         6.8 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       5000 ; mm ! Aerodynamic reference length
X_REF_AERO      -2500 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1)      510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1)         510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1)              80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
! ISPIN(1,1)     14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,2)     14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1)            10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)            10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1)      290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1)      36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)      36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)         544 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CG_AXLE(1)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(2)      530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(2,1)         530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(2)             215 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(2,1)     29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(2,2)     29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(2,1)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(2,2)   0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(2,1)            20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)            20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)        0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)        0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       5000 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(2)      679 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)        1043 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.3489932886 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(2)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 65.53293862 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 65.53293862 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1)         0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,2)         0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1)         0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,2)         0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1)        0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,2)        0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1)         0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,2)         0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1)         0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,2)         0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1)        0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,2)        0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1) 32766.46931 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1) 32766.46931 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 16383.23466 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 16383.23466 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 38101.28691 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 38101.28691 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1)     1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1)    890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1)    890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1)      890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1)        0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 7.801540313 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 7.801540313 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(2,1)        0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(2,2)        0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(2,1)        0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(2,2)        0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(2) 10922.15644 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(2) 10922.15644 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 5461.078219 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 5461.078219 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 21150.49239 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 21150.49239 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 7608.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(2)     1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(2)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(2)   1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(2)   1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(2)     1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(2)        0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
BETA_COL            2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL               0 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL             0 ; N-m ! [D] Steering column friction torque
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1)         0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1)     5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)        7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)        7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)        2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1)   0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1)    0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1)           0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1)         0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1)        100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)        100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1)  0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                      ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1)    0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1)           0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(2)         310 ; mm ! Dual-tire spacing for axle 2 [I]

OPT_TIRE_MODEL(1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 -> original
                        ! tabular model; 0 -> fully external model; 2 -> built-in
                        ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular
                        ! with camber extensions; 7 -> built-in Pacejka 5.2; 8 ->
                        ! TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI
                        ! tire model [I]
OPT_TIRE_COMB(1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                       ! theoretical combined slip; 1 -> use transition between the
                       ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                            ! transition to using instant slip when the time
                            ! constant is less than 12*TSTEP, 0 -> use fixed time
                            ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                            ! instant slip when absolute kappa is decreasing and
                            ! transition to instant slip when the time constant is
                            ! less than 12*TSTEP; 1 -> transition to instant slip
                            ! when the time constant is less than 12*TSTEP; 0 ->
                            ! use fixed time constant 12*TSTEP at high speeds
FZ_MAX(1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1)   30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1)         4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1)      91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1)    0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1)        1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1)  2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
VLOW_ALPHA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,2,1)   30000 ; N ! Reference vertical force
IT(1,2,1)         4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,2,1)      91 ; kg ! Mass of tire R1i
MU_REF_X(1,2,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,2,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,2,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,2,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(2,1,1)   30000 ; N ! Reference vertical force
IT(2,1,1)         4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(2,1,1)      0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(2,1,1)      91 ; kg ! Mass of tire L2i
MU_REF_X(2,1,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(2,1,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(2,1,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(2,1,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(2,1,2)   30000 ; N ! Reference vertical force
IT(2,1,2)         4.8 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(2,1,2)      0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(2,1,2)      91 ; kg ! Mass of tire L2o
MU_REF_X(2,1,2)   0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(2,1,2)   0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(2,1,2)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2)        510 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(2,1,2)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(2,2,1)   30000 ; N ! Reference vertical force
IT(2,2,1)         4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(2,2,1)      0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(2,2,1)      91 ; kg ! Mass of tire R2i
MU_REF_X(2,2,1)   0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(2,2,1)   0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(2,2,1)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(2,2,1)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(2,2,2)   30000 ; N ! Reference vertical force
IT(2,2,2)         4.8 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(2,2,2)      0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(2,2,2)      91 ; kg ! Mass of tire R2o
MU_REF_X(2,2,2)   0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(2,2,2)   0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(2,2,2)         520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2)        510 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(2,2,2)    0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2)        1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2)  2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2)  0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2)   2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)    2 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)    2 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)    2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)    2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise
R_DRIVE_SC(1)       0 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(2)       1 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                        ! diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of 2nd drive axle diff [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of 2nd drive axle diff [I]
R_GEAR_DIFF(2)      5 ; - ! Gear ratio of 2nd drive axle diff [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle diff
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE       725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             1.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE     1 ! Clutch control mode: 0 -> open-loop, 1 -> closed-loop (based
                      ! on shifting) [I]
OPT_CLUTCH_DELAY    1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE  0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE    0.1 ; s ! Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD    0.1 ; s ! Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL  0.3 ; s ! Time applying the clutch to full pressure during shift
                      ! [I]
T_CL_RE_ENGAGE    0.5 ; s ! Time clutch is fully re-engaged after starting shift [I]
T_GEAR_LAG        0.1 ; s ! Time lag in shifting
! T_TH_RETURN     0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED     0.4 ; s ! Time when throttle has returned to pre-shift level [I]
T_TH_ZERO         0.1 ; s ! Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD  0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL   0.3 ; s ! Time when starting to return throttle [I]
VLOW_CLUTCH         5 ; km/h ! Press the clutch pedal when average of wheel speeds
                      ! is below this speed while deccelerating with brake during
                      ! the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT 0.09 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL       0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE       0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -6.66 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1)           0.25 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)     7.48 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st-gear [I]

ITR(2)           0.25 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     4.43 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd-gear

ITR(3)            0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.92 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.92 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     2.76 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd-gear

ITR(4)            0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.92 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.92 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)      1.9 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th-gear

ITR(5)            0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.92 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.92 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)     1.34 ; - ! 5th-gear ratio of transmission
T_SHIFT_UP(5)      -1 ; - ! [D] Duration of up-shift from 5th-gear
T_SHIFT_DOWN(5)    -1 ; - ! [D] Duration of down-shift to 5th-gear

ITR(6)            0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia
R_EFF_TR_F(6)    0.92 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)    0.92 ; - ! 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)        1 ; - ! 6th-gear ratio of transmission
T_SHIFT_UP(6)      -1 ; - ! [D] Duration of up-shift from 6th-gear
T_SHIFT_DOWN(6)    -1 ; - ! [D] Duration of down-shift to 6th-gear

ITR(7)            0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia
R_EFF_TR_F(7)    0.92 ; - ! 7th-gear forward efficiency of transmission
R_EFF_TR_R(7)    0.92 ; - ! 7th-gear reverse efficiency of transmission
R_GEAR_TR(7)     0.74 ; - ! 7th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             3 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        3 ! VS Command to install reference paths

PATH_ID(1)          1 ; Path_1
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1) 87.31838921 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(1,1)  1 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(1,1) 2313.855945 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) -756.524693 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 1819.466219 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) 165.8718656 ; deg ! CALC -- Heading at end of segment
DEFINE_XY_TABLES    3 ! No. of XY spline tables (see the SPLINE TABLES section)

PATH_ID(2)          2 ; Jacksone Rd E
OPT_PATH_START(2)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! Station at the start of this path
! HEADING_START(2) -19.5100617 ; deg ! Heading at the start of this path
! X_PATH_START(2) -267.299892 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(2) 1436.245312 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        1 ! Number of segments in this path
SEGMENT_TYPE(2,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(2,1)  2 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(2,1) 633.786613 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 322.574869 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) 1206.312768 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) -15.07137145 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)          3 ; Path_1
OPT_PATH_START(3)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)      0 ; m ! Station at the start of this path
! HEADING_START(3) 109.327088 ; deg ! Heading at the start of this path
! X_PATH_START(3) 51.974979 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(3) -816.42715 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        1 ! Number of segments in this path
SEGMENT_TYPE(3,1)   1 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
XY_SEGMENT_ID(3,1)  3 ! XY_TABLE_ID number of spline table [I]
! S_SEGMENT_END(3,1) 3158.633579 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 1096.424555 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 1286.289305 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 8.849771922 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             3 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        3 ! VS Command to define road surfaces
CURRENT_ROAD_ID     2 ! ROAD_ID during initialization [I]

ROAD_ID(1)          1 ; I-94 North, Near Exit 172 (Raw GPS)
ROAD_PATH_ID(1)     1 ; PATH_ID for: I-94, Exit 172 (Jackson Ave), Raw GPS
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        0 ! [D] Number of ROAD_DZ layers added to the surface

ROAD_ID(2)          2 ; Jackson Ave, Near I-94 (Raw GPS)
ROAD_PATH_ID(2)     2 ; PATH_ID for: Jackson Ave Near I-94, Raw GPS
ROAD_SMAX_NEW_ID(2) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(2) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(2)        0 ! [D] Number of ROAD_DZ layers added to the surface

ROAD_ID(3)          3 ; I-94 Exit 172 to Jackson Ave (Raw GPS)
ROAD_PATH_ID(3)     3 ; PATH_ID for: Exit 172 (Jackson Ave), Raw GPS
ROAD_SMAX_NEW_ID(3) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(3) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(3)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             3 ! Number of LTARG datasets that are used in this run

PATH_ID_DM          2 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       1 ! [D] Set Xo, Yo, and Yaw to match path PATH_ID_DM and
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTART              0 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]
SSTOP             640 ; m ! Use to set OPT_DIRECTION (if OPT_DIRECTION = 0); stop
                      ! when the vehicle reaches this station (if OPT_STOP = 1)

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
INSTALL_DM_OUTPUTS    ! VS Command to install XYZ outputs DM preview point(s)
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      2 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              1 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           1 ! Braking and SC: 0 -> turn controller off while brakes are
                      ! applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018         0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC         2 ! SPEED_TARGET_ID for speed controller [I]
BK_PERF_SC        0.5 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC     15 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_KP         0.14 ; s/m ! Speed controller: proportional control gain
SPEED_KP3       0.001 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI         0.18 ; 1/m ! Speed controller: integral control gain
VX_IERR_DEAD_SC   1.5 ; m ! Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT 295.543732 ; m ! GPS altitude when Z = 0
GPS_REF_LAT  42.26972 ; deg ! GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG -83.78449 ; deg ! GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT           1 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 1 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; 1 Driver Preview Point, Set by DM
IUNIT_OBJ(1)        0 ! [D] Attach object to sprung mass of this vehicle unit, or 0
                      ! -> don't attach to a sprung mass [I]
PATH_ID_OBJ(1)      0 ! PATH_ID used to define location with S, L, Hdg; or 0 ->
                      ! define with global X, Y, Yaw [I]
ROAD_ID_OBJ(1)      2 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(1)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(1)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
OPT_SHAPE_OBJ(1)    0 ! Does this object have a target shape, even though there are
                      ! no sensors? 1 -> yes, 0 -> no
MsgObj_1            0 ; - ! Output: User-defined Message (code) for object
S_RdO_1   635.9753946 ; m ! Output: Station of object on road path
TypeO_1             0 ; - ! Output: User-defined Type (code) for object
V_Obj_1             0 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1  -259.4450365 ; m ! Output: X coordinate of object 1
Y_Obj_1   1433.462204 ; m ! Output: Y coordinate of object 1
YawO_1              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, 2nd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 900
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, 2nd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, left side
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 1, right side
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, left side
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, right side
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, left side
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, right side
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index IAXLE is used
! to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 1
C_LAT_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 2
C_LAT_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 1
C_LONG_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 2
C_LONG_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 189.6
 0.2, 189.6
 0.8, 200
 1, 200
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 304.3
 0.2, 304.3
 0.8, 450
 1, 450
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 442
 0.2, 442
 0.8, 710
 1, 710
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 627
 0.2, 627
 0.8, 1067
 1, 1067
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 798
 0.2, 798
 0.8, 1250
 1, 1250
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 1080
 0.2, 1080
 0.8, 1500
 1, 1500
ENDTABLE
DOWNSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1) 15 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, left side
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(1,2) 15 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 1, right side
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,1) 30 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, left side
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

FD_COEFFICIENT(2,2) 30 ! Coefficient: damper force per unit compression speed
                       ! (N/[mm/s]), axle 2, right side
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 250 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 250 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 700 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 700 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 250 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 250 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 700 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 700 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 1.26
 -15, 1.17
 -10, 0.97
 -5, 0.82
 0, 0.69
 5, 0.82
 10, 0.97
 15, 1.17
 20, 1.26
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Kappa -
                             ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 8 datasets; if
! indices shown below are not used, e.g., (1,1,2), the current values of the indices
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, left, inner
FZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 1, right, inner
FZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, inner
FZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, left, outer
FZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, inner
FZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2) 980 ! Coefficient: vertical force per unit tire
                               ! compression (N/mm), axle 2, right, outer
FZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2) 1 ! Scale factor divided into (tire compression -
                           ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.04 ! Coefficient: pitman arm angle per unit steering gear
                             ! input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 8 datasets; if indices shown
! below are not used, e.g., (1,1,2), the current values of the indices IAXLE, ISIDE,
! and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 1, left, inner
KGAMMA_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 1, right, inner
KGAMMA_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, left, inner
KGAMMA_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, left, outer
KGAMMA_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, right, inner
KGAMMA_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire load
                                ! (N/deg/N), axle 2, right, outer
KGAMMA_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.75s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)      2001  ! Exit, Right Lane: LTARG ID 2001

! 1D table: col 1 = station (m), col 2 = lateral offset (m)
LTARG_TABLE(2) LINEAR ! linear interpolation and extrapolation
 0, 0
 1000, 0
 1210, -2
 1500, -2
ENDTABLE
LTARG_GAIN(2)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset
SSTART_LTARG(2)     0 ; m ! Offset subtracted from station
SSCALE_LTARG(2)     1 ! Scale factor divided into (station - SSTART_LTARG)

LTARG_ID(3)      2002  ! Exit, Left Lane: LTARG ID 2002

! 1D table: col 1 = station (m), col 2 = lateral offset (m)
LTARG_TABLE(3) LINEAR ! linear interpolation and extrapolation
 0, 0
 1000, 0
 1210, 2
 1500, 2
ENDTABLE
LTARG_GAIN(3)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(3)     0 ; m ! Offset added (after gain) to get lateral offset
SSTART_LTARG(3)     0 ; m ! Offset subtracted from station
SSCALE_LTARG(3)     1 ! Scale factor divided into (station - SSTART_LTARG)

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_X_CONSTANT(1,1,1) 0 ; mm ! Constant tire contact length, axle 1, left,
                              ! inner
L_CONTACT_X_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(1,2,1) 0 ; mm ! Constant tire contact length, axle 1, right,
                              ! inner
L_CONTACT_X_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,1) 0 ; mm ! Constant tire contact length, axle 2, left,
                              ! inner
L_CONTACT_X_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,1,2) 0 ; mm ! Constant tire contact length, axle 2, left,
                              ! outer
L_CONTACT_X_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,1) 0 ; mm ! Constant tire contact length, axle 2, right,
                              ! inner
L_CONTACT_X_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

L_CONTACT_X_CONSTANT(2,2,2) 0 ; mm ! Constant tire contact length, axle 2, right,
                              ! outer
L_CONTACT_X_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 8
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading
! data.

L_CONTACT_Y_CONSTANT(1,1,1) 0 ; mm ! Constant tire contact width, axle 1, left,
                              ! inner
L_CONTACT_Y_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(1,2,1) 0 ; mm ! Constant tire contact width, axle 1, right,
                              ! inner
L_CONTACT_Y_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,1) 0 ; mm ! Constant tire contact width, axle 2, left,
                              ! inner
L_CONTACT_Y_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,1,2) 0 ; mm ! Constant tire contact width, axle 2, left,
                              ! outer
L_CONTACT_Y_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,1) 0 ; mm ! Constant tire contact width, axle 2, right,
                              ! inner
L_CONTACT_Y_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

L_CONTACT_Y_CONSTANT(2,2,2) 0 ; mm ! Constant tire contact width, axle 2, right,
                              ! outer
L_CONTACT_Y_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                            ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1) LINEAR ! axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1) LINEAR ! axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1) LINEAR ! axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2) LINEAR ! axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1) LINEAR ! axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2) 0.102 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2) LINEAR ! axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 8 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1) SPLINE_FLAT ! axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1) SPLINE ! axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1) SPLINE_FLAT ! axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1) SPLINE ! axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1) SPLINE_FLAT ! axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1) SPLINE ! axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2) SPLINE_FLAT ! axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2) SPLINE ! axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1) SPLINE_FLAT ! axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1) SPLINE ! axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2) SPLINE_FLAT ! axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2) 1.02 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2) SPLINE ! axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 27.8, 74.2, 129.9, 185.6, 222.7, 278.4, 334.1, 389.8, 436.2, 482.6
 1000, -18.6, 43.7, 105.9, 168.2, 230.4, 292.7, 355, 417.2, 479.5, 541.7, 604
 1200, -22.3, 44.5, 111.4, 178.2, 245, 311.8, 378.6, 445.5, 512.3, 579.1, 645.9
 1400, -26, 45.1, 116.1, 187.2, 258.2, 329.3, 400.3, 471.4, 542.4, 613.5, 684.5
 1600, -29.7, 43.7, 117.2, 190.6, 264, 337.4, 410.9, 484.3, 557.7, 631.1, 704.6
 1800, -33.4, 40.4, 114.2, 188, 261.8, 335.6, 409.4, 483.2, 557, 630.8, 704.6
 2000, -37.1, 34.8, 106.7, 178.6, 250.5, 322.4, 394.3, 466.2, 538.1, 610, 681.9
 2200, -40.8, 29.2, 99.2, 169.2, 239.2, 309.2, 379.2, 449.2, 519.3, 589.3, 659.3
 2400, -44.5, 23.3, 91.2, 159.1, 227, 294.9, 362.8, 430.7, 498.6, 566.5, 634.4
 2600, -48.3, 17.5, 83.2, 149, 214.7, 280.5, 346.2, 411.9, 477.7, 543.4, 609.2
 2800, -52, 11.5, 75.1, 138.6, 202.1, 265.6, 329.1, 392.6, 456.1, 519.7, 583.2
 3000, -55.7, 5.6, 66.9, 128.2, 189.5, 250.8, 312, 373.3, 434.6, 495.9, 557.2
 3100, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7
 3150, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 7 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(3) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(3)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(3)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(3) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(3) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                           ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 1500 ! Coefficient: auxiliary roll moment per unit relative
                           ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1) SPLINE ! axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2) SPLINE ! axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1) SPLINE ! axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2) SPLINE ! axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 8 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IAXLE, ISIDE, and ITIRE are used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1) 2D_FROM_ZERO ! axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1) 2D_FROM_ZERO ! axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1) 2D_FROM_ZERO ! axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2) 2D_FROM_ZERO ! axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1) 2D_FROM_ZERO ! axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2) 2D_FROM_ZERO ! axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Alpha -
                             ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, 2nd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,1) 0 ; - ! [D] Constant ID, Road 2, left side boundary
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(2,2) 0 ; - ! [D] Constant ID, Road 2, right side boundary
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(3,1) 0 ; - ! [D] Constant ID, Road 3, left side boundary
ROAD_NEW_ID_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(3,2) 0 ; - ! [D] Constant ID, Road 3, right side boundary
ROAD_NEW_ID_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0
 4.523034, -0.059296
 9.046068, -0.109558
 13.569102, -0.178253
 18.092136, -0.223938
 22.61517, -0.278992
 27.138204, -0.348328
 31.661238, -0.41391
 36.184272, -0.48526
 40.707306, -0.548187
 45.230341, -0.600159
 49.753375, -0.661652
 54.276409, -0.722748
 58.799443, -0.792511
 63.322477, -0.86731
 67.845511, -0.922119
 72.368546, -0.989502
 76.89158, -1.029724
 81.414614, -1.08902
 85.937648, -1.159088
 90.460683, -1.239471
 94.983717, -1.298431
 99.506751, -1.359528
 104.029785, -1.418365
 108.552819, -1.478424
 113.075853, -1.528503
 117.598887, -1.606689
 122.121922, -1.682556
 126.644955, -1.760193
 131.167994, -1.805725
 135.691034, -1.872467
 140.214072, -1.940277
 144.737111, -2.010529
 149.260151, -2.071014
 153.78319, -2.122192
 158.306228, -2.192169
 162.829268, -2.225769
 167.352307, -2.292419
 171.875346, -2.357422
 176.398384, -2.404175
 180.921424, -2.472961
 185.444463, -2.524353
 189.967502, -2.570282
 194.490541, -2.616394
 199.013581, -2.657257
 203.53662, -2.718109
 208.059658, -2.75531
 212.582697, -2.796417
 217.105737, -2.844604
 221.628776, -2.878601
 226.151815, -2.90564
 230.674854, -2.935638
 235.197893, -2.969696
 239.720933, -2.991547
 244.243972, -3.03064
 248.767011, -3.07373
 253.29005, -3.104889
 257.813089, -3.142548
 262.336128, -3.151031
 266.859168, -3.17865
 271.382208, -3.220154
 275.905247, -3.26239
 280.428286, -3.305542
 284.951325, -3.341095
 289.474364, -3.36618
 293.997403, -3.38385
 298.520443, -3.404877
 303.043482, -3.426453
 307.566522, -3.455933
 312.089562, -3.480072
 316.612601, -3.503845
 321.13564, -3.502655
 325.65868, -3.492981
 330.18172, -3.504822
 334.70476, -3.521393
 339.2278, -3.522095
 343.750839, -3.519196
 348.273879, -3.50708
 352.796919, -3.510864
 357.319959, -3.494995
 361.842998, -3.478241
 366.366038, -3.478577
 370.889078, -3.474487
 375.412119, -3.457764
 379.935158, -3.428497
 384.458198, -3.41275
 388.981238, -3.390839
 393.504277, -3.353363
 398.027317, -3.324677
 402.550357, -3.300934
 407.073398, -3.266632
 411.596437, -3.256805
 416.119477, -3.239136
 420.642517, -3.21524
 425.165557, -3.19162
 429.688597, -3.158417
 434.211636, -3.13089
 438.734676, -3.102936
 443.257717, -3.125153
 447.780756, -3.122864
 452.303796, -3.097321
 456.826837, -3.069458
 461.349876, -3.034332
 465.872916, -3.000916
 470.395956, -2.96167
 474.918996, -2.923187
 479.442036, -2.879913
 483.965076, -2.856049
 488.488117, -2.811432
 493.011156, -2.761047
 497.534197, -2.714783
 502.057236, -2.671936
 506.580265, -2.624329
 511.103299, -2.573639
 515.626334, -2.53894
 520.149368, -2.503693
 524.672402, -2.46582
 529.195437, -2.428009
 533.718471, -2.388062
 538.241504, -2.335175
 542.764489, -2.283966
 547.287546, -2.269257
 551.810602, -2.243042
 556.333659, -2.203888
 560.856715, -2.158295
 565.379771, -2.121185
 569.902827, -2.082855
 574.425883, -2.050262
 578.94894, -2.015076
 583.471997, -1.975494
 587.995053, -1.936676
 592.51811, -1.93811
 597.041166, -1.897125
 601.564223, -1.863037
 606.08728, -1.826263
 610.610232, -1.796112
 615.133261, -1.76886
 619.656291, -1.756897
 624.179322, -1.730865
 628.702351, -1.710236
 633.225382, -1.68988
 637.748412, -1.665192
 642.271442, -1.644226
 646.794472, -1.615143
 651.317503, -1.578491
 655.840532, -1.567291
 660.363563, -1.538239
 664.886593, -1.520203
 669.409623, -1.514862
 673.932653, -1.485748
 678.455683, -1.452728
 682.978713, -1.446686
 687.501744, -1.420715
 692.024773, -1.411285
 696.547804, -1.397308
 701.070834, -1.3685
 705.593805, -1.35495
 710.116854, -1.336151
 714.639904, -1.323334
 719.162952, -1.312286
 723.686001, -1.295441
 728.209051, -1.279449
 732.7321, -1.280853
 737.255149, -1.266968
 741.778198, -1.260071
 746.301248, -1.255829
 750.824296, -1.243073
 755.347346, -1.221954
 759.870396, -1.211914
 764.393444, -1.202576
 768.916494, -1.200256
 773.439544, -1.193512
 777.962592, -1.18222
 782.485642, -1.176178
 787.008692, -1.160858
 791.53174, -1.149597
 796.05479, -1.149567
 800.577839, -1.144989
 805.100889, -1.154602
 809.623938, -1.158386
 814.146987, -1.149506
 818.670037, -1.150543
 823.193086, -1.150574
 827.716093, -1.150421
 832.239127, -1.158386
 836.76216, -1.172333
 841.285194, -1.177795
 845.808228, -1.182159
 850.331262, -1.180878
 854.854295, -1.185669
 859.37733, -1.189117
 863.900364, -1.19516
 868.423397, -1.208252
 872.946431, -1.207794
 877.469465, -1.202148
 881.992499, -1.21579
 886.515533, -1.223419
 891.038566, -1.221008
 895.5616, -1.214325
 900.084635, -1.217804
 904.607668, -1.227234
 909.130702, -1.232971
 913.653736, -1.233917
 918.17677, -1.24762
 922.699804, -1.263672
 927.222838, -1.276611
 931.745872, -1.281433
 936.26889, -1.291718
 940.791915, -1.32135
 945.314939, -1.331573
 949.837962, -1.339813
 954.360986, -1.340668
 958.884011, -1.35321
 963.407035, -1.37146
 967.930059, -1.377808
 972.453082, -1.368439
 976.975266, -1.373627
 981.498264, -1.374969
 986.021262, -1.379608
 990.54426, -1.376923
 995.067257, -1.380798
 999.590255, -1.386658
 1004.113253, -1.397705
 1008.63625, -1.409912
 1013.159248, -1.428345
 1017.682246, -1.431885
 1022.205244, -1.44986
 1026.728241, -1.465515
 1031.251239, -1.461731
 1035.774237, -1.469543
 1040.297234, -1.484131
 1044.820232, -1.484558
 1049.34323, -1.492004
 1053.866065, -1.508209
 1058.389068, -1.515594
 1062.912072, -1.513214
 1067.435075, -1.525604
 1071.958079, -1.523926
 1076.481082, -1.537415
 1081.004086, -1.548828
 1085.527089, -1.555145
 1090.050093, -1.55719
 1094.573096, -1.572113
 1099.096021, -1.586823
 1103.619035, -1.595886
 1108.142049, -1.605865
 1112.665063, -1.631042
 1117.188077, -1.646759
 1121.71109, -1.65564
 1126.234104, -1.677216
 1130.757118, -1.691132
 1135.280132, -1.693298
 1139.803146, -1.696259
 1144.326159, -1.690704
 1148.849174, -1.688934
 1153.372187, -1.705902
 1157.895201, -1.724304
 1162.418215, -1.718872
 1166.941229, -1.717316
 1171.464243, -1.723633
 1175.987257, -1.72052
 1180.510231, -1.71759
 1185.033257, -1.723511
 1189.556282, -1.731934
 1194.079308, -1.742157
 1198.602334, -1.746063
 1203.125359, -1.751648
 1207.648385, -1.76355
 1212.171411, -1.77121
 1216.694436, -1.786713
 1221.216519, -1.799957
 1225.739635, -1.811676
 1230.26275, -1.830566
 1234.785866, -1.852753
 1239.30898, -1.872742
 1243.832096, -1.901337
 1248.355212, -1.936493
 1252.877381, -1.98172
 1257.40084, -2.032074
 1261.9243, -2.079193
 1266.44776, -2.1633
 1270.971218, -2.224304
 1275.494679, -2.269867
 1280.017823, -2.367249
 1284.541479, -2.454529
 1289.065134, -2.995544
 1293.58879, -4.523834
 1298.112449, -6.33548
 1302.636117, -7.638672
 1307.159786, -8.032684
 1311.683454, -8.52124
 1316.207122, -9.187561
 1320.730791, -9.481934
 1325.25446, -9.364502
 1329.777342, -8.721863
 1334.301804, -7.679688
 1338.826266, -6.376862
 1343.350729, -4.999878
 1347.875193, -3.91452
 1352.399655, -3.485077
 1356.924119, -3.516724
 1361.449076, -3.609009
 1365.974056, -3.70047
 1370.499036, -3.795929
 1375.024016, -3.862122
 1379.548997, -3.918823
 1384.073979, -4.025848
 1388.59896, -4.120758
 1393.124175, -4.233063
 1397.649474, -4.340088
 1402.174772, -4.444061
 1406.700072, -4.544647
 1411.225371, -4.64389
 1415.748011, -4.749756
 1420.274262, -4.87915
 1424.800514, -5.0065
 1429.326765, -5.117737
 1433.853018, -5.242645
 1438.379271, -5.373627
 1442.905524, -5.503754
 1447.431777, -5.613678
 1451.95752, -5.739288
 1456.484613, -5.854187
 1461.011707, -5.971832
 1465.5388, -6.1008
 1470.065895, -6.233612
 1474.592991, -6.345367
 1479.120086, -6.473175
 1483.647183, -6.592743
 1488.174281, -6.702271
 1492.701343, -6.809509
 1497.229515, -6.932129
 1501.757687, -7.045166
 1506.28586, -7.161163
 1510.814034, -7.270111
 1515.342208, -7.382599
 1519.870384, -7.475372
 1524.3983, -7.580505
 1528.926171, -7.664337
 1533.454042, -7.753235
 1537.981914, -7.843903
 1542.504547, -7.958832
 1547.034923, -8.087158
 1551.565299, -8.204742
 1556.095676, -8.314636
 1560.626054, -8.404449
 1565.156433, -8.494904
 1569.686814, -8.593811
 1574.217333, -8.675964
 1578.747853, -8.762756
 1583.278374, -8.839935
 1587.808895, -8.928711
 1592.339418, -9.001312
 1596.869942, -9.062897
 1601.400467, -9.129822
 1605.930991, -9.182129
 1610.461519, -9.238953
 1614.991203, -9.285156
 1619.523676, -9.357361
 1624.056151, -9.443939
 1628.588626, -9.514099
 1633.121102, -9.57132
 1637.65358, -9.637329
 1642.186058, -9.685211
 1646.718537, -9.731445
 1651.251018, -9.785065
 1655.7835, -9.822235
 1660.315983, -9.845337
 1664.847106, -9.894043
 1669.380653, -9.941559
 1673.914202, -9.980713
 1678.447753, -10.01355
 1682.980078, -10.046143
 1687.510638, -10.078094
 1692.044757, -10.137512
 1696.578878, -10.159271
 1701.113, -10.180206
 1705.647122, -10.170807
 1710.180107, -10.189941
 1714.715531, -10.215881
 1719.250956, -10.261169
 1723.786382, -10.29422
 1728.32181, -10.312805
 1732.857238, -10.340118
 1737.392667, -10.366486
 1741.927797, -10.384491
 1746.463795, -10.390442
 1750.999795, -10.411621
 1755.535795, -10.424042
 1760.071796, -10.427521
 1764.607799, -10.430634
 1769.143204, -10.448486
 1773.67982, -10.457367
 1778.216436, -10.454285
 1782.753053, -10.449554
 1787.289671, -10.458221
 1791.826172, -10.45813
 1796.362674, -10.446045
 1800.895339, -10.451233
 1805.433124, -10.460541
 1809.97091, -10.490051
 1814.508696, -10.480286
 1819.046483, -10.489777
 1823.584272, -10.486816
 1828.122062, -10.48642
 1832.659666, -10.51181
 1837.19803, -10.520325
 1841.736396, -10.523773
 1846.274763, -10.516296
 1850.813131, -10.526001
 1855.351499, -10.538055
 1859.889713, -10.535828
 1864.428383, -10.538147
 1868.967054, -10.555756
 1873.505725, -10.543854
 1878.044397, -10.547333
 1882.583073, -10.55899
 1887.122358, -10.570129
 1891.661645, -10.576538
 1896.200933, -10.590576
 1900.740221, -10.598694
 1905.279455, -10.611053
 1909.819049, -10.617279
 1914.358643, -10.608734
 1918.898239, -10.623108
 1923.437834, -10.628937
 1927.977431, -10.626282
 1932.517028, -10.63443
 1937.056627, -10.632965
 1941.596226, -10.648926
 1946.135826, -10.659149
 1950.675426, -10.665283
 1955.215038, -10.654114
 1959.754726, -10.691772
 1964.294413, -10.703583
 1968.834102, -10.709045
 1973.373791, -10.718475
 1977.913481, -10.727173
 1982.453172, -10.718384
 1986.992864, -10.733673
 1991.532556, -10.744019
 1996.072249, -10.748993
 2000.611942, -10.759308
 2005.151636, -10.771667
 2009.691331, -10.788452
 2014.231027, -10.804321
 2018.770724, -10.802551
 2023.31042, -10.807861
 2027.850118, -10.824036
 2032.389816, -10.829498
 2036.929515, -10.822021
 2041.46921, -10.827515
 2046.00897, -10.832275
 2050.548731, -10.833069
 2055.088493, -10.8638
 2059.628254, -10.860535
 2064.168017, -10.876831
 2068.707781, -10.878754
 2073.247545, -10.879791
 2077.78731, -10.86969
 2082.327075, -10.88559
 2086.866841, -10.879456
 2091.406609, -10.885712
 2095.946376, -10.891907
 2100.486145, -10.902557
 2105.025913, -10.897308
 2109.565682, -10.900452
 2114.105453, -10.927887
 2118.645224, -10.938232
 2123.184994, -10.944061
 2127.724764, -10.94693
 2132.264535, -10.951965
 2136.804307, -10.94809
 2141.34408, -10.975311
 2145.883854, -10.963684
 2150.423628, -10.967865
 2154.963402, -10.976807
 2159.503177, -10.981018
 2164.042953, -10.989502
 2168.58273, -10.995789
 2173.122507, -10.993347
 2177.662285, -10.980316
 2182.202064, -10.990356
 2186.741844, -11.000977
 2191.281624, -11.007233
 2195.821405, -11.014648
 2200.361187, -11.00116
 2204.900968, -11.009094
 2209.440751, -11.02771
 2213.980535, -11.044128
 2218.520319, -11.063263
 2223.060104, -11.07196
 2227.599889, -11.083252
 2232.139675, -11.084412
 2236.679463, -11.123016
 2241.21925, -11.145752
 2245.759038, -11.146881
 2250.298828, -11.156494
 2254.838617, -11.148895
 2259.378408, -11.135284
 2263.918199, -11.134521
 2268.45799, -11.158905
 2272.997783, -11.152802
 2277.537576, -11.173309
 2282.07737, -11.190002
 2286.617164, -11.213409
 2291.156959, -11.201721
 2295.696756, -11.203247
 2300.236551, -11.213379
 2304.776348, -11.218018
 2309.316147, -11.236694
 2313.855945, -11.222443
ENDTABLE
ROAD_ZS_GAIN(1)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(1)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, -3.904999
 1.240429, -3.913849
 2.480857, -3.922303
 3.721285, -3.92746
 4.961713, -3.930085
 6.202141, -3.932282
 7.442568, -3.935303
 8.682997, -3.944275
 9.923424, -3.957398
 11.163853, -3.966828
 12.40428, -3.97287
 13.644708, -3.9758
 14.885135, -3.983155
 16.125562, -3.992737
 17.365427, -4.007294
 18.605674, -4.022034
 19.845921, -4.035034
 21.08617, -4.046051
 22.326417, -4.05774
 23.566664, -4.069306
 24.806912, -4.080231
 26.04716, -4.090821
 27.287407, -4.102204
 28.527654, -4.116638
 29.767901, -4.132721
 31.008148, -4.146637
 32.248395, -4.157715
 33.488642, -4.166809
 34.728889, -4.175965
 35.969136, -4.192536
 37.209383, -4.20987
 38.449629, -4.226685
 39.689876, -4.241791
 40.930123, -4.25763
 42.170369, -4.276337
 43.410617, -4.295441
 44.650865, -4.314606
 45.891113, -4.333832
 47.131361, -4.347626
 48.371609, -4.361328
 49.611857, -4.376984
 50.852105, -4.393097
 52.092353, -4.408905
 53.332601, -4.427643
 54.572848, -4.446778
 55.813096, -4.463806
 57.053344, -4.477936
 58.293591, -4.489197
 59.533839, -4.498444
 60.774086, -4.519379
 62.014333, -4.541931
 63.25458, -4.564728
 64.494828, -4.584931
 65.735074, -4.605316
 66.975321, -4.629242
 68.215568, -4.651429
 69.455815, -4.671234
 70.696061, -4.686188
 71.936308, -4.703766
 73.176555, -4.726044
 74.416801, -4.747895
 75.657048, -4.768494
 76.897294, -4.788269
 78.13754, -4.806671
 79.377787, -4.828827
 80.618033, -4.851929
 81.858279, -4.874359
 83.098525, -4.894501
 84.338771, -4.911408
 85.579017, -4.932373
 86.819262, -4.954193
 88.059508, -4.976746
 89.299754, -4.999573
 90.539999, -5.02237
 91.780245, -5.043213
 93.020491, -5.064484
 94.260736, -5.086304
 95.500981, -5.110199
 96.741226, -5.136078
 97.981471, -5.165741
 99.221716, -5.189301
 100.461962, -5.209656
 101.702207, -5.226837
 102.942451, -5.245148
 104.182696, -5.265137
 105.422941, -5.286988
 106.663189, -5.310669
 107.903442, -5.335236
 109.143695, -5.360718
 110.383948, -5.389679
 111.6242, -5.417023
 112.864454, -5.440888
 114.104706, -5.462403
 115.344959, -5.483704
 116.585211, -5.510865
 117.825464, -5.538269
 119.065717, -5.564698
 120.305969, -5.590882
 121.546221, -5.616364
 122.786474, -5.642701
 124.026725, -5.664002
 125.266978, -5.684632
 126.507229, -5.705628
 127.747482, -5.729523
 128.987733, -5.753815
 130.227985, -5.776917
 131.468237, -5.79892
 132.708489, -5.820313
 133.94874, -5.841858
 135.188991, -5.872895
 136.429243, -5.904145
 137.669494, -5.931977
 138.909745, -5.957123
 140.149996, -5.980316
 141.390221, -6.004212
 142.630441, -6.030884
 143.87066, -6.059449
 145.110878, -6.089203
 146.351097, -6.117188
 147.591317, -6.142578
 148.831535, -6.169098
 150.071754, -6.194855
 151.311972, -6.220276
 152.552191, -6.244721
 153.79241, -6.27359
 155.032628, -6.303437
 156.272847, -6.332306
 157.513065, -6.360504
 158.752674, -6.391785
 159.99314, -6.426026
 161.233606, -6.460327
 162.474072, -6.492524
 163.714538, -6.523316
 164.955004, -6.552887
 166.19547, -6.582245
 167.435935, -6.611298
 168.6764, -6.640564
 169.916866, -6.670227
 171.157331, -6.700806
 172.397796, -6.733277
 173.638261, -6.767914
 174.878727, -6.800995
 176.118583, -6.832611
 177.358863, -6.86493
 178.599141, -6.896546
 179.839421, -6.926697
 181.0797, -6.96164
 182.319979, -6.998902
 183.560258, -7.036194
 184.800398, -7.073059
 186.04059, -7.109253
 187.280783, -7.145508
 188.520976, -7.18219
 189.761168, -7.218598
 191.001361, -7.251709
 192.241553, -7.287384
 193.481745, -7.322602
 194.721938, -7.357025
 195.96213, -7.390717
 197.202322, -7.424591
 198.442514, -7.459229
 199.682706, -7.494812
 200.922898, -7.53006
 202.16309, -7.567871
 203.403282, -7.605622
 204.643473, -7.640564
 205.883665, -7.679322
 207.123857, -7.719086
 208.364047, -7.761566
 209.604239, -7.802918
 210.84443, -7.842957
 212.084621, -7.878846
 213.324812, -7.912995
 214.565004, -7.946564
 215.805195, -7.983826
 217.045386, -8.02475
 218.285576, -8.066956
 219.525767, -8.106598
 220.765958, -8.144898
 222.006148, -8.183319
 223.246339, -8.217774
 224.48653, -8.251343
 225.72672, -8.284577
 226.96691, -8.316376
 228.207101, -8.346009
 229.447291, -8.376587
 230.687481, -8.407288
 231.927671, -8.440888
 233.16786, -8.480713
 234.408051, -8.522797
 235.648241, -8.565064
 236.88843, -8.598236
 238.12862, -8.628327
 239.368809, -8.657105
 240.608999, -8.688416
 241.849188, -8.722687
 243.089378, -8.752045
 244.329568, -8.778839
 245.569757, -8.80365
 246.809945, -8.82428
 248.050135, -8.851868
 249.290323, -8.883972
 250.530512, -8.91333
 251.770702, -8.940216
 253.01089, -8.965515
 254.251079, -8.996552
 255.491268, -9.025299
 256.731456, -9.048859
 257.971645, -9.069184
 259.211833, -9.089142
 260.452022, -9.111908
 261.692209, -9.132691
 262.93236, -9.151276
 264.172621, -9.168427
 265.412883, -9.1857
 266.653144, -9.204071
 267.893404, -9.223145
 269.133664, -9.241303
 270.373926, -9.258667
 271.614186, -9.276703
 272.854446, -9.293427
 274.094706, -9.307465
 275.334967, -9.321198
 276.575227, -9.334107
 277.815487, -9.348908
 279.055747, -9.368347
 280.296007, -9.387024
 281.536267, -9.403076
 282.776527, -9.416016
 284.016787, -9.426667
 285.257046, -9.437195
 286.497307, -9.448242
 287.737566, -9.458374
 288.977825, -9.466217
 290.218085, -9.475342
 291.458344, -9.485474
 292.698603, -9.46521
 293.938862, -9.448822
 295.179121, -9.43628
 296.41938, -9.425751
 297.65964, -9.413239
 298.899899, -9.40799
 300.140157, -9.411438
 301.380416, -9.417511
 302.620675, -9.424256
 303.860934, -9.419434
 305.101192, -9.416992
 306.341451, -9.418671
 307.581709, -9.423371
 308.821967, -9.430573
 310.062225, -9.436768
 311.302483, -9.444001
 312.542742, -9.450623
 313.783, -9.454987
 315.023258, -9.456574
 316.263516, -9.427124
 317.503773, -9.383393
 318.744032, -9.330445
 319.98429, -9.268494
 321.224546, -9.199738
 322.464804, -9.120453
 323.705062, -9.057862
 324.945319, -9.056916
 326.185576, -9.100708
 327.425834, -9.192169
 328.666091, -9.309296
 329.906348, -9.428681
 331.146606, -9.469086
 332.386862, -9.496552
 333.627119, -9.51239
 334.867375, -9.505249
 336.107632, -9.49762
 337.347889, -9.487671
 338.588146, -9.477326
 339.828403, -9.466675
 341.068659, -9.457245
 342.308693, -9.449097
 343.549089, -9.440338
 344.789484, -9.430146
 346.029879, -9.418244
 347.270273, -9.405396
 348.510668, -9.394135
 349.751063, -9.388916
 350.991457, -9.384217
 352.231851, -9.378144
 353.472247, -9.368805
 354.712641, -9.35907
 355.953034, -9.350098
 357.193429, -9.340271
 358.433824, -9.330078
 359.674217, -9.320618
 360.914611, -9.317108
 362.155006, -9.316468
 363.3954, -9.310639
 364.635793, -9.30246
 365.876187, -9.293763
 367.116581, -9.285828
 368.356974, -9.277924
 369.597368, -9.270478
 370.837762, -9.26297
 372.078155, -9.255097
 373.318548, -9.246399
 374.558941, -9.240113
 375.799335, -9.232483
 377.039727, -9.224091
 378.280121, -9.214447
 379.520514, -9.208618
 380.760907, -9.20752
 382.000307, -9.205323
 383.240444, -9.20221
 384.480579, -9.196045
 385.720714, -9.189637
 386.96085, -9.181824
 388.200985, -9.173371
 389.44112, -9.16745
 390.681256, -9.162476
 391.92139, -9.161133
 393.161526, -9.155945
 394.401661, -9.147461
 395.641796, -9.138459
 396.881931, -9.130585
 398.122065, -9.123535
 399.3622, -9.120606
 400.602334, -9.118744
 401.842469, -9.115692
 403.082175, -9.110962
 404.322556, -9.106263
 405.562938, -9.102814
 406.803321, -9.101593
 408.043702, -9.101349
 409.284084, -9.100922
 410.524466, -9.099488
 411.764848, -9.097809
 413.00523, -9.094513
 414.245611, -9.091614
 415.485993, -9.088105
 416.726374, -9.083771
 417.966755, -9.082703
 419.207137, -9.082794
 420.447518, -9.083283
 421.687899, -9.083313
 422.928281, -9.082032
 424.168661, -9.082306
 425.409043, -9.081086
 426.648632, -9.078705
 427.888765, -9.080506
 429.128898, -9.08487
 430.369031, -9.08902
 431.609164, -9.089966
 432.849297, -9.08899
 434.08943, -9.088898
 435.329563, -9.086975
 436.569695, -9.08487
 437.809828, -9.085755
 439.04996, -9.08844
 440.289893, -9.091553
 441.530251, -9.091034
 442.77061, -9.089203
 444.010968, -9.086945
 445.251327, -9.086151
 446.491685, -9.089081
 447.732043, -9.090302
 448.972403, -9.091828
 450.212761, -9.091706
 451.453118, -9.090699
 452.693477, -9.090241
 453.933835, -9.089142
 455.174193, -9.087372
 456.41455, -9.082794
 457.654908, -9.076538
 458.895266, -9.068482
 460.135624, -9.055481
 461.375982, -9.041748
 462.616339, -9.0289
 463.856697, -9.018219
 465.097054, -9.009735
 466.337412, -9.008667
 467.577769, -9.009674
 468.818126, -9.00943
 470.058484, -9.009186
 471.29884, -9.009095
 472.539198, -9.007355
 473.779555, -9.001404
 475.01911, -9.00055
 476.25924, -9.000763
 477.499371, -9.001496
 478.739501, -8.99646
 479.979631, -8.988556
 481.219761, -8.985596
 482.459892, -8.982636
 483.700022, -8.980561
 484.940152, -8.986084
 486.180282, -8.991547
 487.420412, -8.991974
 488.660542, -8.990448
 489.900672, -8.988526
 491.140801, -8.98758
 492.380931, -8.987152
 493.621039, -8.986451
 494.861239, -8.983185
 496.101438, -8.978699
 497.341638, -8.973725
 498.581837, -8.969635
 499.822036, -8.963135
 501.062235, -8.95517
 502.302434, -8.945465
 503.542633, -8.934326
 504.782831, -8.919709
 506.02303, -8.906189
 507.263229, -8.892884
 508.503427, -8.880493
 509.743625, -8.873047
 510.98369, -8.86319
 512.224005, -8.849427
 513.464319, -8.835785
 514.704633, -8.822205
 515.944948, -8.813599
 517.185262, -8.806794
 518.425576, -8.800751
 519.66589, -8.791809
 520.906205, -8.781983
 522.146518, -8.771363
 523.386833, -8.756653
 524.627146, -8.740326
 525.867459, -8.723328
 527.107773, -8.706391
 528.348087, -8.689911
 529.588401, -8.680786
 530.828714, -8.679261
 532.069027, -8.676758
 533.309341, -8.670624
 534.549655, -8.658142
 535.789971, -8.64621
 537.030301, -8.639557
 538.270631, -8.628479
 539.51096, -8.614472
 540.751291, -8.596588
 541.99162, -8.585846
 543.23195, -8.578553
 544.47228, -8.564514
 545.712608, -8.548157
 546.952938, -8.530365
 548.193267, -8.515137
 549.433596, -8.505127
 550.673926, -8.49411
 551.914255, -8.479676
 553.154584, -8.462525
 554.394913, -8.44394
 555.635242, -8.432953
 556.875571, -8.422791
 558.115899, -8.410279
 559.356228, -8.394135
 560.596556, -8.376068
 561.836885, -8.355805
 563.077214, -8.339661
 564.317441, -8.323944
 565.557883, -8.309082
 566.798325, -8.295563
 568.038766, -8.280274
 569.279209, -8.261658
 570.51946, -8.244721
 571.759717, -8.227936
 572.999973, -8.213135
 574.240229, -8.199555
 575.480487, -8.184021
 576.720743, -8.173523
 577.960999, -8.162659
 579.201256, -8.149659
 580.44014, -8.13559
 581.680898, -8.124878
 582.921656, -8.116516
 584.162415, -8.112
 585.403173, -8.109375
 586.643931, -8.107544
 587.88469, -8.105561
 589.125447, -8.102448
 590.366206, -8.097229
 591.606085, -8.089295
 592.846689, -8.082276
 594.087294, -8.075287
 595.327898, -8.068482
 596.568503, -8.069794
 597.809108, -8.066498
 599.049712, -8.058838
 600.290316, -8.054749
 601.53092, -8.054871
 602.771524, -8.058319
 604.012129, -8.054627
 605.252733, -8.048981
 606.493338, -8.042084
 607.733941, -8.033478
 608.974545, -8.027405
 610.215149, -8.02295
 611.455753, -8.017456
 612.696357, -8.012207
 613.936961, -8.008423
 615.177564, -8.014283
 616.418168, -8.013947
 617.658771, -8.0112
 618.899375, -8.007599
 620.139978, -8.004181
 621.380582, -8.001129
 622.621185, -8
 623.861789, -7.999909
 625.102391, -8.000214
 626.342995, -7.999848
 627.583598, -7.998078
 628.824201, -7.99408
 630.064804, -7.987122
 631.305407, -7.978272
 632.546011, -7.971344
 633.786613, -7.968964
ENDTABLE
ROAD_ZS_GAIN(2)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(2)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(2)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! 1D table: col 1 = station (m), col 2 = elevation (m)
ROAD_ZS_TABLE(3) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 6.130523
 3.523075, 6.134033
 7.04615, 6.145385
 10.569225, 6.155975
 14.0923, 6.149566
 17.615376, 6.152435
 21.138452, 6.150726
 24.661528, 6.151703
 28.184603, 6.15393
 31.70768, 6.147094
 35.230756, 6.150726
 38.753833, 6.163147
 42.27691, 6.155395
 45.799681, 6.142273
 49.322501, 6.147613
 52.845322, 6.140716
 56.368143, 6.141418
 59.890963, 6.143585
 63.413784, 6.137481
 66.936606, 6.140777
 70.459427, 6.125854
 73.982248, 6.118469
 77.50507, 6.118194
 81.027892, 6.107513
 84.550714, 6.101043
 88.072286, 6.078643
 91.594771, 6.065704
 95.117256, 6.042236
 98.639741, 6.031494
 102.162227, 6.017212
 105.684711, 5.999115
 109.207197, 5.984253
 112.729683, 5.971588
 116.252169, 5.955383
 119.774655, 5.93338
 123.297141, 5.918518
 126.819627, 5.908111
 130.342113, 5.895202
 133.8646, 5.884063
 137.387086, 5.85614
 140.909573, 5.836578
 144.430728, 5.811767
 147.952927, 5.783325
 151.475125, 5.764709
 154.997325, 5.752075
 158.519524, 5.736572
 162.041724, 5.705017
 165.563923, 5.683716
 169.086122, 5.665741
 172.608322, 5.630645
 176.130521, 5.605285
 179.652721, 5.577758
 183.17492, 5.543487
 186.69712, 5.520599
 190.21932, 5.476654
 193.740575, 5.446228
 197.262564, 5.413879
 200.784553, 5.387024
 204.306542, 5.364898
 207.828531, 5.34259
 211.35052, 5.326629
 214.872509, 5.310058
 218.394498, 5.299102
 221.916488, 5.272064
 225.438477, 5.255005
 228.960466, 5.244049
 232.482455, 5.214142
 236.004444, 5.184265
 239.526382, 5.153503
 243.048478, 5.133789
 246.570574, 5.112274
 250.092671, 5.080597
 253.614768, 5.053833
 257.136863, 5.031341
 260.65896, 5.014892
 264.181057, 4.97821
 267.703154, 4.943695
 271.221486, 4.916565
 274.743282, 4.88266
 278.265079, 4.844085
 281.786875, 4.820678
 285.308672, 4.797729
 288.830468, 4.76831
 292.352265, 4.752685
 295.874061, 4.724975
 299.395858, 4.689483
 302.917654, 4.65155
 306.43945, 4.636139
 309.961247, 4.61734
 313.483044, 4.582519
 317.004841, 4.545532
 320.526612, 4.503296
 324.04839, 4.482757
 327.570167, 4.449737
 331.091944, 4.426422
 334.613721, 4.402984
 338.135499, 4.380249
 341.657275, 4.350769
 345.179052, 4.318115
 348.700829, 4.28717
 352.222241, 4.253692
 355.743969, 4.233703
 359.265696, 4.210266
 362.787422, 4.17926
 366.309149, 4.157806
 369.830877, 4.143585
 373.352604, 4.116455
 376.87433, 4.081421
 380.396057, 4.04895
 383.917785, 4.020111
 387.439354, 3.987457
 390.961056, 3.959869
 394.482759, 3.93103
 398.004462, 3.901062
 401.526165, 3.873535
 405.047868, 3.839172
 408.569571, 3.813812
 412.091273, 3.794067
 415.612976, 3.764373
 419.134679, 3.73294
 422.656382, 3.70581
 426.178085, 3.685241
 429.699787, 3.6651
 433.22149, 3.638702
 436.741976, 3.620331
 440.263714, 3.584198
 443.785452, 3.551635
 447.307191, 3.530853
 450.828929, 3.501861
 454.350668, 3.4776
 457.872407, 3.452209
 461.394145, 3.419861
 464.915884, 3.391296
 468.437622, 3.371917
 471.959361, 3.351288
 475.481099, 3.332763
 479.002839, 3.31134
 482.524576, 3.305847
 486.046315, 3.272155
 489.568053, 3.236755
 493.089791, 3.208862
 496.611529, 3.17752
 500.133268, 3.168243
 503.655006, 3.139953
 507.176744, 3.118316
 510.698482, 3.096405
 514.220221, 3.088562
 517.741959, 3.071228
 521.263697, 3.038726
 524.785435, 3.008117
 528.307173, 2.989593
 531.828912, 2.970489
 535.35065, 2.938354
 538.872388, 2.913849
 542.394126, 2.889007
 545.915864, 2.86203
 549.437602, 2.846496
 552.959342, 2.806976
 556.48108, 2.771026
 560.002818, 2.745483
 563.524556, 2.716705
 567.046294, 2.680694
 570.568032, 2.633911
 574.08977, 2.60614
 577.61151, 2.585388
 581.133248, 2.555206
 584.654986, 2.512817
 588.176724, 2.490814
 591.698462, 2.463287
 595.220201, 2.434478
 598.741939, 2.40332
 602.263677, 2.381836
 605.785415, 2.355529
 609.307154, 2.316711
 612.828893, 2.289337
 616.350631, 2.265197
 619.87237, 2.241302
 623.394108, 2.215759
 626.915846, 2.174102
 630.437585, 2.12677
 633.959323, 2.092132
 637.481061, 2.06134
 641.0028, 2.032867
 644.524538, 2.006897
 648.046276, 1.985717
 651.568015, 1.938415
 655.089753, 1.896393
 658.611492, 1.870788
 662.13323, 1.839752
 665.654968, 1.813263
 669.176707, 1.783661
 672.698419, 1.743713
 676.220147, 1.698425
 679.741875, 1.66098
 683.263603, 1.636139
 686.785331, 1.601165
 690.307058, 1.562133
 693.828785, 1.528595
 697.350513, 1.490265
 700.872241, 1.450531
 704.393969, 1.405639
 707.915697, 1.368866
 711.437425, 1.339721
 714.959153, 1.305664
 718.480881, 1.271331
 722.002609, 1.222686
 725.524337, 1.175079
 729.046064, 1.143737
 732.567791, 1.105438
 736.089519, 1.053711
 739.611247, 1.013763
 743.132975, 0.972168
 746.654703, 0.926788
 750.176431, 0.882843
 753.698159, 0.834594
 757.219886, 0.812622
 760.741614, 0.789581
 764.263342, 0.752624
 767.78507, 0.723358
 771.306798, 0.695434
 774.828526, 0.631805
 778.350253, 0.590728
 781.871981, 0.556823
 785.393713, 0.515503
 788.915448, 0.469909
 792.437182, 0.429413
 795.958916, 0.382263
 799.480651, 0.340637
 803.002385, 0.305023
 806.524119, 0.252075
 810.045855, 0.194641
 813.567589, 0.148742
 817.089324, 0.102295
 820.611058, 0.05365
 824.132792, 0.008911
 827.654527, -0.037751
 831.176261, -0.079743
 834.697995, -0.120362
 838.21973, -0.173951
 841.741464, -0.21222
 845.263198, -0.242798
 848.784933, -0.295533
 852.306668, -0.349274
 855.828402, -0.400788
 859.350136, -0.449433
 862.871871, -0.511994
 866.393605, -0.557038
 869.915339, -0.597901
 873.437075, -0.637879
 876.958809, -0.689026
 880.480543, -0.732636
 884.002278, -0.789582
 887.524012, -0.851013
 891.045747, -0.896637
 894.567481, -0.941803
 898.089216, -0.993592
 901.61095, -1.023957
 905.132685, -1.065552
 908.654419, -1.117279
 912.176154, -1.173249
 915.697888, -1.236695
 919.219623, -1.285462
 922.741357, -1.329407
 926.263091, -1.377594
 929.784827, -1.424103
 933.306561, -1.471649
 936.828295, -1.509095
 940.35003, -1.558564
 943.871765, -1.624024
 947.393499, -1.680664
 950.915234, -1.738251
 954.436969, -1.783142
 957.958704, -1.82309
 961.480439, -1.878998
 965.002174, -1.931458
 968.523908, -1.985199
 972.045644, -2.037232
 975.567379, -2.081665
 979.089114, -2.120575
 982.610849, -2.175324
 986.132583, -2.205048
 989.654319, -2.244232
 993.176054, -2.298951
 996.697788, -2.349732
 1000.219524, -2.385926
 1003.741259, -2.429932
 1007.262994, -2.489685
 1010.784729, -2.52359
 1014.306464, -2.55835
 1017.828199, -2.596985
 1021.349934, -2.629303
 1024.871669, -2.663513
 1028.393404, -2.711151
 1031.915139, -2.743042
 1035.436874, -2.772217
 1038.958609, -2.806885
 1042.480344, -2.844178
 1046.00208, -2.871552
 1049.523815, -2.89386
 1053.045549, -2.913971
 1056.567284, -2.940277
 1060.08902, -2.96814
 1063.610755, -2.982056
 1067.13249, -3.006562
 1070.654225, -3.042481
 1074.17596, -3.07367
 1077.697695, -3.096527
 1081.21943, -3.12851
 1084.741165, -3.146881
 1088.262901, -3.1521
 1091.784636, -3.174042
 1095.306371, -3.206055
 1098.828106, -3.239319
 1102.349841, -3.27182
 1105.871577, -3.305756
 1109.393312, -3.334137
 1112.915047, -3.357605
 1116.436782, -3.368958
 1119.958517, -3.386689
 1123.480253, -3.402924
 1127.001988, -3.420624
 1130.523723, -3.435578
 1134.045458, -3.466156
 1137.567194, -3.480286
 1141.088929, -3.501648
 1144.610665, -3.505921
 1148.1324, -3.498108
 1151.654135, -3.493622
 1155.175872, -3.502869
 1158.697607, -3.518586
 1162.219342, -3.522583
 1165.741078, -3.522065
 1169.262813, -3.519074
 1172.784548, -3.507874
 1176.306285, -3.507782
 1179.82802, -3.509766
 1183.349755, -3.492218
 1186.871491, -3.479004
 1190.393227, -3.477021
 1193.914962, -3.479676
 1197.436698, -3.47168
 1200.958434, -3.456879
 1204.480169, -3.43396
 1208.001905, -3.417664
 1211.52364, -3.405518
 1215.045376, -3.387513
 1218.567111, -3.357605
 1222.088848, -3.330475
 1225.610583, -3.315216
 1229.132318, -3.291474
 1232.654054, -3.265778
 1236.17579, -3.258362
 1239.697525, -3.247528
 1243.219261, -3.23169
 1246.740997, -3.211182
 1250.262733, -3.193024
 1253.784468, -3.167786
 1257.306203, -3.145417
 1260.827939, -3.123047
 1264.349675, -3.101929
 1267.871411, -3.121949
 1271.393146, -3.128968
 1274.914882, -3.112488
 1278.436618, -3.093293
 1281.958354, -3.07135
 1285.480089, -3.045624
 1289.001825, -3.011628
 1292.52356, -2.991333
 1296.045297, -2.959442
 1299.567032, -2.931763
 1303.088768, -2.892456
 1306.610503, -2.870636
 1310.132239, -2.851013
 1313.653975, -2.814087
 1317.175711, -2.775818
 1320.697447, -2.735382
 1324.219182, -2.702942
 1327.740918, -2.669403
 1331.262645, -2.632782
 1334.784376, -2.592408
 1338.306108, -2.559235
 1341.827839, -2.532776
 1345.34957, -2.505219
 1348.871301, -2.476837
 1352.393032, -2.447083
 1355.914764, -2.415802
 1359.436495, -2.385926
 1362.958226, -2.344574
 1366.479897, -2.299591
 1370.001645, -2.280579
 1373.523394, -2.263947
 1377.045142, -2.244019
 1380.566891, -2.215515
 1384.088639, -2.176606
 1387.610387, -2.148163
 1391.132137, -2.118042
 1394.653885, -2.088013
 1398.175634, -2.062561
 1401.697382, -2.035706
 1405.219131, -2.008911
 1408.740879, -1.977112
 1412.262628, -1.943177
 1415.784376, -1.940338
 1419.306125, -1.930329
 1422.827873, -1.89328
 1426.349622, -1.868134
 1429.87137, -1.83609
 1433.393119, -1.813904
 1436.914756, -1.790436
 1440.436484, -1.769135
 1443.958212, -1.761261
 1447.479941, -1.744355
 1451.001669, -1.722992
 1454.523396, -1.708618
 1458.045124, -1.692963
 1461.566852, -1.673584
 1465.088581, -1.656067
 1468.610309, -1.639374
 1472.132037, -1.615753
 1475.653764, -1.587097
 1479.175493, -1.57193
 1482.697221, -1.560974
 1486.218949, -1.53476
 1489.740677, -1.520356
 1493.262405, -1.518524
 1496.784133, -1.504547
 1500.305861, -1.477661
 1503.827589, -1.452881
 1507.349318, -1.446137
 1510.871045, -1.430756
 1514.392773, -1.41568
 1517.914502, -1.411133
 1521.43623, -1.399903
 1524.957957, -1.376252
 1528.479686, -1.361054
 1532.001381, -1.353363
 1535.523124, -1.336212
 1539.044867, -1.326203
 1542.56661, -1.315003
 1546.088352, -1.311035
 1549.610096, -1.292878
 1553.131838, -1.280579
 1556.653581, -1.278412
 1560.175325, -1.279053
 1563.697067, -1.261841
 1567.21881, -1.260071
 1570.740553, -1.258423
 1574.262296, -1.249543
 1577.784039, -1.236573
 1581.305781, -1.219757
 1584.827525, -1.211029
 1588.349268, -1.211701
 1591.87101, -1.196839
 1595.392754, -1.199982
 1598.914497, -1.19336
 1602.43624, -1.183106
 1605.957982, -1.179688
 1609.479726, -1.171814
 1613.001469, -1.158509
 1616.523212, -1.149659
 1620.044954, -1.149872
 1623.566698, -1.147736
 1627.088441, -1.145111
 1630.610184, -1.154938
 1634.131927, -1.160096
 1637.653669, -1.152588
 1641.175413, -1.149567
 1644.697156, -1.150666
 1648.218899, -1.15036
 1651.740601, -1.149048
 1655.262331, -1.153992
 1658.784063, -1.159699
 1662.305793, -1.172791
 1665.827524, -1.177185
 1669.349255, -1.180725
 1672.870986, -1.182709
 1676.392716, -1.181153
 1679.914448, -1.185028
 1683.436179, -1.188904
 1686.95791, -1.190827
 1690.479641, -1.198181
 1694.001371, -1.208649
 1697.523103, -1.210511
 1701.044833, -1.201935
 1704.566564, -1.205139
 1708.088296, -1.217774
 1711.610026, -1.223877
 1715.131757, -1.220917
 1718.653489, -1.220673
 1722.175219, -1.2146
 1725.69695, -1.218109
 1729.218682, -1.224762
 1732.740412, -1.232575
 1736.262143, -1.232209
 1739.783874, -1.235443
 1743.305605, -1.246918
 1746.827336, -1.258637
 1750.349067, -1.271088
 1753.870798, -1.279511
 1757.392529, -1.281037
 1760.914252, -1.287476
 1764.435975, -1.309296
 1767.957698, -1.324433
 1771.479421, -1.333771
 1775.001145, -1.339783
 1778.522868, -1.339539
 1782.044591, -1.346009
 1785.566315, -1.357331
 1789.088038, -1.372742
 1792.609761, -1.378846
 1796.131485, -1.37265
 1799.653208, -1.363831
 1800.290991, -1.356018
 1800.928775, -1.352845
 1801.566558, -1.351746
 1802.204341, -1.350403
 1802.842124, -1.348816
 1803.479907, -1.347138
 1804.117692, -1.345337
 1804.755475, -1.343872
 1805.393258, -1.343445
 1806.031042, -1.342408
 1806.668825, -1.341645
 1807.306608, -1.341187
 1807.944392, -1.340638
 1808.582175, -1.339722
 1809.219958, -1.340393
 1809.857743, -1.342072
 1810.495526, -1.343567
 1811.13331, -1.344635
 1811.771093, -1.345642
 1812.408877, -1.346619
 1813.04666, -1.348114
 1813.682877, -1.355316
 1814.321082, -1.36258
 1814.93686, -1.364014
 1815.57422, -1.362458
 1816.211579, -1.366608
 1816.848939, -1.370697
 1817.486298, -1.374695
 1818.123658, -1.37851
 1818.761018, -1.38208
 1819.398377, -1.385712
 1820.035737, -1.389344
 1820.673096, -1.393036
 1821.310455, -1.39682
 1821.947815, -1.400757
 1822.585174, -1.404816
 1823.222534, -1.409851
 1823.859893, -1.415192
 1824.497252, -1.421204
 1825.134612, -1.427277
 1825.771971, -1.432526
 1826.409332, -1.437683
 1827.046691, -1.442749
 1827.684051, -1.447602
 1828.32141, -1.452179
 1828.958769, -1.456635
 1829.596129, -1.461029
 1830.233488, -1.465576
 1830.870848, -1.470368
 1831.508207, -1.47519
 1832.145566, -1.480011
 1832.782926, -1.484406
 1833.420285, -1.488709
 1834.057645, -1.493042
 1834.695004, -1.497376
 1835.332365, -1.501831
 1835.969724, -1.506287
 1836.607083, -1.510742
 1837.244443, -1.51529
 1837.881802, -1.520081
 1838.519162, -1.524842
 1839.156521, -1.529541
 1839.793881, -1.533356
 1840.43124, -1.536255
 1841.0686, -1.539093
 1841.705959, -1.541962
 1842.343318, -1.545868
 1842.980678, -1.550141
 1843.618037, -1.554352
 1844.255397, -1.558808
 1844.892756, -1.564881
 1845.530116, -1.570862
 1846.167476, -1.576691
 1846.804836, -1.582459
 1847.442195, -1.588501
 1848.079554, -1.594483
 1848.716914, -1.600373
 1849.354273, -1.607086
 1849.991633, -1.614807
 1850.628992, -1.622498
 1851.266352, -1.630097
 1851.903711, -1.638642
 1852.541071, -1.647522
 1853.17843, -1.656372
 1853.81579, -1.665131
 1854.453149, -1.674134
 1855.090508, -1.682984
 1855.727868, -1.691742
 1856.365227, -1.700196
 1857.002587, -1.707794
 1857.639947, -1.715363
 1858.277307, -1.722931
 1858.914666, -1.730439
 1859.552026, -1.738007
 1860.189385, -1.745575
 1860.826723, -1.752961
 1861.464074, -1.760865
 1862.101425, -1.769074
 1862.738776, -1.777344
 1863.376127, -1.785675
 1864.013478, -1.7948
 1864.650829, -1.803894
 1865.288181, -1.812867
 1865.925531, -1.82193
 1866.562883, -1.831635
 1867.200233, -1.841339
 1867.837585, -1.851044
 1868.474936, -1.861145
 1869.112287, -1.871826
 1869.749638, -1.882538
 1870.386989, -1.893219
 1871.02434, -1.903443
 1871.661691, -1.913452
 1872.299042, -1.923462
 1872.936394, -1.933503
 1873.573745, -1.941742
 1874.211096, -1.949951
 1874.848447, -1.958283
 1875.485798, -1.966523
 1876.12315, -1.974091
 1876.7605, -1.981842
 1877.397852, -1.989777
 1878.035202, -2.000122
 1878.672554, -2.013367
 1879.309904, -2.02652
 1879.947256, -2.039612
 1880.584607, -2.051026
 1881.221958, -2.061798
 1881.859309, -2.072724
 1882.49666, -2.083741
 1883.134011, -2.094452
 1883.771363, -2.105347
 1884.408713, -2.116455
 1885.046065, -2.128205
 1885.683415, -2.141877
 1886.320767, -2.155732
 1886.958119, -2.16977
 1887.595469, -2.183686
 1888.232821, -2.197419
 1888.870171, -2.211335
 1889.507523, -2.225434
 1890.144874, -2.239136
 1890.782225, -2.251404
 1891.419576, -2.263642
 1892.056927, -2.275788
 1892.694278, -2.287567
 1893.331629, -2.299378
 1893.96898, -2.311219
 1894.606332, -2.323334
 1895.243682, -2.336426
 1895.881034, -2.349457
 1896.518385, -2.362519
 1897.155736, -2.375489
 1897.793087, -2.388459
 1898.430438, -2.401398
 1899.067789, -2.414337
 1899.705141, -2.427216
 1900.342491, -2.440064
 1900.979843, -2.452942
 1901.617193, -2.465851
 1902.254545, -2.480774
 1902.891896, -2.495728
 1903.529247, -2.510681
 1904.166598, -2.525391
 1904.803949, -2.53949
 1905.4413, -2.553559
 1906.078652, -2.567597
 1906.716002, -2.581421
 1907.353354, -2.595032
 1907.990704, -2.608643
 1908.628056, -2.622284
 1909.265408, -2.6362
 1909.902758, -2.650299
 1910.54011, -2.66449
 1911.177461, -2.678772
 1911.814812, -2.694733
 1912.452163, -2.710846
 1913.089514, -2.727082
 1913.726865, -2.743775
 1914.364217, -2.761902
 1915.001567, -2.780121
 1915.638919, -2.798432
 1916.276269, -2.81778
 1916.913621, -2.838318
 1917.550972, -2.858826
 1918.188323, -2.879242
 1918.825674, -2.897217
 1919.463026, -2.914185
 1920.100376, -2.931183
 1920.737728, -2.948181
 1921.375078, -2.964966
 1922.01243, -2.981781
 1922.649781, -2.998627
 1923.287132, -3.015656
 1923.924483, -3.033264
 1924.561835, -3.050873
 1925.199185, -3.068512
 1925.836537, -3.086518
 1926.473887, -3.10492
 1927.111239, -3.123413
 1927.74859, -3.141968
 1928.385941, -3.160401
 1929.023292, -3.178894
 1929.660644, -3.19751
 1930.297994, -3.216248
 1930.935346, -3.235016
 1931.572696, -3.253968
 1932.210048, -3.273102
 1932.847328, -3.292328
 1933.484671, -3.311829
 1934.122014, -3.331391
 1934.759357, -3.351075
 1935.396701, -3.37143
 1936.034044, -3.392548
 1936.671387, -3.413697
 1937.30873, -3.434906
 1937.946073, -3.456757
 1938.583417, -3.478882
 1939.22076, -3.501007
 1939.858103, -3.523163
 1940.495446, -3.545716
 1941.132789, -3.568329
 1941.770133, -3.590943
 1942.407476, -3.613953
 1943.044819, -3.63797
 1943.682162, -3.662049
 1944.319505, -3.686158
 1944.956849, -3.710205
 1945.594192, -3.734223
 1946.231535, -3.758332
 1946.868878, -3.782471
 1947.506221, -3.805725
 1948.143565, -3.828797
 1948.780908, -3.85196
 1949.418251, -3.874939
 1950.055594, -3.897553
 1950.692937, -3.920136
 1951.330281, -3.942658
 1951.967624, -3.965912
 1952.604967, -3.990998
 1953.24231, -4.016053
 1953.879653, -4.041107
 1954.516996, -4.067871
 1955.15434, -4.0961
 1955.791683, -4.124359
 1956.429027, -4.152619
 1957.06637, -4.17685
 1957.703713, -4.200104
 1958.341056, -4.22345
 1958.9784, -4.246826
 1959.615743, -4.270539
 1960.253086, -4.294281
 1960.890429, -4.318024
 1961.527773, -4.342011
 1962.165116, -4.366486
 1962.802459, -4.390992
 1963.439802, -4.415467
 1964.077145, -4.442078
 1964.714489, -4.470337
 1965.351832, -4.498566
 1965.989175, -4.526825
 1966.626518, -4.555512
 1967.263861, -4.58429
 1967.901205, -4.613037
 1968.538548, -4.641785
 1969.175891, -4.670441
 1969.813234, -4.699066
 1970.450577, -4.727692
 1971.08792, -4.755951
 1971.725264, -4.7836
 1972.362607, -4.811219
 1972.99995, -4.838806
 1973.637293, -4.86615
 1974.274636, -4.893402
 1974.91198, -4.920716
 1975.549323, -4.94809
 1976.186666, -4.974091
 1976.824009, -4.999939
 1977.461352, -5.025818
 1978.098696, -5.051453
 1978.736039, -5.074646
 1979.373382, -5.09784
 1980.010725, -5.121033
 1980.648068, -5.144715
 1981.285412, -5.169312
 1981.922755, -5.194092
 1982.560098, -5.219055
 1983.197441, -5.243958
 1983.834784, -5.26886
 1984.472127, -5.293946
 1985.109471, -5.319184
 1985.746814, -5.343933
 1986.384157, -5.368714
 1987.0215, -5.393586
 1987.658843, -5.418335
 1988.296187, -5.441773
 1988.93353, -5.465271
 1989.570873, -5.488861
 1990.208216, -5.513428
 1990.845559, -5.539337
 1991.482903, -5.565308
 1992.120246, -5.591278
 1992.757589, -5.618164
 1993.394932, -5.645447
 1994.032275, -5.67276
 1994.669618, -5.700104
 1995.306962, -5.727387
 1995.944305, -5.7547
 1996.581648, -5.780762
 1997.218991, -5.805878
 1997.856334, -5.829865
 1998.493645, -5.853852
 1999.130985, -5.877869
 1999.768326, -5.901856
 2000.405667, -5.925751
 2001.043007, -5.949677
 2001.680348, -5.973572
 2002.317688, -5.998169
 2002.955028, -6.023041
 2003.592369, -6.047974
 2004.229709, -6.072937
 2004.86705, -6.09607
 2005.504391, -6.119141
 2006.141731, -6.142243
 2006.779071, -6.165497
 2007.416412, -6.189362
 2008.053752, -6.213257
 2008.691093, -6.237122
 2009.328433, -6.261658
 2009.965774, -6.286927
 2010.603115, -6.312195
 2011.240454, -6.337433
 2011.877795, -6.363556
 2012.515136, -6.389954
 2013.152476, -6.416382
 2013.789817, -6.442749
 2014.427158, -6.469361
 2015.064498, -6.495941
 2015.701838, -6.522522
 2016.339178, -6.548951
 2016.976519, -6.575013
 2017.61386, -6.601044
 2018.2512, -6.627076
 2018.888541, -6.650666
 2019.525882, -6.671936
 2020.163221, -6.693238
 2020.800562, -6.7146
 2021.437902, -6.736542
 2022.075243, -6.758698
 2022.712584, -6.780823
 2023.349924, -6.802979
 2023.987265, -6.825592
 2024.624605, -6.848206
 2025.261945, -6.870819
 2025.899286, -6.893555
 2026.536626, -6.916657
 2027.173967, -6.939789
 2027.811308, -6.962921
 2028.448648, -6.985871
 2029.085988, -7.008667
 2029.723329, -7.031464
 2030.360669, -7.054291
 2030.99801, -7.077362
 2031.635351, -7.100495
 2032.272691, -7.123627
 2032.910032, -7.14682
 2033.547371, -7.170594
 2034.184712, -7.194336
 2034.822053, -7.218079
 2035.459393, -7.241669
 2036.096734, -7.264954
 2036.734075, -7.288269
 2037.371415, -7.311554
 2038.008755, -7.335327
 2038.646095, -7.359436
 2039.283436, -7.383545
 2039.920777, -7.407715
 2040.558117, -7.432617
 2041.195458, -7.457672
 2041.832799, -7.482758
 2042.470139, -7.507721
 2043.107479, -7.531555
 2043.744819, -7.555359
 2044.38216, -7.579132
 2045.019483, -7.603119
 2045.656823, -7.627411
 2046.294163, -7.651703
 2046.931502, -7.675965
 2047.568842, -7.70044
 2048.206182, -7.725006
 2048.843521, -7.749573
 2049.480861, -7.77414
 2050.118201, -7.798493
 2050.755541, -7.822815
 2051.39288, -7.847138
 2052.03022, -7.871247
 2052.66756, -7.894226
 2053.3049, -7.917206
 2053.942239, -7.940186
 2054.579579, -7.963074
 2055.216919, -7.98584
 2055.854258, -8.008606
 2056.491598, -8.031372
 2057.128938, -8.054657
 2057.766278, -8.078156
 2058.403617, -8.101654
 2059.040957, -8.125153
 2059.678297, -8.148285
 2060.315636, -8.171418
 2060.952976, -8.194519
 2061.590316, -8.217621
 2062.227656, -8.240662
 2062.864995, -8.263703
 2063.502335, -8.286743
 2064.139675, -8.309784
 2064.777015, -8.332825
 2065.414354, -8.355866
 2066.05132, -8.37909
 2066.688687, -8.404663
 2067.326054, -8.430573
 2067.963421, -8.456391
 2068.600788, -8.482086
 2069.238155, -8.504761
 2069.875522, -8.527222
 2070.512889, -8.549683
 2071.150256, -8.571656
 2071.787623, -8.591523
 2072.42499, -8.611481
 2073.062357, -8.631562
 2073.699724, -8.651551
 2074.33662, -8.670197
 2074.97396, -8.688629
 2075.6113, -8.707062
 2076.24864, -8.723725
 2076.885979, -8.739624
 2077.514079, -8.758332
 2078.151716, -8.77771
 2078.789353, -8.79541
 2079.42699, -8.813172
 2080.060999, -8.827668
 2080.698338, -8.841828
 2081.335678, -8.851227
 2081.965746, -8.862427
 2082.603312, -8.876557
 2083.240877, -8.890961
 2083.878443, -8.904877
 2084.516008, -8.919159
 2085.153574, -8.931977
 2085.791139, -8.940674
 2086.428705, -8.949189
 2087.06627, -8.958069
 2087.703835, -8.967285
 2088.341402, -8.977204
 2088.978966, -8.988831
 2089.616532, -9.001526
 2090.253288, -9.015564
 2090.891034, -9.030213
 2091.528781, -9.046021
 2092.166527, -9.062226
 2092.804274, -9.078797
 2093.442021, -9.094666
 2094.079767, -9.107849
 2094.717514, -9.122711
 2095.35526, -9.138001
 2095.993007, -9.152588
 2096.630753, -9.162995
 2097.2685, -9.173432
 2097.906246, -9.18396
 2098.543994, -9.194458
 2099.18174, -9.203705
 2099.819487, -9.211396
 2100.457233, -9.21991
 2101.09498, -9.229645
 2101.732726, -9.234955
 2102.370386, -9.241364
 2103.00821, -9.249329
 2103.646034, -9.257691
 2104.283857, -9.260315
 2104.921681, -9.261872
 2105.559504, -9.263275
 2106.197328, -9.264466
 2106.835151, -9.265656
 2107.472974, -9.267517
 2108.110798, -9.268677
 2108.748621, -9.270874
 2109.386445, -9.274689
 2110.024186, -9.279572
 2110.661951, -9.284638
 2111.299715, -9.289856
 2111.93748, -9.294739
 2112.575244, -9.299012
 2113.213008, -9.302887
 2113.850773, -9.306366
 2114.488537, -9.309693
 2115.126301, -9.313385
 2115.764066, -9.316803
 2116.40183, -9.319855
 2117.039594, -9.32071
 2117.67736, -9.310791
 2118.315124, -9.300232
 2118.952888, -9.289032
 2119.590652, -9.277161
 2120.228417, -9.26471
 2120.866181, -9.252716
 2121.503946, -9.241364
 2122.141711, -9.230652
 2122.779475, -9.223725
 2123.41724, -9.217957
 2124.055004, -9.213074
 2124.692768, -9.20868
 2125.330533, -9.206726
 2127.351744, -9.202393
 2129.372954, -9.192383
 2131.394163, -9.179962
 2133.415372, -9.168305
 2135.436582, -9.161896
 2137.457791, -9.15506
 2139.479, -9.140869
 2141.500208, -9.128083
 2143.521417, -9.120575
 2145.542624, -9.117096
 2147.562865, -9.109619
 2149.584476, -9.103211
 2151.606088, -9.101502
 2153.627699, -9.100769
 2155.64931, -9.098419
 2157.670921, -9.093476
 2159.692532, -9.087952
 2161.714142, -9.082459
 2163.735753, -9.082917
 2165.757363, -9.083344
 2167.778973, -9.082276
 2169.800582, -9.080719
 2171.821671, -9.080017
 2173.842877, -9.087159
 2175.864083, -9.089936
 2177.885288, -9.089173
 2179.906494, -9.08606
 2181.927698, -9.085724
 2183.948109, -9.090638
 2185.969683, -9.090546
 2187.991256, -9.08722
 2190.01283, -9.087281
 2192.034402, -9.090576
 2194.055976, -9.091828
 2196.077548, -9.090454
 2198.099121, -9.089142
 2200.120693, -9.084595
 2202.142265, -9.074433
 2204.163837, -9.056916
 2206.185409, -9.035065
 2208.206981, -9.016632
 2210.228552, -9.007935
 2212.250123, -9.009583
 2214.271694, -9.009156
 2216.293265, -9.009003
 2218.314836, -8.999726
 2220.335534, -9.000641
 2222.356736, -9
 2224.377938, -8.988129
 2226.399139, -8.982849
 2228.42034, -8.982056
 2230.44154, -8.991638
 2232.462741, -8.990998
 2234.483942, -8.987885
 2236.505142, -8.987183
 2238.526295, -8.984497
 2240.547609, -8.977448
 2242.568923, -8.970307
 2244.590236, -8.959259
 2246.611549, -8.944214
 2248.632862, -8.923279
 2250.654175, -8.900971
 2252.675487, -8.880341
 2254.696763, -8.867157
 2256.718264, -8.845307
 2258.739766, -8.823365
 2260.761267, -8.809204
 2262.782768, -8.799317
 2264.804269, -8.78418
 2266.82577, -8.765412
 2268.84727, -8.739441
 2270.86877, -8.711762
 2272.89027, -8.687043
 2274.91177, -8.679291
 2276.93327, -8.673676
 2278.954769, -8.654969
 2280.976286, -8.640717
 2282.997812, -8.622437
 2285.019338, -8.59491
 2287.040865, -8.58136
 2289.062391, -8.559326
 2291.083917, -8.53067
 2293.105442, -8.508484
 2295.126968, -8.490937
 2297.148492, -8.464814
 2299.170018, -8.437561
 2301.191543, -8.421265
 2303.213067, -8.398194
 2305.234592, -8.368409
 2307.256116, -8.339356
 2309.277593, -8.314423
 2311.299303, -8.291687
 2313.321011, -8.263245
 2315.341766, -8.234925
 2317.363174, -8.210419
 2319.384581, -8.187348
 2321.405988, -8.169129
 2323.427394, -8.148774
 2325.448954, -8.127716
 2327.47118, -8.115204
 2329.493405, -8.109467
 2331.515629, -8.106537
 2333.537854, -8.101685
 2335.559138, -8.090729
 2337.581085, -8.078064
 2339.603032, -8.067414
 2341.624979, -8.067444
 2343.646925, -8.055847
 2345.668872, -8.052887
 2347.690818, -8.054047
 2349.712765, -8.045288
 2351.734711, -8.032135
 2353.756656, -8.0224
 2355.778602, -8.013275
 2357.800548, -8.004029
 2359.822493, -8.011902
 2361.844438, -8.007294
 2363.866383, -8.000885
 2365.888329, -7.995301
 2367.910273, -7.994812
 2369.932218, -7.994294
 2371.954163, -7.991089
 2373.976107, -7.981263
 2375.998051, -7.967102
 2378.019996, -7.961792
 2380.041939, -7.953461
 2382.063884, -7.942047
 2384.085827, -7.933564
 2386.107771, -7.938752
 2388.129714, -7.935211
 2390.151657, -7.939759
 2392.173601, -7.955262
 2394.195543, -7.965393
 2396.217486, -7.97107
 2398.230283, -7.982453
 2400.252761, -8.005646
 2402.275239, -8.028748
 2404.297718, -8.054322
 2406.320196, -8.082337
 2408.342673, -8.109223
 2410.365151, -8.135926
 2412.387629, -8.164337
 2414.410107, -8.188996
 2416.432585, -8.208618
 2418.455062, -8.234009
 2420.47754, -8.269776
 2422.500017, -8.301422
 2424.522496, -8.322052
 2426.544973, -8.344269
 2428.567451, -8.37497
 2430.589928, -8.411866
 2432.612406, -8.442597
 2434.634883, -8.473236
 2436.65736, -8.51416
 2438.679838, -8.554108
 2440.702258, -8.588501
 2442.724757, -8.631378
 2444.747255, -8.669709
 2446.769753, -8.705536
 2448.792251, -8.747559
 2450.81475, -8.793335
 2452.837248, -8.827881
 2454.859746, -8.866242
 2456.882245, -8.90445
 2458.904743, -8.939881
 2460.927241, -8.970764
 2462.94974, -9.000122
 2464.972238, -9.031128
 2466.994736, -9.064209
 2469.017234, -9.092896
 2471.039733, -9.11258
 2473.062231, -9.136841
 2475.084729, -9.16449
 2477.107228, -9.197022
 2479.129726, -9.229126
 2481.152224, -9.254822
 2483.174267, -9.274628
 2485.196751, -9.293488
 2487.219235, -9.313416
 2489.241718, -9.331757
 2491.264202, -9.341431
 2493.286686, -9.346497
 2495.309169, -9.349182
 2497.331652, -9.351807
 2499.354136, -9.352692
 2501.37662, -9.345368
 2503.399104, -9.337799
 2505.421588, -9.32898
 2507.444072, -9.312073
 2509.466374, -9.292359
 2511.488787, -9.274628
 2513.5112, -9.237732
 2515.533615, -9.218293
 2517.556028, -9.206238
 2519.578442, -9.181092
 2521.600856, -9.156098
 2523.62327, -9.128846
 2525.645684, -9.102722
 2527.668097, -9.075745
 2529.690511, -9.039978
 2531.712926, -9.001343
 2533.735339, -8.968872
 2535.757754, -8.936707
 2537.780168, -8.896485
 2539.802583, -8.850464
 2541.824997, -8.804169
 2543.847412, -8.761475
 2545.869826, -8.715515
 2547.89224, -8.661927
 2549.914655, -8.607697
 2551.93707, -8.555085
 2553.959484, -8.505249
 2555.981899, -8.454254
 2558.004314, -8.399933
 2560.026729, -8.348389
 2562.049145, -8.288422
 2564.07156, -8.224549
 2566.093974, -8.161408
 2568.11639, -8.096558
 2570.138805, -8.026306
 2572.161218, -7.946503
 2574.183641, -7.870026
 2576.206063, -7.804749
 2578.228487, -7.74347
 2580.25091, -7.6698
 2582.273333, -7.589478
 2584.295756, -7.50589
 2586.318179, -7.422791
 2588.340602, -7.340668
 2590.363026, -7.263092
 2592.385449, -7.186554
 2594.407873, -7.108307
 2596.430296, -7.031098
 2598.452719, -6.959687
 2600.475143, -6.885804
 2602.497567, -6.809784
 2604.519991, -6.735535
 2606.542415, -6.669068
 2608.564838, -6.605347
 2610.587262, -6.539032
 2612.609686, -6.470795
 2614.63211, -6.404053
 2616.654534, -6.340912
 2618.676958, -6.279358
 2620.699382, -6.221527
 2622.721807, -6.164795
 2624.744231, -6.106629
 2626.766655, -6.049439
 2628.78908, -5.992859
 2630.811505, -5.945313
 2632.833928, -5.906555
 2634.856353, -5.872132
 2636.878778, -5.825257
 2638.901203, -5.77771
 2640.923628, -5.735413
 2642.946052, -5.696442
 2644.968477, -5.658264
 2646.990902, -5.62265
 2649.013327, -5.591614
 2651.035752, -5.56305
 2653.058177, -5.533478
 2655.080602, -5.499909
 2657.103027, -5.469391
 2659.125453, -5.448365
 2661.147878, -5.430451
 2663.170304, -5.412262
 2665.192729, -5.391571
 2667.215155, -5.374024
 2669.23758, -5.365876
 2671.260006, -5.358277
 2673.282373, -5.346741
 2675.304773, -5.33841
 2677.327174, -5.33487
 2679.349574, -5.324189
 2681.371976, -5.310486
 2683.394376, -5.302033
 2685.416777, -5.295472
 2687.439178, -5.295105
 2689.461579, -5.307129
 2691.48398, -5.323822
 2693.506382, -5.333069
 2695.528783, -5.348664
 2697.551184, -5.36911
 2699.573586, -5.384308
 2701.595987, -5.398041
 2703.618388, -5.421692
 2705.64079, -5.458924
 2707.663192, -5.490753
 2709.685594, -5.513001
 2711.707995, -5.527832
 2713.730397, -5.552368
 2715.752799, -5.586518
 2717.775201, -5.619904
 2719.797603, -5.651673
 2721.820005, -5.683991
 2723.842407, -5.730194
 2725.864809, -5.774994
 2727.887212, -5.819733
 2729.909605, -5.865967
 2731.931977, -5.913422
 2733.95435, -5.958557
 2735.976723, -6.01529
 2737.999095, -6.075592
 2740.021468, -6.133759
 2742.043841, -6.18515
 2744.066214, -6.233307
 2746.088587, -6.279785
 2748.11096, -6.344879
 2750.133333, -6.426972
 2752.155707, -6.49527
 2754.17808, -6.558411
 2756.200453, -6.623993
 2758.222827, -6.692993
 2760.2452, -6.758576
 2762.267574, -6.814972
 2764.289932, -6.880066
 2766.312286, -6.953797
 2768.33464, -7.032837
 2770.356993, -7.107483
 2772.379348, -7.178009
 2774.401702, -7.245697
 2776.424056, -7.315125
 2778.446411, -7.387635
 2780.468765, -7.462738
 2782.49112, -7.539093
 2784.513474, -7.614106
 2786.535829, -7.687561
 2788.558184, -7.759857
 2790.580538, -7.832794
 2792.602894, -7.903382
 2794.625248, -7.97406
 2796.647603, -8.049103
 2798.669958, -8.128968
 2800.692314, -8.198487
 2802.714669, -8.264801
 2804.737025, -8.330536
 2806.759379, -8.397583
 2808.781735, -8.463013
 2810.804091, -8.528046
 2812.826447, -8.595032
 2814.848802, -8.664551
 2816.871159, -8.739777
 2818.893514, -8.818878
 2820.91587, -8.893799
 2822.938226, -8.96872
 2824.960583, -9.042816
 2826.982939, -9.106232
 2829.005296, -9.172547
 2831.027652, -9.242524
 2833.050009, -9.314972
 2835.072365, -9.382569
 2837.094722, -9.444336
 2839.117078, -9.506195
 2841.139435, -9.580292
 2843.161792, -9.660523
 2845.18415, -9.739228
 2847.206506, -9.803498
 2849.228863, -9.867737
 2851.251221, -9.932068
 2853.273079, -9.994355
 2855.295267, -10.057068
 2857.317455, -10.116822
 2859.339643, -10.184967
 2861.361831, -10.260987
 2863.383717, -10.339753
 2865.406011, -10.408112
 2867.428306, -10.475159
 2869.450602, -10.542847
 2871.472898, -10.603699
 2873.495193, -10.662323
 2875.517488, -10.738617
 2877.539784, -10.800263
 2879.562079, -10.858033
 2881.584375, -10.916901
 2883.606578, -10.976929
 2885.628928, -11.039063
 2887.651277, -11.103455
 2889.673627, -11.168518
 2891.695976, -11.234223
 2893.718325, -11.300934
 2895.740675, -11.366852
 2897.763025, -11.42804
 2899.785374, -11.482392
 2901.807724, -11.538025
 2903.830074, -11.598114
 2905.852424, -11.650879
 2907.874775, -11.699921
 2909.897125, -11.74942
 2911.919476, -11.799866
 2913.941808, -11.851532
 2915.964181, -11.901856
 2917.986555, -11.947937
 2920.008928, -11.991333
 2922.031302, -12.035187
 2924.053676, -12.085907
 2926.07605, -12.132904
 2928.098424, -12.178803
 2930.120798, -12.227021
 2932.143173, -12.261109
 2934.165546, -12.320404
 2936.187921, -12.370056
 2938.210295, -12.402497
 2940.23267, -12.442871
 2942.255044, -12.484803
 2944.277419, -12.523957
 2946.299793, -12.558991
 2948.322168, -12.594818
 2950.344543, -12.639435
 2952.366918, -12.679261
 2954.389293, -12.717865
 2956.411668, -12.754059
 2958.434043, -12.787781
 2960.456418, -12.828949
 2962.478793, -12.875
 2964.501007, -12.921906
 2966.52333, -12.96756
 2968.545654, -13.009857
 2970.567977, -13.052796
 2972.5903, -13.099152
 2974.612624, -13.145905
 2976.634947, -13.189026
 2978.657271, -13.23227
 2980.679595, -13.268891
 2982.701918, -13.309784
 2984.724242, -13.353333
 2986.746566, -13.392701
 2988.768891, -13.423493
 2990.791215, -13.453034
 2992.813539, -13.491608
 2994.835864, -13.535248
 2996.858188, -13.576325
 2998.880512, -13.613373
 3000.902837, -13.651062
 3002.925161, -13.690369
 3004.947486, -13.730408
 3006.969811, -13.768891
 3008.992136, -13.800324
 3011.014462, -13.834992
 3013.036786, -13.872803
 3015.059112, -13.904785
 3017.081438, -13.939423
 3019.103763, -13.968018
 3021.126088, -13.991059
 3023.148414, -14.015839
 3025.17074, -14.048157
 3027.193065, -14.076386
 3029.215391, -14.103485
 3031.237718, -14.1297
 3033.260044, -14.155121
 3035.276233, -14.178437
 3037.293469, -14.203827
 3039.315801, -14.224274
 3041.338134, -14.240052
 3043.360467, -14.258545
 3045.382799, -14.292084
 3047.405132, -14.305634
 3049.427466, -14.317536
 3051.449798, -14.337067
 3053.472132, -14.35611
 3055.494465, -14.370667
 3057.516798, -14.380219
 3059.539131, -14.388794
 3061.561465, -14.401337
 3063.583798, -14.417816
 3065.606132, -14.430268
 3067.628466, -14.44278
 3069.6508, -14.456818
 3071.673134, -14.468445
 3073.695468, -14.471497
 3075.717802, -14.473175
 3077.740137, -14.480164
 3079.762471, -14.490357
 3081.784805, -14.494782
 3083.80714, -14.49762
 3085.829474, -14.497834
 3087.851809, -14.494568
 3089.874144, -14.490631
 3091.896479, -14.500641
 3093.918814, -14.517121
 3095.941149, -14.525086
 3097.963484, -14.526184
 3099.98582, -14.532868
 3102.008155, -14.547882
 3104.03049, -14.565094
 3106.052825, -14.579407
 3108.075161, -14.593201
 3110.097497, -14.603699
 3112.119833, -14.612519
 3114.142169, -14.627594
 3116.164504, -14.644806
 3118.18684, -14.652283
 3120.209176, -14.655609
 3122.231513, -14.661652
 3124.253849, -14.663697
 3126.276185, -14.664368
 3128.298521, -14.676697
 3130.320858, -14.686676
 3132.343195, -14.693543
 3134.365532, -14.700318
 3136.387869, -14.712616
 3138.410206, -14.732148
 3140.432542, -14.748535
 3142.45488, -14.763031
 3144.477217, -14.777771
 3146.499555, -14.794525
 3148.521892, -14.809967
 3150.544229, -14.821045
 3152.566566, -14.829956
 3154.588904, -14.846497
 3156.611242, -14.867035
 3158.633579, -14.892121
ENDTABLE
ROAD_ZS_GAIN(3)     1 ! Gain multiplied with calculated value to get elevation
ROAD_ZS_OFFSET(3)   0 ; m ! Offset added (after gain) to get elevation
SSTART_ROAD_ZS(3)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_ZS(3)   1 ! Scale factor divided into (station - SSTART_ROAD_ZS)

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(2) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(2)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(2)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(2) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(2) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(3) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(3)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(3)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(3) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(3) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1) 1 ; - ! Constant gain, axle 1
R_STEER_SPEED_GAIN(1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1) 0 ; - ! Offset added (after gain) to get gain

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Path Preview: 0.2/0.2 G Max Ax/Ay, 120 kmh
SPEED_TARGET_CONSTANT(1) 120 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

SPEED_TARGET_ID(2)  2  ! Constant: 40 km/h
SPEED_TARGET_CONSTANT(2) 40 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;
SPEED_TARGET_S_CONSTANT(2) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IAXLE is used to identify the dataset when reading data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2) 0 ! Coefficient: steer per unit roll (deg/deg),
                                      ! axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.

SUSP_DIVE_AXLE_CONSTANT(1) 0 ; deg ! Constant suspension dive, axle 1
SUSP_DIVE_AXLE_OFFSET(1) 0 ; deg ! Offset added (after gain) to get suspension dive

SUSP_DIVE_AXLE_CONSTANT(2) 0 ; deg ! Constant suspension dive, axle 2
SUSP_DIVE_AXLE_OFFSET(2) 0 ; deg ! Offset added (after gain) to get suspension dive

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IAXLE is used to
! identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1) 0 ; mm ! Constant X axle movement forward, axle 1
SUSP_X_AXLE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward

SUSP_X_AXLE_CONSTANT(2) 0 ; mm ! Constant X axle movement forward, axle 2
SUSP_X_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1) SPLINE ! axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2) SPLINE ! axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT   0.75 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 200
 0.1, 200
 0.2, 263
 0.3, 280
 0.4, 334.5
 0.8, 375
 1, 375
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 338
 0.1, 338
 0.2, 445
 0.3, 473.5
 0.4, 563.8
 0.8, 639
 1, 639
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 543
 0.1, 543
 0.2, 713.5
 0.3, 765.416
 0.4, 905.5
 0.8, 1025
 1, 1025
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 789
 0.1, 789
 0.2, 1037
 0.3, 1112.166
 0.4, 1315
 0.8, 1488
 1, 1488
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 815
 0.1, 815
 0.15, 1294.7
 0.2, 1470
 0.3, 1575.833
 0.4, 1865
 0.8, 2105
 1, 2105
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 1100
 0.1, 1100
 0.2, 2000
 0.8, 2830
 1, 2830
ENDTABLE
UPSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(6) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! SPLINE X-Y TABLES FOR PATH SEGMENTS
!------------------------------------------------------------------------------------
! Following are up to 500 tables of X-Y global coordinates used to make spline
! segments for reference paths. Tables are listed here only if used in a path. If
! indices shown below are not used, e.g., SEGMENT_XY_TABLE(1), the current value
! of the index ITAB_XY is used to identify the table when reading data.

! NTAB_XY 3 ! CALC -- Current number of XY spline tables for path segments

XY_TABLE_ID(1)      1 ; Path_1 Segment 1
SEGMENT_XY_TABLE(1) ! table with X (m), Y (m), and calculated station S (m)
 0, 0, 0
 0.2116, 4.5181, 4.523
 0.4232, 9.0362, 9.046
 0.6348, 13.5542, 13.569
 0.8465, 18.0723, 18.092
 1.0581, 22.5904, 22.615
 1.2697, 27.1085, 27.138
 1.4813, 31.6266, 31.661
 1.6929, 36.1446, 36.184
 1.9045, 40.6627, 40.707
 2.1162, 45.1808, 45.23
 2.3278, 49.6989, 49.753
 2.5394, 54.217, 54.276
 2.751, 58.7351, 58.799
 2.9626, 63.2531, 63.322
 3.1742, 67.7712, 67.846
 3.3859, 72.2893, 72.369
 3.5975, 76.8074, 76.892
 3.8091, 81.3255, 81.415
 4.0207, 85.8435, 85.938
 4.2323, 90.3616, 90.461
 4.444, 94.8797, 94.984
 4.6556, 99.3978, 99.507
 4.8672, 103.9159, 104.03
 5.0788, 108.4339, 108.553
 5.2904, 112.952, 113.076
 5.5021, 117.4701, 117.599
 5.7137, 121.9882, 122.122
 5.9348, 126.5058, 126.645
 6.1599, 131.0232, 131.168
 6.3849, 135.5407, 135.691
 6.6099, 140.0581, 140.214
 6.835, 144.5756, 144.737
 7.06, 149.093, 149.26
 7.2851, 153.6104, 153.783
 7.5101, 158.1279, 158.306
 7.7351, 162.6453, 162.829
 7.9602, 167.1627, 167.352
 8.1852, 171.6802, 171.875
 8.4103, 176.1976, 176.398
 8.6353, 180.7151, 180.921
 8.8603, 185.2325, 185.444
 9.0854, 189.7499, 189.968
 9.3104, 194.2674, 194.491
 9.5355, 198.7848, 199.014
 9.7605, 203.3022, 203.537
 9.9855, 207.8197, 208.06
 10.2106, 212.3371, 212.583
 10.4356, 216.8546, 217.106
 10.6607, 221.372, 221.629
 10.8857, 225.8894, 226.152
 11.1108, 230.4069, 230.675
 11.3358, 234.9243, 235.198
 11.5609, 239.4417, 239.721
 11.7859, 243.9592, 244.244
 12.0109, 248.4766, 248.767
 12.236, 252.9941, 253.29
 12.461, 257.5115, 257.813
 12.6861, 262.0289, 262.336
 12.9111, 266.5464, 266.859
 13.1362, 271.0638, 271.382
 13.3612, 275.5812, 275.905
 13.5863, 280.0987, 280.428
 13.8113, 284.6161, 284.951
 14.0364, 289.1336, 289.474
 14.2614, 293.651, 293.997
 14.4864, 298.1684, 298.52
 14.7115, 302.6859, 303.043
 14.937, 307.2033, 307.567
 15.1632, 311.7207, 312.09
 15.3893, 316.238, 316.613
 15.6155, 320.7554, 321.136
 15.8417, 325.2728, 325.659
 16.0679, 329.7902, 330.182
 16.2941, 334.3076, 334.705
 16.5203, 338.8249, 339.228
 16.7465, 343.3423, 343.751
 16.9726, 347.8597, 348.274
 17.1988, 352.3771, 352.797
 17.425, 356.8945, 357.32
 17.6512, 361.4118, 361.843
 17.8774, 365.9292, 366.366
 18.1036, 370.4466, 370.889
 18.3298, 374.964, 375.412
 18.5559, 379.4814, 379.935
 18.7821, 383.9987, 384.458
 19.0083, 388.5161, 388.981
 19.2345, 393.0335, 393.504
 19.4607, 397.5509, 398.027
 19.6869, 402.0683, 402.55
 19.9131, 406.5857, 407.073
 20.1393, 411.103, 411.596
 20.3655, 415.6204, 416.119
 20.5916, 420.1378, 420.643
 20.8178, 424.6552, 425.166
 21.044, 429.1726, 429.689
 21.2702, 433.6899, 434.212
 21.4964, 438.2073, 438.735
 21.7226, 442.7247, 443.258
 21.9488, 447.2421, 447.781
 22.175, 451.7595, 452.304
 22.4012, 456.2768, 456.827
 22.6274, 460.7942, 461.35
 22.8536, 465.3116, 465.873
 23.0798, 469.829, 470.396
 23.3059, 474.3464, 474.919
 23.5321, 478.8637, 479.442
 23.7583, 483.3811, 483.965
 23.9845, 487.8985, 488.488
 24.2107, 492.4159, 493.011
 24.4369, 496.9333, 497.534
 24.6631, 501.4506, 502.057
 24.8792, 505.9685, 506.58
 25.0889, 510.4867, 511.103
 25.2986, 515.0049, 515.626
 25.5084, 519.523, 520.149
 25.7181, 524.0412, 524.672
 25.9278, 528.5594, 529.195
 26.1376, 533.0775, 533.718
 26.3473, 537.5957, 538.242
 26.5993, 542.1117, 542.764
 26.8654, 546.6269, 547.288
 27.1316, 551.1421, 551.811
 27.3977, 555.6573, 556.334
 27.6639, 560.1725, 560.857
 27.93, 564.6878, 565.38
 28.1962, 569.203, 569.903
 28.4623, 573.7182, 574.426
 28.7285, 578.2334, 578.949
 28.9946, 582.7486, 583.472
 29.2608, 587.2638, 587.995
 29.527, 591.7791, 592.518
 29.7931, 596.2943, 597.041
 30.0593, 600.8095, 601.564
 30.3254, 605.3247, 606.087
 30.5744, 609.8408, 610.61
 30.7718, 614.3595, 615.133
 30.9692, 618.8783, 619.656
 31.1666, 623.397, 624.179
 31.364, 627.9157, 628.702
 31.5615, 632.4344, 633.225
 31.7589, 636.9531, 637.748
 31.9563, 641.4719, 642.271
 32.1537, 645.9906, 646.794
 32.3511, 650.5093, 651.318
 32.5486, 655.028, 655.841
 32.746, 659.5467, 660.364
 32.9434, 664.0655, 664.887
 33.1408, 668.5842, 669.41
 33.3382, 673.1029, 673.933
 33.5357, 677.6216, 678.456
 33.7331, 682.1403, 682.979
 33.9305, 686.659, 687.502
 34.1279, 691.1778, 692.025
 34.3253, 695.6965, 696.548
 34.5228, 700.2152, 701.071
 34.7383, 704.733, 705.594
 34.9868, 709.2493, 710.117
 35.2353, 713.7655, 714.64
 35.4837, 718.2817, 719.163
 35.7322, 722.7979, 723.686
 35.9806, 727.3141, 728.209
 36.2291, 731.8304, 732.732
 36.4776, 736.3466, 737.255
 36.726, 740.8628, 741.778
 36.9745, 745.379, 746.301
 37.223, 749.8952, 750.824
 37.4714, 754.4115, 755.347
 37.7199, 758.9277, 759.87
 37.9684, 763.4439, 764.393
 38.2168, 767.9601, 768.916
 38.4653, 772.4763, 773.44
 38.7138, 776.9926, 777.963
 38.9622, 781.5088, 782.486
 39.2107, 786.025, 787.009
 39.4592, 790.5412, 791.532
 39.7076, 795.0574, 796.055
 39.9561, 799.5737, 800.578
 40.2046, 804.0899, 805.101
 40.453, 808.6061, 809.624
 40.7015, 813.1223, 814.147
 40.95, 817.6385, 818.67
 41.1984, 822.1547, 823.193
 41.4145, 826.6726, 827.716
 41.6221, 831.1909, 832.239
 41.8296, 835.7091, 836.762
 42.0372, 840.2274, 841.285
 42.2448, 844.7457, 845.808
 42.4523, 849.2639, 850.331
 42.6599, 853.7822, 854.854
 42.8675, 858.3005, 859.377
 43.0751, 862.8187, 863.9
 43.2826, 867.337, 868.423
 43.4902, 871.8553, 872.946
 43.6978, 876.3735, 877.469
 43.9054, 880.8918, 881.992
 44.1129, 885.4101, 886.516
 44.3205, 889.9283, 891.039
 44.5281, 894.4466, 895.562
 44.7357, 898.9649, 900.085
 44.9432, 903.4832, 904.608
 45.1508, 908.0014, 909.131
 45.3584, 912.5197, 913.654
 45.566, 917.038, 918.177
 45.7736, 921.5562, 922.7
 45.9811, 926.0745, 927.223
 46.1887, 930.5928, 931.746
 46.3671, 935.1123, 936.269
 46.5437, 939.6318, 940.792
 46.7204, 944.1514, 945.315
 46.8971, 948.671, 949.838
 47.0737, 953.1906, 954.361
 47.2504, 957.7101, 958.884
 47.4271, 962.2297, 963.407
 47.6038, 966.7493, 967.93
 47.7804, 971.2688, 972.453
 47.85, 975.7905, 976.975
 47.85, 980.3135, 981.498
 47.85, 984.8365, 986.021
 47.85, 989.3595, 990.544
 47.85, 993.8825, 995.067
 47.85, 998.4055, 999.59
 47.85, 1002.9285, 1004.113
 47.85, 1007.4515, 1008.636
 47.85, 1011.9745, 1013.159
 47.85, 1016.4975, 1017.682
 47.85, 1021.0205, 1022.205
 47.85, 1025.5435, 1026.728
 47.85, 1030.0665, 1031.251
 47.85, 1034.5895, 1035.774
 47.85, 1039.1125, 1040.297
 47.85, 1043.6355, 1044.82
 47.85, 1048.1585, 1049.343
 47.7958, 1052.681, 1053.866
 47.7139, 1057.2032, 1058.389
 47.632, 1061.7255, 1062.912
 47.5501, 1066.2477, 1067.435
 47.4682, 1070.77, 1071.958
 47.3862, 1075.2923, 1076.481
 47.3043, 1079.8145, 1081.004
 47.2224, 1084.3368, 1085.527
 47.1405, 1088.8591, 1090.05
 47.0585, 1093.3813, 1094.573
 46.9435, 1097.9028, 1099.096
 46.8055, 1102.4237, 1103.619
 46.6676, 1106.9446, 1108.142
 46.5296, 1111.4655, 1112.665
 46.3916, 1115.9864, 1117.188
 46.2536, 1120.5073, 1121.711
 46.1156, 1125.0282, 1126.234
 45.9776, 1129.5491, 1130.757
 45.8396, 1134.07, 1135.28
 45.7016, 1138.591, 1139.803
 45.5636, 1143.1119, 1144.326
 45.4256, 1147.6328, 1148.849
 45.2877, 1152.1537, 1153.372
 45.1497, 1156.6746, 1157.895
 45.0117, 1161.1955, 1162.418
 44.8737, 1165.7164, 1166.941
 44.7357, 1170.2373, 1171.464
 44.5977, 1174.7582, 1175.987
 44.4313, 1179.2781, 1180.51
 44.2498, 1183.7975, 1185.033
 44.0684, 1188.3169, 1189.556
 43.887, 1192.8363, 1194.079
 43.7055, 1197.3557, 1198.602
 43.5241, 1201.8751, 1203.125
 43.3427, 1206.3944, 1207.648
 43.1612, 1210.9138, 1212.171
 42.9798, 1215.4332, 1216.694
 42.6916, 1219.9461, 1221.217
 42.3196, 1224.4539, 1225.74
 41.9476, 1228.9617, 1230.263
 41.5756, 1233.4695, 1234.786
 41.2036, 1237.9773, 1239.309
 40.8316, 1242.4851, 1243.832
 40.4596, 1246.9929, 1248.355
 39.7568, 1251.4601, 1252.877
 39.0202, 1255.9232, 1257.401
 38.2836, 1260.3862, 1261.924
 37.547, 1264.8493, 1266.448
 36.8103, 1269.3124, 1270.971
 36.0737, 1273.7755, 1275.495
 35.3105, 1278.2338, 1280.018
 34.4316, 1282.6712, 1284.541
 33.5527, 1287.1087, 1289.065
 32.6738, 1291.5461, 1293.589
 31.7914, 1295.9829, 1298.112
 30.9044, 1300.4188, 1302.636
 30.0174, 1304.8546, 1307.16
 29.1304, 1309.2905, 1311.683
 28.2434, 1313.7263, 1316.207
 27.3564, 1318.1622, 1320.731
 26.4694, 1322.598, 1325.254
 25.1922, 1326.9368, 1329.777
 23.8818, 1331.2674, 1334.302
 22.5714, 1335.5979, 1338.826
 21.2611, 1339.9285, 1343.351
 19.9507, 1344.259, 1347.875
 18.6403, 1348.5896, 1352.4
 17.3299, 1352.9201, 1356.924
 15.8071, 1357.1811, 1361.449
 14.2834, 1361.4419, 1365.974
 12.7598, 1365.7026, 1370.499
 11.2361, 1369.9634, 1375.024
 9.7124, 1374.2241, 1379.549
 8.1888, 1378.4848, 1384.074
 6.6651, 1382.7456, 1388.599
 5.0294, 1386.9648, 1393.124
 3.3886, 1391.1822, 1397.649
 1.7479, 1395.3996, 1402.175
 0.1071, 1399.617, 1406.7
 -1.5336, 1403.8343, 1411.225
 -3.3063, 1407.9951, 1415.748
 -5.2565, 1412.0797, 1420.274
 -7.2067, 1416.1642, 1424.801
 -9.1569, 1420.2488, 1429.327
 -11.1071, 1424.3333, 1433.853
 -13.0573, 1428.4179, 1438.379
 -15.0076, 1432.5024, 1442.906
 -16.9578, 1436.587, 1447.432
 -19.1002, 1440.5736, 1451.958
 -21.2871, 1444.5374, 1456.485
 -23.4741, 1448.5012, 1461.012
 -25.661, 1452.465, 1465.539
 -27.848, 1456.4288, 1470.066
 -30.035, 1460.3926, 1474.593
 -32.2219, 1464.3564, 1479.12
 -34.4089, 1468.3202, 1483.647
 -36.5959, 1472.284, 1488.174
 -38.7838, 1476.2473, 1492.701
 -41.2405, 1480.0511, 1497.23
 -43.6971, 1483.8549, 1501.758
 -46.1538, 1487.6587, 1506.286
 -48.6105, 1491.4626, 1510.814
 -51.0672, 1495.2664, 1515.342
 -53.5238, 1499.0702, 1519.87
 -55.9593, 1502.8873, 1524.398
 -58.3423, 1506.7374, 1528.926
 -60.7252, 1510.5875, 1533.454
 -63.1082, 1514.4376, 1537.982
 -65.9439, 1517.9608, 1542.505
 -68.8756, 1521.4147, 1547.035
 -71.8073, 1524.8686, 1551.565
 -74.7391, 1528.3225, 1556.096
 -77.6708, 1531.7763, 1560.626
 -80.6025, 1535.2302, 1565.156
 -83.5362, 1538.6825, 1569.687
 -86.4952, 1542.1132, 1574.217
 -89.4542, 1545.5439, 1578.748
 -92.4132, 1548.9746, 1583.278
 -95.3723, 1552.4053, 1587.809
 -98.3313, 1555.836, 1592.339
 -101.2903, 1559.2668, 1596.87
 -104.2494, 1562.6975, 1601.4
 -107.2084, 1566.1282, 1605.931
 -110.1674, 1569.5589, 1610.462
 -113.1388, 1572.9778, 1614.991
 -116.4584, 1576.0638, 1619.524
 -119.7779, 1579.1499, 1624.056
 -123.0975, 1582.236, 1628.589
 -126.4171, 1585.3221, 1633.121
 -129.7366, 1588.4082, 1637.654
 -133.0562, 1591.4942, 1642.186
 -136.3758, 1594.5803, 1646.719
 -139.6953, 1597.6664, 1651.251
 -143.0149, 1600.7524, 1655.784
 -146.3345, 1603.8385, 1660.316
 -149.7621, 1606.802, 1664.847
 -153.2629, 1609.6825, 1669.381
 -156.7638, 1612.563, 1673.914
 -160.2646, 1615.4435, 1678.448
 -163.7202, 1618.3762, 1682.98
 -167.2302, 1621.2408, 1687.511
 -170.8238, 1624.0056, 1692.045
 -174.4174, 1626.7705, 1696.579
 -178.011, 1629.5353, 1701.113
 -181.6046, 1632.3001, 1705.647
 -185.3615, 1634.8366, 1710.18
 -189.1593, 1637.3158, 1714.716
 -192.9571, 1639.7951, 1719.251
 -196.755, 1642.2743, 1723.786
 -200.5528, 1644.7535, 1728.322
 -204.3506, 1647.2328, 1732.857
 -208.1485, 1649.712, 1737.393
 -212.0003, 1652.1059, 1741.928
 -215.8838, 1654.4498, 1746.464
 -219.7673, 1656.7937, 1751
 -223.6507, 1659.1376, 1755.536
 -227.5342, 1661.4815, 1760.072
 -231.4177, 1663.8254, 1764.608
 -235.3436, 1666.0964, 1769.143
 -239.3173, 1668.2851, 1773.68
 -243.291, 1670.4738, 1778.216
 -247.2647, 1672.6626, 1782.753
 -251.2384, 1674.8513, 1787.29
 -255.1966, 1677.0678, 1791.826
 -259.153, 1679.2874, 1796.363
 -263.1829, 1681.3622, 1800.895
 -267.3229, 1683.2202, 1805.433
 -271.4628, 1685.0783, 1809.971
 -275.6028, 1686.9363, 1814.509
 -279.7427, 1688.7943, 1819.046
 -283.8827, 1690.6523, 1823.584
 -288.0227, 1692.5103, 1828.122
 -292.2283, 1694.2142, 1832.66
 -296.4478, 1695.8851, 1837.198
 -300.6674, 1697.5561, 1841.736
 -304.8869, 1699.227, 1846.275
 -309.1065, 1700.898, 1850.813
 -313.326, 1702.5689, 1855.351
 -317.5528, 1704.2211, 1859.89
 -321.8134, 1705.7855, 1864.428
 -326.0739, 1707.35, 1868.967
 -330.3344, 1708.9145, 1873.506
 -334.5949, 1710.4789, 1878.044
 -338.931, 1711.8197, 1882.583
 -343.274, 1713.1401, 1887.122
 -347.617, 1714.4604, 1891.662
 -351.96, 1715.7808, 1896.201
 -356.3031, 1717.1012, 1900.74
 -360.6472, 1718.4177, 1905.279
 -365.0306, 1719.5981, 1909.819
 -369.4141, 1720.7785, 1914.359
 -373.7975, 1721.9589, 1918.898
 -378.181, 1723.1393, 1923.438
 -382.5644, 1724.3196, 1927.977
 -386.9479, 1725.5, 1932.517
 -391.3313, 1726.6804, 1937.057
 -395.7148, 1727.8608, 1941.596
 -400.0982, 1729.0412, 1946.136
 -404.4817, 1730.2215, 1950.675
 -408.8728, 1731.3732, 1955.215
 -413.2675, 1732.5111, 1959.755
 -417.6623, 1733.6491, 1964.294
 -422.0571, 1734.787, 1968.834
 -426.4518, 1735.9249, 1973.374
 -430.8466, 1737.0628, 1977.913
 -435.2413, 1738.2008, 1982.453
 -439.6361, 1739.3387, 1986.993
 -444.0309, 1740.4766, 1991.533
 -448.4256, 1741.6145, 1996.072
 -452.8204, 1742.7524, 2000.612
 -457.2152, 1743.8903, 2005.152
 -461.6099, 1745.0282, 2009.691
 -466.0047, 1746.1661, 2014.231
 -470.3995, 1747.304, 2018.771
 -474.7943, 1748.4419, 2023.31
 -479.189, 1749.5798, 2027.85
 -483.5838, 1750.7177, 2032.39
 -487.9786, 1751.8556, 2036.93
 -492.3746, 1752.9888, 2041.469
 -496.7772, 1754.0962, 2046.009
 -501.1798, 1755.2036, 2050.549
 -505.5824, 1756.311, 2055.088
 -509.9851, 1757.4184, 2059.628
 -514.3877, 1758.5258, 2064.168
 -518.7903, 1759.6332, 2068.708
 -523.193, 1760.7406, 2073.248
 -527.5956, 1761.848, 2077.787
 -531.9982, 1762.9553, 2082.327
 -536.4009, 1764.0627, 2086.867
 -540.8035, 1765.1701, 2091.407
 -545.2061, 1766.2775, 2095.946
 -549.6088, 1767.3848, 2100.486
 -554.0114, 1768.4922, 2105.026
 -558.414, 1769.5996, 2109.566
 -562.8167, 1770.7069, 2114.105
 -567.2193, 1771.8144, 2118.645
 -571.6217, 1772.9226, 2123.185
 -576.0242, 1774.0308, 2127.725
 -580.4266, 1775.1391, 2132.265
 -584.829, 1776.2473, 2136.804
 -589.2314, 1777.3555, 2141.344
 -593.6339, 1778.4638, 2145.884
 -598.0363, 1779.572, 2150.424
 -602.4387, 1780.6802, 2154.963
 -606.8412, 1781.7884, 2159.503
 -611.2436, 1782.8966, 2164.043
 -615.646, 1784.0049, 2168.583
 -620.0485, 1785.1131, 2173.123
 -624.4509, 1786.2213, 2177.662
 -628.8533, 1787.3295, 2182.202
 -633.2558, 1788.4377, 2186.742
 -637.6582, 1789.5459, 2191.282
 -642.0607, 1790.6541, 2195.821
 -646.4631, 1791.7623, 2200.361
 -650.8656, 1792.8705, 2204.901
 -655.268, 1793.9786, 2209.441
 -659.6705, 1795.0868, 2213.981
 -664.0729, 1796.195, 2218.52
 -668.4754, 1797.3032, 2223.06
 -672.8778, 1798.4114, 2227.6
 -677.2803, 1799.5195, 2232.14
 -681.6827, 1800.6277, 2236.679
 -686.0852, 1801.7359, 2241.219
 -690.4876, 1802.8441, 2245.759
 -694.8901, 1803.9522, 2250.299
 -699.2926, 1805.0604, 2254.839
 -703.695, 1806.1685, 2259.378
 -708.0975, 1807.2767, 2263.918
 -712.5, 1808.3848, 2268.458
 -716.9024, 1809.493, 2272.998
 -721.3049, 1810.6011, 2277.538
 -725.7074, 1811.7093, 2282.077
 -730.1098, 1812.8174, 2286.617
 -734.5123, 1813.9256, 2291.157
 -738.9148, 1815.0337, 2295.697
 -743.3173, 1816.1418, 2300.237
 -747.7197, 1817.25, 2304.776
 -752.1222, 1818.3581, 2309.316
 -756.5247, 1819.4662, 2313.856
ENDTABLE

XY_TABLE_ID(2)      2 ; Jacksone Rd E Segment 1
SEGMENT_XY_TABLE(2) ! table with X (m), Y (m), and calculated station S (m)
 -267.2999, 1436.2453, 0
 -266.1307, 1435.831, 1.24
 -264.9615, 1435.4168, 2.481
 -263.7923, 1435.0025, 3.721
 -262.6231, 1434.5882, 4.962
 -261.4539, 1434.174, 6.202
 -260.2847, 1433.7597, 7.443
 -259.1155, 1433.3454, 8.683
 -257.9462, 1432.9312, 9.923
 -256.777, 1432.5169, 11.164
 -255.6078, 1432.1026, 12.404
 -254.4386, 1431.6883, 13.645
 -253.2694, 1431.2741, 14.885
 -252.1002, 1430.8598, 16.126
 -250.9458, 1430.4076, 17.365
 -249.8014, 1429.9294, 18.606
 -248.657, 1429.4513, 19.846
 -247.5127, 1428.9731, 21.086
 -246.3683, 1428.4949, 22.326
 -245.2239, 1428.0168, 23.567
 -244.0796, 1427.5386, 24.807
 -242.9352, 1427.0604, 26.047
 -241.7909, 1426.5822, 27.287
 -240.6465, 1426.1041, 28.528
 -239.5021, 1425.6259, 29.768
 -238.3578, 1425.1477, 31.008
 -237.2134, 1424.6696, 32.248
 -236.069, 1424.1914, 33.489
 -234.9247, 1423.7132, 34.729
 -233.7803, 1423.235, 35.969
 -232.636, 1422.7569, 37.209
 -231.4916, 1422.2787, 38.45
 -230.3472, 1421.8005, 39.69
 -229.2029, 1421.3223, 40.93
 -228.0585, 1420.8442, 42.17
 -226.914, 1420.3664, 43.411
 -225.7693, 1419.8889, 44.651
 -224.6247, 1419.4114, 45.891
 -223.4801, 1418.9338, 47.131
 -222.3354, 1418.4563, 48.372
 -221.1908, 1417.9788, 49.612
 -220.0462, 1417.5013, 50.852
 -218.9016, 1417.0237, 52.092
 -217.7569, 1416.5462, 53.333
 -216.6123, 1416.0687, 54.573
 -215.4677, 1415.5911, 55.813
 -214.323, 1415.1136, 57.053
 -213.1784, 1414.6361, 58.294
 -212.0338, 1414.1585, 59.534
 -210.8891, 1413.681, 60.774
 -209.7445, 1413.2035, 62.014
 -208.5999, 1412.7259, 63.255
 -207.4553, 1412.2484, 64.495
 -206.3106, 1411.7709, 65.735
 -205.166, 1411.2933, 66.975
 -204.0214, 1410.8158, 68.216
 -202.8767, 1410.3383, 69.456
 -201.7321, 1409.8607, 70.696
 -200.5875, 1409.3832, 71.936
 -199.4429, 1408.9057, 73.177
 -198.2982, 1408.4281, 74.417
 -197.1536, 1407.9506, 75.657
 -196.009, 1407.4731, 76.897
 -194.8644, 1406.9955, 78.138
 -193.7197, 1406.518, 79.378
 -192.5751, 1406.0405, 80.618
 -191.4305, 1405.5629, 81.858
 -190.2858, 1405.0854, 83.099
 -189.1412, 1404.6078, 84.339
 -187.9966, 1404.1303, 85.579
 -186.852, 1403.6528, 86.819
 -185.7073, 1403.1752, 88.06
 -184.5627, 1402.6977, 89.3
 -183.4181, 1402.2202, 90.54
 -182.2735, 1401.7426, 91.78
 -181.1288, 1401.2651, 93.02
 -179.9842, 1400.7875, 94.261
 -178.8396, 1400.31, 95.501
 -177.695, 1399.8325, 96.741
 -176.5503, 1399.3549, 97.981
 -175.4057, 1398.8774, 99.222
 -174.2611, 1398.3999, 100.462
 -173.1165, 1397.9223, 101.702
 -171.9718, 1397.4448, 102.942
 -170.8272, 1396.9672, 104.183
 -169.6826, 1396.4897, 105.423
 -168.5374, 1396.0136, 106.663
 -167.3915, 1395.5389, 107.903
 -166.2457, 1395.0643, 109.144
 -165.0999, 1394.5896, 110.384
 -163.9541, 1394.1149, 111.624
 -162.8083, 1393.6402, 112.864
 -161.6624, 1393.1655, 114.105
 -160.5166, 1392.6908, 115.345
 -159.3708, 1392.2161, 116.585
 -158.225, 1391.7415, 117.825
 -157.0792, 1391.2668, 119.066
 -155.9334, 1390.7921, 120.306
 -154.7875, 1390.3174, 121.546
 -153.6417, 1389.8427, 122.786
 -152.4959, 1389.368, 124.027
 -151.3501, 1388.8933, 125.267
 -150.2043, 1388.4186, 126.507
 -149.0585, 1387.9439, 127.747
 -147.9126, 1387.4693, 128.988
 -146.7668, 1386.9946, 130.228
 -145.621, 1386.5199, 131.468
 -144.4752, 1386.0452, 132.708
 -143.3294, 1385.5705, 133.949
 -142.1836, 1385.0958, 135.189
 -141.0377, 1384.6211, 136.429
 -139.8919, 1384.1464, 137.669
 -138.7461, 1383.6717, 138.91
 -137.6003, 1383.1971, 140.15
 -136.4564, 1382.7178, 141.39
 -135.3151, 1382.2325, 142.63
 -134.1737, 1381.7472, 143.871
 -133.0324, 1381.262, 145.111
 -131.8911, 1380.7767, 146.351
 -130.7497, 1380.2914, 147.591
 -129.6084, 1379.8061, 148.832
 -128.4671, 1379.3209, 150.072
 -127.3257, 1378.8356, 151.312
 -126.1844, 1378.3503, 152.552
 -125.043, 1377.865, 153.792
 -123.9017, 1377.3798, 155.033
 -122.7604, 1376.8945, 156.273
 -121.619, 1376.4092, 157.513
 -120.4537, 1375.9865, 158.753
 -119.2781, 1375.5908, 159.993
 -118.1024, 1375.195, 161.234
 -116.9268, 1374.7993, 162.474
 -115.7511, 1374.4036, 163.715
 -114.5755, 1374.0079, 164.955
 -113.3998, 1373.6121, 166.195
 -112.2242, 1373.2164, 167.436
 -111.0485, 1372.8207, 168.676
 -109.8729, 1372.425, 169.917
 -108.6972, 1372.0292, 171.157
 -107.5216, 1371.6335, 172.398
 -106.3459, 1371.2378, 173.638
 -105.1703, 1370.842, 174.879
 -104.0116, 1370.4007, 176.119
 -102.8616, 1369.9361, 177.359
 -101.7116, 1369.4716, 178.599
 -100.5616, 1369.0071, 179.839
 -99.4116, 1368.5426, 181.08
 -98.2616, 1368.0781, 182.32
 -97.1116, 1367.6136, 183.56
 -95.9675, 1367.1351, 184.8
 -94.8295, 1366.642, 186.041
 -93.6916, 1366.1489, 187.281
 -92.5536, 1365.6558, 188.521
 -91.4157, 1365.1627, 189.761
 -90.2777, 1364.6696, 191.001
 -89.1398, 1364.1765, 192.242
 -88.0018, 1363.6834, 193.482
 -86.8639, 1363.1903, 194.722
 -85.7259, 1362.6972, 195.962
 -84.588, 1362.2041, 197.202
 -83.45, 1361.711, 198.443
 -82.3121, 1361.2179, 199.683
 -81.1741, 1360.7248, 200.923
 -80.0362, 1360.2317, 202.163
 -78.8982, 1359.7386, 203.403
 -77.7603, 1359.2455, 204.643
 -76.6223, 1358.7524, 205.884
 -75.4844, 1358.2593, 207.124
 -74.3464, 1357.7662, 208.364
 -73.2085, 1357.2731, 209.604
 -72.0705, 1356.78, 210.844
 -70.9326, 1356.2869, 212.085
 -69.7946, 1355.7938, 213.325
 -68.6567, 1355.3007, 214.565
 -67.5187, 1354.8076, 215.805
 -66.3808, 1354.3145, 217.045
 -65.2428, 1353.8214, 218.286
 -64.1049, 1353.3283, 219.526
 -62.967, 1352.8352, 220.766
 -61.829, 1352.3421, 222.006
 -60.6911, 1351.849, 223.246
 -59.5531, 1351.3559, 224.487
 -58.4152, 1350.8628, 225.727
 -57.2772, 1350.3697, 226.967
 -56.1393, 1349.8766, 228.207
 -55.0013, 1349.3835, 229.447
 -53.8634, 1348.8904, 230.687
 -52.7254, 1348.3973, 231.928
 -51.5875, 1347.9042, 233.168
 -50.4495, 1347.4111, 234.408
 -49.3116, 1346.9179, 235.648
 -48.1737, 1346.4248, 236.888
 -47.0357, 1345.9317, 238.129
 -45.8978, 1345.4386, 239.369
 -44.7598, 1344.9455, 240.609
 -43.6219, 1344.4524, 241.849
 -42.4839, 1343.9593, 243.089
 -41.346, 1343.4662, 244.33
 -40.208, 1342.9731, 245.57
 -39.0701, 1342.48, 246.81
 -37.9322, 1341.9869, 248.05
 -36.7942, 1341.4938, 249.29
 -35.6563, 1341.0007, 250.531
 -34.5183, 1340.5076, 251.771
 -33.3804, 1340.0145, 253.011
 -32.2424, 1339.5214, 254.251
 -31.1045, 1339.0283, 255.491
 -29.9666, 1338.5352, 256.731
 -28.8286, 1338.042, 257.972
 -27.6907, 1337.5489, 259.212
 -26.5527, 1337.0558, 260.452
 -25.4148, 1336.5627, 261.692
 -24.2726, 1336.0796, 262.932
 -23.1244, 1335.6107, 264.173
 -21.9762, 1335.1417, 265.413
 -20.8281, 1334.6727, 266.653
 -19.6799, 1334.2037, 267.893
 -18.5317, 1333.7348, 269.134
 -17.3835, 1333.2658, 270.374
 -16.2354, 1332.7968, 271.614
 -15.0872, 1332.3278, 272.854
 -13.939, 1331.8588, 274.095
 -12.7908, 1331.3899, 275.335
 -11.6427, 1330.9209, 276.575
 -10.4945, 1330.4519, 277.815
 -9.3463, 1329.9829, 279.056
 -8.1981, 1329.514, 280.296
 -7.05, 1329.045, 281.536
 -5.9018, 1328.576, 282.777
 -4.7536, 1328.107, 284.017
 -3.6055, 1327.638, 285.257
 -2.4573, 1327.1691, 286.497
 -1.3091, 1326.7001, 287.738
 -0.1609, 1326.2311, 288.978
 0.9872, 1325.7621, 290.218
 2.1354, 1325.2931, 291.458
 3.2836, 1324.8242, 292.699
 4.4318, 1324.3552, 293.939
 5.5799, 1323.8862, 295.179
 6.7281, 1323.4172, 296.419
 7.8763, 1322.9482, 297.66
 9.0244, 1322.4792, 298.9
 10.1726, 1322.0103, 300.14
 11.3208, 1321.5413, 301.38
 12.469, 1321.0723, 302.621
 13.6171, 1320.6033, 303.861
 14.7653, 1320.1343, 305.101
 15.9135, 1319.6653, 306.341
 17.0616, 1319.1964, 307.582
 18.2098, 1318.7274, 308.822
 19.358, 1318.2584, 310.062
 20.5062, 1317.7894, 311.302
 21.6543, 1317.3204, 312.543
 22.8025, 1316.8514, 313.783
 23.9507, 1316.3825, 315.023
 25.0988, 1315.9135, 316.264
 26.247, 1315.4445, 317.504
 27.3952, 1314.9755, 318.744
 28.5433, 1314.5065, 319.984
 29.6915, 1314.0375, 321.225
 30.8397, 1313.5686, 322.465
 31.9878, 1313.0996, 323.705
 33.136, 1312.6306, 324.945
 34.2842, 1312.1616, 326.186
 35.4323, 1311.6926, 327.426
 36.5805, 1311.2236, 328.666
 37.7287, 1310.7546, 329.906
 38.8769, 1310.2856, 331.147
 40.025, 1309.8167, 332.387
 41.1732, 1309.3477, 333.627
 42.3214, 1308.8787, 334.867
 43.4695, 1308.4097, 336.108
 44.6177, 1307.9407, 337.348
 45.7659, 1307.4717, 338.588
 46.914, 1307.0027, 339.828
 48.0622, 1306.5337, 341.069
 49.2193, 1306.088, 342.309
 50.3868, 1305.6688, 343.549
 51.5542, 1305.2497, 344.789
 52.7216, 1304.8305, 346.03
 53.8891, 1304.4114, 347.27
 55.0565, 1303.9922, 348.511
 56.2239, 1303.5731, 349.751
 57.3913, 1303.1539, 350.991
 58.5588, 1302.7348, 352.232
 59.7262, 1302.3156, 353.472
 60.8936, 1301.8965, 354.713
 62.0611, 1301.4773, 355.953
 63.2285, 1301.0582, 357.193
 64.3959, 1300.639, 358.434
 65.5633, 1300.2198, 359.674
 66.7308, 1299.8007, 360.915
 67.8982, 1299.3815, 362.155
 69.0656, 1298.9624, 363.395
 70.233, 1298.5432, 364.636
 71.4005, 1298.1241, 365.876
 72.5679, 1297.7049, 367.117
 73.7353, 1297.2858, 368.357
 74.9027, 1296.8666, 369.597
 76.0702, 1296.4474, 370.838
 77.2376, 1296.0283, 372.078
 78.405, 1295.6091, 373.319
 79.5725, 1295.19, 374.559
 80.7399, 1294.7708, 375.799
 81.9073, 1294.3517, 377.04
 83.0747, 1293.9325, 378.28
 84.2422, 1293.5133, 379.521
 85.4096, 1293.0942, 380.761
 86.553, 1292.616, 382
 87.6844, 1292.1083, 383.24
 88.8159, 1291.6005, 384.481
 89.9473, 1291.0927, 385.721
 91.0787, 1290.5849, 386.961
 92.2101, 1290.0771, 388.201
 93.3415, 1289.5694, 389.441
 94.4729, 1289.0616, 390.681
 95.6043, 1288.5538, 391.921
 96.7358, 1288.046, 393.162
 97.8672, 1287.5382, 394.402
 98.9986, 1287.0305, 395.642
 100.13, 1286.5227, 396.882
 101.2614, 1286.0149, 398.122
 102.3928, 1285.5071, 399.362
 103.5242, 1284.9993, 400.602
 104.6556, 1284.4916, 401.842
 105.7928, 1283.9978, 403.082
 106.9589, 1283.5751, 404.323
 108.125, 1283.1524, 405.563
 109.2912, 1282.7297, 406.803
 110.4573, 1282.307, 408.044
 111.6234, 1281.8843, 409.284
 112.7896, 1281.4616, 410.524
 113.9557, 1281.0388, 411.765
 115.1218, 1280.6161, 413.005
 116.288, 1280.1934, 414.246
 117.4541, 1279.7707, 415.486
 118.6202, 1279.348, 416.726
 119.7863, 1278.9253, 417.967
 120.9525, 1278.5025, 419.207
 122.1186, 1278.0798, 420.448
 123.2847, 1277.6571, 421.688
 124.4509, 1277.2344, 422.928
 125.617, 1276.8117, 424.169
 126.7831, 1276.389, 425.409
 127.9225, 1275.9006, 426.649
 129.0539, 1275.3929, 427.889
 130.1853, 1274.8851, 429.129
 131.3167, 1274.3773, 430.369
 132.4481, 1273.8695, 431.609
 133.5795, 1273.3618, 432.849
 134.7109, 1272.854, 434.089
 135.8423, 1272.3462, 435.33
 136.9738, 1271.8384, 436.57
 138.1052, 1271.3306, 437.81
 139.2366, 1270.8229, 439.05
 140.3945, 1270.3793, 440.29
 141.5577, 1269.9487, 441.53
 142.7208, 1269.518, 442.771
 143.884, 1269.0873, 444.011
 145.0472, 1268.6566, 445.251
 146.2104, 1268.2259, 446.492
 147.3736, 1267.7952, 447.732
 148.5368, 1267.3646, 448.972
 149.7, 1266.9339, 450.213
 150.8632, 1266.5032, 451.453
 152.0263, 1266.0725, 452.693
 153.1895, 1265.6418, 453.934
 154.3527, 1265.2112, 455.174
 155.5159, 1264.7805, 456.415
 156.6791, 1264.3498, 457.655
 157.8423, 1263.9191, 458.895
 159.0054, 1263.4884, 460.136
 160.1686, 1263.0577, 461.376
 161.3318, 1262.6271, 462.616
 162.495, 1262.1964, 463.857
 163.6582, 1261.7657, 465.097
 164.8214, 1261.335, 466.337
 165.9846, 1260.9043, 467.578
 167.1477, 1260.4736, 468.818
 168.3109, 1260.0429, 470.058
 169.4741, 1259.6123, 471.299
 170.6373, 1259.1816, 472.539
 171.8005, 1258.7509, 473.78
 172.9489, 1258.2845, 475.019
 174.0803, 1257.7767, 476.259
 175.2118, 1257.2689, 477.499
 176.3432, 1256.7612, 478.74
 177.4746, 1256.2534, 479.98
 178.606, 1255.7456, 481.22
 179.7374, 1255.2378, 482.46
 180.8688, 1254.73, 483.7
 182.0002, 1254.2223, 484.94
 183.1316, 1253.7145, 486.18
 184.263, 1253.2067, 487.42
 185.3944, 1252.6989, 488.661
 186.5258, 1252.1912, 489.901
 187.6572, 1251.6834, 491.141
 188.7886, 1251.1756, 492.381
 189.9215, 1250.6712, 493.621
 191.0629, 1250.1859, 494.861
 192.2042, 1249.7007, 496.101
 193.3455, 1249.2154, 497.342
 194.4868, 1248.7301, 498.582
 195.6281, 1248.2449, 499.822
 196.7695, 1247.7596, 501.062
 197.9108, 1247.2743, 502.302
 199.0521, 1246.7891, 503.543
 200.1934, 1246.3038, 504.783
 201.3347, 1245.8185, 506.023
 202.4761, 1245.3333, 507.263
 203.6174, 1244.848, 508.503
 204.7587, 1244.3627, 509.744
 205.9068, 1243.8941, 510.984
 207.0644, 1243.4488, 512.224
 208.222, 1243.0035, 513.464
 209.3796, 1242.5581, 514.705
 210.5373, 1242.1128, 515.945
 211.6949, 1241.6675, 517.185
 212.8525, 1241.2222, 518.426
 214.0101, 1240.7769, 519.666
 215.1677, 1240.3315, 520.906
 216.3253, 1239.8862, 522.147
 217.4829, 1239.4409, 523.387
 218.6405, 1238.9956, 524.627
 219.7982, 1238.5503, 525.867
 220.9558, 1238.1049, 527.108
 222.1134, 1237.6596, 528.348
 223.271, 1237.2143, 529.588
 224.4286, 1236.769, 530.829
 225.5862, 1236.3237, 532.069
 226.7438, 1235.8783, 533.309
 227.9015, 1235.433, 534.55
 229.0601, 1234.9905, 535.79
 230.2201, 1234.5513, 537.03
 231.38, 1234.112, 538.271
 232.54, 1233.6728, 539.511
 233.6999, 1233.2335, 540.751
 234.8599, 1232.7943, 541.992
 236.0198, 1232.355, 543.232
 237.1798, 1231.9158, 544.472
 238.3397, 1231.4766, 545.713
 239.4997, 1231.0373, 546.953
 240.6596, 1230.5981, 548.193
 241.8196, 1230.1588, 549.434
 242.9795, 1229.7196, 550.674
 244.1395, 1229.2803, 551.914
 245.2994, 1228.8411, 553.155
 246.4594, 1228.4018, 554.395
 247.6193, 1227.9626, 555.635
 248.7793, 1227.5233, 556.876
 249.9392, 1227.0841, 558.116
 251.0992, 1226.6448, 559.356
 252.2591, 1226.2056, 560.597
 253.4191, 1225.7663, 561.837
 254.579, 1225.3271, 563.077
 255.75, 1224.9184, 564.317
 256.9256, 1224.5227, 565.558
 258.1012, 1224.127, 566.798
 259.2768, 1223.7312, 568.039
 260.4525, 1223.3355, 569.279
 261.6258, 1222.9338, 570.519
 262.7758, 1222.4693, 571.76
 263.9258, 1222.0048, 573
 265.0758, 1221.5403, 574.24
 266.2258, 1221.0757, 575.48
 267.3758, 1220.6112, 576.721
 268.5258, 1220.1467, 577.961
 269.6758, 1219.6822, 579.201
 270.8883, 1219.428, 580.44
 272.1067, 1219.1937, 581.681
 273.3251, 1218.9593, 582.922
 274.5436, 1218.725, 584.162
 275.762, 1218.4906, 585.403
 276.9804, 1218.2563, 586.644
 278.1988, 1218.0219, 587.885
 279.4173, 1217.7875, 589.125
 280.6357, 1217.5532, 590.366
 281.8452, 1217.2805, 591.606
 283.0431, 1216.9579, 592.847
 284.2411, 1216.6354, 594.087
 285.439, 1216.3128, 595.328
 286.6369, 1215.9902, 596.569
 287.8349, 1215.6676, 597.809
 289.0328, 1215.345, 599.05
 290.2307, 1215.0225, 600.29
 291.4287, 1214.6999, 601.531
 292.6266, 1214.3773, 602.772
 293.8245, 1214.0547, 604.012
 295.0225, 1213.7321, 605.253
 296.2204, 1213.4096, 606.493
 297.4183, 1213.087, 607.734
 298.6163, 1212.7644, 608.975
 299.8142, 1212.4418, 610.215
 301.0121, 1212.1192, 611.456
 302.2101, 1211.7967, 612.696
 303.408, 1211.4741, 613.937
 304.6059, 1211.1515, 615.178
 305.8038, 1210.8289, 616.418
 307.0018, 1210.5063, 617.659
 308.1997, 1210.1838, 618.899
 309.3976, 1209.8612, 620.14
 310.5956, 1209.5386, 621.381
 311.7935, 1209.216, 622.621
 312.9914, 1208.8934, 623.862
 314.1894, 1208.5709, 625.102
 315.3873, 1208.2483, 626.343
 316.5852, 1207.9257, 627.584
 317.7831, 1207.6031, 628.824
 318.9811, 1207.2805, 630.065
 320.179, 1206.9579, 631.305
 321.3769, 1206.6354, 632.546
 322.5749, 1206.3128, 633.787
ENDTABLE

XY_TABLE_ID(3)      3 ; Path_1 Segment 1
SEGMENT_XY_TABLE(3) ! table with X (m), Y (m), and calculated station S (m)
 51.975, -816.4271, 0
 50.809, -813.1026, 3.523
 49.643, -809.7781, 7.046
 48.477, -806.4536, 10.569
 47.311, -803.129, 14.092
 46.145, -799.8045, 17.615
 44.979, -796.48, 21.138
 43.813, -793.1554, 24.662
 42.647, -789.8309, 28.185
 41.481, -786.5064, 31.708
 40.3149, -783.1819, 35.231
 39.1489, -779.8573, 38.754
 37.9829, -776.5328, 42.277
 36.9282, -773.1716, 45.8
 35.8768, -769.8094, 49.323
 34.8253, -766.4471, 52.845
 33.7739, -763.0849, 56.368
 32.7224, -759.7226, 59.891
 31.671, -756.3604, 63.414
 30.6195, -752.9981, 66.937
 29.5681, -749.6359, 70.459
 28.5166, -746.2736, 73.982
 27.4652, -742.9114, 77.505
 26.4137, -739.5491, 81.028
 25.3623, -736.1869, 84.551
 24.3829, -732.8042, 88.072
 23.5039, -729.3932, 91.595
 22.625, -725.9821, 95.117
 21.746, -722.5711, 98.64
 20.8671, -719.16, 102.162
 19.9881, -715.7489, 105.685
 19.1092, -712.3379, 109.207
 18.2302, -708.9268, 112.73
 17.3512, -705.5157, 116.252
 16.4723, -702.1047, 119.775
 15.5933, -698.6936, 123.297
 14.7144, -695.2826, 126.82
 13.8354, -691.8715, 130.342
 12.9565, -688.4604, 133.865
 12.0775, -685.0494, 137.387
 11.1985, -681.6383, 140.91
 10.4025, -678.2083, 144.431
 9.7032, -674.7562, 147.953
 9.004, -671.3041, 151.475
 8.3047, -667.852, 154.997
 7.6055, -664.4, 158.52
 6.9062, -660.9479, 162.042
 6.207, -657.4958, 165.564
 5.5077, -654.0437, 169.086
 4.8085, -650.5916, 172.608
 4.1092, -647.1395, 176.131
 3.41, -643.6874, 179.653
 2.7107, -640.2353, 183.175
 2.0114, -636.7832, 186.697
 1.3122, -633.3311, 190.219
 0.6641, -629.87, 193.741
 0.1337, -626.3882, 197.263
 -0.3968, -622.9064, 200.785
 -0.9273, -619.4246, 204.307
 -1.4577, -615.9428, 207.829
 -1.9882, -612.461, 211.351
 -2.5186, -608.9792, 214.873
 -3.0491, -605.4973, 218.394
 -3.5796, -602.0155, 221.916
 -4.11, -598.5337, 225.438
 -4.6405, -595.0519, 228.96
 -5.171, -591.5701, 232.482
 -5.7014, -588.0883, 236.004
 -6.3103, -584.6194, 239.526
 -6.9318, -581.1526, 243.048
 -7.5534, -577.6857, 246.571
 -8.1749, -574.2189, 250.093
 -8.7964, -570.7521, 253.615
 -9.4179, -567.2853, 257.137
 -10.0394, -563.8184, 260.659
 -10.661, -560.3516, 264.181
 -11.2825, -556.8848, 267.703
 -11.7226, -553.3941, 271.221
 -12.0256, -549.8853, 274.743
 -12.3286, -546.3766, 278.265
 -12.6317, -542.8679, 281.787
 -12.9347, -539.3591, 285.309
 -13.2377, -535.8504, 288.83
 -13.5407, -532.3417, 292.352
 -13.8438, -528.8329, 295.874
 -14.1468, -525.3242, 299.396
 -14.4498, -521.8155, 302.918
 -14.7528, -518.3067, 306.439
 -15.0558, -514.798, 309.961
 -15.3589, -511.2892, 313.483
 -15.6619, -507.7805, 317.005
 -15.9331, -504.2692, 320.527
 -16.2029, -500.7578, 324.048
 -16.4727, -497.2463, 327.57
 -16.7425, -493.7349, 331.092
 -17.0123, -490.2235, 334.614
 -17.2821, -486.7121, 338.135
 -17.5519, -483.2006, 341.657
 -17.8217, -479.6892, 345.179
 -18.0915, -476.1778, 348.701
 -18.2704, -472.6609, 352.222
 -18.4241, -469.1425, 355.744
 -18.5778, -465.6242, 359.266
 -18.7315, -462.1058, 362.787
 -18.8852, -458.5874, 366.309
 -19.0389, -455.0691, 369.831
 -19.1927, -451.5507, 373.353
 -19.3464, -448.0323, 376.874
 -19.5001, -444.5139, 380.396
 -19.6538, -440.9956, 383.918
 -19.8, -437.477, 387.439
 -19.8, -433.9553, 390.961
 -19.8, -430.4336, 394.483
 -19.8, -426.9119, 398.004
 -19.8, -423.3902, 401.526
 -19.8, -419.8685, 405.048
 -19.8, -416.3468, 408.57
 -19.8, -412.8251, 412.091
 -19.8, -409.3034, 415.613
 -19.8, -405.7817, 419.135
 -19.8, -402.26, 422.656
 -19.8, -398.7383, 426.178
 -19.8, -395.2166, 429.7
 -19.8, -391.6949, 433.221
 -19.7093, -388.1756, 436.742
 -19.5227, -384.6588, 440.264
 -19.3361, -381.142, 443.785
 -19.1496, -377.6252, 447.307
 -18.963, -374.1084, 450.829
 -18.7764, -370.5916, 454.351
 -18.5899, -367.0748, 457.872
 -18.4033, -363.558, 461.394
 -18.2167, -360.0412, 464.916
 -18.0301, -356.5245, 468.438
 -17.8436, -353.0077, 471.959
 -17.657, -349.4909, 475.481
 -17.4704, -345.9741, 479.003
 -17.2841, -342.4573, 482.525
 -17.0986, -338.9404, 486.046
 -16.9132, -335.4236, 489.568
 -16.7277, -331.9067, 493.09
 -16.5422, -328.3899, 496.612
 -16.3568, -324.873, 500.133
 -16.1713, -321.3562, 503.655
 -15.9858, -317.8393, 507.177
 -15.8004, -314.3225, 510.698
 -15.6149, -310.8056, 514.22
 -15.4294, -307.2888, 517.742
 -15.244, -303.7719, 521.264
 -15.0585, -300.2551, 524.785
 -14.873, -296.7382, 528.307
 -14.6876, -293.2213, 531.829
 -14.5021, -289.7045, 535.351
 -14.3166, -286.1876, 538.872
 -14.1312, -282.6708, 542.394
 -13.9457, -279.1539, 545.916
 -13.7602, -275.6371, 549.438
 -13.5748, -272.1202, 552.959
 -13.3893, -268.6034, 556.481
 -13.2038, -265.0865, 560.003
 -13.0184, -261.5697, 563.525
 -12.8329, -258.0528, 567.046
 -12.6474, -254.536, 570.568
 -12.462, -251.0191, 574.09
 -12.2765, -247.5023, 577.612
 -12.091, -243.9854, 581.133
 -11.9056, -240.4686, 584.655
 -11.7201, -236.9517, 588.177
 -11.5346, -233.4349, 591.698
 -11.3491, -229.918, 595.22
 -11.1637, -226.4012, 598.742
 -10.9782, -222.8843, 602.264
 -10.7927, -219.3675, 605.785
 -10.6073, -215.8506, 609.307
 -10.4218, -212.3338, 612.829
 -10.2363, -208.8169, 616.351
 -10.0508, -205.3001, 619.872
 -9.8654, -201.7832, 623.394
 -9.6799, -198.2664, 626.916
 -9.4944, -194.7495, 630.438
 -9.309, -191.2327, 633.959
 -9.1235, -187.7158, 637.481
 -8.938, -184.199, 641.003
 -8.7525, -180.6821, 644.525
 -8.5671, -177.1653, 648.046
 -8.3816, -173.6484, 651.568
 -8.1961, -170.1316, 655.09
 -8.0106, -166.6147, 658.611
 -7.8252, -163.0979, 662.133
 -7.6397, -159.581, 665.655
 -7.4542, -156.0642, 669.177
 -7.2942, -152.5461, 672.698
 -7.139, -149.0278, 676.22
 -6.9838, -145.5095, 679.742
 -6.8285, -141.9912, 683.264
 -6.6733, -138.4729, 686.785
 -6.5181, -134.9546, 690.307
 -6.3628, -131.4363, 693.829
 -6.2076, -127.9179, 697.351
 -6.0524, -124.3996, 700.872
 -5.8971, -120.8813, 704.394
 -5.7419, -117.363, 707.916
 -5.5867, -113.8447, 711.437
 -5.4314, -110.3264, 714.959
 -5.2762, -106.8081, 718.481
 -5.121, -103.2898, 722.003
 -4.9657, -99.7715, 725.524
 -4.8105, -96.2532, 729.046
 -4.6553, -92.7349, 732.568
 -4.5, -89.2166, 736.09
 -4.3448, -85.6983, 739.611
 -4.1896, -82.18, 743.133
 -4.0343, -78.6617, 746.655
 -3.8791, -75.1434, 750.176
 -3.7239, -71.6251, 753.698
 -3.5686, -68.1068, 757.22
 -3.4134, -64.5885, 760.742
 -3.2582, -61.0702, 764.263
 -3.1029, -57.5518, 767.785
 -2.9477, -54.0335, 771.307
 -2.7924, -50.5152, 774.829
 -2.6372, -46.9969, 778.35
 -2.482, -43.4786, 781.872
 -2.3087, -39.9612, 785.394
 -2.1345, -36.4437, 788.915
 -1.9603, -32.9263, 792.437
 -1.7862, -29.4089, 795.959
 -1.612, -25.8915, 799.481
 -1.4379, -22.374, 803.002
 -1.2637, -18.8566, 806.524
 -1.0895, -15.3392, 810.046
 -0.9154, -11.8218, 813.568
 -0.7412, -8.3043, 817.089
 -0.5671, -4.7869, 820.611
 -0.3929, -1.2695, 824.133
 -0.2187, 2.2479, 827.655
 -0.0446, 5.7654, 831.176
 0.1296, 9.2828, 834.698
 0.3038, 12.8002, 838.22
 0.4779, 16.3176, 841.741
 0.6521, 19.8351, 845.263
 0.8262, 23.3525, 848.785
 1.0004, 26.8699, 852.307
 1.1746, 30.3873, 855.828
 1.3487, 33.9048, 859.35
 1.5229, 37.4222, 862.872
 1.6971, 40.9396, 866.394
 1.8712, 44.457, 869.915
 2.0454, 47.9745, 873.437
 2.2195, 51.4919, 876.959
 2.3937, 55.0093, 880.481
 2.5679, 58.5267, 884.002
 2.742, 62.0442, 887.524
 2.9162, 65.5616, 891.046
 3.0904, 69.079, 894.567
 3.2645, 72.5964, 898.089
 3.4387, 76.1139, 901.611
 3.6129, 79.6313, 905.133
 3.787, 83.1487, 908.654
 3.9612, 86.6661, 912.176
 4.1354, 90.1836, 915.698
 4.3095, 93.701, 919.22
 4.4837, 97.2184, 922.741
 4.6579, 100.7358, 926.263
 4.832, 104.2533, 929.785
 5.0062, 107.7707, 933.307
 5.1804, 111.2881, 936.828
 5.3545, 114.8055, 940.35
 5.5287, 118.323, 943.872
 5.7029, 121.8404, 947.393
 5.8776, 125.3578, 950.915
 6.0529, 128.8752, 954.437
 6.2281, 132.3925, 957.959
 6.4033, 135.9099, 961.48
 6.5785, 139.4273, 965.002
 6.7537, 142.9447, 968.524
 6.929, 146.462, 972.046
 7.1042, 149.9794, 975.567
 7.2794, 153.4968, 979.089
 7.4546, 157.0142, 982.611
 7.6298, 160.5315, 986.133
 7.8051, 164.0489, 989.654
 7.9803, 167.5663, 993.176
 8.1555, 171.0836, 996.698
 8.3307, 174.601, 1000.22
 8.5059, 178.1184, 1003.741
 8.6812, 181.6358, 1007.263
 8.8564, 185.1531, 1010.785
 9.0316, 188.6705, 1014.306
 9.2068, 192.1879, 1017.828
 9.3821, 195.7053, 1021.35
 9.5573, 199.2226, 1024.872
 9.7325, 202.74, 1028.393
 9.9077, 206.2574, 1031.915
 10.0829, 209.7748, 1035.437
 10.2582, 213.2921, 1038.959
 10.4334, 216.8095, 1042.48
 10.6086, 220.3269, 1046.002
 10.7838, 223.8442, 1049.524
 10.9591, 227.3616, 1053.046
 11.1343, 230.879, 1056.567
 11.3095, 234.3964, 1060.089
 11.4847, 237.9137, 1063.611
 11.66, 241.4311, 1067.132
 11.8352, 244.9485, 1070.654
 12.0104, 248.4659, 1074.176
 12.1856, 251.9832, 1077.698
 12.3609, 255.5006, 1081.219
 12.5361, 259.018, 1084.741
 12.7113, 262.5354, 1088.263
 12.8865, 266.0527, 1091.785
 13.0618, 269.5701, 1095.306
 13.237, 273.0875, 1098.828
 13.4122, 276.6048, 1102.35
 13.5874, 280.1222, 1105.872
 13.7627, 283.6396, 1109.393
 13.9379, 287.157, 1112.915
 14.1131, 290.6743, 1116.437
 14.2883, 294.1917, 1119.959
 14.4636, 297.7091, 1123.48
 14.6388, 301.2265, 1127.002
 14.814, 304.7438, 1130.524
 14.99, 308.2612, 1134.045
 15.1661, 311.7785, 1137.567
 15.3422, 315.2958, 1141.089
 15.5183, 318.8132, 1144.611
 15.6944, 322.3305, 1148.132
 15.8705, 325.8478, 1151.654
 16.0466, 329.3651, 1155.176
 16.2227, 332.8825, 1158.698
 16.3988, 336.3998, 1162.219
 16.575, 339.9171, 1165.741
 16.7511, 343.4345, 1169.263
 16.9272, 346.9518, 1172.785
 17.1033, 350.4691, 1176.306
 17.2794, 353.9865, 1179.828
 17.4555, 357.5038, 1183.35
 17.6316, 361.0211, 1186.871
 17.8077, 364.5384, 1190.393
 17.9839, 368.0558, 1193.915
 18.16, 371.5731, 1197.437
 18.3361, 375.0904, 1200.958
 18.5122, 378.6078, 1204.48
 18.6883, 382.1251, 1208.002
 18.8644, 385.6424, 1211.524
 19.0405, 389.1597, 1215.045
 19.2167, 392.6771, 1218.567
 19.3928, 396.1944, 1222.089
 19.5689, 399.7117, 1225.611
 19.745, 403.2291, 1229.132
 19.9211, 406.7464, 1232.654
 20.0972, 410.2637, 1236.176
 20.2734, 413.781, 1239.698
 20.4495, 417.2984, 1243.219
 20.6256, 420.8157, 1246.741
 20.8017, 424.333, 1250.263
 20.9778, 427.8504, 1253.784
 21.1539, 431.3677, 1257.306
 21.3301, 434.885, 1260.828
 21.5062, 438.4024, 1264.35
 21.6823, 441.9197, 1267.871
 21.8584, 445.437, 1271.393
 22.0345, 448.9543, 1274.915
 22.2106, 452.4717, 1278.437
 22.3868, 455.989, 1281.958
 22.5629, 459.5063, 1285.48
 22.739, 463.0237, 1289.002
 22.9151, 466.541, 1292.524
 23.0912, 470.0583, 1296.045
 23.2674, 473.5756, 1299.567
 23.4435, 477.093, 1303.089
 23.6196, 480.6103, 1306.611
 23.7957, 484.1276, 1310.132
 23.9718, 487.645, 1313.654
 24.148, 491.1623, 1317.176
 24.3241, 494.6796, 1320.697
 24.5002, 498.197, 1324.219
 24.6763, 501.7143, 1327.741
 24.845, 505.232, 1331.263
 25.0083, 508.7499, 1334.784
 25.1716, 512.2679, 1338.306
 25.3349, 515.7858, 1341.828
 25.4982, 519.3037, 1345.35
 25.6615, 522.8217, 1348.871
 25.8248, 526.3396, 1352.393
 25.9881, 529.8576, 1355.915
 26.1514, 533.3755, 1359.436
 26.3147, 536.8935, 1362.958
 26.499, 540.4103, 1366.48
 26.7062, 543.9259, 1370.002
 26.9134, 547.4416, 1373.523
 27.1207, 550.9572, 1377.045
 27.3279, 554.4729, 1380.567
 27.5351, 557.9885, 1384.089
 27.7424, 561.5042, 1387.61
 27.9496, 565.0198, 1391.132
 28.1568, 568.5355, 1394.654
 28.3641, 572.0511, 1398.176
 28.5713, 575.5668, 1401.697
 28.7785, 579.0824, 1405.219
 28.9858, 582.5981, 1408.741
 29.193, 586.1137, 1412.263
 29.4002, 589.6293, 1415.784
 29.6075, 593.145, 1419.306
 29.8147, 596.6606, 1422.828
 30.0219, 600.1763, 1426.35
 30.2292, 603.6919, 1429.871
 30.4364, 607.2076, 1433.393
 30.613, 610.7248, 1436.915
 30.7667, 614.2432, 1440.436
 30.9204, 617.7615, 1443.958
 31.0741, 621.2799, 1447.48
 31.2279, 624.7983, 1451.002
 31.3816, 628.3166, 1454.523
 31.5353, 631.835, 1458.045
 31.689, 635.3534, 1461.567
 31.8427, 638.8718, 1465.089
 31.9964, 642.3901, 1468.61
 32.1501, 645.9085, 1472.132
 32.3039, 649.4269, 1475.654
 32.4576, 652.9452, 1479.175
 32.6113, 656.4636, 1482.697
 32.765, 659.982, 1486.219
 32.9187, 663.5004, 1489.741
 33.0724, 667.0187, 1493.262
 33.2261, 670.5371, 1496.784
 33.3799, 674.0555, 1500.306
 33.5336, 677.5738, 1503.828
 33.6873, 681.0922, 1507.349
 33.841, 684.6106, 1510.871
 33.9947, 688.129, 1514.393
 34.1484, 691.6473, 1517.915
 34.3022, 695.1657, 1521.436
 34.4559, 698.6841, 1524.958
 34.6096, 702.2024, 1528.48
 34.7926, 705.7194, 1532.001
 34.9861, 709.2358, 1535.523
 35.1795, 712.7522, 1539.045
 35.373, 716.2687, 1542.567
 35.5664, 719.7851, 1546.088
 35.7599, 723.3015, 1549.61
 35.9533, 726.8179, 1553.132
 36.1468, 730.3344, 1556.654
 36.3403, 733.8508, 1560.175
 36.5337, 737.3672, 1563.697
 36.7272, 740.8836, 1567.219
 36.9206, 744.4001, 1570.741
 37.1141, 747.9165, 1574.262
 37.3076, 751.4329, 1577.784
 37.501, 754.9493, 1581.306
 37.6945, 758.4658, 1584.828
 37.8879, 761.9822, 1588.349
 38.0814, 765.4986, 1591.871
 38.2749, 769.015, 1595.393
 38.4683, 772.5315, 1598.914
 38.6618, 776.0479, 1602.436
 38.8552, 779.5643, 1605.958
 39.0487, 783.0807, 1609.48
 39.2422, 786.5972, 1613.001
 39.4356, 790.1136, 1616.523
 39.6291, 793.63, 1620.045
 39.8225, 797.1464, 1623.567
 40.016, 800.6629, 1627.088
 40.2095, 804.1793, 1630.61
 40.4029, 807.6957, 1634.132
 40.5964, 811.2121, 1637.654
 40.7899, 814.7286, 1641.175
 40.9833, 818.245, 1644.697
 41.1768, 821.7614, 1648.219
 41.3505, 825.2788, 1651.741
 41.5121, 828.7969, 1655.262
 41.6737, 832.3149, 1658.784
 41.8353, 835.8329, 1662.306
 41.9969, 839.3509, 1665.828
 42.1586, 842.8689, 1669.349
 42.3202, 846.387, 1672.871
 42.4818, 849.905, 1676.393
 42.6434, 853.423, 1679.914
 42.805, 856.941, 1683.436
 42.9667, 860.459, 1686.958
 43.1283, 863.9771, 1690.48
 43.2899, 867.4951, 1694.001
 43.4515, 871.0131, 1697.523
 43.6131, 874.5311, 1701.045
 43.7748, 878.0491, 1704.567
 43.9364, 881.5672, 1708.088
 44.098, 885.0852, 1711.61
 44.2596, 888.6032, 1715.132
 44.4213, 892.1212, 1718.653
 44.5829, 895.6392, 1722.175
 44.7445, 899.1573, 1725.697
 44.9061, 902.6753, 1729.219
 45.0678, 906.1933, 1732.74
 45.2294, 909.7113, 1736.262
 45.391, 913.2293, 1739.784
 45.5526, 916.7474, 1743.306
 45.7143, 920.2654, 1746.827
 45.8759, 923.7834, 1750.349
 46.0375, 927.3014, 1753.871
 46.1991, 930.8194, 1757.393
 46.3368, 934.3385, 1760.914
 46.4744, 937.8575, 1764.436
 46.6119, 941.3765, 1767.958
 46.7495, 944.8956, 1771.479
 46.8871, 948.4146, 1775.001
 47.0246, 951.9337, 1778.523
 47.1622, 955.4527, 1782.045
 47.2997, 958.9717, 1785.566
 47.4373, 962.4908, 1789.088
 47.5749, 966.0098, 1792.61
 47.7124, 969.5288, 1796.131
 47.85, 973.0479, 1799.653
 48.1225, 973.6245, 1800.291
 48.395, 974.2011, 1800.929
 48.6676, 974.7777, 1801.567
 48.9401, 975.3544, 1802.204
 49.2126, 975.931, 1802.842
 49.4852, 976.5076, 1803.48
 49.7577, 977.0842, 1804.118
 50.0302, 977.6608, 1804.755
 50.3028, 978.2375, 1805.393
 50.5753, 978.8141, 1806.031
 50.8479, 979.3907, 1806.669
 51.1204, 979.9673, 1807.307
 51.3929, 980.544, 1807.944
 51.6655, 981.1206, 1808.582
 51.938, 981.6972, 1809.22
 52.2105, 982.2738, 1809.858
 52.4831, 982.8504, 1810.496
 52.7556, 983.4271, 1811.133
 53.0281, 984.0037, 1811.771
 53.3007, 984.5803, 1812.409
 53.5732, 985.1569, 1813.047
 53.9332, 985.6815, 1813.683
 54.3137, 986.1938, 1814.321
 54.4869, 986.7848, 1814.937
 54.5444, 987.4195, 1815.574
 54.6019, 988.0543, 1816.212
 54.6594, 988.6891, 1816.849
 54.7169, 989.3238, 1817.486
 54.7744, 989.9586, 1818.124
 54.8318, 990.5933, 1818.761
 54.8893, 991.2281, 1819.398
 54.9468, 991.8629, 1820.036
 55.0043, 992.4976, 1820.673
 55.0618, 993.1324, 1821.31
 55.1193, 993.7671, 1821.948
 55.1768, 994.4019, 1822.585
 55.2343, 995.0367, 1823.223
 55.2918, 995.6714, 1823.86
 55.3493, 996.3062, 1824.497
 55.4068, 996.941, 1825.135
 55.4643, 997.5757, 1825.772
 55.5218, 998.2105, 1826.409
 55.5793, 998.8452, 1827.047
 55.6368, 999.48, 1827.684
 55.6942, 1000.1148, 1828.321
 55.7517, 1000.7495, 1828.959
 55.8092, 1001.3843, 1829.596
 55.8667, 1002.019, 1830.233
 55.9242, 1002.6538, 1830.871
 55.9817, 1003.2886, 1831.508
 56.0392, 1003.9233, 1832.146
 56.0967, 1004.5581, 1832.783
 56.1542, 1005.1928, 1833.42
 56.2117, 1005.8276, 1834.058
 56.2692, 1006.4624, 1834.695
 56.3267, 1007.0971, 1835.332
 56.3842, 1007.7319, 1835.97
 56.4417, 1008.3667, 1836.607
 56.4992, 1009.0014, 1837.244
 56.5567, 1009.6362, 1837.882
 56.6141, 1010.2709, 1838.519
 56.6716, 1010.9057, 1839.157
 56.7291, 1011.5405, 1839.794
 56.7866, 1012.1752, 1840.431
 56.8441, 1012.81, 1841.069
 56.9016, 1013.4447, 1841.706
 56.9591, 1014.0795, 1842.343
 57.0166, 1014.7143, 1842.981
 57.0741, 1015.349, 1843.618
 57.1316, 1015.9838, 1844.255
 57.1891, 1016.6185, 1844.893
 57.2466, 1017.2533, 1845.53
 57.3041, 1017.8881, 1846.167
 57.3616, 1018.5228, 1846.805
 57.4191, 1019.1576, 1847.442
 57.4766, 1019.7924, 1848.08
 57.534, 1020.4271, 1848.717
 57.5915, 1021.0619, 1849.354
 57.649, 1021.6966, 1849.992
 57.7065, 1022.3314, 1850.629
 57.764, 1022.9662, 1851.266
 57.8215, 1023.6009, 1851.904
 57.879, 1024.2357, 1852.541
 57.9365, 1024.8704, 1853.178
 57.994, 1025.5052, 1853.816
 58.0515, 1026.14, 1854.453
 58.109, 1026.7747, 1855.091
 58.1665, 1027.4095, 1855.728
 58.224, 1028.0442, 1856.365
 58.2815, 1028.679, 1857.003
 58.339, 1029.3138, 1857.64
 58.3965, 1029.9485, 1858.277
 58.4539, 1030.5833, 1858.915
 58.5114, 1031.2181, 1859.552
 58.5689, 1031.8528, 1860.189
 58.614, 1032.4886, 1860.827
 58.6576, 1033.1244, 1861.464
 58.7012, 1033.7603, 1862.101
 58.7448, 1034.3961, 1862.739
 58.7884, 1035.032, 1863.376
 58.832, 1035.6678, 1864.013
 58.8755, 1036.3037, 1864.651
 58.9191, 1036.9396, 1865.288
 58.9627, 1037.5754, 1865.926
 59.0063, 1038.2113, 1866.563
 59.0499, 1038.8471, 1867.2
 59.0935, 1039.483, 1867.838
 59.1371, 1040.1189, 1868.475
 59.1807, 1040.7547, 1869.112
 59.2243, 1041.3906, 1869.75
 59.2679, 1042.0264, 1870.387
 59.3115, 1042.6623, 1871.024
 59.3551, 1043.2982, 1871.662
 59.3987, 1043.934, 1872.299
 59.4423, 1044.5699, 1872.936
 59.4859, 1045.2057, 1873.574
 59.5294, 1045.8416, 1874.211
 59.573, 1046.4774, 1874.848
 59.6166, 1047.1133, 1875.486
 59.6602, 1047.7492, 1876.123
 59.7038, 1048.385, 1876.761
 59.7474, 1049.0209, 1877.398
 59.791, 1049.6567, 1878.035
 59.8346, 1050.2926, 1878.673
 59.8782, 1050.9285, 1879.31
 59.9218, 1051.5643, 1879.947
 59.9654, 1052.2002, 1880.585
 60.009, 1052.836, 1881.222
 60.0526, 1053.4719, 1881.859
 60.0962, 1054.1077, 1882.497
 60.1398, 1054.7436, 1883.134
 60.1833, 1055.3795, 1883.771
 60.2269, 1056.0153, 1884.409
 60.2705, 1056.6512, 1885.046
 60.3141, 1057.287, 1885.683
 60.3577, 1057.9229, 1886.321
 60.4013, 1058.5588, 1886.958
 60.4449, 1059.1946, 1887.595
 60.4885, 1059.8305, 1888.233
 60.5321, 1060.4663, 1888.87
 60.5757, 1061.1022, 1889.508
 60.6193, 1061.738, 1890.145
 60.6629, 1062.3739, 1890.782
 60.7065, 1063.0098, 1891.42
 60.7501, 1063.6456, 1892.057
 60.7937, 1064.2815, 1892.694
 60.8372, 1064.9173, 1893.332
 60.8808, 1065.5532, 1893.969
 60.9244, 1066.1891, 1894.606
 60.968, 1066.8249, 1895.244
 61.0116, 1067.4608, 1895.881
 61.0552, 1068.0966, 1896.518
 61.0988, 1068.7325, 1897.156
 61.1424, 1069.3683, 1897.793
 61.186, 1070.0042, 1898.43
 61.2296, 1070.6401, 1899.068
 61.2732, 1071.2759, 1899.705
 61.3168, 1071.9118, 1900.342
 61.3604, 1072.5476, 1900.98
 61.404, 1073.1835, 1901.617
 61.4476, 1073.8194, 1902.255
 61.4912, 1074.4552, 1902.892
 61.5347, 1075.0911, 1903.529
 61.5783, 1075.7269, 1904.167
 61.6219, 1076.3628, 1904.804
 61.6655, 1076.9987, 1905.441
 61.7091, 1077.6345, 1906.079
 61.7527, 1078.2704, 1906.716
 61.7963, 1078.9062, 1907.353
 61.8399, 1079.5421, 1907.991
 61.8835, 1080.1779, 1908.628
 61.9271, 1080.8138, 1909.265
 61.9707, 1081.4497, 1909.903
 62.0143, 1082.0855, 1910.54
 62.0579, 1082.7214, 1911.177
 62.1015, 1083.3572, 1911.815
 62.1451, 1083.9931, 1912.452
 62.1887, 1084.629, 1913.09
 62.2322, 1085.2648, 1913.727
 62.2758, 1085.9007, 1914.364
 62.3194, 1086.5365, 1915.002
 62.363, 1087.1724, 1915.639
 62.4066, 1087.8082, 1916.276
 62.4502, 1088.4441, 1916.914
 62.4938, 1089.08, 1917.551
 62.5374, 1089.7158, 1918.188
 62.581, 1090.3517, 1918.826
 62.6246, 1090.9875, 1919.463
 62.6682, 1091.6234, 1920.1
 62.7118, 1092.2593, 1920.738
 62.7554, 1092.8951, 1921.375
 62.799, 1093.531, 1922.012
 62.8426, 1094.1668, 1922.65
 62.8862, 1094.8027, 1923.287
 62.9297, 1095.4385, 1923.924
 62.9733, 1096.0744, 1924.562
 63.0169, 1096.7103, 1925.199
 63.0605, 1097.3461, 1925.837
 63.1041, 1097.982, 1926.474
 63.1477, 1098.6178, 1927.111
 63.1913, 1099.2537, 1927.749
 63.2349, 1099.8896, 1928.386
 63.2785, 1100.5254, 1929.023
 63.3221, 1101.1613, 1929.661
 63.3657, 1101.7971, 1930.298
 63.4093, 1102.433, 1930.935
 63.4529, 1103.0689, 1931.573
 63.4965, 1103.7047, 1932.21
 63.5333, 1104.3409, 1932.847
 63.5573, 1104.9778, 1933.485
 63.5814, 1105.6147, 1934.122
 63.6055, 1106.2516, 1934.759
 63.6295, 1106.8885, 1935.397
 63.6536, 1107.5254, 1936.034
 63.6776, 1108.1623, 1936.671
 63.7017, 1108.7991, 1937.309
 63.7257, 1109.436, 1937.946
 63.7498, 1110.0729, 1938.583
 63.7738, 1110.7098, 1939.221
 63.7979, 1111.3467, 1939.858
 63.8219, 1111.9836, 1940.495
 63.846, 1112.6205, 1941.133
 63.87, 1113.2574, 1941.77
 63.8941, 1113.8943, 1942.407
 63.9181, 1114.5312, 1943.045
 63.9422, 1115.168, 1943.682
 63.9662, 1115.8049, 1944.32
 63.9903, 1116.4418, 1944.957
 64.0143, 1117.0787, 1945.594
 64.0384, 1117.7156, 1946.232
 64.0624, 1118.3525, 1946.869
 64.0865, 1118.9894, 1947.506
 64.1105, 1119.6263, 1948.144
 64.1346, 1120.2632, 1948.781
 64.1587, 1120.9, 1949.418
 64.1827, 1121.5369, 1950.056
 64.2068, 1122.1738, 1950.693
 64.2308, 1122.8107, 1951.33
 64.2549, 1123.4476, 1951.968
 64.2789, 1124.0845, 1952.605
 64.303, 1124.7214, 1953.242
 64.327, 1125.3583, 1953.88
 64.3511, 1125.9952, 1954.517
 64.3751, 1126.632, 1955.154
 64.3992, 1127.2689, 1955.792
 64.4232, 1127.9058, 1956.429
 64.4473, 1128.5427, 1957.066
 64.4713, 1129.1796, 1957.704
 64.4954, 1129.8165, 1958.341
 64.5194, 1130.4534, 1958.978
 64.5435, 1131.0903, 1959.616
 64.5675, 1131.7272, 1960.253
 64.5916, 1132.364, 1960.89
 64.6156, 1133.0009, 1961.528
 64.6397, 1133.6378, 1962.165
 64.6637, 1134.2747, 1962.802
 64.6878, 1134.9116, 1963.44
 64.7119, 1135.5485, 1964.077
 64.7359, 1136.1854, 1964.714
 64.76, 1136.8223, 1965.352
 64.784, 1137.4592, 1965.989
 64.8081, 1138.0961, 1966.627
 64.8321, 1138.7329, 1967.264
 64.8562, 1139.3698, 1967.901
 64.8802, 1140.0067, 1968.539
 64.9043, 1140.6436, 1969.176
 64.9283, 1141.2805, 1969.813
 64.9524, 1141.9174, 1970.451
 64.9764, 1142.5543, 1971.088
 65.0005, 1143.1912, 1971.725
 65.0245, 1143.8281, 1972.363
 65.0486, 1144.4649, 1973
 65.0726, 1145.1018, 1973.637
 65.0967, 1145.7387, 1974.275
 65.1207, 1146.3756, 1974.912
 65.1448, 1147.0125, 1975.549
 65.1689, 1147.6494, 1976.187
 65.1929, 1148.2863, 1976.824
 65.217, 1148.9232, 1977.461
 65.241, 1149.5601, 1978.099
 65.2651, 1150.1969, 1978.736
 65.2891, 1150.8338, 1979.373
 65.3132, 1151.4707, 1980.011
 65.3372, 1152.1076, 1980.648
 65.3613, 1152.7445, 1981.285
 65.3853, 1153.3814, 1981.923
 65.4094, 1154.0183, 1982.56
 65.4334, 1154.6552, 1983.197
 65.4575, 1155.2921, 1983.835
 65.4815, 1155.9289, 1984.472
 65.5056, 1156.5658, 1985.109
 65.5296, 1157.2027, 1985.747
 65.5537, 1157.8396, 1986.384
 65.5777, 1158.4765, 1987.022
 65.6018, 1159.1134, 1987.659
 65.6258, 1159.7503, 1988.296
 65.6499, 1160.3872, 1988.934
 65.674, 1161.0241, 1989.571
 65.698, 1161.661, 1990.208
 65.7221, 1162.2978, 1990.846
 65.7461, 1162.9347, 1991.483
 65.7702, 1163.5716, 1992.12
 65.7942, 1164.2085, 1992.758
 65.8183, 1164.8454, 1993.395
 65.8423, 1165.4823, 1994.032
 65.8664, 1166.1192, 1994.67
 65.8904, 1166.7561, 1995.307
 65.9145, 1167.393, 1995.944
 65.9385, 1168.0298, 1996.582
 65.9626, 1168.6667, 1997.219
 65.9866, 1169.3036, 1997.856
 66.005, 1169.9407, 1998.494
 66.0163, 1170.5779, 1999.131
 66.0275, 1171.2151, 1999.768
 66.0388, 1171.8524, 2000.406
 66.0501, 1172.4896, 2001.043
 66.0613, 1173.1269, 2001.68
 66.0726, 1173.7641, 2002.318
 66.0839, 1174.4014, 2002.955
 66.0951, 1175.0386, 2003.592
 66.1064, 1175.6758, 2004.23
 66.1177, 1176.3131, 2004.867
 66.1289, 1176.9503, 2005.504
 66.1402, 1177.5876, 2006.142
 66.1515, 1178.2248, 2006.779
 66.1628, 1178.862, 2007.416
 66.174, 1179.4993, 2008.054
 66.1853, 1180.1365, 2008.691
 66.1966, 1180.7738, 2009.328
 66.2078, 1181.411, 2009.966
 66.2191, 1182.0482, 2010.603
 66.2304, 1182.6855, 2011.24
 66.2416, 1183.3227, 2011.878
 66.2529, 1183.96, 2012.515
 66.2642, 1184.5972, 2013.152
 66.2754, 1185.2344, 2013.79
 66.2867, 1185.8717, 2014.427
 66.298, 1186.5089, 2015.064
 66.3092, 1187.1462, 2015.702
 66.3205, 1187.7834, 2016.339
 66.3318, 1188.4207, 2016.977
 66.3431, 1189.0579, 2017.614
 66.3543, 1189.6951, 2018.251
 66.3656, 1190.3324, 2018.889
 66.3769, 1190.9696, 2019.526
 66.3881, 1191.6069, 2020.163
 66.3994, 1192.2441, 2020.801
 66.4107, 1192.8813, 2021.438
 66.4219, 1193.5186, 2022.075
 66.4332, 1194.1558, 2022.713
 66.4445, 1194.7931, 2023.35
 66.4557, 1195.4303, 2023.987
 66.467, 1196.0675, 2024.625
 66.4783, 1196.7048, 2025.262
 66.4895, 1197.342, 2025.899
 66.5008, 1197.9793, 2026.537
 66.5121, 1198.6165, 2027.174
 66.5234, 1199.2537, 2027.811
 66.5346, 1199.891, 2028.449
 66.5459, 1200.5282, 2029.086
 66.5572, 1201.1655, 2029.723
 66.5684, 1201.8027, 2030.361
 66.5797, 1202.44, 2030.998
 66.591, 1203.0772, 2031.635
 66.6022, 1203.7144, 2032.273
 66.6135, 1204.3517, 2032.91
 66.6248, 1204.9889, 2033.547
 66.636, 1205.6262, 2034.185
 66.6473, 1206.2634, 2034.822
 66.6586, 1206.9006, 2035.459
 66.6699, 1207.5379, 2036.097
 66.6811, 1208.1751, 2036.734
 66.6924, 1208.8124, 2037.371
 66.7037, 1209.4496, 2038.009
 66.7149, 1210.0868, 2038.646
 66.7262, 1210.7241, 2039.283
 66.7375, 1211.3613, 2039.921
 66.7487, 1211.9986, 2040.558
 66.76, 1212.6358, 2041.195
 66.7713, 1213.273, 2041.833
 66.7825, 1213.9103, 2042.47
 66.7938, 1214.5475, 2043.107
 66.8051, 1215.1848, 2043.745
 66.8163, 1215.822, 2044.382
 66.825, 1216.4593, 2045.019
 66.825, 1217.0966, 2045.657
 66.825, 1217.734, 2046.294
 66.825, 1218.3713, 2046.932
 66.825, 1219.0086, 2047.569
 66.825, 1219.646, 2048.206
 66.825, 1220.2833, 2048.844
 66.825, 1220.9207, 2049.481
 66.825, 1221.558, 2050.118
 66.825, 1222.1953, 2050.756
 66.825, 1222.8327, 2051.393
 66.825, 1223.47, 2052.03
 66.825, 1224.1073, 2052.668
 66.825, 1224.7447, 2053.305
 66.825, 1225.382, 2053.942
 66.825, 1226.0194, 2054.58
 66.825, 1226.6567, 2055.217
 66.825, 1227.294, 2055.854
 66.825, 1227.9314, 2056.492
 66.825, 1228.5687, 2057.129
 66.825, 1229.2061, 2057.766
 66.825, 1229.8434, 2058.404
 66.825, 1230.4807, 2059.041
 66.825, 1231.1181, 2059.678
 66.825, 1231.7554, 2060.316
 66.825, 1232.3928, 2060.953
 66.825, 1233.0301, 2061.59
 66.825, 1233.6674, 2062.228
 66.825, 1234.3048, 2062.865
 66.825, 1234.9421, 2063.502
 66.825, 1235.5795, 2064.14
 66.825, 1236.2168, 2064.777
 66.825, 1236.8541, 2065.414
 66.8331, 1237.4911, 2066.051
 66.9003, 1238.1249, 2066.689
 66.9676, 1238.7587, 2067.326
 67.0348, 1239.3925, 2067.963
 67.1021, 1240.0263, 2068.601
 67.1693, 1240.6601, 2069.238
 67.2366, 1241.2939, 2069.876
 67.3038, 1241.9277, 2070.513
 67.3711, 1242.5615, 2071.15
 67.4383, 1243.1953, 2071.788
 67.5056, 1243.8292, 2072.425
 67.5728, 1244.463, 2073.062
 67.6401, 1245.0968, 2073.7
 67.65, 1245.7336, 2074.337
 67.65, 1246.3709, 2074.974
 67.65, 1247.0083, 2075.611
 67.65, 1247.6456, 2076.249
 67.65, 1248.2829, 2076.886
 67.7885, 1248.8956, 2077.514
 68.0105, 1249.4933, 2078.152
 68.2324, 1250.0911, 2078.789
 68.4544, 1250.6888, 2079.427
 68.475, 1251.3225, 2080.061
 68.475, 1251.9599, 2080.698
 68.475, 1252.5972, 2081.336
 68.5565, 1253.222, 2081.966
 68.7499, 1253.8295, 2082.603
 68.9433, 1254.437, 2083.241
 69.1367, 1255.0446, 2083.878
 69.3301, 1255.6521, 2084.516
 69.5234, 1256.2596, 2085.154
 69.7168, 1256.8671, 2085.791
 69.9102, 1257.4747, 2086.429
 70.1036, 1258.0822, 2087.066
 70.297, 1258.6897, 2087.704
 70.4903, 1259.2973, 2088.341
 70.6837, 1259.9048, 2088.979
 70.8771, 1260.5123, 2089.617
 71.1117, 1261.1043, 2090.253
 71.3713, 1261.6868, 2090.891
 71.6309, 1262.2693, 2091.529
 71.8905, 1262.8518, 2092.167
 72.1501, 1263.4344, 2092.804
 72.4097, 1264.0169, 2093.442
 72.6693, 1264.5994, 2094.08
 72.9289, 1265.1819, 2094.718
 73.1885, 1265.7645, 2095.355
 73.4481, 1266.347, 2095.993
 73.7076, 1266.9295, 2096.631
 73.9672, 1267.512, 2097.269
 74.2268, 1268.0946, 2097.906
 74.4864, 1268.6771, 2098.544
 74.746, 1269.2596, 2099.182
 75.0056, 1269.8421, 2099.819
 75.2652, 1270.4246, 2100.457
 75.5248, 1271.0072, 2101.095
 75.7844, 1271.5897, 2101.733
 76.057, 1272.1662, 2102.37
 76.34, 1272.7378, 2103.008
 76.623, 1273.3093, 2103.646
 76.906, 1273.8809, 2104.284
 77.189, 1274.4525, 2104.922
 77.4721, 1275.0241, 2105.56
 77.7551, 1275.5957, 2106.197
 78.0381, 1276.1673, 2106.835
 78.3211, 1276.7389, 2107.473
 78.6042, 1277.3105, 2108.111
 78.8872, 1277.8821, 2108.749
 79.1702, 1278.4537, 2109.386
 79.4372, 1279.0328, 2110.024
 79.7023, 1279.6129, 2110.662
 79.9674, 1280.1929, 2111.3
 80.2325, 1280.773, 2111.937
 80.4977, 1281.353, 2112.575
 80.7628, 1281.9331, 2113.213
 81.0279, 1282.5131, 2113.851
 81.293, 1283.0932, 2114.489
 81.5581, 1283.6732, 2115.126
 81.8232, 1284.2533, 2115.764
 82.0883, 1284.8333, 2116.402
 82.3535, 1285.4134, 2117.04
 82.6186, 1285.9934, 2117.677
 82.8837, 1286.5735, 2118.315
 83.1488, 1287.1535, 2118.953
 83.4139, 1287.7336, 2119.591
 83.679, 1288.3136, 2120.228
 83.9442, 1288.8937, 2120.866
 84.2093, 1289.4737, 2121.504
 84.4744, 1290.0538, 2122.142
 84.7395, 1290.6338, 2122.779
 85.0046, 1291.2139, 2123.417
 85.2697, 1291.7939, 2124.055
 85.5348, 1292.374, 2124.693
 85.8, 1292.954, 2125.331
 87.644, 1292.1264, 2127.352
 89.488, 1291.2988, 2129.373
 91.332, 1290.4712, 2131.394
 93.176, 1289.6436, 2133.415
 95.02, 1288.816, 2135.437
 96.864, 1287.9884, 2137.458
 98.708, 1287.1609, 2139.479
 100.552, 1286.3333, 2141.5
 102.3961, 1285.5057, 2143.521
 104.2401, 1284.6781, 2145.543
 106.0989, 1283.8869, 2147.563
 107.9995, 1283.1979, 2149.584
 109.9001, 1282.509, 2151.606
 111.8007, 1281.82, 2153.628
 113.7013, 1281.1311, 2155.649
 115.6019, 1280.4421, 2157.671
 117.5025, 1279.7531, 2159.693
 119.4031, 1279.0642, 2161.714
 121.3037, 1278.3752, 2163.736
 123.2043, 1277.6863, 2165.757
 125.1049, 1276.9973, 2167.779
 127.0054, 1276.3084, 2169.801
 128.8508, 1275.484, 2171.822
 130.6948, 1274.6564, 2173.843
 132.5388, 1273.8288, 2175.864
 134.3828, 1273.0012, 2177.885
 136.2268, 1272.1736, 2179.906
 138.0708, 1271.3461, 2181.928
 139.9286, 1270.5518, 2183.948
 141.8244, 1269.8499, 2185.97
 143.7202, 1269.148, 2187.991
 145.616, 1268.446, 2190.013
 147.5118, 1267.7441, 2192.034
 149.4076, 1267.0422, 2194.056
 151.3033, 1266.3402, 2196.078
 153.1991, 1265.6383, 2198.099
 155.0949, 1264.9363, 2200.121
 156.9907, 1264.2344, 2202.142
 158.8865, 1263.5325, 2204.164
 160.7823, 1262.8305, 2206.185
 162.6781, 1262.1286, 2208.207
 164.5739, 1261.4266, 2210.229
 166.4697, 1260.7247, 2212.25
 168.3655, 1260.0227, 2214.272
 170.2613, 1259.3208, 2216.293
 172.1571, 1258.6189, 2218.315
 174.0084, 1257.809, 2220.336
 175.8524, 1256.9814, 2222.357
 177.6964, 1256.1538, 2224.378
 179.5404, 1255.3262, 2226.399
 181.3844, 1254.4986, 2228.42
 183.2284, 1253.6711, 2230.442
 185.0724, 1252.8435, 2232.463
 186.9164, 1252.0159, 2234.484
 188.7604, 1251.1883, 2236.505
 190.6119, 1250.3777, 2238.526
 192.472, 1249.5868, 2240.548
 194.3322, 1248.7959, 2242.569
 196.1924, 1248.005, 2244.59
 198.0525, 1247.2141, 2246.612
 199.9127, 1246.4232, 2248.633
 201.7728, 1245.6323, 2250.654
 203.633, 1244.8414, 2252.675
 205.4941, 1244.0528, 2254.697
 207.3808, 1243.3271, 2256.718
 209.2675, 1242.6013, 2258.74
 211.1543, 1241.8755, 2260.761
 213.041, 1241.1497, 2262.783
 214.9277, 1240.4239, 2264.804
 216.8144, 1239.6981, 2266.826
 218.7011, 1238.9723, 2268.847
 220.5878, 1238.2465, 2270.869
 222.4745, 1237.5207, 2272.89
 224.3612, 1236.7949, 2274.912
 226.248, 1236.0691, 2276.933
 228.1347, 1235.3433, 2278.955
 230.0244, 1234.6254, 2280.976
 231.9149, 1233.9095, 2282.998
 233.8054, 1233.1936, 2285.019
 235.696, 1232.4777, 2287.041
 237.5865, 1231.7618, 2289.062
 239.477, 1231.0459, 2291.084
 241.3675, 1230.33, 2293.105
 243.258, 1229.6141, 2295.127
 245.1485, 1228.8982, 2297.148
 247.0391, 1228.1823, 2299.17
 248.9296, 1227.4664, 2301.192
 250.8201, 1226.7505, 2303.213
 252.7106, 1226.0346, 2305.235
 254.6011, 1225.3187, 2307.256
 256.5128, 1224.6616, 2309.278
 258.4289, 1224.0167, 2311.299
 260.345, 1223.3717, 2313.321
 262.245, 1222.6837, 2315.342
 264.1193, 1221.9266, 2317.363
 265.9936, 1221.1696, 2319.385
 267.8678, 1220.4125, 2321.406
 269.7421, 1219.6554, 2323.427
 271.726, 1219.2669, 2325.449
 273.7118, 1218.8849, 2327.471
 275.6977, 1218.503, 2329.493
 277.6835, 1218.121, 2331.516
 279.6693, 1217.7391, 2333.538
 281.649, 1217.331, 2335.559
 283.5977, 1216.7918, 2337.581
 285.5465, 1216.2527, 2339.603
 287.4952, 1215.7136, 2341.625
 289.4439, 1215.1744, 2343.647
 291.3927, 1214.6353, 2345.669
 293.3414, 1214.0962, 2347.691
 295.2902, 1213.5571, 2349.713
 297.2389, 1213.0179, 2351.735
 299.1877, 1212.4788, 2353.757
 301.1364, 1211.9397, 2355.779
 303.0851, 1211.4005, 2357.801
 305.0339, 1210.8614, 2359.822
 306.9826, 1210.3222, 2361.844
 308.9314, 1209.7831, 2363.866
 310.8801, 1209.244, 2365.888
 312.8289, 1208.7048, 2367.91
 314.7776, 1208.1657, 2369.932
 316.7263, 1207.6266, 2371.954
 318.6751, 1207.0874, 2373.976
 320.6238, 1206.5483, 2375.998
 322.5726, 1206.0091, 2378.02
 324.5213, 1205.47, 2380.042
 326.47, 1204.9309, 2382.064
 328.4188, 1204.3917, 2384.086
 330.3675, 1203.8526, 2386.108
 332.3163, 1203.3134, 2388.13
 334.265, 1202.7743, 2390.152
 336.2137, 1202.2352, 2392.174
 338.1625, 1201.696, 2394.196
 340.1112, 1201.1569, 2396.217
 342.0785, 1200.7315, 2398.23
 344.0983, 1200.6269, 2400.253
 346.1181, 1200.5223, 2402.275
 348.1378, 1200.4177, 2404.298
 350.1576, 1200.3131, 2406.32
 352.1774, 1200.2085, 2408.343
 354.1972, 1200.1039, 2410.365
 356.2169, 1199.9993, 2412.388
 358.2367, 1199.8947, 2414.41
 360.2565, 1199.7902, 2416.433
 362.2762, 1199.6856, 2418.455
 364.296, 1199.581, 2420.478
 366.3158, 1199.4764, 2422.5
 368.3356, 1199.3718, 2424.522
 370.3553, 1199.2672, 2426.545
 372.3751, 1199.1626, 2428.567
 374.3949, 1199.058, 2430.59
 376.4146, 1198.9534, 2432.612
 378.4344, 1198.8488, 2434.635
 380.4542, 1198.7442, 2436.657
 382.474, 1198.6396, 2438.68
 384.4938, 1198.5373, 2440.702
 386.5163, 1198.5373, 2442.725
 388.5388, 1198.5373, 2444.747
 390.5613, 1198.5373, 2446.77
 392.5838, 1198.5373, 2448.792
 394.6063, 1198.5373, 2450.815
 396.6288, 1198.5373, 2452.837
 398.6513, 1198.5373, 2454.86
 400.6738, 1198.5373, 2456.882
 402.6963, 1198.5373, 2458.905
 404.7188, 1198.5373, 2460.927
 406.7413, 1198.5373, 2462.95
 408.7638, 1198.5373, 2464.972
 410.7863, 1198.5373, 2466.995
 412.8088, 1198.5373, 2469.017
 414.8313, 1198.5373, 2471.04
 416.8538, 1198.5373, 2473.062
 418.8763, 1198.5373, 2475.085
 420.8988, 1198.5373, 2477.107
 422.9213, 1198.5373, 2479.13
 424.9438, 1198.5373, 2481.152
 426.9651, 1198.5922, 2483.174
 428.9856, 1198.68, 2485.197
 431.0062, 1198.7677, 2487.219
 433.0268, 1198.8555, 2489.242
 435.0474, 1198.9433, 2491.264
 437.0679, 1199.031, 2493.287
 439.0885, 1199.1188, 2495.309
 441.1091, 1199.2065, 2497.332
 443.1297, 1199.2943, 2499.354
 445.1503, 1199.3821, 2501.377
 447.1708, 1199.4698, 2503.399
 449.1914, 1199.5576, 2505.422
 451.212, 1199.6453, 2507.444
 453.2237, 1199.8525, 2509.466
 455.235, 1200.0636, 2511.489
 457.2464, 1200.2746, 2513.511
 459.2578, 1200.4856, 2515.534
 461.2692, 1200.6966, 2517.556
 463.2805, 1200.9077, 2519.578
 465.2919, 1201.1187, 2521.601
 467.3033, 1201.3297, 2523.623
 469.3146, 1201.5408, 2525.646
 471.326, 1201.7518, 2527.668
 473.3374, 1201.9628, 2529.691
 475.3488, 1202.1738, 2531.713
 477.3601, 1202.3849, 2533.735
 479.3715, 1202.5959, 2535.758
 481.3829, 1202.8069, 2537.78
 483.3943, 1203.0179, 2539.803
 485.4056, 1203.229, 2541.825
 487.417, 1203.44, 2543.847
 489.4284, 1203.651, 2545.87
 491.4398, 1203.862, 2547.892
 493.4511, 1204.073, 2549.915
 495.4625, 1204.2841, 2551.937
 497.4739, 1204.4951, 2553.959
 499.4853, 1204.7061, 2555.982
 501.4966, 1204.9171, 2558.004
 503.508, 1205.1281, 2560.027
 505.5194, 1205.3392, 2562.049
 507.5308, 1205.5502, 2564.072
 509.5422, 1205.7612, 2566.094
 511.5535, 1205.9722, 2568.116
 513.5649, 1206.1832, 2570.139
 515.5767, 1206.3906, 2572.161
 517.589, 1206.5921, 2574.184
 519.6014, 1206.7937, 2576.206
 521.6137, 1206.9952, 2578.228
 523.6261, 1207.1967, 2580.251
 525.6384, 1207.3983, 2582.273
 527.6508, 1207.5998, 2584.296
 529.6632, 1207.8014, 2586.318
 531.6755, 1208.0029, 2588.341
 533.6879, 1208.2044, 2590.363
 535.7002, 1208.406, 2592.385
 537.7126, 1208.6075, 2594.408
 539.7249, 1208.8091, 2596.43
 541.7373, 1209.0106, 2598.453
 543.7496, 1209.2121, 2600.475
 545.762, 1209.4137, 2602.498
 547.7744, 1209.6152, 2604.52
 549.7867, 1209.8167, 2606.542
 551.7991, 1210.0183, 2608.565
 553.8114, 1210.2198, 2610.587
 555.8238, 1210.4213, 2612.61
 557.8361, 1210.6229, 2614.632
 559.8485, 1210.8244, 2616.655
 561.8609, 1211.0259, 2618.677
 563.8732, 1211.2275, 2620.699
 565.8856, 1211.429, 2622.722
 567.8979, 1211.6305, 2624.744
 569.9103, 1211.832, 2626.767
 571.9227, 1212.0336, 2628.789
 573.935, 1212.2351, 2630.812
 575.9474, 1212.4366, 2632.834
 577.9597, 1212.6381, 2634.856
 579.9721, 1212.8397, 2636.879
 581.9845, 1213.0412, 2638.901
 583.9968, 1213.2427, 2640.924
 586.0092, 1213.4442, 2642.946
 588.0215, 1213.6458, 2644.968
 590.0339, 1213.8473, 2646.991
 592.0462, 1214.0488, 2649.013
 594.0586, 1214.2503, 2651.036
 596.071, 1214.4519, 2653.058
 598.0833, 1214.6534, 2655.081
 600.0957, 1214.8549, 2657.103
 602.1081, 1215.0564, 2659.125
 604.1204, 1215.2579, 2661.148
 606.1328, 1215.4595, 2663.17
 608.1451, 1215.661, 2665.193
 610.1575, 1215.8625, 2667.215
 612.1699, 1216.064, 2669.238
 614.1822, 1216.2655, 2671.26
 616.192, 1216.4907, 2673.282
 618.2011, 1216.7226, 2675.305
 620.2101, 1216.9544, 2677.327
 622.2192, 1217.1863, 2679.35
 624.2283, 1217.4182, 2681.372
 626.2373, 1217.65, 2683.394
 628.2464, 1217.8819, 2685.417
 630.2555, 1218.1138, 2687.439
 632.2645, 1218.3456, 2689.462
 634.2736, 1218.5775, 2691.484
 636.2827, 1218.8094, 2693.506
 638.2917, 1219.0412, 2695.529
 640.3008, 1219.2731, 2697.551
 642.3099, 1219.5049, 2699.574
 644.3189, 1219.7368, 2701.596
 646.328, 1219.9686, 2703.618
 648.3371, 1220.2005, 2705.641
 650.3461, 1220.4324, 2707.663
 652.3552, 1220.6642, 2709.686
 654.3643, 1220.8961, 2711.708
 656.3733, 1221.1279, 2713.73
 658.3824, 1221.3598, 2715.753
 660.3915, 1221.5916, 2717.775
 662.4005, 1221.8235, 2719.798
 664.4096, 1222.0554, 2721.82
 666.4187, 1222.2872, 2723.842
 668.4277, 1222.5191, 2725.865
 670.4368, 1222.7509, 2727.887
 672.4457, 1222.9839, 2729.91
 674.4509, 1223.2473, 2731.932
 676.456, 1223.5107, 2733.954
 678.4612, 1223.7741, 2735.977
 680.4663, 1224.0374, 2737.999
 682.4715, 1224.3008, 2740.021
 684.4766, 1224.5642, 2742.044
 686.4818, 1224.8276, 2744.066
 688.4869, 1225.091, 2746.089
 690.4921, 1225.3544, 2748.111
 692.4972, 1225.6178, 2750.133
 694.5024, 1225.8812, 2752.156
 696.5075, 1226.1446, 2754.178
 698.5127, 1226.408, 2756.2
 700.5178, 1226.6713, 2758.223
 702.523, 1226.9347, 2760.245
 704.5281, 1227.1981, 2762.268
 706.5328, 1227.4647, 2764.29
 708.5353, 1227.7471, 2766.312
 710.5379, 1228.0296, 2768.335
 712.5404, 1228.3121, 2770.357
 714.5429, 1228.5946, 2772.379
 716.5455, 1228.877, 2774.402
 718.548, 1229.1595, 2776.424
 720.5505, 1229.442, 2778.446
 722.5531, 1229.7244, 2780.469
 724.5556, 1230.0069, 2782.491
 726.5581, 1230.2894, 2784.513
 728.5606, 1230.5719, 2786.536
 730.5632, 1230.8543, 2788.558
 732.5657, 1231.1368, 2790.581
 734.5682, 1231.4193, 2792.603
 736.5708, 1231.7017, 2794.625
 738.5733, 1231.9842, 2796.648
 740.5758, 1232.2666, 2798.67
 742.5784, 1232.5491, 2800.692
 744.5809, 1232.8316, 2802.715
 746.5834, 1233.114, 2804.737
 748.586, 1233.3965, 2806.759
 750.5885, 1233.679, 2808.782
 752.591, 1233.9614, 2810.804
 754.5936, 1234.2439, 2812.826
 756.5961, 1234.5263, 2814.849
 758.5986, 1234.8088, 2816.871
 760.6012, 1235.0913, 2818.894
 762.6037, 1235.3737, 2820.916
 764.6062, 1235.6562, 2822.938
 766.6088, 1235.9386, 2824.961
 768.6113, 1236.2211, 2826.983
 770.6138, 1236.5035, 2829.005
 772.6164, 1236.786, 2831.028
 774.6189, 1237.0685, 2833.05
 776.6214, 1237.3509, 2835.072
 778.624, 1237.6334, 2837.095
 780.6265, 1237.9158, 2839.117
 782.629, 1238.1983, 2841.139
 784.6316, 1238.4807, 2843.162
 786.6341, 1238.7632, 2845.184
 788.6367, 1239.0456, 2847.207
 790.6392, 1239.3281, 2849.229
 792.6417, 1239.6105, 2851.251
 794.6239, 1240.009, 2853.273
 796.6041, 1240.4192, 2855.295
 798.5842, 1240.8294, 2857.317
 800.5644, 1241.2395, 2859.34
 802.5445, 1241.6497, 2861.362
 804.5316, 1242.0232, 2863.384
 806.5259, 1242.3588, 2865.406
 808.5201, 1242.6944, 2867.428
 810.5144, 1243.0301, 2869.451
 812.5086, 1243.3657, 2871.473
 814.5029, 1243.7013, 2873.495
 816.4971, 1244.037, 2875.517
 818.4914, 1244.3726, 2877.54
 820.4856, 1244.7082, 2879.562
 822.4799, 1245.0439, 2881.584
 824.4781, 1245.3545, 2883.607
 826.4793, 1245.6458, 2885.629
 828.4806, 1245.9371, 2887.651
 830.4819, 1246.2284, 2889.674
 832.4831, 1246.5197, 2891.696
 834.4844, 1246.811, 2893.718
 836.4856, 1247.1023, 2895.741
 838.4869, 1247.3936, 2897.763
 840.4882, 1247.6849, 2899.785
 842.4894, 1247.9762, 2901.808
 844.4907, 1248.2675, 2903.83
 846.4919, 1248.5588, 2905.852
 848.4932, 1248.8501, 2907.875
 850.4945, 1249.1414, 2909.897
 852.4957, 1249.4327, 2911.919
 854.4979, 1249.7173, 2913.942
 856.5022, 1249.9872, 2915.964
 858.5065, 1250.257, 2917.987
 860.5108, 1250.5269, 2920.009
 862.5151, 1250.7968, 2922.031
 864.5194, 1251.0666, 2924.054
 866.5236, 1251.3365, 2926.076
 868.5279, 1251.6064, 2928.098
 870.5322, 1251.8762, 2930.121
 872.5365, 1252.1461, 2932.143
 874.5408, 1252.4159, 2934.166
 876.5451, 1252.6858, 2936.188
 878.5494, 1252.9557, 2938.21
 880.5537, 1253.2255, 2940.233
 882.558, 1253.4954, 2942.255
 884.5622, 1253.7652, 2944.277
 886.5665, 1254.0351, 2946.3
 888.5708, 1254.3049, 2948.322
 890.5751, 1254.5748, 2950.345
 892.5794, 1254.8447, 2952.367
 894.5837, 1255.1145, 2954.389
 896.588, 1255.3844, 2956.412
 898.5923, 1255.6542, 2958.434
 900.5966, 1255.9241, 2960.456
 902.6009, 1256.1939, 2962.479
 904.6009, 1256.4924, 2964.501
 906.5983, 1256.8088, 2966.523
 908.5958, 1257.1252, 2968.546
 910.5932, 1257.4416, 2970.568
 912.5906, 1257.758, 2972.59
 914.588, 1258.0744, 2974.613
 916.5854, 1258.3908, 2976.635
 918.5829, 1258.7072, 2978.657
 920.5803, 1259.0236, 2980.68
 922.5777, 1259.34, 2982.702
 924.5751, 1259.6564, 2984.724
 926.5725, 1259.9728, 2986.747
 928.57, 1260.2891, 2988.769
 930.5674, 1260.6055, 2990.791
 932.5648, 1260.9219, 2992.814
 934.5622, 1261.2383, 2994.836
 936.5596, 1261.5547, 2996.858
 938.5571, 1261.8711, 2998.881
 940.5545, 1262.1875, 3000.903
 942.5519, 1262.5039, 3002.925
 944.5493, 1262.8203, 3004.947
 946.5468, 1263.1367, 3006.97
 948.5442, 1263.4531, 3008.992
 950.5416, 1263.7695, 3011.014
 952.539, 1264.0859, 3013.037
 954.5364, 1264.4022, 3015.059
 956.5339, 1264.7186, 3017.081
 958.5313, 1265.035, 3019.104
 960.5287, 1265.3514, 3021.126
 962.5261, 1265.6678, 3023.148
 964.5236, 1265.9842, 3025.171
 966.521, 1266.3006, 3027.193
 968.5184, 1266.617, 3029.215
 970.5158, 1266.9333, 3031.238
 972.5133, 1267.2497, 3033.26
 974.5234, 1267.406, 3035.276
 976.5291, 1267.6208, 3037.293
 978.5274, 1267.9319, 3039.316
 980.5257, 1268.2431, 3041.338
 982.5239, 1268.5542, 3043.36
 984.5222, 1268.8654, 3045.383
 986.5204, 1269.1766, 3047.405
 988.5187, 1269.4877, 3049.427
 990.5169, 1269.7989, 3051.45
 992.5152, 1270.11, 3053.472
 994.5134, 1270.4212, 3055.494
 996.5117, 1270.7323, 3057.517
 998.5099, 1271.0435, 3059.539
 1000.5082, 1271.3546, 3061.561
 1002.5064, 1271.6658, 3063.584
 1004.5047, 1271.9769, 3065.606
 1006.5029, 1272.2881, 3067.628
 1008.5012, 1272.5992, 3069.651
 1010.4994, 1272.9104, 3071.673
 1012.4977, 1273.2215, 3073.695
 1014.496, 1273.5327, 3075.718
 1016.4942, 1273.8438, 3077.74
 1018.4925, 1274.155, 3079.762
 1020.4907, 1274.4661, 3081.785
 1022.489, 1274.7773, 3083.807
 1024.4872, 1275.0884, 3085.829
 1026.4855, 1275.3996, 3087.852
 1028.4837, 1275.7107, 3089.874
 1030.482, 1276.0219, 3091.896
 1032.4803, 1276.333, 3093.919
 1034.4785, 1276.6442, 3095.941
 1036.4768, 1276.9553, 3097.963
 1038.475, 1277.2664, 3099.986
 1040.4733, 1277.5776, 3102.008
 1042.4715, 1277.8887, 3104.03
 1044.4698, 1278.1999, 3106.053
 1046.4681, 1278.511, 3108.075
 1048.4663, 1278.8221, 3110.097
 1050.4646, 1279.1333, 3112.12
 1052.4628, 1279.4444, 3114.142
 1054.4611, 1279.7556, 3116.165
 1056.4593, 1280.0667, 3118.187
 1058.4576, 1280.3778, 3120.209
 1060.4559, 1280.689, 3122.232
 1062.4541, 1281.0001, 3124.254
 1064.4524, 1281.3112, 3126.276
 1066.4506, 1281.6224, 3128.299
 1068.4489, 1281.9335, 3130.321
 1070.4472, 1282.2446, 3132.343
 1072.4454, 1282.5558, 3134.366
 1074.4437, 1282.8669, 3136.388
 1076.4419, 1283.178, 3138.41
 1078.4402, 1283.4892, 3140.433
 1080.4385, 1283.8003, 3142.455
 1082.4367, 1284.1114, 3144.477
 1084.435, 1284.4225, 3146.5
 1086.4332, 1284.7337, 3148.522
 1088.4315, 1285.0448, 3150.544
 1090.4298, 1285.3559, 3152.567
 1092.428, 1285.6671, 3154.589
 1094.4263, 1285.9782, 3156.611
 1096.4246, 1286.2893, 3158.634
ENDTABLE


!------------------------------------------------------------------------------------
! INITIALIZATION EQUATIONS (APPLIED JUST AFTER INITIALIZATION)
!------------------------------------------------------------------------------------
EQ_INIT ROAD_ID_OBJ(1) = CURRENT_ROAD_ID;

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT X_OBJ_1 = X_DM_1;
EQ_OUT Y_OBJ_1 = Y_DM_1;


END
