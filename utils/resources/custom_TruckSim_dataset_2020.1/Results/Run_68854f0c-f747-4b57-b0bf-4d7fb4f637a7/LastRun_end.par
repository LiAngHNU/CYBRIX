PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT S_S S_SS__SS

DATASET_TITLE Roundabout, Truck & Semi, 1 Solver
CATEGORY * TS 2020.1 - Multiple Vehicles
TITLE Roundabout, Truck & Semi, 1 Solver <* TS 2020.1 - Multiple Vehicles>

! Echo: Results\Run_68854f0c-f747-4b57-b0bf-4d7fb4f637a7\LastRun_echo.par
! This run was made 10:52 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   175 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      183 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! [D] Option for stopping the run: 0 -> stop when T reaches
                      ! TSTOP; 1 -> stop when T reaches TSTOP or station reaches
                      ! SSTOP; -1 -> run until stopped using VS Commands or
                      ! external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME  0.7400051966 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             20 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       20 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              40 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
N_MIN_DETECTIONS    1 ! Minimum number of detections (used to define detection
                      ! outputs if ADAS sensors are defined before moving objects)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG(1)  0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is', vehicle 1 [I]
OPT_INIT_SPEED(1)   0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is', vehicle 1 [I]
ROLL_MAX_STOP(1)   80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached, vehicle 1
VLOW_STOP(1)       -1 ; km/h ! [D] Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable, vehicle 1

OPT_INIT_CONFIG(2)  0 ! Init. Zo, pitch, roll, and deflections, vehicle 2 [I]
OPT_INIT_SPEED(2)   0 ! Initialize speed variables, vehicle 2 [I]
ROLL_MAX_STOP(2)   80 ; deg ! [D] Maximum allowed roll angle magnitude, vehicle 2
VLOW_STOP(2)     -100 ; km/h ! Minimum allowed absolute speed, vehicle 2

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATIONS
!------------------------------------------------------------------------------------
! N_VEHICLES        2 ! Number of vehicles (lead units) (read-only)
! VEHICLE_UNITS_MAP(1) 1 ! Number of units in vehicle 1 (read-only)
! VEHICLE_UNITS_MAP(2) 2 ! Number of units in vehicle 2 (read-only)
! VEHICLE_LEAD_UNIT(1) 1 ! Lead unit for vehicle 1 (read-only)
! VEHICLE_LEAD_UNIT(2) 2 ! Lead unit for vehicle 2 (read-only)
! VEHICLE_NUNITS    3 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES    7 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 3 ! Number of axles on unit 2 (read-only)
! VEHICLE_AXLE_MAP(3) 2 ! Number of axles on unit 3 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! Unit 1 is the lead unit for vehicle 1
! H_CG_TL(1) 1003.628183 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 1784.79808 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) -0.09266744527 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)        6042 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 3254.7073 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 51687.13456 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 50614.54806 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! Unit 2 is the lead unit for vehicle 2
! H_CG_TL(2) 888.0859516 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 1794.428766 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(2) -0.286510102 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)        8788 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 7797.6823 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 34020.4068 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 31653.21941 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

! Unit 3 is trailer #1 for vehicle 2
! H_CG_TL(3) 2238.313709 ; mm ! CALC -- Height of TL CG, unit 3
! LX_CG_TL(3) 6141.234302 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(3) -0.09435694379 ; mm ! CALC -- Y coordinate of TL CG, unit 3
! M_TL(3)       25958 ; kg ! CALC -- TL mass, unit 3
! IXX_TL(3) 27618.78198 ; kg-m2 ! CALC -- TL roll inertia moment, unit 3
! IYY_TL(3) 299758.9062 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 3
! IZZ_TL(3) 303022.6999 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 3

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

! Unit 1 is the lead unit for vehicle 1
H_CG_SU(1)       1175 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)      1250 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          4455 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)      2283.9 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)     35402.8 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)     34802.6 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)        1626 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(1)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(1)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 2 is the lead unit for vehicle 2
H_CG_SU(2)       1020 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      1385 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          6310 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)        6879 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)       21711 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)       19665 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)         130 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(2)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(2)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(2)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(2)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

! Unit 3 is trailer #1 for vehicle 2
H_H_FRONT(3)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(3)       2500 ; mm ! Height of CG of sprung mass, unladen (SU), unit 3 [I]
LX_CG_SU(3)      5500 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(3)          0 ; mm ! Y coordinate of SU CG, unit 3 [I]
M_SU(3)          6000 ; kg ! Mass of unladen sprung mass (SU), unit 3 [I]
IXX_SU(3)      9953.3 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 3 [I]
IYY_SU(3)      171363 ; kg-m2 ! Pitch inertia for SU, unit 3 [I]
IZZ_SU(3)      179928 ; kg-m2 ! Yaw inertia for SU, unit 3 [I]
IXY_SU(3)           0 ; kg-m2 ! XY product of inertia for SU, unit 3 [I]
IXZ_SU(3)           0 ; kg-m2 ! XZ product of inertia for SU, unit 3 [I]
IYZ_SU(3)           0 ; kg-m2 ! YZ product of inertia for SU, unit 3 [I]

! N_PAYLOADS(3)     1 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL(3) 2349.301561 ; mm ! CALC -- Height of laden sprung mass CG (SL), unit 3
! LX_CG_SL(3) 5876.746097 ; mm ! CALC -- X distance SL CG is behind front hitch
! Y_CG_SL(3)        0 ; mm ! CALC -- Y coord. of laden sprung mass CG, unit 3
! M_SL(3)       24340 ; kg ! CALC -- Mass of laden sprung mass (SL), unit 3
! IXX_SL(3) 22360.80813 ; kg-m2 ! CALC -- Roll inertia for SL, unit 3
! IYY_SL(3) 264756.1564 ; kg-m2 ! CALC -- Pitch inertia for SL, unit 3
! IZZ_SL(3) 273140.3183 ; kg-m2 ! CALC -- Yaw inertia for SL, unit 3
! IXY_SL(3)         0 ; kg-m2 ! CALC -- XY product of inertia for SL, unit 3
! IXZ_SL(3) -452.0953164 ; kg-m2 ! CALC -- XZ product of inertia for SL, unit 3
! IYZ_SL(3)         0 ; kg-m2 ! CALC -- YZ product of inertia for SL, unit 3

HT_SM(3)         2603 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(3)       12496 ; mm ! Reference length of sprung mass (maybe for target)
WID_SM(3)        2440 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(3)       1000 ; mm ! Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             1 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     1 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; Trailer (18,340 kg)
OPT_PL_BODY_ID(1)   3 ! Number of sprung mass where payload is attached [I]
LX_CG_PL(1)      6000 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)       2300 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)         18340 ; kg ! Mass of payload [I]
IXX_PL(1)    12226.67 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)    92082.08 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)    92082.08 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.


! FZH_L(2) 100082.8713 ; N ! CALC -- Static load, laden vehicle, hitch 2
! FZH_UL(2) 26861.69348 ; N ! CALC -- Static load, unladen vehicle, hitch 2
HITCH_DMP_X(2)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 2
HITCH_DMP_Y(2)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 2
HITCH_DMP_Z(2)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 2
HITCH_FRIC_X(2)     0 ; N-m ! [D] Roll friction, hitch 2
HITCH_FRIC_Y(2)     0 ; N-m ! [D] Pitch friction, hitch 2
HITCH_FRIC_Z(2)     0 ; N-m ! [D] Articulation friction, hitch 2
HITCH_FREQ(2)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 2 [I]
HITCH_ZETA(2)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 2 [I]
H_H(2)           1100 ; mm ! Hitch point height (Z coord.), sprung mass 2 [I]
LX_H(2)          3635 ; mm ! X dist. hitch is behind front hitch point [I]
Y_H(2)              0 ; mm ! Y coordinate, hitch point 2 [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)      6.8 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    5000 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -2500 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)      7.3 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)    4300 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)   -2150 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

AREA_AERO(3)        0 ; m2 ! Frontal cross-section area, unit 3
H_REF_AERO(3)       0 ; mm ! Height of aerodynamic reference point, unit 3
L_REF_AERO(3)       0 ; mm ! Aerodynamic reference length, unit 3
X_REF_AERO(3)       0 ; mm ! X coordinate of aerodynamic reference point, unit 3
Y_REF_AERO(3)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 3

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1,1)    510 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1,1)       510 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       510 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
! ISPIN(1,1,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)          10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)          10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1,1)    290 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1,1)    36 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    36 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)       544 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CG_AXLE(1,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(1,2)    530 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(1,2,1)       530 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       530 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(1,2)           215 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(1,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)          20 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)          20 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     5000 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(1,2)    679 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(1,2,1)     0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)     0 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)      1043 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.3489932886 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(1,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Solid-axle suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R3 [I]
H_CG_AXLE(2,1)    510 ; mm ! Z coordinate of axle 3 CG [I]
H_WC(2,1,1)       510 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(2,1,2)       510 ; mm ! Reference Z coordinate of wheel center R3 [I]
IA(2,1)            80 ; kg-m2 ! Yaw and roll moment of inertia, axle 3 [I]
! ISPIN(2,1,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(2,1,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(2,1,1)          10 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(2,1,2)          10 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(2,1)     2030 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(2,1)        0 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_AXLE(2,1)    290 ; kg ! Unsteered mass for axle 3 [I]
M_US_STR(2,1,1)    36 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(2,1,2)    36 ; kg ! Steered mass for wheel R3 [I]
! M_US(2,1)       544 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(2,1) 0.4669117647 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
Y_CG_AXLE(2,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(2,2)    530 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(2,2,1)       530 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(2,2,2)       530 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(2,2)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
! ISPIN(2,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L4 [I]
! ISPIN(2,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R4 [I]
! ISPIN_XXZZ(2,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L4 [I]
! ISPIN_XXZZ(2,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R4 [I]
IW(2,2,1)          20 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(2,2,2)          20 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(2,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(2,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(2,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(2,2)     3000 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(2,2)    603 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(2,2)       967 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(2,2) 0.3764219235 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
Y_CG_AXLE(2,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Solid-axle suspension for axle 3 on unit 2
OPT_JNC_DESIGN(2,3) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
A_CAMBER(2,3,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(2,3,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(2,3,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(2,3,2)        0 ; deg ! Static toe for wheel R5 [I]
H_CG_AXLE(2,3)    530 ; mm ! Z coordinate of axle 5 CG [I]
H_WC(2,3,1)       530 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(2,3,2)       530 ; mm ! Reference Z coordinate of wheel center R5 [I]
IA(2,3)           147 ; kg-m2 ! Yaw and roll moment of inertia, axle 5 [I]
! ISPIN(2,3,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L5 [I]
! ISPIN(2,3,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R5 [I]
! ISPIN_XXZZ(2,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L5 [I]
! ISPIN_XXZZ(2,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R5 [I]
IW(2,3,1)          20 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(2,3,2)          20 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(2,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(2,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(2,3,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(2,3,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(2,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(2,3)     4270 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_AXLE(2,3)    603 ; kg ! Unsteered mass for axle 5 [I]
M_US_STR(2,3,1)     0 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(2,3,2)     0 ; kg ! Steered mass for wheel R5 [I]
! M_US(2,3)       967 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(2,3) 0.3764219235 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
Y_CG_AXLE(2,3)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(2,3)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

! Solid-axle suspension for axle 1 on unit 3
OPT_JNC_DESIGN(3,1) 1 ! Specify JNC_DESIGN explicitly for axle 6? [I]
A_CAMBER(3,1,1)     0 ; deg ! Static camber for wheel L6 [I]
A_CAMBER(3,1,2)     0 ; deg ! Static camber for wheel R6 [I]
A_TOE(3,1,1)        0 ; deg ! Static toe for wheel L6 [I]
A_TOE(3,1,2)        0 ; deg ! Static toe for wheel R6 [I]
H_CG_AXLE(3,1)    530 ; mm ! Z coordinate of axle 6 CG [I]
H_WC(3,1,1)       530 ; mm ! Reference Z coordinate of wheel center L6 [I]
H_WC(3,1,2)       530 ; mm ! Reference Z coordinate of wheel center R6 [I]
IA(3,1)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 6 [I]
! ISPIN(3,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L6 [I]
! ISPIN(3,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R6 [I]
! ISPIN_XXZZ(3,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L6 [I]
! ISPIN_XXZZ(3,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R6 [I]
IW(3,1,1)          20 ; kg-m2 ! Spin inertia for wheel L6 [I]
IW(3,1,2)          20 ; kg-m2 ! Spin inertia for wheel R6 [I]
IW_XXZZ(3,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L6 [I]
IW_XXZZ(3,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R6 [I]
JNC_DESIGN(3,1,1)   0 ; mm ! Jounce when center of wheel L6 is at H_WC [I]
JNC_DESIGN(3,1,2)   0 ; mm ! Jounce when center of wheel R6 is at H_WC [I]
L_TRACK(3,1)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 6 [I]
LX_AXLE(3,1)     9500 ; mm ! X dist. axle 6 is behind the sprung-mass origin [I]
M_US_AXLE(3,1)    445 ; kg ! Unsteered mass for axle 6 [I]
M_US_STR(3,1,1)     0 ; kg ! Steered mass for wheel L6 [I]
M_US_STR(3,1,2)     0 ; kg ! Steered mass for wheel R6 [I]
! M_US(3,1)       809 ; kg ! CALC -- Total unsprung mass for axle 6
! R_US_STR(3,1) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 6
Y_CG_AXLE(3,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 6 [I]
Y_CL_SUSP(3,1)      0 ; mm ! Y coord. for suspension centerline, axle 6 [I]

! Solid-axle suspension for axle 2 on unit 3
OPT_JNC_DESIGN(3,2) 1 ! Specify JNC_DESIGN explicitly for axle 7? [I]
A_CAMBER(3,2,1)     0 ; deg ! Static camber for wheel L7 [I]
A_CAMBER(3,2,2)     0 ; deg ! Static camber for wheel R7 [I]
A_TOE(3,2,1)        0 ; deg ! Static toe for wheel L7 [I]
A_TOE(3,2,2)        0 ; deg ! Static toe for wheel R7 [I]
H_CG_AXLE(3,2)    530 ; mm ! Z coordinate of axle 7 CG [I]
H_WC(3,2,1)       530 ; mm ! Reference Z coordinate of wheel center L7 [I]
H_WC(3,2,2)       530 ; mm ! Reference Z coordinate of wheel center R7 [I]
IA(3,2)            64 ; kg-m2 ! Yaw and roll moment of inertia, axle 7 [I]
! ISPIN(3,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L7 [I]
! ISPIN(3,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R7 [I]
! ISPIN_XXZZ(3,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L7 [I]
! ISPIN_XXZZ(3,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R7 [I]
IW(3,2,1)          20 ; kg-m2 ! Spin inertia for wheel L7 [I]
IW(3,2,2)          20 ; kg-m2 ! Spin inertia for wheel R7 [I]
IW_XXZZ(3,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L7 [I]
IW_XXZZ(3,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R7 [I]
JNC_DESIGN(3,2,1)   0 ; mm ! Jounce when center of wheel L7 is at H_WC [I]
JNC_DESIGN(3,2,2)   0 ; mm ! Jounce when center of wheel R7 is at H_WC [I]
L_TRACK(3,2)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 7 [I]
LX_AXLE(3,2)    10740 ; mm ! X dist. axle 7 is behind the sprung-mass origin [I]
M_US_AXLE(3,2)    445 ; kg ! Unsteered mass for axle 7 [I]
M_US_STR(3,2,1)     0 ; kg ! Steered mass for wheel L7 [I]
M_US_STR(3,2,2)     0 ; kg ! Steered mass for wheel R7 [I]
! M_US(3,2)       809 ; kg ! CALC -- Total unsprung mass for axle 7
! R_US_STR(3,2) 0.4499381953 ; - ! CALC -- Steered fraction of unsprung mass, axle 7
Y_CG_AXLE(3,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 7 [I]
Y_CL_SUSP(3,2)      0 ; mm ! Y coord. for suspension centerline, axle 7 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1,1) 65.53293862 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 65.53293862 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1,1)      0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,1,2)      0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1,1)      0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,1,2)      0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1,1) 32766.46931 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 32766.46931 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 16383.23466 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 16383.23466 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 38101.28691 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 38101.28691 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 19050.64346 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 10228.09413 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1,1)   1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1,1)  890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1,1)  890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1,1)    890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(1,2,1) 7.801540313 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 7.801540313 ; mm ! CALC -- Compression at design load, spring R2
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(1,2,1)      0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(1,2,2)      0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(1,2,1)      0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(1,2,2)      0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(1,2) 10922.15644 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 10922.15644 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 5461.078219 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 5461.078219 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 21150.49239 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 21150.49239 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 10575.24619 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 7608.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(1,2)   1000 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(1,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(1,2) 1000 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(1,2) 1000 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(1,2)   1000 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(1,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Solid-axle suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R3 [I]
! CMP_DESIGN(2,1,1) 76.6051793 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(2,1,2) 76.6051793 ; mm ! CALC -- Compression at design load, spring R3
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
DMP_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L3 [I]
DMP_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R3 [I]
DMP_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L3 [I]
DMP_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R3 [I]
DMP_LEN(2,1,1)      0 ; mm ! [D] Length at design for damper L3 [I]
DMP_LEN(2,1,2)      0 ; mm ! [D] Length at design for damper R3 [I]
SPG_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L3 [I]
SPG_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R3 [I]
SPG_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L3 [I]
SPG_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R3 [I]
SPG_LEN(2,1,1)      0 ; mm ! [D] Length at design for spring L3 [I]
SPG_LEN(2,1,2)      0 ; mm ! [D] Length at design for spring R3 [I]
! FSA_DESIGN(2,1) 38302.58965 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(2,1) 38302.58965 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(2,1,1) 19151.29482 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(2,1,2) 19151.29482 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(2,1) 43637.40725 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(2,1) 43637.40725 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(2,1,1) 21818.70362 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(2,1,2) 21818.70362 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(2,1) 2228.094126 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_DAMPERS(2,1)   1100 ; mm ! Distance between dampers on axle 3 [I]
Y_DAMPERS(2,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 3 [I]
L_JNC_STOPS(2,1)  890 ; mm ! Distance between jounce stops on axle 3 [I]
L_REB_STOPS(2,1)  890 ; mm ! Distance between rebound stops on axle 3 [I]
L_SPRINGS(2,1)    890 ; mm ! Distance between springs on axle 3 [I]
Y_SPRINGS(2,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 3 [I]
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R4 [I]
! CMP_DESIGN(2,2,1) 8.420489947 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(2,2,2) 8.420489947 ; mm ! CALC -- Compression at design load, spring R4
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(2,2,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(2,2,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(2,2,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(2,2,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(2,2) 11788.68593 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(2,2) 61830.12156 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(2,2,1) 30915.06078 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(2,2,2) 30915.06078 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(2,2) 71313.15211 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(2,2) 21271.71648 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(2,2,1) 35656.57606 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(2,2,2) 35656.57606 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(2,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(2,2)   1000 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(2,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(2,2) 1000 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(2,2) 1000 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(2,2)   1000 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(2,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(2,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(2,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(2,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(2,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Solid-axle suspension for axle 3 on unit 2
OPT_EXT_SP(2,3,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,3,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,3,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(2,3,2)   0 ; mm ! Initial compression of external spring R5 [I]
! CMP_DESIGN(2,3,1) 8.420489947 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(2,3,2) 8.420489947 ; mm ! CALC -- Compression at design load, spring R5
DAUX(2,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
DMP_AX(2,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L5 [I]
DMP_AX(2,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R5 [I]
DMP_AY(2,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L5 [I]
DMP_AY(2,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R5 [I]
DMP_LEN(2,3,1)      0 ; mm ! [D] Length at design for damper L5 [I]
DMP_LEN(2,3,2)      0 ; mm ! [D] Length at design for damper R5 [I]
SPG_AX(2,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L5 [I]
SPG_AX(2,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R5 [I]
SPG_AY(2,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L5 [I]
SPG_AY(2,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R5 [I]
SPG_LEN(2,3,1)      0 ; mm ! [D] Length at design for spring L5 [I]
SPG_LEN(2,3,2)      0 ; mm ! [D] Length at design for spring R5 [I]
! FSA_DESIGN(2,3) 11788.68593 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(2,3) 61830.12156 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(2,3,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(2,3,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(2,3,1) 30915.06078 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(2,3,2) 30915.06078 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(2,3) 71313.15211 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(2,3) 21271.71648 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(2,3,1) 35656.57606 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(2,3,2) 35656.57606 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(2,3) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_DAMPERS(2,3)   1000 ; mm ! Distance between dampers on axle 5 [I]
Y_DAMPERS(2,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 5 [I]
L_JNC_STOPS(2,3) 1000 ; mm ! Distance between jounce stops on axle 5 [I]
L_REB_STOPS(2,3) 1000 ; mm ! Distance between rebound stops on axle 5 [I]
L_SPRINGS(2,3)   1000 ; mm ! Distance between springs on axle 5 [I]
Y_SPRINGS(2,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 5 [I]
L_SPG_ADJ(2,3,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(2,3,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(2,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(2,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(2,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(2,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

! Solid-axle suspension for axle 1 on unit 3
OPT_EXT_SP(3,1,1)   0 ! Disable built-in spring L6? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,1,2)   0 ! Disable built-in spring R6? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,1,1)   0 ; mm ! Initial compression of external spring L6 [I]
CMP_OFFSET(3,1,2)   0 ; mm ! Initial compression of external spring R6 [I]
! CMP_DESIGN(3,1,1) 11.42078804 ; mm ! CALC -- Compression at design load, spring L6
! CMP_DESIGN(3,1,2) 11.42078804 ; mm ! CALC -- Compression at design load, spring R6
DAUX(3,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 6
DMP_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L6 [I]
DMP_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R6 [I]
DMP_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L6 [I]
DMP_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R6 [I]
DMP_LEN(3,1,1)      0 ; mm ! [D] Length at design for damper L6 [I]
DMP_LEN(3,1,2)      0 ; mm ! [D] Length at design for damper R6 [I]
SPG_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L6 [I]
SPG_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R6 [I]
SPG_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L6 [I]
SPG_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R6 [I]
SPG_LEN(3,1,1)      0 ; mm ! [D] Length at design for spring L6 [I]
SPG_LEN(3,1,2)      0 ; mm ! [D] Length at design for spring R6 [I]
! FSA_DESIGN(3,1) 15989.10326 ; N ! CALC -- Design Load (susp., unladen), axle 6
! FSA_L(3,1) 69305.49486 ; N ! CALC -- Static suspension load, laden, axle  6
FS_OFFSET(3,1,1)    0 ; N ! Force offset subtracted from built-in spring L6 [I]
FS_OFFSET(3,1,2)    0 ; N ! Force offset subtracted from built-in spring R6 [I]
! FS_STATIC(3,1,1) 34652.74743 ; N ! CALC -- Static spring force, laden, spring L6
! FS_STATIC(3,1,2) 34652.74743 ; N ! CALC -- Static spring force, laden, spring R6
! FZA_L(3,1) 77239.07471 ; N ! CALC -- Static ground load, laden, axle 6
! FZA_UL(3,1) 23922.68311 ; N ! CALC -- Static ground load, unladen, axle 6
! FZ_STATIC(3,1,1) 38619.53736 ; N ! CALC -- Static ground force, laden, wheel L6
! FZ_STATIC(3,1,2) 38619.53736 ; N ! CALC -- Static ground force, laden, wheel R6
! KA_ROLL(3,1) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 6
L_DAMPERS(3,1)   1000 ; mm ! Distance between dampers on axle 6 [I]
Y_DAMPERS(3,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 6 [I]
L_JNC_STOPS(3,1) 1000 ; mm ! Distance between jounce stops on axle 6 [I]
L_REB_STOPS(3,1) 1000 ; mm ! Distance between rebound stops on axle 6 [I]
L_SPRINGS(3,1)   1000 ; mm ! Distance between springs on axle 6 [I]
Y_SPRINGS(3,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 6 [I]
L_SPG_ADJ(3,1,1)    0 ; mm ! Upper seat height increase for spring L6 [I]
L_SPG_ADJ(3,1,2)    0 ; mm ! Upper seat height increase for spring R6 [I]
SPRING_COMP_BETA(3,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L6
SPRING_COMP_BETA(3,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R6
SPRING_EXT_BETA(3,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L6
SPRING_EXT_BETA(3,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R6

! Solid-axle suspension for axle 2 on unit 3
OPT_EXT_SP(3,2,1)   0 ! Disable built-in spring L7? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,2,2)   0 ! Disable built-in spring R7? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,2,1)   0 ; mm ! Initial compression of external spring L7 [I]
CMP_OFFSET(3,2,2)   0 ; mm ! Initial compression of external spring R7 [I]
! CMP_DESIGN(3,2,1) 11.42078804 ; mm ! CALC -- Compression at design load, spring L7
! CMP_DESIGN(3,2,2) 11.42078804 ; mm ! CALC -- Compression at design load, spring R7
DAUX(3,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 7
DMP_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L7 [I]
DMP_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R7 [I]
DMP_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L7 [I]
DMP_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R7 [I]
DMP_LEN(3,2,1)      0 ; mm ! [D] Length at design for damper L7 [I]
DMP_LEN(3,2,2)      0 ; mm ! [D] Length at design for damper R7 [I]
SPG_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L7 [I]
SPG_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R7 [I]
SPG_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L7 [I]
SPG_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R7 [I]
SPG_LEN(3,2,1)      0 ; mm ! [D] Length at design for spring L7 [I]
SPG_LEN(3,2,2)      0 ; mm ! [D] Length at design for spring R7 [I]
! FSA_DESIGN(3,2) 15989.10326 ; N ! CALC -- Design Load (susp., unladen), axle 7
! FSA_L(3,2) 69305.49486 ; N ! CALC -- Static suspension load, laden, axle  7
FS_OFFSET(3,2,1)    0 ; N ! Force offset subtracted from built-in spring L7 [I]
FS_OFFSET(3,2,2)    0 ; N ! Force offset subtracted from built-in spring R7 [I]
! FS_STATIC(3,2,1) 34652.74743 ; N ! CALC -- Static spring force, laden, spring L7
! FS_STATIC(3,2,2) 34652.74743 ; N ! CALC -- Static spring force, laden, spring R7
! FZA_L(3,2) 77239.07471 ; N ! CALC -- Static ground load, laden, axle 7
! FZA_UL(3,2) 23922.68311 ; N ! CALC -- Static ground load, unladen, axle 7
! FZ_STATIC(3,2,1) 38619.53736 ; N ! CALC -- Static ground force, laden, wheel L7
! FZ_STATIC(3,2,2) 38619.53736 ; N ! CALC -- Static ground force, laden, wheel R7
! KA_ROLL(3,2) 9108.652382 ; N-m/deg ! CALC -- Total roll stiffness, axle 7
L_DAMPERS(3,2)   1000 ; mm ! Distance between dampers on axle 7 [I]
Y_DAMPERS(3,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 7 [I]
L_JNC_STOPS(3,2) 1000 ; mm ! Distance between jounce stops on axle 7 [I]
L_REB_STOPS(3,2) 1000 ; mm ! Distance between rebound stops on axle 7 [I]
L_SPRINGS(3,2)   1000 ; mm ! Distance between springs on axle 7 [I]
Y_SPRINGS(3,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 7 [I]
L_SPG_ADJ(3,2,1)    0 ; mm ! Upper seat height increase for spring L7 [I]
L_SPG_ADJ(3,2,2)    0 ; mm ! Upper seat height increase for spring R7 [I]
SPRING_COMP_BETA(3,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L7
SPRING_COMP_BETA(3,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R7
SPRING_EXT_BETA(3,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L7
SPRING_EXT_BETA(3,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R7

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC(1)    0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details), vehicle 1 [I]
OPT_POWER(1)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 1 [I]
OPT_STEER_DEF(1)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 1
BETA_COL(1)         2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(1)            0 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 1
HYS_COL(1)          0 ; N-m ! [D] Steering column friction torque, vehicle 1
A_STR_STOP_L(1)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(1)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(1)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 1
K_STR_STOP_R(1)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 1

OPT_M_SW_CALC(2)    0 ! [D] Option for calculating steering wheel torque when
                      ! OPT_STR_BY_TRQ = 0; 0 -> table, 1 -> model, vehicle 2 [I]
OPT_POWER(2)        0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist, vehicle 2 [I]
OPT_STEER_DEF(2)    1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis, vehicle 2
BETA_COL(2)         2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL(2)            0 ; N-m-s/deg ! [D] Steering column viscous damping, vehicle 2
HYS_COL(2)          0 ; N-m ! [D] Steering column friction torque, vehicle 2
A_STR_STOP_L(2)   -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R(2)    45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L(2)     0 ; N-m/deg ! [D] Steering stop stiffness (Left), vehicle 2
K_STR_STOP_R(2)     0 ; N-m/deg ! [D] Steering stop stiffness (Right), vehicle 2

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  0 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(2,1)         1 ! Compliant steer option, axle 3: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(2,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(2,1,1)   5.2 ; deg ! Caster for wheel L3 [I]
A_CASTER(2,1,2)   5.2 ; deg ! Caster for wheel R3 [I]
A_KPI(2,1,1)      7.2 ; deg ! Kingpin inclination for wheel L3 [I]
A_KPI(2,1,2)      7.2 ; deg ! Kingpin inclination for wheel R3 [I]
A_MZ_BETA(2,1,1)  0.1 ; deg ! Ref. hysteresis angle for L3 parking steer torque
A_MZ_BETA(2,1,2)  0.1 ; deg ! Ref. hysteresis angle for R3 parking steer torque
BETA_GEAR(2,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 3
CS_MZ_ROD(2,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 3
CS_MZ_SHAFT(2,1) 0.0001 ; deg/N/m ! Compliance: steering shaft, axle 3
C_WRAP(2,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 3
D_GEAR(2,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 3
HYS_GEAR(2,1)       0 ; N-m ! Steering gear hysteresis, axle 3
L_KPO(2,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L3 [I]
L_KPO(2,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R3 [I]
R_BMP_STR(2,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 3
R_WRAP_STR(2,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 3
X_KPO(2,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L3 [I]
X_KPO(2,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R3 [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,3)  1 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,1)  1 ! Steer model option for axle 6: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,2)  1 ! Steer model option for axle 7: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)       310 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(2,1)         0 ; mm ! Dual-tire spacing for axle 3 [I]
L_DUAL(2,2)       310 ; mm ! Dual-tire spacing for axle 4 [I]
L_DUAL(2,3)       310 ; mm ! Dual-tire spacing for axle 5 [I]
L_DUAL(3,1)       310 ; mm ! Dual-tire spacing for axle 6 [I]
L_DUAL(3,2)       310 ; mm ! Dual-tire spacing for axle 7 [I]

OPT_TIRE_MODEL(1,1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 7 -> built-in Pacejka
                          ! 5.2; 8 -> TNO Delft-Tyre; 9 -> COSIN FTire; 10 ->
                          ! third-party STI tire model [I]
OPT_TIRE_COMB(1,1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                         ! theoretical combined slip; 1 -> use transition between
                         ! the normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1) 30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)    91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1,1)  0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1,1)      1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1,1) 2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                       ! RR_v*Vx)
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1) 30000 ; N ! Reference vertical force
IT(1,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)    91 ; kg ! Mass of tire R1i
MU_REF_X(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(1,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1) 30000 ; N ! Reference vertical force
IT(1,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)    91 ; kg ! Mass of tire L2i
MU_REF_X(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(1,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(1,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,1,2) 1 ! Internal tire shear-model option, L2o [I]
OPT_TIRE_COMB(1,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L2o [I]
FZ_REF(1,2,1,2) 30000 ; N ! Reference vertical force
IT(1,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L2o [I]
IT_XXZZ(1,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L2o [I]
M_TIRE(1,2,1,2)    91 ; kg ! Mass of tire L2o
MU_REF_X(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2o
MU_REF_Y(1,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2o
R0(1,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L2o [I]
RR_C(1,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(1,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1) 30000 ; N ! Reference vertical force
IT(1,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)    91 ; kg ! Mass of tire R2i
MU_REF_X(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(1,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(1,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2,2,2) 1 ! Internal tire shear-model option, R2o [I]
OPT_TIRE_COMB(1,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R2o [I]
FZ_REF(1,2,2,2) 30000 ; N ! Reference vertical force
IT(1,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R2o [I]
IT_XXZZ(1,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R2o [I]
M_TIRE(1,2,2,2)    91 ; kg ! Mass of tire R2o
MU_REF_X(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2o
MU_REF_Y(1,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2o
R0(1,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R2o [I]
RR_C(1,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,1) 1 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_COMB(2,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(2,1,1,1) 30000 ; N ! Reference vertical force
IT(2,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(2,1,1,1)    91 ; kg ! Mass of tire L3i
MU_REF_X(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3i
MU_REF_Y(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3i
R0(2,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L3i [I]
RR_C(2,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,1,2,1) 1 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_COMB(2,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(2,1,2,1) 30000 ; N ! Reference vertical force
IT(2,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(2,1,2,1)    91 ; kg ! Mass of tire R3i
MU_REF_X(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3i
MU_REF_Y(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3i
R0(2,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R3i [I]
RR_C(2,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(2,2,1,1) 1 ! Internal tire shear-model option, L4i [I]
OPT_TIRE_COMB(2,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L4i [I]
FZ_REF(2,2,1,1) 30000 ; N ! Reference vertical force
IT(2,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L4i [I]
IT_XXZZ(2,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L4i [I]
M_TIRE(2,2,1,1)    91 ; kg ! Mass of tire L4i
MU_REF_X(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4i
MU_REF_Y(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4i
R0(2,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4i [I]
RR_C(2,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,2) 1 ! Internal tire shear-model option, L4o [I]
OPT_TIRE_COMB(2,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L4o [I]
FZ_REF(2,2,1,2) 30000 ; N ! Reference vertical force
IT(2,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L4o [I]
IT_XXZZ(2,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L4o [I]
M_TIRE(2,2,1,2)    91 ; kg ! Mass of tire L4o
MU_REF_X(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4o
MU_REF_Y(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4o
R0(2,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4o [I]
RR_C(2,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,1) 1 ! Internal tire shear-model option, R4i [I]
OPT_TIRE_COMB(2,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R4i [I]
FZ_REF(2,2,2,1) 30000 ; N ! Reference vertical force
IT(2,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R4i [I]
IT_XXZZ(2,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R4i [I]
M_TIRE(2,2,2,1)    91 ; kg ! Mass of tire R4i
MU_REF_X(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4i
MU_REF_Y(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4i
R0(2,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4i [I]
RR_C(2,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,2) 1 ! Internal tire shear-model option, R4o [I]
OPT_TIRE_COMB(2,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R4o [I]
FZ_REF(2,2,2,2) 30000 ; N ! Reference vertical force
IT(2,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R4o [I]
IT_XXZZ(2,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R4o [I]
M_TIRE(2,2,2,2)    91 ; kg ! Mass of tire R4o
MU_REF_X(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4o
MU_REF_Y(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4o
R0(2,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4o [I]
RR_C(2,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,1,1) 1 ! Internal tire shear-model option, L5i [I]
OPT_TIRE_COMB(2,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L5i [I]
FZ_REF(2,3,1,1) 30000 ; N ! Reference vertical force
IT(2,3,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L5i [I]
IT_XXZZ(2,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L5i [I]
M_TIRE(2,3,1,1)    91 ; kg ! Mass of tire L5i
MU_REF_X(2,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5i
MU_REF_Y(2,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5i
R0(2,3,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5i [I]
RR_C(2,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,1,2) 1 ! Internal tire shear-model option, L5o [I]
OPT_TIRE_COMB(2,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L5o [I]
FZ_REF(2,3,1,2) 30000 ; N ! Reference vertical force
IT(2,3,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L5o [I]
IT_XXZZ(2,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L5o [I]
M_TIRE(2,3,1,2)    91 ; kg ! Mass of tire L5o
MU_REF_X(2,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5o
MU_REF_Y(2,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5o
R0(2,3,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5o [I]
RR_C(2,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,2,1) 1 ! Internal tire shear-model option, R5i [I]
OPT_TIRE_COMB(2,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R5i [I]
FZ_REF(2,3,2,1) 30000 ; N ! Reference vertical force
IT(2,3,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R5i [I]
IT_XXZZ(2,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R5i [I]
M_TIRE(2,3,2,1)    91 ; kg ! Mass of tire R5i
MU_REF_X(2,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5i
MU_REF_Y(2,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5i
R0(2,3,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5i [I]
RR_C(2,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,2,2) 1 ! Internal tire shear-model option, R5o [I]
OPT_TIRE_COMB(2,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R5o [I]
FZ_REF(2,3,2,2) 30000 ; N ! Reference vertical force
IT(2,3,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R5o [I]
IT_XXZZ(2,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R5o [I]
M_TIRE(2,3,2,2)    91 ; kg ! Mass of tire R5o
MU_REF_X(2,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5o
MU_REF_Y(2,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5o
R0(2,3,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5o [I]
RR_C(2,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1,1) 1 ! Internal tire shear-model option, L6i [I]
OPT_TIRE_COMB(3,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L6i [I]
FZ_REF(3,1,1,1) 30000 ; N ! Reference vertical force
IT(3,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L6i [I]
IT_XXZZ(3,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L6i [I]
M_TIRE(3,1,1,1)    91 ; kg ! Mass of tire L6i
MU_REF_X(3,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6i
MU_REF_Y(3,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6i
R0(3,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L6i [I]
RR_C(3,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1,2) 1 ! Internal tire shear-model option, L6o [I]
OPT_TIRE_COMB(3,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L6o [I]
FZ_REF(3,1,1,2) 30000 ; N ! Reference vertical force
IT(3,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L6o [I]
IT_XXZZ(3,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L6o [I]
M_TIRE(3,1,1,2)    91 ; kg ! Mass of tire L6o
MU_REF_X(3,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6o
MU_REF_Y(3,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6o
R0(3,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L6o [I]
RR_C(3,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,2,1) 1 ! Internal tire shear-model option, R6i [I]
OPT_TIRE_COMB(3,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R6i [I]
FZ_REF(3,1,2,1) 30000 ; N ! Reference vertical force
IT(3,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R6i [I]
IT_XXZZ(3,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R6i [I]
M_TIRE(3,1,2,1)    91 ; kg ! Mass of tire R6i
MU_REF_X(3,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6i
MU_REF_Y(3,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6i
R0(3,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R6i [I]
RR_C(3,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,2,2) 1 ! Internal tire shear-model option, R6o [I]
OPT_TIRE_COMB(3,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R6o [I]
FZ_REF(3,1,2,2) 30000 ; N ! Reference vertical force
IT(3,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R6o [I]
IT_XXZZ(3,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R6o [I]
M_TIRE(3,1,2,2)    91 ; kg ! Mass of tire R6o
MU_REF_X(3,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6o
MU_REF_Y(3,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6o
R0(3,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R6o [I]
RR_C(3,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,1,1) 1 ! Internal tire shear-model option, L7i [I]
OPT_TIRE_COMB(3,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L7i [I]
FZ_REF(3,2,1,1) 30000 ; N ! Reference vertical force
IT(3,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L7i [I]
IT_XXZZ(3,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L7i [I]
M_TIRE(3,2,1,1)    91 ; kg ! Mass of tire L7i
MU_REF_X(3,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7i
MU_REF_Y(3,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7i
R0(3,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L7i [I]
RR_C(3,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,1,2) 1 ! Internal tire shear-model option, L7o [I]
OPT_TIRE_COMB(3,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L7o [I]
FZ_REF(3,2,1,2) 30000 ; N ! Reference vertical force
IT(3,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L7o [I]
IT_XXZZ(3,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L7o [I]
M_TIRE(3,2,1,2)    91 ; kg ! Mass of tire L7o
MU_REF_X(3,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7o
MU_REF_Y(3,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7o
R0(3,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L7o [I]
RR_C(3,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2,1) 1 ! Internal tire shear-model option, R7i [I]
OPT_TIRE_COMB(3,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R7i [I]
FZ_REF(3,2,2,1) 30000 ; N ! Reference vertical force
IT(3,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R7i [I]
IT_XXZZ(3,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R7i [I]
M_TIRE(3,2,2,1)    91 ; kg ! Mass of tire R7i
MU_REF_X(3,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7i
MU_REF_Y(3,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7i
R0(3,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R7i [I]
RR_C(3,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2,2) 1 ! Internal tire shear-model option, R7o [I]
OPT_TIRE_COMB(3,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R7o [I]
FZ_REF(3,2,2,2) 30000 ; N ! Reference vertical force
IT(3,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R7o [I]
IT_XXZZ(3,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R7o [I]
M_TIRE(3,2,2,2)    91 ; kg ! Mass of tire R7o
MU_REF_X(3,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7o
MU_REF_Y(3,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7o
R0(3,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R7o [I]
RR_C(3,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL(1)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 1

OPT_BK_PEDAL(2)     0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost, vehicle 2

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1)  2 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)     0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)      0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2)  2 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)     0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)      0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1)  2 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)     0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)      0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2)  2 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)     0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)      0 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1)  1 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(2,1,1)      0.3 ; s ! Time constant for brake actuator L3
TLAG_BK(2,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2)  1 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(2,1,2)      0.3 ; s ! Time constant for brake actuator R3
TLAG_BK(2,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1)  2 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(2,2,1)      0.3 ; s ! Time constant for brake actuator L4
TLAG_BK(2,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2)  2 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(2,2,2)      0.3 ; s ! Time constant for brake actuator R4
TLAG_BK(2,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(2,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,3,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,3,1)  2 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(2,3,1)      0.3 ; s ! Time constant for brake actuator L5
TLAG_BK(2,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(2,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,3,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,3,2)  2 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(2,3,2)      0.3 ; s ! Time constant for brake actuator R5
TLAG_BK(2,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R5 [I]

OPT_BK_DYN(3,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,1) 0 ! [D] Brake L6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,1)  2 ; N-m ! Bearing/brake friction, wheel L6
TC_BK(3,1,1)      0.3 ; s ! Time constant for brake actuator L6
TLAG_BK(3,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L6 [I]

OPT_BK_DYN(3,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,2) 0 ! [D] Brake R6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,2)  2 ; N-m ! Bearing/brake friction, wheel R6
TC_BK(3,1,2)      0.3 ; s ! Time constant for brake actuator R6
TLAG_BK(3,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R6 [I]

OPT_BK_DYN(3,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,1) 0 ! [D] Brake L7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,1)  2 ; N-m ! Bearing/brake friction, wheel L7
TC_BK(3,2,1)      0.3 ; s ! Time constant for brake actuator L7
TLAG_BK(3,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L7 [I]

OPT_BK_DYN(3,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,2) 0 ! [D] Brake R7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,2)  2 ; N-m ! Bearing/brake friction, wheel R7
TC_BK(3,2,2)      0.3 ; s ! Time constant for brake actuator R7
TLAG_BK(3,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R7 [I]

!------------------------------------------------------------------------------------
! TANDEM SUSPENSIONS
!------------------------------------------------------------------------------------
TANDEM_NAME(2,1)    1 ! [D] Tandem in unit 2 that connects axles 4 & 5
CFZ_MY_TAND(2,1)    0 ; 1/m ! Coefficient: Load transfer to front axle of this
                      ! tandem per unit of total wheel-spin torque applied to the
                      ! four wheels of this tandem
R_TAND_TRAIL_STATIC(2,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(2,1)     0.5 ; - ! Ratio: fraction of dynamic suspension load shared by the
                      ! other axle of this tandem; 0 -> no sharing; 1/2 -> full
                      ! sharing [I]

TANDEM_NAME(3,1)    2 ! [D] Tandem in unit 3 that connects axles 6 & 7
CFZ_MY_TAND(3,1)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TAND_TRAIL_STATIC(3,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(3,1)     0.5 ; - ! Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT(1)           2 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise, vehicle
                      ! 1
OPT_PT(2)           3 ! Powertrain type, vehicle 2
R_DRIVE_SC(1,1)     0 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 1 [I]
R_DRIVE_SC(1,2)     1 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 1 [I]
R_DRIVE_SC(2,1)     0 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 2 [I]
R_DRIVE_SC(2,2)   0.5 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 2 [I]
R_DRIVE_SC(2,3)   0.5 ; - ! Ratio: [axle drive torque]/[total drive torque], vehicle
                      ! 2 [I]

OPT_HEV(1)          0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric, vehicle 1
R_MDRIVE(1)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 1 [I]
VLOW_IW(1)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 1

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 1 [I]
OPT_LOCKED_DIFF(1,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 1 [I]
LOCKED_DIFF_DAMP(1,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 1 [I]
LOCKED_DIFF_K(1,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 1 [I]
R_EFF_F_DIFF(1,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 1
                       ! [I]
R_EFF_R_DIFF(1,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 1
                       ! [I]
R_GEAR_DIFF(1,2)    5 ; - ! Gear ratio of 2nd drive axle diff, vehicle 1 [I]
IDS(1,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 1 [I]
IHS_L(1,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 1 [I]
IHS_R(1,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 1 [I]
OPT_CLUTCH_DIFF(1,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 1 [I]
OPT_TWIN_CLUTCH(1,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 1 [I]

OPT_HEV(2)          0 ! Propulsion type, vehicle 2
R_MDRIVE(2)         1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect., vehicle 2 [I]
VLOW_IW(2)          0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable,
                      ! vehicle 2

OPT_DIFF_INTERNAL(2,1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,1) 0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                          ! diff, vehicle 2 [I]
LOCKED_DIFF_K(2,1) 80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff, vehicle 2 [I]
R_EFF_F_DIFF(2,1) 0.99 ; - ! Forward efficiency of 1st drive axle diff, vehicle 2
                       ! [I]
R_EFF_R_DIFF(2,1) 0.99 ; - ! Reverse efficiency of 1st drive axle diff, vehicle 2
                       ! [I]
R_GEAR_DIFF(2,1)  4.4 ; - ! Gear ratio of 1st drive axle diff, vehicle 2 [I]
IDS(2,1)        0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft,
                      ! vehicle 2 [I]
IHS_L(2,1)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle
                      ! diff, vehicle 2 [I]
IHS_R(2,1)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,1) 0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]
OPT_TWIN_CLUTCH(2,1) 0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]

OPT_DIFF_INTERNAL(2,2) 1 ! 2nd drive axle diff model: 1 -> internal, 0 -> external,
                         ! vehicle 2 [I]
OPT_LOCKED_DIFF(2,2) 0 ! Is the 2nd drive axle diff locked? 0 -> no, 1 -> yes,
                       ! vehicle 2 [I]
LOCKED_DIFF_DAMP(2,2) 0.8 ; N-m-s/deg ! Torsional damping for locked 2nd drive axle
                          ! diff, vehicle 2 [I]
LOCKED_DIFF_K(2,2) 80 ; N-m/deg ! Torsional spring rate for locked 2nd drive axle
                      ! diff, vehicle 2 [I]
R_EFF_F_DIFF(2,2) 0.99 ; - ! Forward efficiency of 2nd drive axle diff, vehicle 2
                       ! [I]
R_EFF_R_DIFF(2,2) 0.99 ; - ! Reverse efficiency of 2nd drive axle diff, vehicle 2
                       ! [I]
R_GEAR_DIFF(2,2)  4.4 ; - ! Gear ratio of 2nd drive axle diff, vehicle 2 [I]
IDS(2,2)        0.013 ; kg-m2 ! Spin inertia of 2nd drive axle diff input shaft,
                      ! vehicle 2 [I]
IHS_L(2,2)      0.009 ; kg-m2 ! Spin inertia of left half shaft, 2nd drive axle
                      ! diff, vehicle 2 [I]
IHS_R(2,2)      0.009 ; kg-m2 ! Spin inertia of right half shaft, 2nd drive axle
                      ! diff, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,2) 0 ! [D] Clutch control for 2nd drive axle diff: 0 -> table
                       ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]
OPT_TWIN_CLUTCH(2,2) 0 ! [D] Twin clutches on 2nd drive axle diff? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]

OPT_DIFF_INTERNAL(2,3) 1 ! Inter-axle diff for axles 1,2 model: 1 -> internal, 0 ->
                         ! external, vehicle 2 [I]
OPT_LOCKED_DIFF(2,3) 0 ! Is the inter-axle diff for axles 1,2 locked? 0 -> no, 1 ->
                       ! yes, vehicle 2 [I]
R_REAR_BIAS(2,3)  0.5 ; - ! Fraction: transfer case torque on the inter-axle diff
                      ! for axles 1,2, vehicle 2 [I]
LOCKED_DIFF_DAMP(2,3) 0.8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff
                          ! for axles 1,2, vehicle 2 [I]
LOCKED_DIFF_K(2,3) 80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for axles 1,2, vehicle 2 [I]
R_EFF_F_DIFF(2,3) 0.99 ; - ! Forward efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 2 [I]
R_EFF_R_DIFF(2,3) 0.99 ; - ! Reverse efficiency of inter-axle diff for axles 1,2,
                       ! vehicle 2 [I]
R_GEAR_DIFF(2,3)    1 ; - ! Gear ratio of inter-axle diff for axles 1,2, vehicle 2
                      ! [I]
IDS(2,3)            0 ; kg-m2 ! [D] Spin inertia of inter-axle diff for axles 1,2
                      ! input shaft, vehicle 2 [I]
OPT_CLUTCH_DIFF(2,3) 0 ! [D] Clutch control for inter-axle diff for axles 1,2: 0 ->
                       ! table lookup or external, 1 -> Torsen parameters, 2 -> yaw
                       ! control, vehicle 2 [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE(1)     ! VS Command to install an engine, vehicle 1
INSTALL_ENGINE(2)     ! VS Command to install an engine, vehicle 2

OPT_ENGINE_INTERNAL(1) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(1) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(1) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(1)    725 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(1)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(1)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(1) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(1)           1.4 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(1) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

OPT_ENGINE_INTERNAL(2) 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING(2) 1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY(2) 0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE(2)    800 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG(2)    5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG(2)  0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP(2) 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG(2)          2.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT(2) 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE(1)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 1
INSTALL_TORQUE_TRANSFER_DEVICE(2)  ! VS Command to install a clutch or torque
                                   ! converter, vehicle 2

OPT_CLUTCH(1)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE(1)  1 ! Clutch control mode: 0 -> open-loop, 1 -> closed-loop (based
                      ! on shifting) [I]
OPT_CLUTCH_DELAY(1) 1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(1) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE(1) 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE(1) 0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE(1) 0.1 ; s ! Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD(1) 0.1 ; s ! Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL(1) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(1) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL(1) 0.3 ; s ! Time applying the clutch to full pressure during shift
                        ! [I]
T_CL_RE_ENGAGE(1) 0.5 ; s ! Time clutch is fully re-engaged after starting shift [I]
T_GEAR_LAG(1)     0.1 ; s ! Time lag in shifting
! T_TH_RETURN(1)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED(1)  0.4 ; s ! Time when throttle has returned to pre-shift level [I]
T_TH_ZERO(1)      0.1 ; s ! Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD(1) 0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL(1) 0.3 ; s ! Time when starting to return throttle [I]
VLOW_CLUTCH(1)      5 ; km/h ! Press the clutch pedal when average of wheel speeds
                      ! is below this speed while deccelerating with brake during
                      ! the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

OPT_CLUTCH(2)       1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE(2)  1 ! [D] Clutch control mode: 0 -> open-loop, 1 -> closed-loop
                      ! (based on shifting) [I]
OPT_CLUTCH_DELAY(2) 1 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL(2) 1 ! Internal power coupling model (torque converter and
                          ! clutch): 1 -> internal, 0 -> external
TC_CLUTCH_DISENGAGE(2) 0.001 ; s ! Time constant for clutch torque (disengage)
TC_CLUTCH_ENGAGE(2) 0.1 ; s ! Time constant for clutch torque (engage)
T_CL_DISENGAGE(2) 0.1 ; s ! [D] Time when clutch is fully disengaged [I]
T_CL_HALF_HOLD(2) 0.1 ; s ! [D] Time holding the clutch at half pressure [I]
! T_CL_HALF_TOTAL(2) 0.2 ; s ! CALC -- Time releasing the clutch during shift
! T_CL_PRESS_HOLD(2) 0.2 ; s ! CALC -- Time holding the clutch fully disengaged
T_CL_PRESS_TOTAL(2) 0.3 ; s ! [D] Time applying the clutch to full pressure during
                        ! shift [I]
T_CL_RE_ENGAGE(2) 0.5 ; s ! [D] Time clutch is fully re-engaged after starting shift
                      ! [I]
T_GEAR_LAG(2)     0.1 ; s ! [D] Time lag in shifting
! T_TH_RETURN(2)  0.1 ; s ! CALC -- Time spent returning to original throttle [I]
T_TH_RETURNED(2)  0.4 ; s ! [D] Time when throttle has returned to pre-shift level
                      ! [I]
T_TH_ZERO(2)      0.1 ; s ! [D] Time when throttle drops to zero [I]
! T_TH_ZERO_HOLD(2) 0.2 ; s ! CALC -- Time holding zero throttle during shift [I]
T_TH_ZERO_TOTAL(2) 0.3 ; s ! [D] Time when starting to return throttle [I]
VLOW_CLUTCH(2)      5 ; km/h ! [D] Press the clutch pedal when average of wheel
                      ! speeds is below this speed while deccelerating with brake
                      ! during the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION(1)  ! VS Command to install a transmission, vehicle 1
INSTALL_TRANSMISSION(2)  ! VS Command to install a transmission, vehicle 2

OPT_TRANS_INTERNAL(1) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(1) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(1)           7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(1) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(1) 0.09 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(1)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(1)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(1) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(1) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(1) -8 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(1)       0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1,1)         0.15 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 1
R_EFF_TR_F(1,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,1)   7.59 ; - ! 1st-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 1 [I]
T_SHIFT_DOWN(1,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 1 [I]

ITR(1,2)         0.15 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,2)   5.06 ; - ! 2nd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 1
T_SHIFT_DOWN(1,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 1

ITR(1,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,3)   3.38 ; - ! 3rd-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 1
T_SHIFT_DOWN(1,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 1

ITR(1,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,4)   2.25 ; - ! 4th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 1
T_SHIFT_DOWN(1,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 1

ITR(1,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,5)    1.5 ; - ! 5th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 1
T_SHIFT_DOWN(1,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 1

ITR(1,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,6)      1 ; - ! 6th-gear ratio of transmission, vehicle 1
T_SHIFT_UP(1,6)    -1 ; - ! [D] Duration of up-shift from 6th-gear, vehicle 1
T_SHIFT_DOWN(1,6)  -1 ; - ! [D] Duration of down-shift to 6th-gear, vehicle 1

ITR(1,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 1
R_EFF_TR_F(1,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 1
R_EFF_TR_R(1,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 1
R_GEAR_TR(1,7)   0.75 ; - ! 7th-gear ratio of transmission, vehicle 1

DRIVELINE_FREQ(1)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(1) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

OPT_TRANS_INTERNAL(2) 1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL(2) 1 ! Transmission gear ratio and inertia: 1 -> up to 18
                          ! gears, 2 -> continuously variable (CVT), 0 -> external
                          ! model [I]
NGEARS(2)          18 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL(2) 1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT(2) 0.5 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL(2)    0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE(2)    0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE(2) 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE(2) 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE(2) -12.85 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT(2)        0.5 ; s ! Shift duration in closed-loop transmission control

ITR(2,1)          0.2 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter), vehicle 2
R_EFF_TR_F(2,1)  0.92 ; - ! 1st-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,1)  0.92 ; - ! 1st-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,1)   14.4 ; - ! 1st-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,1)    -1 ; - ! [D] Duration of up-shift from 1st-gear, vehicle 2 [I]
T_SHIFT_DOWN(2,1)  -1 ; - ! [D] Duration of down-shift to 1st-gear, vehicle 2 [I]

ITR(2,2)          0.2 ; kg-m2 ! 2nd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,2)  0.92 ; - ! 2nd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,2)  0.92 ; - ! 2nd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,2)  12.29 ; - ! 2nd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,2)    -1 ; - ! [D] Duration of up-shift from 2nd-gear, vehicle 2
T_SHIFT_DOWN(2,2)  -1 ; - ! [D] Duration of down-shift to 2nd-gear, vehicle 2

ITR(2,3)          0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,3)  0.92 ; - ! 3rd-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,3)  0.92 ; - ! 3rd-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,3)   8.56 ; - ! 3rd-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,3)    -1 ; - ! [D] Duration of up-shift from 3rd-gear, vehicle 2
T_SHIFT_DOWN(2,3)  -1 ; - ! [D] Duration of down-shift to 3rd-gear, vehicle 2

ITR(2,4)          0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,4)  0.92 ; - ! 4th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,4)  0.92 ; - ! 4th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,4)    7.3 ; - ! 4th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,4)    -1 ; - ! [D] Duration of up-shift from 4th-gear, vehicle 2
T_SHIFT_DOWN(2,4)  -1 ; - ! [D] Duration of down-shift to 4th-gear, vehicle 2

ITR(2,5)          0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,5)  0.92 ; - ! 5th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,5)  0.92 ; - ! 5th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,5)   6.05 ; - ! 5th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,5)    -1 ; - ! [D] Duration of up-shift from 5th-gear, vehicle 2
T_SHIFT_DOWN(2,5)  -1 ; - ! [D] Duration of down-shift to 5th-gear, vehicle 2

ITR(2,6)          0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,6)  0.92 ; - ! 6th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,6)  0.92 ; - ! 6th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,6)   5.16 ; - ! 6th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,6)    -1 ; - ! [D] Duration of up-shift from 6th-gear, vehicle 2
T_SHIFT_DOWN(2,6)  -1 ; - ! [D] Duration of down-shift to 6th-gear, vehicle 2

ITR(2,7)          0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,7)  0.92 ; - ! 7th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,7)  0.92 ; - ! 7th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,7)   4.38 ; - ! 7th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,7)    -1 ; - ! [D] Duration of up-shift from 7th-gear, vehicle 2
T_SHIFT_DOWN(2,7)  -1 ; - ! [D] Duration of down-shift to 7th-gear, vehicle 2

ITR(2,8)          0.2 ; kg-m2 ! 8th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,8)  0.92 ; - ! 8th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,8)  0.92 ; - ! 8th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,8)   3.74 ; - ! 8th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,8)    -1 ; - ! [D] Duration of up-shift from 8th-gear, vehicle 2
T_SHIFT_DOWN(2,8)  -1 ; - ! [D] Duration of down-shift to 8th-gear, vehicle 2

ITR(2,9)          0.2 ; kg-m2 ! 9th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,9)  0.92 ; - ! 9th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,9)  0.92 ; - ! 9th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,9)    3.2 ; - ! 9th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,9)    -1 ; - ! [D] Duration of up-shift from 9th-gear, vehicle 2
T_SHIFT_DOWN(2,9)  -1 ; - ! [D] Duration of down-shift to 9th-gear, vehicle 2

ITR(2,10)         0.2 ; kg-m2 ! 10th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,10) 0.92 ; - ! 10th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,10) 0.92 ; - ! 10th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,10)  2.73 ; - ! 10th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,10)   -1 ; - ! [D] Duration of up-shift from 10th-gear, vehicle 2
T_SHIFT_DOWN(2,10) -1 ; - ! [D] Duration of down-shift to 10th-gear, vehicle 2

ITR(2,11)         0.2 ; kg-m2 ! 11th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,11) 0.92 ; - ! 11th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,11) 0.92 ; - ! 11th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,11)  2.29 ; - ! 11th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,11)   -1 ; - ! [D] Duration of up-shift from 11th-gear, vehicle 2
T_SHIFT_DOWN(2,11) -1 ; - ! [D] Duration of down-shift to 11th-gear, vehicle 2

ITR(2,12)         0.2 ; kg-m2 ! 12th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,12) 0.92 ; - ! 12th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,12) 0.92 ; - ! 12th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,12)  1.95 ; - ! 12th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,12)   -1 ; - ! [D] Duration of up-shift from 12th-gear, vehicle 2
T_SHIFT_DOWN(2,12) -1 ; - ! [D] Duration of down-shift to 12th-gear, vehicle 2

ITR(2,13)         0.2 ; kg-m2 ! 13th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,13) 0.92 ; - ! 13th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,13) 0.92 ; - ! 13th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,13)  1.62 ; - ! 13th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,13)   -1 ; - ! [D] Duration of up-shift from 13th-gear, vehicle 2
T_SHIFT_DOWN(2,13) -1 ; - ! [D] Duration of down-shift to 13th-gear, vehicle 2

ITR(2,14)         0.2 ; kg-m2 ! 14th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,14) 0.92 ; - ! 14th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,14) 0.92 ; - ! 14th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,14)  1.38 ; - ! 14th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,14)   -1 ; - ! [D] Duration of up-shift from 14th-gear, vehicle 2
T_SHIFT_DOWN(2,14) -1 ; - ! [D] Duration of down-shift to 14th-gear, vehicle 2

ITR(2,15)         0.2 ; kg-m2 ! 15th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,15) 0.92 ; - ! 15th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,15) 0.92 ; - ! 15th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,15)  1.17 ; - ! 15th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,15)   -1 ; - ! [D] Duration of up-shift from 15th-gear, vehicle 2
T_SHIFT_DOWN(2,15) -1 ; - ! [D] Duration of down-shift to 15th-gear, vehicle 2

ITR(2,16)         0.2 ; kg-m2 ! 16th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,16) 0.92 ; - ! 16th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,16) 0.92 ; - ! 16th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,16)     1 ; - ! 16th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,16)   -1 ; - ! [D] Duration of up-shift from 16th-gear, vehicle 2
T_SHIFT_DOWN(2,16) -1 ; - ! [D] Duration of down-shift to 16th-gear, vehicle 2

ITR(2,17)         0.2 ; kg-m2 ! 17th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,17) 0.92 ; - ! 17th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,17) 0.92 ; - ! 17th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,17)  0.86 ; - ! 17th-gear ratio of transmission, vehicle 2
T_SHIFT_UP(2,17)   -1 ; - ! [D] Duration of up-shift from 17th-gear, vehicle 2
T_SHIFT_DOWN(2,17) -1 ; - ! [D] Duration of down-shift to 17th-gear, vehicle 2

ITR(2,18)         0.2 ; kg-m2 ! 18th-gear trans output shaft spin inertia, vehicle 2
R_EFF_TR_F(2,18) 0.92 ; - ! 18th-gear forward efficiency of transmission, vehicle 2
R_EFF_TR_R(2,18) 0.92 ; - ! 18th-gear reverse efficiency of transmission, vehicle 2
R_GEAR_TR(2,18)  0.73 ; - ! 18th-gear ratio of transmission, vehicle 2

DRIVELINE_FREQ(2)   9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA(2) 0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             8 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        8 ! VS Command to install reference paths

PATH_ID(1)       1000 ; 16 m Radius
OPT_PATH_START(1)   1 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    1 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! SPATH_LAP(1) 100.5309649 ; m ! CALC -- Lap distance for this path
HEADING_START(1)    0 ; deg ! Heading at the start of this path
X_PATH_START(1)     0 ; m ! Global X coordinate at the start of this path
Y_PATH_START(1)   -16 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(1,1) 16 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(1,1)  360 ; deg ! Central angle of arc
! S_SEGMENT_END(1,1) 100.5309649 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) -3.918869757e-15 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) -16 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1) -1.40334186e-14 ; deg ! CALC -- Heading at end of segment

PATH_ID(2)       1001 ; South Entrance, 1st Exit, 1001
OPT_PATH_START(2)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(2)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(2)      0 ; m ! Station at the start of this path
HEADING_START(2)   90 ; deg ! Heading at the start of this path
X_PATH_START(2)   2.1 ; m ! Global X coordinate at the start of this path
Y_PATH_START(2) -83.6 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(2)        3 ! Number of segments in this path
SEGMENT_TYPE(2,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,1) 50 ; m ! Segment length
! S_SEGMENT_END(2,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,1) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,1) -33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,1) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(2,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(2,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(2,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,2) 33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,2) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,2)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(2,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(2,3) 50 ; m ! Segment length
! S_SEGMENT_END(2,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(2,3) 83.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(2,3) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(2,3)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(3)       1002 ; East Entrance, 1st Exit, 1002
OPT_PATH_START(3)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(3)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(3)      0 ; m ! Station at the start of this path
HEADING_START(3)  180 ; deg ! Heading at the start of this path
X_PATH_START(3)  83.6 ; m ! Global X coordinate at the start of this path
Y_PATH_START(3)   2.1 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(3)        3 ! Number of segments in this path
SEGMENT_TYPE(3,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(3,1) 50 ; m ! Segment length
! S_SEGMENT_END(3,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,1) 33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,1) 2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,1) 180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(3,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(3,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(3,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(3,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,2) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,2) 33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,2) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(3,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(3,3) 50 ; m ! Segment length
! S_SEGMENT_END(3,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(3,3) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(3,3) 83.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(3,3) 90 ; deg ! CALC -- Heading at end of segment

PATH_ID(4)       1003 ; North Entrance, 1st Exit, 1003
OPT_PATH_START(4)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(4)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(4)      0 ; m ! Station at the start of this path
HEADING_START(4)  -90 ; deg ! Heading at the start of this path
X_PATH_START(4)  -2.1 ; m ! Global X coordinate at the start of this path
Y_PATH_START(4)  83.6 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(4)        3 ! Number of segments in this path
SEGMENT_TYPE(4,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(4,1) 50 ; m ! Segment length
! S_SEGMENT_END(4,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,1) -2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,1) 33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,1) -90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(4,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(4,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(4,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,2) -33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,2) 2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,2) -180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(4,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(4,3) 50 ; m ! Segment length
! S_SEGMENT_END(4,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(4,3) -83.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(4,3) 2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(4,3) -180 ; deg ! CALC -- Heading at end of segment

PATH_ID(5)       1004 ; West Entrance, 1st Exit, 1004
OPT_PATH_START(5)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(5)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(5)      0 ; m ! Station at the start of this path
HEADING_START(5)    0 ; deg ! Heading at the start of this path
X_PATH_START(5) -83.6 ; m ! Global X coordinate at the start of this path
Y_PATH_START(5)  -2.1 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(5)        3 ! Number of segments in this path
SEGMENT_TYPE(5,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(5,1) 50 ; m ! Segment length
! S_SEGMENT_END(5,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,1) -33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,1) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(5,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(5,2)   90 ; deg ! Central angle of arc
! S_SEGMENT_END(5,2) 99.48008429 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,2) -2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,2) -33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,2) -90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(5,3)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(5,3) 50 ; m ! Segment length
! S_SEGMENT_END(5,3) 149.4800843 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(5,3) -2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(5,3) -83.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(5,3) -90 ; deg ! CALC -- Heading at end of segment

PATH_ID(6)          6 ; Straight Path East
OPT_PATH_START(6)   0 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(6)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(6)      0 ; m ! Station at the start of this path
! HEADING_START(6)  0 ; deg ! Heading at the start of this path
! X_PATH_START(6)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(6)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(6)        1 ! Number of segments in this path
SEGMENT_TYPE(6,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(6,1) 100 ; m ! Segment length
! S_SEGMENT_END(6,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(6,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(6,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(6,1)  0 ; deg ! CALC -- Heading at end of segment

PATH_ID(7)       1021 ; South Entrance, 3d Exit, 1021
OPT_PATH_START(7)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(7)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(7)      0 ; m ! Station at the start of this path
HEADING_START(7)   90 ; deg ! Heading at the start of this path
X_PATH_START(7)   2.1 ; m ! Global X coordinate at the start of this path
Y_PATH_START(7) -83.6 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(7)        5 ! Number of segments in this path
SEGMENT_TYPE(7,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(7,1) 50 ; m ! Segment length
! S_SEGMENT_END(7,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,1) 2.1 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,1) -33.6 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,1) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(7,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(7,2)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(7,2) 74.74004215 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,2) 11.32613639 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,2) -11.32613639 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,2) 45 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,3)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(7,3) 16 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(7,3)  180 ; deg ! Central angle of arc
! S_SEGMENT_END(7,3) 125.0055246 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,3) -11.30128061 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,3) 11.30128061 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,3) -135 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,4)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(7,4) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(7,4)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(7,4) 149.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,4) -33.57514421 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,4) 2.075144213 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,4) -180 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(7,5)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(7,5) 50 ; m ! Segment length
! S_SEGMENT_END(7,5) 199.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(7,5) -83.57514421 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(7,5) 2.075144213 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(7,5) -180 ; deg ! CALC -- Heading at end of segment

PATH_ID(8)       1024 ; West Entrance, 3d Exit, 1024
OPT_PATH_START(8)   1 ! Set initial heading and X-Y coords? 0 -> no, 1 -> yes
OPT_PATH_LOOP(8)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(8)      0 ; m ! Station at the start of this path
HEADING_START(8)    0 ; deg ! Heading at the start of this path
X_PATH_START(8) -83.6 ; m ! Global X coordinate at the start of this path
Y_PATH_START(8)  -2.1 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(8)        5 ! Number of segments in this path
SEGMENT_TYPE(8,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(8,1) 50 ; m ! Segment length
! S_SEGMENT_END(8,1) 50 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,1) -33.6 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,1) -2.1 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,1)  0 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,2)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(8,2) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(8,2)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(8,2) 74.74004215 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,2) -11.32613639 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,2) -11.32613639 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,2) -45 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,3)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(8,3) 16 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(8,3)  180 ; deg ! Central angle of arc
! S_SEGMENT_END(8,3) 125.0055246 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,3) 11.30128061 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,3) 11.30128061 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,3) 135 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,4)   3 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_RADIUS(8,4) -31.5 ; m ! Radius of arc; + -> left turn
SEGMENT_ARC(8,4)   45 ; deg ! Central angle of arc
! S_SEGMENT_END(8,4) 149.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,4) 2.075144213 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,4) 33.57514421 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,4) 90 ; deg ! CALC -- Heading at end of segment

SEGMENT_TYPE(8,5)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(8,5) 50 ; m ! Segment length
! S_SEGMENT_END(8,5) 199.7455668 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(8,5) 2.075144213 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(8,5) 83.57514421 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(8,5) 90 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             6 ! Number of installed road surfaces (read only)
NROAD_DZ            2 ! Number of ROAD_DZ datasets
DEFINE_ROADS        6 ! VS Command to define road surfaces
CURRENT_ROAD_ID(1) 1000 ! ROAD_ID during initialization, vehicle 1 [I]
CURRENT_ROAD_ID(2) 1002 ! ROAD_ID during initialization, vehicle 2 [I]

ROAD_ID(1)       1000 ; Circle, 1000
ROAD_PATH_ID(1)  1000 ; PATH_ID for: 16 m Radius
ROAD_SMAX_NEW_ID(1) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)    1000 ; ROAD_DZ_ID for: Inside Apron for 16 m Radius Circle

ROAD_ID(2)       1001 ; Enter S, Exit E, 1001
ROAD_PATH_ID(2)  1001 ; PATH_ID for: South Entrance, 1st Exit, 1001
ROAD_SMAX_NEW_ID(2) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(2) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(2)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(2,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(3)       1002 ; Enter E, Exit N, 1002
ROAD_PATH_ID(3)  1002 ; PATH_ID for: East Entrance, 1st Exit, 1002
ROAD_SMAX_NEW_ID(3) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(3) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(3)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(3,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(4)       1003 ; Enter N, Exit W, 1003
ROAD_PATH_ID(4)  1003 ; PATH_ID for: North Entrance, 1st Exit, 1003
ROAD_SMAX_NEW_ID(4) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(4) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(4)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(4,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(5)       1004 ; Enter W, Exit S, 1004
ROAD_PATH_ID(5)  1004 ; PATH_ID for: West Entrance, 1st Exit, 1004
ROAD_SMAX_NEW_ID(5) 0 ! 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(5) 0 ! 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(5)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(5,1)    1001 ; ROAD_DZ_ID for: Leg for Roundabout,  D = 36 m

ROAD_ID(6)          6 ; Big Grass
ROAD_PATH_ID(6)     6 ; PATH_ID for: Straight Path East
ROAD_SMAX_NEW_ID(6) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(6) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(6)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             2 ! Number of LTARG datasets that are used in this run

PATH_ID_DM(1)    1021 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(1)      1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0), vehicle 1
OPT_INIT_PATH(1)    0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION(1)    1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station, vehicle 1 [I]

OPT_DM(1)           3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point, vehicle 1 [I]
OPT_DRIVER_ACTION(1) 1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                       ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ(1)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(1)    720 ; deg ! Limit steering wheel angle for DM, vehicle 1
AV_SW_MAX_DM(1)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 1
VLOW_DM(1)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(1)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(1)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(1)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(1)          0 ; mm ! [D] Local Y coordinate of DM ref. point
INSTALL_DM_OUTPUTS(1)  ! VS Command to install XYZ outputs DM preview point(s)

PATH_ID_DM(2)    1024 ! PATH_ID of the DM reference path [I]
LTARG_ID_DM(2)      2 ! LTARG_ID of LTARG for the DM, vehicle 2
OPT_INIT_PATH(2)    0 ! Set Xo, Yo, and Yaw for path and LTARG [I]
OPT_DIRECTION(2)    1 ! Travel direction: 0, 1 -> fwd, -1 -> rev, vehicle 2 [I]

OPT_DM(2)           3 ! DM Option: 0 -> none, 3 -> use preview point, vehicle 2 [I]
OPT_DRIVER_ACTION(2) 1 ! [D] Use steer from DM? 1 -> yes, 0 -> No [I]
OPT_STR_BY_TRQ(2)   0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM(2)    720 ; deg ! Limit steering wheel angle for DM, vehicle 2
AV_SW_MAX_DM(2)  1200 ; deg/s ! Limit steering wheel rate for DM, vehicle 2
VLOW_DM(2)         10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM(2)        0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F(2)        0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R(2)        0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM(2)          0 ; mm ! [D] Local Y coordinate of DM ref. point
INSTALL_DM_OUTPUTS(2)  ! VS Command to install XYZ outputs DM preview point(s)
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      2 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC(1)           4 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd, vehicle 1 [I]
OPT_AUTO_RESET_IC(1) 1 ! Reset integral of speed error Vx_Err when Vx_Err changes
                       ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no,
                       ! vehicle 1
OPT_SC_3D(1)        1 ! Path preview for SC: 1 -> account for 3D ground curvature, 0
                      ! -> assume flat level ground [I]
OPT_SC_SKILL(1)     1 ! Speed controller skill: 2 -> high, 1 -> medium, 0 -> low [I]
OPT_SC_ENGINE_BRAKING(1) 1 ! Use engine braking to control speed? 0 -> no, 1 -> yes
OPT_SC_2018(1)      0 ! Option: 0 -> use g/MPa units for BK_PERF_SC, 1 -> multiply
                      ! BK_PERF_SC by G for old datasets (2018.0 and older)
SPEED_ID_SC(1)      1 ! SPEED_TARGET_ID for speed controller, vehicle 1 [I]
BK_PERF_SC(1)       1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(1)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(1) 8 ; m ! Speed controller: length of path used to calculate
                       ! curvature with 3 points (both ends and the mid-point) [I]
SPEED_KP(1)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(1)      0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(1)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(1)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(1) 0 ; m ! Speed controller: path preview start (distance in
                         ! front of sprung mass origin), vehicle 1 [I]
SPEED_PREVIEW_STEP(1) 4 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(1)  2 ; m ! Integral control deadband for auto reset

OPT_SC(2)           4 ! Speed controller option: 0 - 5, vehicle 2 [I]
OPT_AUTO_RESET_IC(2) 1 ! [D] Auto-reset integral of speed error Vx_Err?, vehicle 2
OPT_SC_3D(2)        1 ! Path preview: 3D effects? [I]
OPT_SC_SKILL(2)     1 ! SC skill: 0 (low) to 2 (high) [I]
OPT_SC_ENGINE_BRAKING(2) 1 ! Use engine braking in SC?
OPT_SC_2018(2)      0 ! Use units from version 2018.0 and older?
SPEED_ID_SC(2)      2 ! SPEED_TARGET_ID for speed controller, vehicle 2 [I]
BK_PERF_SC(2)       1 ; g/MPa ! Approximate vehicle decel per unit pressure
PBK_CON_MAX_SC(2)  10 ; MPa ! Maximum master cylinder pressure used by SC
SPEED_CURV_LENGTH(2) 8 ; m ! Length of path used to calculate curvature [I]
SPEED_KP(2)       0.5 ; s/m ! Speed controller: proportional control gain
SPEED_KP3(2)      0.5 ; s3/m3 ! Speed controller: cubic (verr^3) control gain
SPEED_KI(2)       0.5 ; 1/m ! Speed controller: integral control gain
SPEED_PREVIEW(2)  100 ; m ! Speed controller: path preview distance [I]
SPEED_PREVIEW_START(2) 0 ; m ! Path preview start (front of Xo), vehicle 2 [I]
SPEED_PREVIEW_STEP(2) 4 ; m ! Speed controller: preview interval (resolution) [I]
VX_IERR_DEAD_SC(2)  1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   2 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   2 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,3)   2 ! ABS control option, unit 2, axle 3
ABS_SLIP_ON(2,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,1)   2 ! ABS control option, unit 3, axle 1
ABS_SLIP_ON(3,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,2)   2 ! ABS control option, unit 3, axle 2
ABS_SLIP_ON(3,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,2)       6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! ADAS RANGE AND TRACKING SENSORS
!------------------------------------------------------------------------------------
! Up to 99 ADAS Range and Tracking Sensors can be installed to detect moving
! objects. A set of detection variables is provided for each combination of the
! sensor and every installed target object. If indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the sensor
! associated with the parameter when reading data. Three Configurable Functions
! affect the sensor sensitivity: SENSOR_ANTENNA_ELEVATION, SENSOR_ANTENNA_RANGE,
! and SENSOR_MAP.

! NSENSOR           1 ! Number of installed range and tracking sensors (read only)
DEFINE_SENSORS      1 ! VS Command to define ADAS sensors
OPT_ALTERNATE_SENSORS 1 ! [D] 1 -> update only one sensor each time step (alternate
                        ! among sensors); 0 -> update all sensors every time step
OPT_INIT_SENSORS    1 ! [D] 1 -> initialize all sensors at the first time step to
                      ! include effects of VS Commands that might control target
                      ! objects); 0 -> initialize all sensors before the run starts

SENSOR_NAME(1)      1 ; 160 deg Sensor (Blue)
IOBJECT_SENSOR(1)   0 ! [D] ID of moving object in which sensor is mounted (0 if
                      ! mounted in vehicle)
IUNIT_SENSOR(1)     1 ! Vehicle unit in which sensor is mounted
OPT_BLOCK_SENSOR(1) 1 ! Can objects block the view of each other for this sensor? 1
                      ! -> yes, 0 -> no
OPT_LEGACY_SENSOR(1) 0 ! [D] Use legacy sensor method? The legacy method has better
                       ! computational efficiency, but reduced accuracy for certain
                       ! edge cases. 0 -> no, 1 -> yes
OPT_EXPORT_SENSOR(1) 0 ! Automatically export detection variables for this sensor to
                       ! Simulink/LabVIEW? 0 -> no, 1 -> yes
OPT_SORT_OUTPUTS_SENSOR(1) 1 ! Sort detection variables for sensor: 1 -> by
                             ! proximity (DisS1_1 is closest, DisS1_2 is next,
                             ! etc.), 0 -> by object number (DisS1_1 goes to object
                             ! 1, DisS1_2 to object 2, etc.)
TYPE_SENSOR(1)      1 ! Type (used in reflectiveness map function) of sensor
BEARING_MAX_SENSOR(1) 80 ; deg ! Maximum bearing angle (field of view)
BEARING_MIN_SENSOR(1) -80 ; deg ! Minimum bearing angle (field of view)
RANGE_LIMIT_SENSOR(1) 50 ; m ! Range limit (set 0 for no limit)
X_SENSOR(1)       800 ; mm ! X coordinate (in sprung mass) of sensor
Y_SENSOR(1)         0 ; mm ! Y coordinate (in sprung mass) of sensor
Z_SENSOR(1)      2550 ; mm ! Z coordinate (in sprung mass) of sensor
YAW_AIM_SENSOR(1)   0 ; deg ! Yaw of sensor axes about Z of sprung mass
PITCH_AIM_SENSOR(1) 0 ; deg ! Pitch of sensor axes about Y, after Yaw
ROLL_AIM_SENSOR(1)  0 ; deg ! Roll of sensor axes about X, after Pitch

!------------------------------------------------------------------------------------
! MOVING OBJECTS
!------------------------------------------------------------------------------------
! Up to 200 moving objects can be installed to provide more detailed animations
! and/or targets for ADAS Range and Detection sensors. The locations and
! orientations of these objects can be controlled with variables imported from
! external software or with VS Commands, using either global X-Y-Z coordinates or
! path/road S and L coordinates. If indices shown below are not used, e.g., (2),
! the current value of the index IOBJECT is used to identify the object associated
! with the parameter when reading data. If polygonal vertices are used, the vertex
! coordinates are provided with POLY_SHAPE_TABLE datasets.

! NOBJECT           4 ! Number of installed moving objects (read only)
DEFINE_MOVING_OBJECTS 4 ! VS Command to define moving objects

OBJECT_NAME(1)      1 ; 1 Driver Preview Point, Set by DM
IUNIT_OBJ(1)        0 ! [D] Attach object to sprung mass of this vehicle unit, or 0
                      ! -> don't attach to a sprung mass [I]
PATH_ID_OBJ(1)      0 ! PATH_ID used to define location with S, L, Hdg; or 0 ->
                      ! define with global X, Y, Yaw [I]
ROAD_ID_OBJ(1)   1000 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(1)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(1)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(1)   1 ! [D] Shape type: 1 -> rectangle, 0 -> cylinder, 2 -> Segment,
                      ! 3 -> Polygonal (vertices)
H_OBJ(1)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(1)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(1)     0 ; m ! [D] Distance from reference point to front of
                      ! rectangular object
MATERIAL_TYPE_OBJ(1) 0 ! Material type for reflectiveness map (< 1 for no map, in
                       ! this case use REFLECT_OBJ )
REFLECT_OBJ(1)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(1)        2 ; m ! [D] Width of rectangular object
MsgObj_1            0 ; - ! Output: User-defined Message (code) for object
S_RdO_1   69.10211194 ; m ! Output: Station of object on road path
TypeO_1             0 ; - ! Output: User-defined Type (code) for object
V_Obj_1   24.65081343 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_1  -16.74436092 ; m ! Output: X coordinate of object 1
Y_Obj_1   6.948564751 ; m ! Output: Y coordinate of object 1
YawO_1              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

OBJECT_NAME(2)      2 ; IUNIT_OBJ
IUNIT_OBJ(2)        2 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(2)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(2)          1.5 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(2)       4 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(2)     1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(2) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(2)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(2)      1.6 ; m ! Width of rectangular object
MsgObj_2            8 ; - ! Output: User-defined Message (code) for object
TypeO_2           202 ; - ! Output: User-defined Type (code) for object
V_Obj_2   41.79230544 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_2   2.133192148 ; m ! Output: X coordinate of object 2
Y_Obj_2   96.04610666 ; m ! Output: Y coordinate of object 2
Z_Obj_2  0.6511984769 ; m ! Output: Z coordinate of object 2
YawO_2     90.1948857 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO2  -1.098016472 ; deg ! Output: Pitch angle of object 2
RollO_2   3.360839017 ; deg ! Output: Roll angle of object 2

OBJECT_NAME(3)      3 ; IUNIT_OBJ
IUNIT_OBJ(3)        3 ! Attach to current SM, or 0 -> don't attach to an SM [I]
SHAPE_TYPE_OBJ(3)   1 ! Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(3)        2.603 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(3)  12.496 ; m ! Length of rectangular or segment object
LX_FRONT_OBJ(3)     1 ; m ! Distance to front of rectangle
MATERIAL_TYPE_OBJ(3) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(3)      1 ; - ! [D] Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(3)     2.44 ; m ! Width of rectangular object
MsgObj_3            8 ; - ! Output: User-defined Message (code) for object
TypeO_3           202 ; - ! Output: User-defined Type (code) for object
V_Obj_3   41.78805995 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_3    2.14430912 ; m ! Output: X coordinate of object 3
Y_Obj_3   92.39110332 ; m ! Output: Y coordinate of object 3
Z_Obj_3   1.132921714 ; m ! Output: Z coordinate of object 3
YawO_3    90.31226991 ; deg ! Output and possibly ODE SV: Yaw angle of object
PitchO3 -0.02768019194 ; deg ! Output: Pitch angle of object 3
RollO_3   3.430192662 ; deg ! Output: Roll angle of object 3

OBJECT_NAME(4)      4 ; 1 Driver Preview Point, Vehicle 2
IUNIT_OBJ(4)        0 ! [D] Attach to current SM, or 0 -> don't attach to an SM [I]
PATH_ID_OBJ(4)      0 ! PATH_ID used to define location, or 0 -> global X-Y-Yaw [I]
ROAD_ID_OBJ(4)   1002 ! ROAD_ID of road surface, or 0 -> set Z, pitch, roll [I]
OPT_ROAD_PITCH(4)   1 ! [D] Get pitch from road? 1 -> yes, 0 -> no
OPT_ROAD_ROLL(4)    1 ! [D] Get roll from road? 1 -> yes, 0 -> no
SHAPE_TYPE_OBJ(4)   1 ! [D] Shape type: 1 -> rect, 0 -> cyl, 2 -> Seg, 3 -> Poly
H_OBJ(4)            0 ; m ! Height of detection point; if negative use sensor height
LENGTH_OBJ(4)       4 ; m ! [D] Length of rectangular or segment object
LX_FRONT_OBJ(4)     0 ; m ! [D] Distance to front of rectangle
MATERIAL_TYPE_OBJ(4) 0 ! Material type for reflectiveness map (< 1 for no map)
REFLECT_OBJ(4)      0 ; - ! Reflectiveness (0 - 1) or -1 -> cannot be occluded
WIDTH_OBJ(4)        2 ; m ! [D] Width of rectangular object
MsgObj_4            0 ; - ! Output: User-defined Message (code) for object
S_RdO_4   170.6269001 ; m ! Output: Station of object on road path
TypeO_4             0 ; - ! Output: User-defined Type (code) for object
V_Obj_4   43.35057006 ; km/h ! Output and possibly ODE SV: Speed of object
X_Obj_4   2.075144213 ; m ! Output: X coordinate of object 4
Y_Obj_4    104.752837 ; m ! Output: Y coordinate of object 4
YawO_4              0 ; deg ! Output and possibly ODE SV: Yaw angle of object

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 14 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 3, left side
CC_FX_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 3, right side
CC_FX_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CC_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CC_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CC_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CC_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 14 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 3, left side
CI_FY_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 3, right side
CI_FY_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CI_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CI_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CI_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CI_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 14 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, left side
CI_MZ_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, right side
CI_MZ_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CI_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CI_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CI_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CI_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 18 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IVEHICLE and IDIFF are used to
! identify the dataset when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 1, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,1) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, 1st drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,2) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, 2nd drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2,3) 1 ; - ! [D] Constant normalized clutch input, veh
                                    ! 2, inter-axle diff for axles 1,2
CLUTCH_CONTROL_DIFF_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                                ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2,3) 0 ; - ! Offset added (after gain) to get normalized
                                  ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 900
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(1) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(1) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(1) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 5000
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN(2) 1 ! Gain multiplied with calculated value to get available
                        ! clutch torque
CLUTCH_TORQUE_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available clutch
                          ! torque
CON_START_CL_TORQ(2) 0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ(2) 1 ! Scale factor divided into (normalized clutch control -
                       ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 18 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IDIFF are used to identify the
! dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1,2) 0 ; N-m ! [D] Constant available torque, veh 1, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,1) 0 ; N-m ! [D] Constant available torque, veh 2, 1st
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,2) 0 ; N-m ! [D] Constant available torque, veh 2, 2nd
                                   ! drive axle diff
CLUTCH_TORQUE_DIFF_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2,3) 0 ; N-m ! [D] Constant available torque, veh 2,
                                   ! inter-axle diff for axles 1,2
CLUTCH_TORQUE_DIFF_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get available
                                 ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 14 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 3, left side
CMP_DAMP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 3, right side
CMP_DAMP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, left side
CMP_DAMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, right side
CMP_DAMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, left side
CMP_DAMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, right side
CMP_DAMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 14 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, left side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, right side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 3, left side
CMP_JSTOP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 3, right side
CMP_JSTOP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, left side
CMP_JSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, right side
CMP_JSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, left side
CMP_JSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, right side
CMP_JSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 14 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, left side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, right
                               ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, left side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, right
                               ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 3, left side
CMP_RSTOP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 3, right
                               ! side
CMP_RSTOP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, left side
CMP_RSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, right
                               ! side
CMP_RSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, left side
CMP_RSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, right
                               ! side
CMP_RSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 14 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 14 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 3, left side
CS_FY_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 3, right side
CS_FY_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CS_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CS_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CS_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CS_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 14 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, left side
CS_MZ_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, right side
CS_MZ_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CS_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CS_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CS_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CS_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 14 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 3, left side
CT_FX_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 3, right side
CT_FX_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CT_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CT_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CT_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CT_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 7 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 1
C_LAT_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 2
C_LAT_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 1
C_LAT_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 2
C_LAT_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 3
C_LAT_AXLE_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 1
C_LAT_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 2
C_LAT_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 7
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 1
C_LONG_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 2
C_LONG_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 1
C_LONG_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 2
C_LONG_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 3
C_LONG_AXLE_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 1
C_LONG_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 2
C_LONG_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 34 datasets; if indices shown below are not used, e.g., (1,2),
! the current values of the indices IVEHICLE and IGEAR are used to identify the
! dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 135.08
 0.1, 135.08
 0.2, 108.98
 0.3, 107.22
 0.4, 107.19
 0.5, 107.32
 0.6, 107.87
 0.7, 108.43
 0.8, 108.99
 0.9, 109.55
 1, 109.55
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 328.98
 0.1, 328.98
 0.2, 297.51
 0.3, 270.94
 0.4, 245.64
 0.5, 239.65
 0.6, 280.65
 0.7, 321.66
 0.8, 362.66
 0.9, 403.66
 1, 403.66
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 512.29
 0.1, 512.29
 0.2, 443.86
 0.3, 411.55
 0.4, 411.55
 0.5, 428.66
 0.6, 471.3
 0.7, 513.94
 0.8, 556.58
 0.9, 599.22
 1, 599.22
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 657.15
 0.2, 657.15
 0.3, 617.12
 0.4, 617.04
 0.5, 623.12
 0.6, 682.18
 0.7, 741.24
 0.8, 800.3
 0.9, 859.36
 1, 859.36
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 921.2
 0.2, 921.2
 0.3, 914.58
 0.4, 914.76
 0.5, 915.55
 0.6, 957.02
 0.7, 1079
 0.8, 1200.9
 0.9, 1322.8
 1, 1322.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1,6) LINEAR_FLAT ! vehicle 1, gear shift 6<->7
 0, 2034.8
 0.8, 2034.8
 0.9, 2034.8
 1, 2034.8
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(1,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 46
 0.2, 46
 0.8, 60
 1, 60
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 66
 0.2, 66
 0.8, 95
 1, 95
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 77
 0.2, 77
 0.8, 125
 1, 125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 93
 0.2, 93
 0.8, 200
 1, 200
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 109
 0.2, 109
 0.8, 268
 1, 268
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,6) LINEAR_FLAT ! vehicle 2, gear shift 6<->7
 0, 128
 0.2, 128
 0.8, 314
 1, 314
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,6) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,6) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,6) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,7) LINEAR_FLAT ! vehicle 2, gear shift 7<->8
 0, 150
 0.2, 150
 0.8, 370
 1, 370
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,7) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,7) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,7) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,8) LINEAR_FLAT ! vehicle 2, gear shift 8<->9
 0, 176
 0.2, 176
 0.8, 433
 1, 433
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,8) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,8) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,8) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,9) LINEAR_FLAT ! vehicle 2, gear shift 9<->10
 0, 206
 0.2, 206
 0.8, 506
 1, 506
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,9) 1 ! Gain multiplied with calculated value to get
                            ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,9) 0 ; rpm ! Offset added (after gain) to get transmission
                              ! speed
THROTTLE_START_DOWNSHIFT(2,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,9) 1 ! Scale factor divided into (throttle position -
                                ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,10) LINEAR_FLAT ! vehicle 2, gear shift 10<->11
 0, 246
 0.2, 246
 0.8, 593
 1, 593
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,10) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,10) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,10) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,11) LINEAR_FLAT ! vehicle 2, gear shift 11<->12
 0, 288
 0.2, 288
 0.8, 707
 1, 707
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,11) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,11) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,11) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,12) LINEAR_FLAT ! vehicle 2, gear shift 12<->13
 0, 347
 0.2, 347
 0.8, 831
 1, 831
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,12) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,12) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,12) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,13) LINEAR_FLAT ! vehicle 2, gear shift 13<->14
 0, 408
 0.2, 408
 0.8, 1000
 1, 1000
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,13) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,13) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,13) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,14) LINEAR_FLAT ! vehicle 2, gear shift 14<->15
 0, 481
 0.2, 481
 0.8, 1174
 1, 1174
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,14) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,14) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,14) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,15) LINEAR_FLAT ! vehicle 2, gear shift 15<->16
 0, 563
 0.2, 563
 0.8, 1385
 1, 1385
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,15) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,15) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,15) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,16) LINEAR_FLAT ! vehicle 2, gear shift 16<->17
 0, 654
 0.2, 654
 0.8, 1620
 1, 1620
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,16) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,16) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,16) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2,17) LINEAR_FLAT ! vehicle 2, gear shift 17<->18
 0, 771
 0.2, 771
 0.8, 1884
 1, 1884
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2,17) 1 ! Gain multiplied with calculated value to get
                             ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2,17) 0 ; rpm ! Offset added (after gain) to get transmission
                               ! speed
THROTTLE_START_DOWNSHIFT(2,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2,17) 1 ! Scale factor divided into (throttle position -
                                 ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 14 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, left side
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, right side
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, left side
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, right side
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,1) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, left side
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,2) 15 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 1, right side
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, left side
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 2, right side
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,3,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 3, left side
FD_GAIN(2,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,3,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 2, axle 3, right side
FD_GAIN(2,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,1,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 1, left side
FD_GAIN(3,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,1,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 1, right side
FD_GAIN(3,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,2,1) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 2, left side
FD_GAIN(3,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,2,2) 30 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 3, axle 2, right side
FD_GAIN(3,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 14 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(2,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

FS_COMP_COEFFICIENT(2,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, left side
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

FS_COMP_COEFFICIENT(2,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, right side
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

FS_COMP_COEFFICIENT(2,3,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 3, left side
FS_COMP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 3, left side

FS_COMP_COEFFICIENT(2,3,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 3, right side
FS_COMP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 3, right side

FS_COMP_COEFFICIENT(3,1,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, left side
FS_COMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, left side

FS_COMP_COEFFICIENT(3,1,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, right side
FS_COMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, right side

FS_COMP_COEFFICIENT(3,2,1) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 2, left side
FS_COMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, left side

FS_COMP_COEFFICIENT(3,2,2) 700 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 2, right side
FS_COMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 14 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(2,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

FS_EXT_COEFFICIENT(2,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, left side
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

FS_EXT_COEFFICIENT(2,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, right side
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

FS_EXT_COEFFICIENT(2,3,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 3, left side
FS_EXT_GAIN(2,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 3, left side

FS_EXT_COEFFICIENT(2,3,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 3, right side
FS_EXT_GAIN(2,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 3, right side

FS_EXT_COEFFICIENT(3,1,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, left side
FS_EXT_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, left side

FS_EXT_COEFFICIENT(3,1,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, right side
FS_EXT_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, right side

FS_EXT_COEFFICIENT(3,2,1) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, left side
FS_EXT_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, left side

FS_EXT_COEFFICIENT(3,2,2) 700 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, right side
FS_EXT_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

FUEL_RATE_CONSTANT(1) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(1)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(1) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(1) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

FUEL_RATE_CONSTANT(2) 0 ; kg/s ! [D] Constant fuel rate component due to engine
                        ! speed
FUEL_RATE_GAIN(2)   1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET(2) 0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT(2) 1 ; - ! [D] Constant fuel rate scaling due to
                                 ! throttle position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 1.26
 -15, 1.17
 -10, 0.97
 -5, 0.82
 0, 0.69
 5, 0.82
 10, 0.97
 15, 1.17
 20, 1.26
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 1.26
 -15, 1.17
 -10, 0.97
 -5, 0.82
 0, 0.69
 5, 0.82
 10, 0.97
 15, 1.17
 20, 1.26
ENDTABLE
FX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 28 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,1,1) 2D_FROM_ZERO ! unit 2, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,1,2) 2D_FROM_ZERO ! unit 2, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,2,1) 2D_FROM_ZERO ! unit 2, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,2,2) 2D_FROM_ZERO ! unit 2, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1,2) 2D_FROM_ZERO ! unit 3, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2,2) 2D_FROM_ZERO ! unit 3, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 28 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,1,1) 2D_FROM_ZERO ! unit 2, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,1,2) 2D_FROM_ZERO ! unit 2, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,2,1) 2D_FROM_ZERO ! unit 2, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,2,2) 2D_FROM_ZERO ! unit 2, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1,2) 2D_FROM_ZERO ! unit 3, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2,2) 2D_FROM_ZERO ! unit 3, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 28 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, right, inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, outer
FZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, outer
FZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, inner
FZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, outer
FZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, inner
FZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, outer
FZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, left, inner
FZ_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, left, outer
FZ_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, right, inner
FZ_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, right, outer
FZ_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, left, inner
FZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, left, outer
FZ_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, right, inner
FZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, right, outer
FZ_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, left, inner
FZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, left, outer
FZ_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, right, inner
FZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, right, outer
FZ_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 14 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 100, 0
 149, 0
 150, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,3,1) LINEAR ! unit 2, axle 3, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,3,2) LINEAR ! unit 2, axle 3, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(2,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 60, 0
 100, 0
 101, 7000
ENDTABLE
F_JNC_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 14 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,1) LINEAR ! unit 2, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1,2) LINEAR ! unit 2, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,1) LINEAR ! unit 2, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2,2) LINEAR ! unit 2, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,3,1) LINEAR ! unit 2, axle 3, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,3,2) LINEAR ! unit 2, axle 3, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(2,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,1) LINEAR ! unit 3, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,1,2) LINEAR ! unit 3, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,1) LINEAR ! unit 3, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(3,2,2) LINEAR ! unit 3, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(3,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(3,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 7
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(2,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 2, axle 1
GEAR_ROT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

GEAR_TRANS_CONSTANT(1) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get gear

GEAR_TRANS_CONSTANT(2) 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IVEHICLE is used to identify the dataset when reading data.

ISHAFT_KIN_COEFFICIENT(1) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(1)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(1) 0 ; deg ! Offset added (after gain) to get Shaft output angle

ISHAFT_KIN_COEFFICIENT(2) 1 ! [D] Coefficient: Shaft output angle per unit
                            ! intermediate shaft input angle (deg/deg)
ISHAFT_KIN_GAIN(2)  1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET(2) 0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 28 datasets; if indices shown
! below are not used, e.g., (1,1,1,2), the current values of the indices IUNIT,
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, left, inner
KGAMMA_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, right, inner
KGAMMA_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, inner
KGAMMA_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, outer
KGAMMA_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, inner
KGAMMA_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, outer
KGAMMA_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, inner
KGAMMA_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, inner
KGAMMA_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, inner
KGAMMA_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, outer
KGAMMA_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, inner
KGAMMA_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, outer
KGAMMA_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, left, inner
KGAMMA_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, left, outer
KGAMMA_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, right, inner
KGAMMA_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, right, outer
KGAMMA_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, left, inner
KGAMMA_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, left, outer
KGAMMA_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, right, inner
KGAMMA_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, right, outer
KGAMMA_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, left, inner
KGAMMA_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, left, outer
KGAMMA_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, right, inner
KGAMMA_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, right, outer
KGAMMA_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.75s Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

LTARG_ID(2)         2  ! 0.75s Single Preview
LTARG_CONSTANT(2)   0 ; m ! Constant lateral offset
LTARG_OFFSET(2)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 28
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(2,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(2,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(2,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(2,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(3,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(3,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(3,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(3,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 28
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 28 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1,1) LINEAR ! unit 1, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2,1) LINEAR ! unit 1, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,1) LINEAR ! unit 1, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,2) LINEAR ! unit 1, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,1) LINEAR ! unit 1, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,2) LINEAR ! unit 1, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,1) LINEAR ! unit 2, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,1) LINEAR ! unit 2, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,1) LINEAR ! unit 2, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,2) LINEAR ! unit 2, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,1) LINEAR ! unit 2, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,2) LINEAR ! unit 2, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,1,1) SPLINE_FLAT ! unit 2, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,1,1) LINEAR ! unit 2, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,1,2) SPLINE_FLAT ! unit 2, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,1,2) LINEAR ! unit 2, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,2,1) SPLINE_FLAT ! unit 2, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,2,1) LINEAR ! unit 2, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,2,2) SPLINE_FLAT ! unit 2, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,2,2) LINEAR ! unit 2, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1,1) LINEAR ! unit 3, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1,2) SPLINE_FLAT ! unit 3, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1,2) LINEAR ! unit 3, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2,1) LINEAR ! unit 3, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2,2) SPLINE_FLAT ! unit 3, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2,2) LINEAR ! unit 3, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,1) LINEAR ! unit 3, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,2) SPLINE_FLAT ! unit 3, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,2) LINEAR ! unit 3, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,1) LINEAR ! unit 3, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,2) SPLINE_FLAT ! unit 3, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,2) LINEAR ! unit 3, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 28 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1,1) SPLINE ! unit 1, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2,1) SPLINE ! unit 1, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,1) SPLINE ! unit 1, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,2) SPLINE_FLAT ! unit 1, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,2) SPLINE ! unit 1, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,1) SPLINE ! unit 1, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,2) SPLINE_FLAT ! unit 1, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,2) SPLINE ! unit 1, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,1) SPLINE ! unit 2, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,2) SPLINE ! unit 2, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,1) SPLINE ! unit 2, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,2) SPLINE ! unit 2, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,1,1) SPLINE_FLAT ! unit 2, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,1,1) SPLINE ! unit 2, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,1,2) SPLINE_FLAT ! unit 2, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,1,2) SPLINE ! unit 2, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,2,1) SPLINE_FLAT ! unit 2, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,2,1) SPLINE ! unit 2, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,2,2) SPLINE_FLAT ! unit 2, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,2,2) SPLINE ! unit 2, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1,1) SPLINE ! unit 3, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1,2) SPLINE_FLAT ! unit 3, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1,2) SPLINE ! unit 3, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2,1) SPLINE ! unit 3, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2,2) SPLINE_FLAT ! unit 3, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2,2) SPLINE ! unit 3, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,1) SPLINE ! unit 3, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,2) SPLINE_FLAT ! unit 3, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,2) SPLINE ! unit 3, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,1) SPLINE ! unit 3, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,2) SPLINE_FLAT ! unit 3, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,2) SPLINE ! unit 3, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.
! This configurable function supports 2 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index IVEHICLE is used to identify the
! dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(1) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250
 800, 0, 27.8, 74.2, 129.9, 185.6, 222.7, 278.4, 334.1, 389.8, 436.2, 482.6
 1000, -18.6, 43.7, 105.9, 168.2, 230.4, 292.7, 355, 417.2, 479.5, 541.7, 604
 1200, -22.3, 44.5, 111.4, 178.2, 245, 311.8, 378.6, 445.5, 512.3, 579.1, 645.9
 1400, -26, 45.1, 116.1, 187.2, 258.2, 329.3, 400.3, 471.4, 542.4, 613.5, 684.5
 1600, -29.7, 43.7, 117.2, 190.6, 264, 337.4, 410.9, 484.3, 557.7, 631.1, 704.6
 1800, -33.4, 40.4, 114.2, 188, 261.8, 335.6, 409.4, 483.2, 557, 630.8, 704.6
 2000, -37.1, 34.8, 106.7, 178.6, 250.5, 322.4, 394.3, 466.2, 538.1, 610, 681.9
 2200, -40.8, 29.2, 99.2, 169.2, 239.2, 309.2, 379.2, 449.2, 519.3, 589.3, 659.3
 2400, -44.5, 23.3, 91.2, 159.1, 227, 294.9, 362.8, 430.7, 498.6, 566.5, 634.4
 2600, -48.3, 17.5, 83.2, 149, 214.7, 280.5, 346.2, 411.9, 477.7, 543.4, 609.2
 2800, -52, 11.5, 75.1, 138.6, 202.1, 265.6, 329.1, 392.6, 456.1, 519.7, 583.2
 3000, -55.7, 5.6, 66.9, 128.2, 189.5, 250.8, 312, 373.3, 434.6, 495.9, 557.2
 3100, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7, -55.7
 3150, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2, -74.2
ENDTABLE
MENGINE_GAIN(1)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(1)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(1) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(1) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(1) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(1) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET(2) 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880
 800, 0, 75.02, 199.98, 350.02, 499.95, 600.05, 749.98, 900.02, 1049.95, 1175.02, 1299.98
 1100, -50.05, 117.7, 285.45, 453.09, 620.84, 788.48, 956.23, 1123.87, 1291.62, 1459.26, 1627.01
 1200, -59.95, 120.01, 299.97, 480.04, 660, 839.96, 1020.03, 1199.99, 1379.95, 1560.02, 1739.98
 1300, -69.96, 121.44, 312.84, 504.24, 695.64, 887.04, 1078.44, 1269.84, 1461.24, 1652.64, 1844.04
 1400, -79.97, 117.81, 315.59, 513.37, 711.15, 909.04, 1106.82, 1304.6, 1502.38, 1700.16, 1898.05
 1500, -89.98, 108.79, 307.56, 506.44, 705.21, 903.98, 1102.75, 1301.63, 1500.4, 1699.17, 1898.05
 1600, -99.99, 93.72, 287.43, 481.14, 674.85, 868.45, 1062.16, 1255.87, 1449.58, 1643.29, 1837
 1700, -110, 78.65, 267.19, 455.84, 644.38, 833.03, 1021.57, 1210.22, 1398.76, 1587.41, 1775.95
 1800, -120.01, 62.92, 245.85, 428.67, 611.6, 794.53, 977.35, 1160.28, 1343.21, 1526.14, 1708.96
 1900, -130.02, 47.08, 224.18, 401.28, 578.38, 755.48, 932.58, 1109.68, 1286.78, 1463.88, 1640.98
 2000, -140.03, 31.13, 202.18, 373.34, 544.39, 715.55, 886.6, 1057.65, 1228.81, 1399.86, 1571.02
 2100, -150.04, 15.07, 180.18, 345.29, 510.4, 675.51, 840.62, 1005.73, 1170.84, 1335.95, 1500.95
 2150, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04
 2200, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98
ENDTABLE
MENGINE_GAIN(2)     1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET(2)   0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE(2) 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE(2) 1 ! Scale factor divided into (engine speed -
                        ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE(2) 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE(2) 1 ! Scale factor divided into (normalized throttle -
                            ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

MODE_TRANS_CONSTANT(1) 7 ; - ! Constant transmission mode
MODE_TRANS_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission mode

MODE_TRANS_CONSTANT(2) 18 ; - ! Constant transmission mode
MODE_TRANS_GAIN(2)  1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET(2) 0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(2) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(2)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(2)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(2) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(2) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(3) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(3)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(3)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(3) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(3) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(4) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(4)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(4)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(4) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(4) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(5) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(5)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(5)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(5) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(5) 0 ; - ! Constant MU component due to lateral position

MU_ROAD_CONSTANT(6) -1 ; - ! [D] Constant MU component due to station
MU_ROAD_GAIN(6)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(6)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(6) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(6) 1 ; - ! [D] Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 7 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 8500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 1500 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(2,1) 500 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

MX_AUX_COEFFICIENT(2,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 3
MX_AUX_GAIN(2,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 3

MX_AUX_COEFFICIENT(3,1) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 1
MX_AUX_GAIN(3,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 1

MX_AUX_COEFFICIENT(3,2) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 2
MX_AUX_GAIN(3,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 2

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(2) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(2) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 14 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.1, 0
 0.15, 0
 0.2, 0
 0.25, 0
 0.3, 0
 0.325, 0
 0.35, 0
 2.5, 1400
 5.5, 6670.8
 7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,3,1) SPLINE ! unit 2, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,3,2) SPLINE ! unit 2, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(2) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(2) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 3
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(2) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(2) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(2) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(2) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 3 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(2) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(2) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 14 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(2,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 2, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(2,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(2,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(2,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 2, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(2,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(2,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 2,
                                      ! axle 1, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 28 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,2) 2D_FROM_ZERO ! unit 1, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,2) 2D_FROM_ZERO ! unit 1, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,1,1) 2D_FROM_ZERO ! unit 2, axle 3, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,1,2) 2D_FROM_ZERO ! unit 2, axle 3, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,2,1) 2D_FROM_ZERO ! unit 2, axle 3, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,2,2) 2D_FROM_ZERO ! unit 2, axle 3, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1,2) 2D_FROM_ZERO ! unit 3, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2,2) 2D_FROM_ZERO ! unit 3, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 18 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IDIFF are used to identify the dataset when
! reading data.

M_DIFF_VISC_CONSTANT(1,2) 0 ; N-m ! Constant this torque difference, veh 1, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(2,1) 0 ; N-m ! Constant this torque difference, veh 2, 1st
                            ! drive axle diff
M_DIFF_VISC_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(2,2) 0 ; N-m ! Constant this torque difference, veh 2, 2nd
                            ! drive axle diff
M_DIFF_VISC_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

M_DIFF_VISC_CONSTANT(2,3) 0 ; N-m ! Constant this torque difference, veh 2,
                            ! inter-axle diff for axles 1,2
M_DIFF_VISC_OFFSET(2,3) 0 ; N-m ! Offset added (after gain) to get this torque
                          ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IVEHICLE is used to identify the dataset when reading data.

M_SW_COEFFICIENT(1) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(1)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(1)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(1) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(1)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

M_SW_COEFFICIENT(2) 0.04 ! Coefficient: torque at steering wheel per unit total
                         ! steering torque about kingpin axes of both front wheels
                         ! (N-m/N-m)
M_SW_GAIN(2)        1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET(2)      0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE(2) MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT(2)  1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_AV_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

M_TRANS_AV_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                       ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

M_TRANS_ROT_CONSTANT(1) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

M_TRANS_ROT_CONSTANT(2) 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get transmission output
                        ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON. This configurable function supports 2 datasets;
! if indices shown below are not used, e.g., (2), the current value of the index
! IVEHICLE is used to identify the dataset when reading data.

PBK_CON_CONSTANT(1) 0 ; MPa ! [D] Constant brake pressure
PBK_CON_OFFSET(1)   0 ; MPa ! Offset added (after gain) to get brake pressure

PBK_CON_CONSTANT(2) 0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET(2)   0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 14
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,1) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2,2) 1 ; - ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,2) MPa ;
PBK_DL_FZ_CONSTANT(2,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

PBK_DL_COEFFICIENT(2,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, left
                            ! side
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

PBK_DL_COEFFICIENT(2,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, right
                            ! side
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

PBK_DL_COEFFICIENT(2,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 3, left
                            ! side
PBK_DL_GAIN(2,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,3,1) MPa ;
PBK_DL_FZ_CONSTANT(2,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 3, left side

PBK_DL_COEFFICIENT(2,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 3, right
                            ! side
PBK_DL_GAIN(2,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,3,2) MPa ;
PBK_DL_FZ_CONSTANT(2,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 3, right side

PBK_DL_COEFFICIENT(3,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, left
                            ! side
PBK_DL_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,1,1) MPa ;
PBK_DL_FZ_CONSTANT(3,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, left side

PBK_DL_COEFFICIENT(3,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, right
                            ! side
PBK_DL_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,1,2) MPa ;
PBK_DL_FZ_CONSTANT(3,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, right side

PBK_DL_COEFFICIENT(3,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, left
                            ! side
PBK_DL_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,2,1) MPa ;
PBK_DL_FZ_CONSTANT(3,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, left side

PBK_DL_COEFFICIENT(3,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, right
                            ! side
PBK_DL_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,2,2) MPa ;
PBK_DL_FZ_CONSTANT(3,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, right side

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)    1000  ! Inside Apron for 16 m Radius Circle

! 2D table: row 1 has "0" (place holder) followed by 11 values of lateral position
! (m). Other rows have station (m) followed by 11 values of dZ (m).
ROAD_DZ_CARPET(1) 2D_LINEAR
 0, -3, -2.1, 2.1, 2.35, 2.6, 5.6, 5.85, 5.9, 6.1, 9, 12
 0, 0, 0, 0.1, 0.19, 0.227, 0.3, 0.33, 0.42, 0.45, 0.6, 0.7
 10, 0, 0, 0.1, 0.19, 0.227, 0.3, 0.33, 0.42, 0.45, 0.6, 0.7
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

ROAD_DZ_ID(2)    1001  ! Leg for Roundabout,  D = 36 m

! 2D table: row 1 has "0" (place holder) followed by 4 values of lateral position
! (m). Other rows have station (m) followed by 4 values of dZ (m).
ROAD_DZ_CARPET(2) 2D_LINEAR
 0, -3, -2.1, 2.1, 3
 30, -0.2, -0.2, 0, 0
 45, -0.2, -0.2, 0, 0
 55, 0, 0, 0, 0
 95, 0, 0, 0, 0
 105, -0.2, -0.2, 0, 0
 120, -0.2, -0.2, 0, 0
ENDTABLE
ROAD_DZ_GAIN(2)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(2)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(2)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(2)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(2)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(2)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_L_BOUNDARY: Road left/right boundary limit L. L is a function of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. L from the calculation can be adjusted with ROAD_L_BOUNDARY_GAIN and
! ROAD_L_BOUNDARY_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_ROAD_L_BOUNDARY and SSTART_ROAD_L_BOUNDARY. This configurable function
! supports 400 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IROAD and ISIDE are used to identify the dataset when
! reading data.

ROAD_L_BOUNDARY_CONSTANT(1,1) 12 ; m ! Constant L, Road 1, left side boundary
ROAD_L_BOUNDARY_GAIN(1,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L

ROAD_L_BOUNDARY_CONSTANT(1,2) -5 ; m ! Constant L, Road 1, right side boundary
ROAD_L_BOUNDARY_GAIN(1,2) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(2,1) LINEAR_FLAT ! Road 2, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(2,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(2,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(2,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(3,1) LINEAR_FLAT ! Road 3, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(3,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(3,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(3,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(4,1) LINEAR_FLAT ! Road 4, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(4,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(4,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(4,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! 1D table: col 1 = station (m), col 2 = L (m)
ROAD_L_BOUNDARY_TABLE(5,1) LINEAR_FLAT ! Road 5, left side boundary
 45, 2.1
 53, 2.3
 63, 5
 68, -3
 82, -3
 87, 5
 97, 2.3
 105, 2.1
ENDTABLE
ROAD_L_BOUNDARY_GAIN(5,1) 1 ! Gain multiplied with calculated value to get L
ROAD_L_BOUNDARY_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get L
SSTART_ROAD_L_BOUNDARY(5,1) 0 ; m ! Offset subtracted from station
SSCALE_ROAD_L_BOUNDARY(5,1) 1 ! Scale factor divided into (station -
                              ! SSTART_ROAD_L_BOUNDARY)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) -1 ; - ! Constant ID, Road 1, left side boundary
ROAD_NEW_ID_GAIN(1,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(1,2) STEP ! Road 1, right side boundary
 0, 1001
 25, 1002
 50, 1003
 75, 1004
ENDTABLE
ROAD_NEW_ID_GAIN(1,2) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(1,2) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(1,2) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(2,1) STEP ! Road 2, left side boundary
 0, 1004
 65, 1000
 85, 1002
ENDTABLE
ROAD_NEW_ID_GAIN(2,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(2,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(2,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(2,2) 0 ; - ! Constant ID, Road 2, right side boundary
ROAD_NEW_ID_OFFSET(2,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(3,1) STEP ! Road 3, left side boundary
 0, 1001
 65, 1000
 85, 1003
ENDTABLE
ROAD_NEW_ID_GAIN(3,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(3,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(3,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(3,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(3,2) 0 ; - ! Constant ID, Road 3, right side boundary
ROAD_NEW_ID_OFFSET(3,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(4,1) STEP ! Road 4, left side boundary
 0, 1001
 65, 1000
 85, 1003
ENDTABLE
ROAD_NEW_ID_GAIN(4,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(4,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(4,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(4,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(4,2) 0 ; - ! Constant ID, Road 4, right side boundary
ROAD_NEW_ID_OFFSET(4,2) 0 ; - ! Offset added (after gain) to get ID

! 1D table: col 1 = S (m), col 2 = ID (-)
ROAD_NEW_ID_TABLE(5,1) STEP ! Road 5, left side boundary
 0, 1003
 65, 1000
 85, 1001
ENDTABLE
ROAD_NEW_ID_GAIN(5,1) 1 ! Gain multiplied with calculated value to get ID
ROAD_NEW_ID_OFFSET(5,1) 0 ; - ! Offset added (after gain) to get ID
SSTART_ROAD_NEW_ID(5,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_ID(5,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_ID)

ROAD_NEW_ID_CONSTANT(5,2) 0 ; - ! Constant ID, Road 5, right side boundary
ROAD_NEW_ID_OFFSET(5,2) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(6,1) 0 ; - ! [D] Constant ID, Road 6, left side boundary
ROAD_NEW_ID_OFFSET(6,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(6,2) 0 ; - ! [D] Constant ID, Road 6, right side boundary
ROAD_NEW_ID_OFFSET(6,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_NEW_S: Estimate of station in new road (left/right) when a switch occurs. New
! S is a function of S (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. New S from the calculation can be adjusted with
! ROAD_NEW_S_GAIN and ROAD_NEW_S_OFFSET. S used in the calculation can be adjusted
! with SSCALE_ROAD_NEW_S and SSTART_ROAD_NEW_S. This configurable function supports
! 400 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IROAD and ISIDE are used to identify the dataset when reading data.

ROAD_NEW_S_CONSTANT(1,2) 75 ; m ! Constant new S, Road 1, right side boundary
ROAD_NEW_S_GAIN(1,2) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get new S

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(2,1) LINEAR ! Road 2, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 0
 90, 25
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(2,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(2,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(2,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(3,1) LINEAR ! Road 3, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 25
 90, 50
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(3,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(3,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(3,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(3,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(4,1) LINEAR ! Road 4, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 50
 90, 75
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(4,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(4,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(4,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(4,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! 1D table: col 1 = S (m), col 2 = new S (m)
ROAD_NEW_S_TABLE(5,1) LINEAR ! Road 5, left side boundary
 0, 150
 50, 100
 60, 90
 60.001, 75
 90, 100
 90.001, 60
 100, 50
 150, 0
ENDTABLE
ROAD_NEW_S_GAIN(5,1) 1 ! Gain multiplied with calculated value to get new S
ROAD_NEW_S_OFFSET(5,1) 0 ; m ! Offset added (after gain) to get new S
SSTART_ROAD_NEW_S(5,1) 0 ; m ! Offset subtracted from S
SSCALE_ROAD_NEW_S(5,1) 1 ! Scale factor divided into (S - SSTART_ROAD_NEW_S)

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(2) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(2)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(3) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(3)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(4) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(4)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(5) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(5)   0 ; m ! Offset added (after gain) to get elevation

ROAD_ZS_CONSTANT(6) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(6)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(2) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(2)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(2)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(2) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(2) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(3) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(3)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(3)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(3) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(3) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(4) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(4)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(4)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(4) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(4) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(5) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(5)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(5)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(5) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(5) 1 ; - ! [D] Constant RR_SURF component due to lateral position

RR_SURF_CONSTANT(6) 1 ; - ! [D] Constant RR_SURF component due to station
RR_SURF_GAIN(6)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(6)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(6) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(6) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 7 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(2,1) 1 ; - ! Constant gain, unit 2, axle 1
R_STEER_SPEED_GAIN(2,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(2,1) 0 ; - ! Offset added (after gain) to get gain

! SENSOR_ANTENNA_ELEVATION: Sensor antenna sensitivity to elevation. Sensitivity is
! a function of Elevation (CONSTANT or TABLE). Alternatively, a custom equation can
! be defined at runtime. Sensitivity from the calculation can be adjusted with
! SENSOR_ANTENNA_ELEVATION_GAIN and SENSOR_ANTENNA_ELEVATION_OFFSET. This
! configurable function supports 99 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISENSOR is used to identify the dataset
! when reading data.

SENSOR_ANTENNA_ELEVATION_CONSTANT(1) 1 ; - ! Constant Sensitivity
SENSOR_ANTENNA_ELEVATION_GAIN(1) 1 ! Gain multiplied with calculated value to get
                                   ! Sensitivity
SENSOR_ANTENNA_ELEVATION_OFFSET(1) 0 ; - ! Offset added (after gain) to get
                                     ! Sensitivity

! SENSOR_ANTENNA_RANGE: Sensor antenna sensitivity to range. Sensitivity can be a
! nonlinear CARPET function of Bearing and Distance or a function of Distance
! (CONSTANT or TABLE) multiplied by a function SENSOR_ANTENNA_BEARING of Bearing
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! Sensitivity from the calculation can be adjusted with SENSOR_ANTENNA_RANGE_GAIN and
! SENSOR_ANTENNA_RANGE_OFFSET. Distance used in the calculation can be adjusted with
! DSCALE_SENSOR_ANTENNA_RANGE and DSTART_SENSOR_ANTENNA_RANGE. Bearing used in the
! calculation can be adjusted with BSCALE_SENSOR_ANTENNA_RANGE and
! BSTART_SENSOR_ANTENNA_RANGE. This configurable function supports 99 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ISENSOR
! is used to identify the dataset when reading data.

SENSOR_ANTENNA_RANGE_CONSTANT(1) 1 ; - ! Constant Sensitivity component due to
                                   ! Distance
SENSOR_ANTENNA_RANGE_GAIN(1) 1 ! Gain multiplied with calculated value to get
                               ! Sensitivity
SENSOR_ANTENNA_RANGE_OFFSET(1) 0 ; - ! Offset added (after gain) to get Sensitivity
SENSOR_ANTENNA_BEARING_CONSTANT(1) 1 ; - ! Constant Sensitivity scaling due to
                                     ! Bearing

! SENSOR_MAP: Reflectiveness of object, based on sensor type and object type.
! Reflectiveness can be a nonlinear CARPET function of sensor type and target type.

SENSOR_MAP_CONSTANT 1 ; - ! [D] Constant reflectiveness

! SPEED_AX_BRAKE: Speed controller: Ax limit under pure braking. Ax limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AX_BRAKE_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ax limit from the calculation can be adjusted with SPEED_AX_BRAKE_GAIN
! and SPEED_AX_BRAKE_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AX_BRAKE and SSTART_SPEED_AX_BRAKE. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AX_BRAKE and VX_START_SPEED_AX_BRAKE. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AX_BRAKE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_BRAKE_CONSTANT(2) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_BRAKE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_BRAKE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_BRAKE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_BRAKE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AX_THROTTLE: Speed controller: Ax limit under pure throttle. Ax limit can be
! a nonlinear CARPET function of speed and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SPEED_AX_THROTTLE_V of
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Ax limit from the calculation can be adjusted with
! SPEED_AX_THROTTLE_GAIN and SPEED_AX_THROTTLE_OFFSET. Station used in the
! calculation can be adjusted with SSCALE_SPEED_AX_THROTTLE and
! SSTART_SPEED_AX_THROTTLE. Speed used in the calculation can be adjusted with
! VX_SCALE_SPEED_AX_THROTTLE and VX_START_SPEED_AX_THROTTLE. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AX_THROTTLE_CONSTANT(1) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(1) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(1) 1 ; - ! [D] Constant Ax limit component due to speed

SPEED_AX_THROTTLE_CONSTANT(2) 0.2 ; g ! Constant Ax limit component due to station
SPEED_AX_THROTTLE_GAIN(2) 1 ! Gain multiplied with calculated value to get Ax limit
SPEED_AX_THROTTLE_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ax limit
SPEED_AX_THROTTLE_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AX_THROTTLE_V_CONSTANT(2) 1 ; - ! [D] Constant Ax limit component due to speed

! SPEED_AY_LEFT: Speed controller: Ay limit when turning left. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_LEFT_V of speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Ay limit from the calculation can be adjusted with SPEED_AY_LEFT_GAIN and
! SPEED_AY_LEFT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_LEFT and SSTART_SPEED_AY_LEFT. Speed used in the calculation can be
! adjusted with VX_SCALE_SPEED_AY_LEFT and VX_START_SPEED_AY_LEFT. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IVEHICLE is used to identify the dataset when reading
! data.

SPEED_AY_LEFT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_LEFT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_LEFT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_LEFT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_LEFT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_LEFT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_AY_RIGHT: Speed controller: Ay limit when turning right. Ay limit can be a
! nonlinear CARPET function of speed and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SPEED_AY_RIGHT_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Ay limit from the calculation can be adjusted with SPEED_AY_RIGHT_GAIN
! and SPEED_AY_RIGHT_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_AY_RIGHT and SSTART_SPEED_AY_RIGHT. Speed used in the calculation can
! be adjusted with VX_SCALE_SPEED_AY_RIGHT and VX_START_SPEED_AY_RIGHT. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

SPEED_AY_RIGHT_CONSTANT(1) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(1) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(1) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(1) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(1) 1 ; - ! [D] Constant Ay limit component due to speed

SPEED_AY_RIGHT_CONSTANT(2) 0.2 ; g ! Constant Ay limit component due to station
SPEED_AY_RIGHT_GAIN(2) 1 ! Gain multiplied with calculated value to get Ay limit
SPEED_AY_RIGHT_OFFSET(2) 0 ; g ! Offset added (after gain) to get Ay limit
SPEED_AY_RIGHT_COMBINE(2) MULTIPLY ! How to combine the two components
SPEED_AY_RIGHT_V_CONSTANT(2) 1 ; - ! [D] Constant Ay limit component due to speed

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Target Speed for Roundabout
SPEED_TARGET_CONSTANT(1) 40 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(1) STEP ! step interpolation, flat-line extrapolation
 50, 80
 60, 30
 90, 80
ENDTABLE
SSTART_SPEED_TARGET(1) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(1) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

SPEED_TARGET_ID(2)  2  ! Target Speed for Roundabout
SPEED_TARGET_CONSTANT(2) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(2) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(2) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(2) km/h ;

! 1D table: col 1 = station (m), col 2 = speed component due to station (km/h)
SPEED_TARGET_S_TABLE(2) STEP ! step interpolation, flat-line extrapolation
 50, 80
 60, 30
 90, 80
ENDTABLE
SSTART_SPEED_TARGET(2) 0 ; m ! Offset subtracted from station
SSCALE_SPEED_TARGET(2) 1 ! Scale factor divided into (station - SSTART_SPEED_TARGET)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 14 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -40, -35.655
 -38, -34.008
 -36, -32.353
 -34, -30.692
 -32, -29.02
 -30, -27.339
 -28, -25.645
 -26, -23.939
 -24, -22.218
 -22, -20.481
 -20, -18.728
 -18, -16.956
 -16, -15.165
 -14, -13.353
 -12, -11.519
 -10, -9.662
 -8, -7.782
 -6, -5.876
 -4, -3.944
 -2, -1.986
 0, 0
 2, 2.014
 4, 4.057
 6, 6.129
 8, 8.231
 10, 10.362
 12, 12.522
 14, 14.712
 16, 16.93
 18, 19.176
 20, 21.449
 22, 23.748
 24, 26.071
 26, 28.418
 28, 30.785
 30, 33.171
 32, 35.574
 34, 37.991
 36, 40.42
 38, 42.857
 40, 45.301
ENDTABLE
STEER_KIN_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -40, -45.301
 -38, -42.857
 -36, -40.42
 -34, -37.991
 -32, -35.574
 -30, -33.171
 -28, -30.785
 -26, -28.418
 -24, -26.071
 -22, -23.748
 -20, -21.449
 -18, -19.176
 -16, -16.93
 -14, -14.712
 -12, -12.522
 -10, -10.362
 -8, -8.231
 -6, -6.129
 -4, -4.057
 -2, -2.014
 0, 0
 2, 1.986
 4, 3.944
 6, 5.876
 8, 7.782
 10, 9.662
 12, 11.519
 14, 13.353
 16, 15.165
 18, 16.956
 20, 18.728
 22, 20.481
 24, 22.218
 26, 23.939
 28, 25.645
 30, 27.339
 32, 29.02
 34, 30.692
 36, 32.353
 38, 34.008
 40, 35.655
ENDTABLE
STEER_KIN_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 7 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IUNIT and IAXLE are used to identify the dataset when reading
! data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 3
SUSP_AXLE_ROLL_STEER_OFFSET(2,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 7 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IUNIT and IAXLE are used to identify
! the dataset when reading data.

SUSP_DIVE_AXLE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive, unit 1, axle 1
SUSP_DIVE_AXLE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive, unit 1, axle 2
SUSP_DIVE_AXLE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,1) 0 ; deg ! Constant suspension dive, unit 2, axle 1
SUSP_DIVE_AXLE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,2) 0 ; deg ! Constant suspension dive, unit 2, axle 2
SUSP_DIVE_AXLE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,3) 0 ; deg ! Constant suspension dive, unit 2, axle 3
SUSP_DIVE_AXLE_OFFSET(2,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,1) 0 ; deg ! Constant suspension dive, unit 3, axle 1
SUSP_DIVE_AXLE_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,2) 0 ; deg ! Constant suspension dive, unit 3, axle 2
SUSP_DIVE_AXLE_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 7 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IUNIT and IAXLE
! are used to identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1,1) 0 ; mm ! Constant X axle movement forward, unit 1, axle 1
SUSP_X_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(1,2) 0 ; mm ! Constant X axle movement forward, unit 1, axle 2
SUSP_X_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,1) 0 ; mm ! Constant X axle movement forward, unit 2, axle 1
SUSP_X_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,2) 0 ; mm ! Constant X axle movement forward, unit 2, axle 2
SUSP_X_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,3) 0 ; mm ! Constant X axle movement forward, unit 2, axle 3
SUSP_X_AXLE_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,1) 0 ; mm ! Constant X axle movement forward, unit 3, axle 1
SUSP_X_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,2) 0 ; mm ! Constant X axle movement forward, unit 3, axle 2
SUSP_X_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 7 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,1) SPLINE ! unit 1, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,1) SPLINE ! unit 2, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,3) SPLINE ! unit 2, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,1) SPLINE ! unit 3, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,2) SPLINE ! unit 3, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IVEHICLE is used to identify the dataset
! when reading data.

THROTTLE_ENGINE_CONSTANT(1) 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

THROTTLE_ENGINE_CONSTANT(2) 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                            ! throttle input

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IVEHICLE is used to
! identify the dataset when reading data.

TPREV_CONSTANT(1) 0.75 ; s ! Constant preview time
TPREV_GAIN(1)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(1)     0 ; s ! Offset added (after gain) to get preview time

TPREV_CONSTANT(2) 0.75 ; s ! Constant preview time
TPREV_GAIN(2)       1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET(2)     0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 34 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IVEHICLE and IGEAR are used to identify the dataset when
! reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,1) LINEAR_FLAT ! vehicle 1, gear shift 1<->2
 0, 160.83
 0.1, 160.83
 0.2, 170.65
 0.3, 180.46
 0.4, 190.27
 0.5, 200.09
 0.6, 209.9
 0.7, 219.71
 0.8, 229.53
 0.9, 218.96
 1, 218.96
ENDTABLE
UPSHIFT_TRANS_GAIN(1,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,2) LINEAR_FLAT ! vehicle 1, gear shift 2<->3
 0, 352.09
 0.1, 352.09
 0.2, 368.75
 0.3, 385.41
 0.4, 402.08
 0.5, 418.74
 0.6, 435.41
 0.7, 452.07
 0.8, 468.74
 0.9, 485.4
 1, 485.4
ENDTABLE
UPSHIFT_TRANS_GAIN(1,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,3) LINEAR_FLAT ! vehicle 1, gear shift 3<->4
 0, 513.32
 0.1, 513.32
 0.2, 553.91
 0.3, 594.49
 0.4, 635.08
 0.5, 675.66
 0.6, 716.25
 0.7, 756.84
 0.8, 797.42
 0.9, 838.01
 1, 838.01
ENDTABLE
UPSHIFT_TRANS_GAIN(1,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,4) LINEAR_FLAT ! vehicle 1, gear shift 4<->5
 0, 807.14
 0.2, 807.14
 0.3, 874.84
 0.4, 942.55
 0.5, 1010.3
 0.6, 1078
 0.7, 1145.7
 0.8, 1213.4
 0.9, 1281.1
 1, 1281.1
ENDTABLE
UPSHIFT_TRANS_GAIN(1,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,5) LINEAR_FLAT ! vehicle 1, gear shift 5<->6
 0, 1030.9
 0.2, 1030.9
 0.3, 1163
 0.4, 1295.2
 0.5, 1427.4
 0.6, 1559.5
 0.7, 1691.7
 0.8, 1823.9
 0.9, 1934
 1, 1934
ENDTABLE
UPSHIFT_TRANS_GAIN(1,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1,6) LINEAR_FLAT ! vehicle 1, gear shift 6<->7
 0, 2743.9
 0.8, 2743.9
 0.9, 2907.8
 1, 2907.8
ENDTABLE
UPSHIFT_TRANS_GAIN(1,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(1,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(1,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,1) LINEAR_FLAT ! vehicle 2, gear shift 1<->2
 0, 51
 0.2, 51
 0.8, 100
 1, 100
ENDTABLE
UPSHIFT_TRANS_GAIN(2,1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,2) LINEAR_FLAT ! vehicle 2, gear shift 2<->3
 0, 73
 0.2, 73
 0.8, 150
 1, 150
ENDTABLE
UPSHIFT_TRANS_GAIN(2,2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,3) LINEAR_FLAT ! vehicle 2, gear shift 3<->4
 0, 86
 0.2, 86
 0.8, 220
 1, 220
ENDTABLE
UPSHIFT_TRANS_GAIN(2,3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,4) LINEAR_FLAT ! vehicle 2, gear shift 4<->5
 0, 112
 0.2, 112
 0.8, 260
 1, 260
ENDTABLE
UPSHIFT_TRANS_GAIN(2,4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,5) LINEAR_FLAT ! vehicle 2, gear shift 5<->6
 0, 130
 0.2, 130
 0.8, 310
 1, 310
ENDTABLE
UPSHIFT_TRANS_GAIN(2,5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,6) LINEAR_FLAT ! vehicle 2, gear shift 6<->7
 0, 146
 0.2, 146
 0.8, 349
 1, 349
ENDTABLE
UPSHIFT_TRANS_GAIN(2,6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,7) LINEAR_FLAT ! vehicle 2, gear shift 7<->8
 0, 167
 0.2, 167
 0.8, 411
 1, 411
ENDTABLE
UPSHIFT_TRANS_GAIN(2,7) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,7) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,7) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,7) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,8) LINEAR_FLAT ! vehicle 2, gear shift 8<->9
 0, 195
 0.2, 195
 0.8, 481
 1, 481
ENDTABLE
UPSHIFT_TRANS_GAIN(2,8) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,8) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,8) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,8) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,9) LINEAR_FLAT ! vehicle 2, gear shift 9<->10
 0, 229
 0.2, 229
 0.8, 563
 1, 563
ENDTABLE
UPSHIFT_TRANS_GAIN(2,9) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
UPSHIFT_TRANS_OFFSET(2,9) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_UPSHIFT(2,9) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,9) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,10) LINEAR_FLAT ! vehicle 2, gear shift 10<->11
 0, 273
 0.2, 273
 0.8, 659
 1, 659
ENDTABLE
UPSHIFT_TRANS_GAIN(2,10) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,10) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,10) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,10) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,11) LINEAR_FLAT ! vehicle 2, gear shift 11<->12
 0, 321
 0.2, 321
 0.8, 786
 1, 786
ENDTABLE
UPSHIFT_TRANS_GAIN(2,11) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,11) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,11) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,11) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,12) LINEAR_FLAT ! vehicle 2, gear shift 12<->13
 0, 386
 0.2, 386
 0.8, 923
 1, 923
ENDTABLE
UPSHIFT_TRANS_GAIN(2,12) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,12) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,12) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,12) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,13) LINEAR_FLAT ! vehicle 2, gear shift 13<->14
 0, 453
 0.2, 453
 0.8, 1111
 1, 1111
ENDTABLE
UPSHIFT_TRANS_GAIN(2,13) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,13) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,13) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,13) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,14) LINEAR_FLAT ! vehicle 2, gear shift 14<->15
 0, 534
 0.2, 534
 0.8, 1304
 1, 1304
ENDTABLE
UPSHIFT_TRANS_GAIN(2,14) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,14) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,14) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,14) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,15) LINEAR_FLAT ! vehicle 2, gear shift 15<->16
 0, 625
 0.2, 625
 0.8, 1538
 1, 1538
ENDTABLE
UPSHIFT_TRANS_GAIN(2,15) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,15) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,15) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,15) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,16) LINEAR_FLAT ! vehicle 2, gear shift 16<->17
 0, 727
 0.2, 727
 0.8, 1800
 1, 1800
ENDTABLE
UPSHIFT_TRANS_GAIN(2,16) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,16) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,16) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,16) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2,17) LINEAR_FLAT ! vehicle 2, gear shift 17<->18
 0, 856
 0.2, 856
 0.8, 2093
 1, 2093
ENDTABLE
UPSHIFT_TRANS_GAIN(2,17) 1 ! Gain multiplied with calculated value to get
                           ! transmission speed
UPSHIFT_TRANS_OFFSET(2,17) 0 ; rpm ! Offset added (after gain) to get transmission
                             ! speed
THROTTLE_START_UPSHIFT(2,17) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2,17) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER VEHICLE = 202; - ; Vehicle (object type)
DEFINE_PARAMETER AX_BRAKE = 2; m/s2 ; Threshold for applying brakes
DEFINE_PARAMETER NCYLS = 6; - ; Number of engine cylinders, used for audio
DEFINE_PARAMETER MAX_BRAKE_TORQUE = 250; N-m ; Max engine braking torque for audio
DEFINE_PARAMETER MAX_TORQUE = 900; N-m ; Max engine torque for audio

DEFINE_OUTPUT DistCrit = 0; m ; Distance to object bdry 
DEFINE_OUTPUT VxCrit = 0; km/h ; Sensor speed detection 
DEFINE_OUTPUT AxCrit = 0; m/s2 ; Required decel for nearest 
DEFINE_OUTPUT ApplyAEB = 0; - ; Boolean: apply brakes? 
DEFINE_OUTPUT v_mod2 = 0; - ; Audio control (power off) 
DEFINE_OUTPUT f_mod = 32.3726; Hz ; Frequency of piston firing 
DEFINE_OUTPUT v_mod1 = 0.471026; - ; Audio control (power on) 

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT X_OBJ_1 = X_DM_1;
EQ_OUT Y_OBJ_1 = Y_DM_1;
EQ_OUT DISTCRIT = IF(MAGS1_1, MAX(1, X_S1_1 -2 -MSGS1_1), 0);
EQ_OUT VXCRIT = IF(DISTCRIT > 0, VX_S1_1, 0);
EQ_OUT AXCRIT = IF(VXCRIT < 0, VXCRIT*VXCRIT/(2*DISTCRIT), 0);
EQ_OUT APPLYAEB = (AXCRIT > AX_BRAKE) | ((AXCRIT > 0.25) & (DISTCRIT < 1.1));
EQ_OUT AX_SCCMD = -AXCRIT;
EQ_OUT V_MOD2 = IF_GT_0_THEN(M_ENGOUT, 0, POW(ABS(M_ENGOUT/MAX_BRAKE_TORQUE), 0.5));
EQ_OUT F_MOD = AV_ENG*NCYLS/6;
EQ_OUT V_MOD1 = IF_GT_0_THEN(M_ENGOUT, POW(ABS(M_ENGOUT/MAX_TORQUE), 0.5), 0);
EQ_OUT X_OBJ_4 = X_DM_1_V2;
EQ_OUT Y_OBJ_4 = Y_DM_1_V2;

!------------------------------------------------------------------------------------
! EVENTS
!------------------------------------------------------------------------------------
! Each event is defined with a formula and an optional pathname for a parsfile to
! read if the specified formula is not zero. If no pathname is specified and the
! specified formula is not zero, then the run stops.
SET_EVENT_ID 1
DEFINE_EVENT APPLYAEB; Events\Events_b0a6df30-8e8f-4962-aac6-09478e36c58e.par ! ID 1
SET_EVENT_ID 0

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_L3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_L4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_L5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_L6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_L7    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L7
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_R4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_R5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_R6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_R7    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L7
SV_AERO_ROAD_ID_1 1000 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_2 1002 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_3 1002 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 62.82379668 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_2 159.7765982 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_3 158.2711876 ; m ! Road path station for tracked aero road point
SV_ART_H2_OLD 0.05446909842 ; deg ! Articulation for hitch 2
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission, veh #1
SV_AT_LOCKED_2      0 ; - ! Lock state of automatic transmission, veh #2
SV_AVX  -0.4811797105 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 1 {AVx}
SV_AVX_2 0.0620517256 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 2 {AVx_2}
SV_AVX_A1 0.08696071354 ; deg/s ! ODE: Roll rate of axle 1
SV_AVX_A2 0.2899349589 ; deg/s ! ODE: Roll rate of axle 2
SV_AVX_A3 -0.07349325017 ; deg/s ! ODE: Roll rate of axle 3
SV_AVX_A4 -0.06288995423 ; deg/s ! ODE: Roll rate of axle 4
SV_AVX_A5 -0.05193412909 ; deg/s ! ODE: Roll rate of axle 5
SV_AVX_A6 -0.0184601234 ; deg/s ! ODE: Roll rate of axle 6
SV_AVX_A7 -0.01985667269 ; deg/s ! ODE: Roll rate of axle 7
SV_AVX_SM3 0.01729245121 ; deg/s ! ODE: Body-X roll rate of unit 3 sprung-mass
SV_AVY   0.8510936759 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 1 {AVy}
SV_AVY_2 -0.3887332658 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 2
                       ! {AVy_2}
SV_AVY_L1 111.3423203 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD 111.3318391 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 113.2040412 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD 113.1940634 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_L3 217.3474259 ; rpm ! ODE: Spin of wheel L3 {AVy_L3}
SV_AVY_L3_OLD 217.3412893 ; rpm ! Spin of wheel L3 (previous time step)
SV_AVY_L4  220.585694 ; rpm ! ODE: Spin of wheel L4 {AVy_L4}
SV_AVY_L4_OLD 220.5796422 ; rpm ! Spin of wheel L4 (previous time step)
SV_AVY_L5 220.5640684 ; rpm ! ODE: Spin of wheel L5 {AVy_L5}
SV_AVY_L5_OLD 220.5582422 ; rpm ! Spin of wheel L5 (previous time step)
SV_AVY_L6 217.2228134 ; rpm ! ODE: Spin of wheel L6 {AVy_L6}
SV_AVY_L6_OLD 217.2176029 ; rpm ! Spin of wheel L6 (previous time step)
SV_AVY_L7 217.2228504 ; rpm ! ODE: Spin of wheel L7 {AVy_L7}
SV_AVY_L7_OLD 217.21764 ; rpm ! Spin of wheel L7 (previous time step)
SV_AVY_R1 116.3429682 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD 116.3383684 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 118.2063231 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD 118.2011031 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVY_R3 217.3532491 ; rpm ! ODE: Spin of wheel R3 {AVy_R3}
SV_AVY_R3_OLD 217.3470058 ; rpm ! Spin of wheel R3 (previous time step)
SV_AVY_R4 220.0588673 ; rpm ! ODE: Spin of wheel R4 {AVy_R4}
SV_AVY_R4_OLD 220.0526783 ; rpm ! Spin of wheel R4 (previous time step)
SV_AVY_R5 220.0481306 ; rpm ! ODE: Spin of wheel R5 {AVy_R5}
SV_AVY_R5_OLD 220.0421259 ; rpm ! Spin of wheel R5 (previous time step)
SV_AVY_R6 217.1973301 ; rpm ! ODE: Spin of wheel R6 {AVy_R6}
SV_AVY_R6_OLD 217.1921373 ; rpm ! Spin of wheel R6 (previous time step)
SV_AVY_R7 217.1973494 ; rpm ! ODE: Spin of wheel R7 {AVy_R7}
SV_AVY_R7_OLD 217.1921567 ; rpm ! Spin of wheel R7 (previous time step)
SV_AVY_SM3 0.03322215854 ; deg/s ! ODE: Body-Y pitch rate of unit 3 sprung-mass
SV_AVZ    8.118911106 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 1 {AVz}
SV_AVZ_2 0.01024942984 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 2 {AVz_2}
SV_AVZ_SM3 -0.04974935715 ; deg/s ! ODE: Body-Z yaw rate of unit 3 sprung-mass
SV_AV_CL            0 ; rpm ! Clutch relative spin, veh #1
SV_AV_CL_2          0 ; rpm ! Clutch relative spin, veh #2
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate, vehicle #1
SV_AV_COL_CONTROL_2 0 ; deg/s ! ODE: Steering wheel angular rate, vehicle #2
SV_AV_ENG 1942.356287 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}, veh #1
SV_AV_ENG_2 1569.89875 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}, veh #2
SV_AV_SHAFT_L_D1_2 220.585694 ; rpm ! ODE: Diff1 Left (first) output shaft speed,
                              ! veh #2
SV_AV_SHAFT_L_D2 113.2040412 ; rpm ! ODE: Diff2 Left (first) output shaft speed, veh
                             ! #1
SV_AV_SHAFT_L_D2_2 220.5640684 ; rpm ! ODE: Diff2 Left (first) output shaft speed,
                               ! veh #2
SV_AV_SHAFT_L_D3_2 969.4180349 ; rpm ! ODE: Diff3 Left (first) output shaft speed,
                               ! veh #2
SV_AV_SHAFT_R_D1_2 220.0588673 ; rpm ! ODE: Diff1 Right (second) output shaft speed,
                               ! veh #2
SV_AV_SHAFT_R_D2 118.2063231 ; rpm ! ODE: Diff2 Right (second) output shaft speed,
                             ! veh #1
SV_AV_SHAFT_R_D2_2 220.0481306 ; rpm ! ODE: Diff2 Right (second) output shaft speed,
                               ! veh #2
SV_AV_SHAFT_R_D3_2 969.3468378 ; rpm ! ODE: Diff3 Right (second) output shaft speed,
                               ! veh #2
SV_AV_SW -399.0964879 ; deg/s ! ODE: Steering wheel angular rate, veh. #1 {StrAV_SW}
SV_AV_SW_2 0.3402924982 ; deg/s ! ODE: Steering wheel angular rate, veh. #2
                        ! {StrAV_SW_2}
SV_AV_TC  1942.356287 ; rpm ! ODE: Torque coupling output shaft spin, veh #1
SV_AV_TC_2 1569.89875 ; rpm ! ODE: Torque coupling output shaft spin, veh #2
SV_AV_TR_OUT 574.6616234 ; rpm ! ODE: Transmission output shaft spin, veh #1
SV_AV_TR_OUT_2 969.0733028 ; rpm ! ODE: Transmission output shaft spin, veh #2
SV_A_CONTROL        0 ; deg ! ODE: Steering wheel angle, vehicle #1
SV_A_CONTROL_2      0 ; deg ! ODE: Steering wheel angle, vehicle #2
SV_BETA   3.495002538 ; deg ! Sideslip (ISO)
SV_BETA_2 -0.2128764092 ; deg ! Sideslip (ISO)
SV_BETA_3 -0.3057201291 ; deg ! Sideslip (ISO)
SV_BETA_RD 3.489255738 ; deg ! Sideslip using road axes
SV_BETA_RD_2 -0.2632598046 ; deg ! Sideslip using road axes
SV_BETA_RD_3 -0.3071297905 ; deg ! Sideslip using road axes
SV_BRAKE_STATE      0 ; - ! Braking state, used for clutch control, veh #1
SV_BRAKE_STATE_2    0 ; - ! Braking state, used for clutch control, veh #2
SV_CL_2ND_DIFF_LOCKED_1_2 0 ; - ! 2nd Clutch lock state for 1st drive axle diff, veh
                            ! #2
SV_CL_2ND_DIFF_LOCKED_2 0 ; - ! 2nd Clutch lock state for 2nd drive axle diff, veh
                          ! #1
SV_CL_2ND_DIFF_LOCKED_2_2 0 ; - ! 2nd Clutch lock state for 2nd drive axle diff, veh
                            ! #2
SV_CL_2ND_DIFF_LOCKED_3_2 0 ; - ! 2nd Clutch lock state for inter-axle diff for
                            ! axles 1,2, veh #2
SV_CL_2ND_DIFF_SLIP_REF_1_2 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff,
                              ! veh #2
SV_CL_2ND_DIFF_SLIP_REF_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff,
                            ! veh #1
SV_CL_2ND_DIFF_SLIP_REF_2_2 0 ; deg ! 2nd Clutch ref. angle for 2nd drive axle diff,
                              ! veh #2
SV_CL_2ND_DIFF_SLIP_REF_3_2 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                              ! axles 1,2, veh #2
SV_CL_2ND_DIFF_SPIN_1_2 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff, veh
                          ! #2
SV_CL_2ND_DIFF_SPIN_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff, veh #1
SV_CL_2ND_DIFF_SPIN_2_2 0 ; rpm ! 2nd Clutch rel. spin for 2nd drive axle diff, veh
                          ! #2
SV_CL_2ND_DIFF_SPIN_3_2 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for axles
                          ! 1,2, veh #2
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?, veh #1
SV_CL_ACCEL_SHIFT_2 0 ; - ! Is clutch in auto control for low-speed accel?, veh #2
SV_CL_AUTO_BRAKE    0 ; - ! Boolean: 1 if auto clutch for low-speed braking, veh #1
SV_CL_AUTO_BRAKE_2  0 ; - ! Boolean: 1 if auto clutch for low-speed braking, veh #2
SV_CL_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto clutch for a gear shift, veh #1
SV_CL_AUTO_SHIFT_2  0 ; - ! Boolean: 1 if auto clutch for a gear shift, veh #2
SV_CL_CON           0 ; - ! Transmission clutch control {ClutchTr}, veh #1
SV_CL_CON_2         0 ; - ! Transmission clutch control {ClutchTr}, veh #2
SV_CL_DIFF_LOCKED_1_2 0 ; - ! Clutch lock state for 1st drive axle diff, veh #2
SV_CL_DIFF_LOCKED_2 0 ; - ! Clutch lock state for 2nd drive axle diff, veh #1
SV_CL_DIFF_LOCKED_2_2 0 ; - ! Clutch lock state for 2nd drive axle diff, veh #2
SV_CL_DIFF_LOCKED_3_2 0 ; - ! Clutch lock state for inter-axle diff for axles 1,2,
                        ! veh #2
SV_CL_DIFF_SLIP_REF_1_2 0 ; deg ! Clutch ref. angle for 1st drive axle diff, veh #2
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff, veh #1
SV_CL_DIFF_SLIP_REF_2_2 0 ; deg ! Clutch ref. angle for 2nd drive axle diff, veh #2
SV_CL_DIFF_SLIP_REF_3_2 0 ; deg ! Clutch ref. angle for inter-axle diff for axles
                          ! 1,2, veh #2
SV_CL_DIFF_SPIN_1_2 0.5269639149 ; rpm ! Clutch rel. spin for 1st drive axle diff,
                                 ! veh #2
SV_CL_DIFF_SPIN_2 -5.007039686 ; rpm ! Clutch rel. spin for 2nd drive axle diff, veh
                               ! #1
SV_CL_DIFF_SPIN_2_2 0.516116282 ; rpm ! Clutch rel. spin for 2nd drive axle diff,
                                ! veh #2
SV_CL_DIFF_SPIN_3_2 0.07029513432 ; rpm ! Clutch rel. spin for inter-axle diff for
                                  ! axles 1,2, veh #2
SV_CL_LOCKED        1 ; - ! Clutch lockup state, veh #1
SV_CL_LOCKED_2      1 ; - ! Clutch lockup state, veh #2
SV_CL_PRESS         0 ; - ! Initial direction state for automatic clutch, veh #1
SV_CL_PRESS_2       0 ; - ! Initial direction state for automatic clutch, veh #2
SV_CL_TWIN_LOCKED_LF_2 0 ; - ! Lock state of LF twin clutch, veh #2
SV_CL_TWIN_LOCKED_LR 0 ; - ! Lock state of LR twin clutch, veh #1
SV_CL_TWIN_LOCKED_LR_2 0 ; - ! Lock state of LR twin clutch, veh #2
SV_CL_TWIN_LOCKED_L_D3_2 0 ; - ! Lock state of L Diff3 twin clutch, veh #2
SV_CL_TWIN_LOCKED_RF_2 0 ; - ! Lock state of RF twin clutch, veh #2
SV_CL_TWIN_LOCKED_RR 0 ; - ! Lock state of RR twin clutch, veh #1
SV_CL_TWIN_LOCKED_RR_2 0 ; - ! Lock state of RR twin clutch, veh #2
SV_CL_TWIN_LOCKED_R_D3_2 0 ; - ! Lock state of R Diff3 twin clutch, veh #2
SV_CL_TWIN_SPIN_LF_2 0 ; rpm ! Rel. spin of LF twin clutch, veh #2
SV_CL_TWIN_SPIN_LR  0 ; rpm ! Rel. spin of LR twin clutch, veh #1
SV_CL_TWIN_SPIN_LR_2 0 ; rpm ! Rel. spin of LR twin clutch, veh #2
SV_CL_TWIN_SPIN_L_D3_2 0 ; rpm ! Rel. spin of L Diff3 twin clutch, veh #2
SV_CL_TWIN_SPIN_RF_2 0 ; rpm ! Rel. spin of RF twin clutch, veh #2
SV_CL_TWIN_SPIN_RR  0 ; rpm ! Rel. spin of RR twin clutch, veh #1
SV_CL_TWIN_SPIN_RR_2 0 ; rpm ! Rel. spin of RR twin clutch, veh #2
SV_CL_TWIN_SPIN_R_D3_2 0 ; rpm ! Rel. spin of R Diff3 twin clutch, veh #2
SV_CMP_S_L1 61.04573067 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 6.741387402 ; mm ! Compression of ride spring L2
SV_CMP_S_L3 59.85865183 ; mm ! Compression of ride spring L3
SV_CMP_S_L4 41.44815632 ; mm ! Compression of ride spring L4
SV_CMP_S_L5 41.44815632 ; mm ! Compression of ride spring L5
SV_CMP_S_L6 45.27264207 ; mm ! Compression of ride spring L6
SV_CMP_S_L7 45.27264207 ; mm ! Compression of ride spring L7
SV_CMP_S_R1 64.38517477 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 10.00988661 ; mm ! Compression of ride spring R2
SV_CMP_S_R3 68.63460011 ; mm ! Compression of ride spring R3
SV_CMP_S_R4 50.43132154 ; mm ! Compression of ride spring R4
SV_CMP_S_R5 50.43132154 ; mm ! Compression of ride spring R5
SV_CMP_S_R6 54.95726781 ; mm ! Compression of ride spring R6
SV_CMP_S_R7 54.95726781 ; mm ! Compression of ride spring R7
SV_CMP_T_L1I 17.77179481 ; mm ! Tire L1i compression
SV_CMP_T_L1O        0 ; mm ! Tire L1o compression
SV_CMP_T_L2I 5.581047115 ; mm ! Tire L2i compression
SV_CMP_T_L2O 5.5456279 ; mm ! Tire L2o compression
SV_CMP_T_L3I 18.49960158 ; mm ! Tire L3i compression
SV_CMP_T_L3O        0 ; mm ! Tire L3o compression
SV_CMP_T_L4I 17.16734593 ; mm ! Tire L4i compression
SV_CMP_T_L4O 16.51805355 ; mm ! Tire L4o compression
SV_CMP_T_L5I 17.29002389 ; mm ! Tire L5i compression
SV_CMP_T_L5O 16.64839133 ; mm ! Tire L5o compression
SV_CMP_T_L6I 17.99919097 ; mm ! Tire L6i compression
SV_CMP_T_L6O 17.19119046 ; mm ! Tire L6o compression
SV_CMP_T_L7I 17.99932016 ; mm ! Tire L7i compression
SV_CMP_T_L7O 17.19481139 ; mm ! Tire L7o compression
SV_CMP_T_R1I 18.53066213 ; mm ! Tire R1i compression
SV_CMP_T_R1O        0 ; mm ! Tire R1o compression
SV_CMP_T_R2I 5.746548401 ; mm ! Tire R2i compression
SV_CMP_T_R2O 5.777519127 ; mm ! Tire R2o compression
SV_CMP_T_R3I 20.90037846 ; mm ! Tire R3i compression
SV_CMP_T_R3O        0 ; mm ! Tire R3o compression
SV_CMP_T_R4I 20.42009133 ; mm ! Tire R4i compression
SV_CMP_T_R4O 21.06938372 ; mm ! Tire R4o compression
SV_CMP_T_R5I 20.50439607 ; mm ! Tire R5i compression
SV_CMP_T_R5O 21.14602864 ; mm ! Tire R5o compression
SV_CMP_T_R6I 22.04701291 ; mm ! Tire R6i compression
SV_CMP_T_R6O 22.85501343 ; mm ! Tire R6o compression
SV_CMP_T_R7I 22.02964962 ; mm ! Tire R7i compression
SV_CMP_T_R7O 22.83415839 ; mm ! Tire R7o compression
SV_CONTACT_ID_L1I 1000 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O 1000 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L2I 1000 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O 1000 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_L3I 1002 ; - ! Road surface ID for tire contact {RdID_L3I}
SV_CONTACT_ID_L3O 1002 ; - ! Road surface ID for tire contact {RdID_L3O}
SV_CONTACT_ID_L4I 1002 ; - ! Road surface ID for tire contact {RdID_L4I}
SV_CONTACT_ID_L4O 1002 ; - ! Road surface ID for tire contact {RdID_L4O}
SV_CONTACT_ID_L5I 1002 ; - ! Road surface ID for tire contact {RdID_L5I}
SV_CONTACT_ID_L5O 1002 ; - ! Road surface ID for tire contact {RdID_L5O}
SV_CONTACT_ID_L6I 1002 ; - ! Road surface ID for tire contact {RdID_L6I}
SV_CONTACT_ID_L6O 1002 ; - ! Road surface ID for tire contact {RdID_L6O}
SV_CONTACT_ID_L7I 1002 ; - ! Road surface ID for tire contact {RdID_L7I}
SV_CONTACT_ID_L7O 1002 ; - ! Road surface ID for tire contact {RdID_L7O}
SV_CONTACT_ID_R1I 1000 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O 1000 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R2I 1000 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O 1000 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_ID_R3I 1002 ; - ! Road surface ID for tire contact {RdID_R3I}
SV_CONTACT_ID_R3O 1002 ; - ! Road surface ID for tire contact {RdID_R3O}
SV_CONTACT_ID_R4I 1002 ; - ! Road surface ID for tire contact {RdID_R4I}
SV_CONTACT_ID_R4O 1002 ; - ! Road surface ID for tire contact {RdID_R4O}
SV_CONTACT_ID_R5I 1002 ; - ! Road surface ID for tire contact {RdID_R5I}
SV_CONTACT_ID_R5O 1002 ; - ! Road surface ID for tire contact {RdID_R5O}
SV_CONTACT_ID_R6I 1002 ; - ! Road surface ID for tire contact {RdID_R6I}
SV_CONTACT_ID_R6O 1002 ; - ! Road surface ID for tire contact {RdID_R6O}
SV_CONTACT_ID_R7I 1002 ; - ! Road surface ID for tire contact {RdID_R7I}
SV_CONTACT_ID_R7O 1002 ; - ! Road surface ID for tire contact {RdID_R7O}
SV_CONTACT_STA_L1I 65.59887115 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 51.011413 ; m ! Road path station for tire contact {S_Rd_L1O}
SV_CONTACT_STA_L2I 60.30765233 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O 60.33352775 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_L3I 161.9121766 ; m ! Road path station for tire contact {S_Rd_L3I}
SV_CONTACT_STA_L3O 124.6676715 ; m ! Road path station for tire contact {S_Rd_L3O}
SV_CONTACT_STA_L4I 158.9128684 ; m ! Road path station for tire contact {S_Rd_L4I}
SV_CONTACT_STA_L4O 158.9115202 ; m ! Road path station for tire contact {S_Rd_L4O}
SV_CONTACT_STA_L5I 157.642654 ; m ! Road path station for tire contact {S_Rd_L5I}
SV_CONTACT_STA_L5O 157.641306 ; m ! Road path station for tire contact {S_Rd_L5O}
SV_CONTACT_STA_L6I 148.7669967 ; m ! Road path station for tire contact {S_Rd_L6I}
SV_CONTACT_STA_L6O 148.7653017 ; m ! Road path station for tire contact {S_Rd_L6O}
SV_CONTACT_STA_L7I 147.5270152 ; m ! Road path station for tire contact {S_Rd_L7I}
SV_CONTACT_STA_L7O 147.5253203 ; m ! Road path station for tire contact {S_Rd_L7O}
SV_CONTACT_STA_R1I 64.87538393 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 51.011413 ; m ! Road path station for tire contact {S_Rd_R1O}
SV_CONTACT_STA_R2I 60.19310856 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O 60.17285465 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_CONTACT_STA_R3I 161.9213768 ; m ! Road path station for tire contact {S_Rd_R3I}
SV_CONTACT_STA_R3O 124.6676715 ; m ! Road path station for tire contact {S_Rd_R3O}
SV_CONTACT_STA_R4I 158.9196223 ; m ! Road path station for tire contact {S_Rd_R4I}
SV_CONTACT_STA_R4O 158.9209705 ; m ! Road path station for tire contact {S_Rd_R4O}
SV_CONTACT_STA_R5I 157.6494072 ; m ! Road path station for tire contact {S_Rd_R5I}
SV_CONTACT_STA_R5O 157.6507552 ; m ! Road path station for tire contact {S_Rd_R5O}
SV_CONTACT_STA_R6I 148.7754877 ; m ! Road path station for tire contact {S_Rd_R6I}
SV_CONTACT_STA_R6O 148.7771827 ; m ! Road path station for tire contact {S_Rd_R6O}
SV_CONTACT_STA_R7I 147.5355063 ; m ! Road path station for tire contact {S_Rd_R7I}
SV_CONTACT_STA_R7O 147.5372012 ; m ! Road path station for tire contact {S_Rd_R7O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio, veh #1
SV_DRGEAR_CVT_2    -0 ; - ! Derivative of delayed CVT gear ratio, veh #2
SV_DZDX_GND 0.01682417325 ; - ! dZ/dX of ground at unit 1 aero ref. pt
SV_DZDX_GND_2 -0.04761904762 ; - ! dZ/dX of ground at unit 2 aero ref. pt
SV_DZDX_GND_3 -0.04761904762 ; - ! dZ/dX of ground at unit 3 aero ref. pt
SV_DZDX_L1I 0.01947928067 ; - ! Ground X slope under tire L1i
SV_DZDX_L1O 0.01947928067 ; - ! Ground X slope under tire L1o
SV_DZDX_L2I 0.01397776741 ; - ! Ground X slope under tire L2i
SV_DZDX_L2O 0.01400886429 ; - ! Ground X slope under tire L2o
SV_DZDX_L3I -0.04761904762 ; - ! Ground X slope under tire L3i
SV_DZDX_L3O -0.04761904762 ; - ! Ground X slope under tire L3o
SV_DZDX_L4I -0.04761904762 ; - ! Ground X slope under tire L4i
SV_DZDX_L4O -0.04761904762 ; - ! Ground X slope under tire L4o
SV_DZDX_L5I -0.04761904762 ; - ! Ground X slope under tire L5i
SV_DZDX_L5O -0.04761904762 ; - ! Ground X slope under tire L5o
SV_DZDX_L6I -0.04761904762 ; - ! Ground X slope under tire L6i
SV_DZDX_L6O -0.04761904762 ; - ! Ground X slope under tire L6o
SV_DZDX_L7I -0.04761904762 ; - ! Ground X slope under tire L7i
SV_DZDX_L7O -0.04761904762 ; - ! Ground X slope under tire L7o
SV_DZDX_R1I 0.01884066298 ; - ! Ground X slope under tire R1i
SV_DZDX_R1O 0.01884066298 ; - ! Ground X slope under tire R1o
SV_DZDX_R2I 0.01383967364 ; - ! Ground X slope under tire R2i
SV_DZDX_R2O 0.01381518191 ; - ! Ground X slope under tire R2o
SV_DZDX_R3I -0.04761904762 ; - ! Ground X slope under tire R3i
SV_DZDX_R3O -0.04761904762 ; - ! Ground X slope under tire R3o
SV_DZDX_R4I -0.04761904762 ; - ! Ground X slope under tire R4i
SV_DZDX_R4O -0.04761904762 ; - ! Ground X slope under tire R4o
SV_DZDX_R5I -0.04761904762 ; - ! Ground X slope under tire R5i
SV_DZDX_R5O -0.04761904762 ; - ! Ground X slope under tire R5o
SV_DZDX_R6I -0.04761904762 ; - ! Ground X slope under tire R6i
SV_DZDX_R6O -0.04761904762 ; - ! Ground X slope under tire R6o
SV_DZDX_R7I -0.04761904762 ; - ! Ground X slope under tire R7i
SV_DZDX_R7O -0.04761904762 ; - ! Ground X slope under tire R7o
SV_DZDY_GND -0.0168475701 ; - ! dZ/dY of ground at unit 1 aero ref. pt
SV_DZDY_GND_2 2.915825712e-18 ; - ! dZ/dY of ground at unit 2 aero ref. pt
SV_DZDY_GND_3 2.915825712e-18 ; - ! dZ/dY of ground at unit 3 aero ref. pt
SV_DZDY_L1I -0.01369127638 ; - ! Ground Y slope under tire L1i
SV_DZDY_L1O -0.01369127638 ; - ! Ground Y slope under tire L1o
SV_DZDY_L2I -0.01927473585 ; - ! Ground Y slope under tire L2i
SV_DZDY_L2O -0.01925214651 ; - ! Ground Y slope under tire L2o
SV_DZDY_L3I 2.915825712e-18 ; - ! Ground Y slope under tire L3i
SV_DZDY_L3O 2.915825712e-18 ; - ! Ground Y slope under tire L3o
SV_DZDY_L4I 2.915825712e-18 ; - ! Ground Y slope under tire L4i
SV_DZDY_L4O 2.915825712e-18 ; - ! Ground Y slope under tire L4o
SV_DZDY_L5I 2.915825712e-18 ; - ! Ground Y slope under tire L5i
SV_DZDY_L5O 2.915825712e-18 ; - ! Ground Y slope under tire L5o
SV_DZDY_L6I 2.915825712e-18 ; - ! Ground Y slope under tire L6i
SV_DZDY_L6O 2.915825712e-18 ; - ! Ground Y slope under tire L6o
SV_DZDY_L7I 2.915825712e-18 ; - ! Ground Y slope under tire L7i
SV_DZDY_L7O 2.915825712e-18 ; - ! Ground Y slope under tire L7o
SV_DZDY_R1I -0.01455756994 ; - ! Ground Y slope under tire R1i
SV_DZDY_R1O -0.01455756994 ; - ! Ground Y slope under tire R1o
SV_DZDY_R2I -0.01937412856 ; - ! Ground Y slope under tire R2i
SV_DZDY_R2O -0.01939160057 ; - ! Ground Y slope under tire R2o
SV_DZDY_R3I 2.915825712e-18 ; - ! Ground Y slope under tire R3i
SV_DZDY_R3O 2.915825712e-18 ; - ! Ground Y slope under tire R3o
SV_DZDY_R4I 2.915825712e-18 ; - ! Ground Y slope under tire R4i
SV_DZDY_R4O 2.915825712e-18 ; - ! Ground Y slope under tire R4o
SV_DZDY_R5I 2.915825712e-18 ; - ! Ground Y slope under tire R5i
SV_DZDY_R5O 2.915825712e-18 ; - ! Ground Y slope under tire R5o
SV_DZDY_R6I 2.915825712e-18 ; - ! Ground Y slope under tire R6i
SV_DZDY_R6O 2.915825712e-18 ; - ! Ground Y slope under tire R6o
SV_DZDY_R7I 2.915825712e-18 ; - ! Ground Y slope under tire R7i
SV_DZDY_R7O 2.915825712e-18 ; - ! Ground Y slope under tire R7o
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_L3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3i
SV_D_ALPHA_L3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3o
SV_D_ALPHA_L4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4i
SV_D_ALPHA_L4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4o
SV_D_ALPHA_L5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5i
SV_D_ALPHA_L5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5o
SV_D_ALPHA_L6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6i
SV_D_ALPHA_L6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6o
SV_D_ALPHA_L7I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L7i
SV_D_ALPHA_L7O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L7o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_L3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3i
SV_D_ALPHA_MX_L3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3o
SV_D_ALPHA_MX_L4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4i
SV_D_ALPHA_MX_L4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4o
SV_D_ALPHA_MX_L5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5i
SV_D_ALPHA_MX_L5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5o
SV_D_ALPHA_MX_L6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6i
SV_D_ALPHA_MX_L6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6o
SV_D_ALPHA_MX_L7I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L7i
SV_D_ALPHA_MX_L7O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L7o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_MX_R3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3i
SV_D_ALPHA_MX_R3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3o
SV_D_ALPHA_MX_R4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4i
SV_D_ALPHA_MX_R4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4o
SV_D_ALPHA_MX_R5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5i
SV_D_ALPHA_MX_R5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5o
SV_D_ALPHA_MX_R6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6i
SV_D_ALPHA_MX_R6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6o
SV_D_ALPHA_MX_R7I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R7i
SV_D_ALPHA_MX_R7O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R7o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_ALPHA_R3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3i
SV_D_ALPHA_R3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3o
SV_D_ALPHA_R4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4i
SV_D_ALPHA_R4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4o
SV_D_ALPHA_R5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5i
SV_D_ALPHA_R5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5o
SV_D_ALPHA_R6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6i
SV_D_ALPHA_R6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6o
SV_D_ALPHA_R7I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R7i
SV_D_ALPHA_R7O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R7o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_L3I       0 ; - ! Delta Coni (Mz 0-crossing), tire L3i
SV_D_CONI_L3O       0 ; - ! Delta Coni (Mz 0-crossing), tire L3o
SV_D_CONI_L4I       0 ; - ! Delta Coni (Mz 0-crossing), tire L4i
SV_D_CONI_L4O       0 ; - ! Delta Coni (Mz 0-crossing), tire L4o
SV_D_CONI_L5I       0 ; - ! Delta Coni (Mz 0-crossing), tire L5i
SV_D_CONI_L5O       0 ; - ! Delta Coni (Mz 0-crossing), tire L5o
SV_D_CONI_L6I       0 ; - ! Delta Coni (Mz 0-crossing), tire L6i
SV_D_CONI_L6O       0 ; - ! Delta Coni (Mz 0-crossing), tire L6o
SV_D_CONI_L7I       0 ; - ! Delta Coni (Mz 0-crossing), tire L7i
SV_D_CONI_L7O       0 ; - ! Delta Coni (Mz 0-crossing), tire L7o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_CONI_R3I       0 ; - ! Delta Coni (Mz 0-crossing), tire R3i
SV_D_CONI_R3O       0 ; - ! Delta Coni (Mz 0-crossing), tire R3o
SV_D_CONI_R4I       0 ; - ! Delta Coni (Mz 0-crossing), tire R4i
SV_D_CONI_R4O       0 ; - ! Delta Coni (Mz 0-crossing), tire R4o
SV_D_CONI_R5I       0 ; - ! Delta Coni (Mz 0-crossing), tire R5i
SV_D_CONI_R5O       0 ; - ! Delta Coni (Mz 0-crossing), tire R5o
SV_D_CONI_R6I       0 ; - ! Delta Coni (Mz 0-crossing), tire R6i
SV_D_CONI_R6O       0 ; - ! Delta Coni (Mz 0-crossing), tire R6o
SV_D_CONI_R7I       0 ; - ! Delta Coni (Mz 0-crossing), tire R7i
SV_D_CONI_R7O       0 ; - ! Delta Coni (Mz 0-crossing), tire R7o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_L3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3i
SV_D_KAPPA_L3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3o
SV_D_KAPPA_L4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4i
SV_D_KAPPA_L4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4o
SV_D_KAPPA_L5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5i
SV_D_KAPPA_L5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5o
SV_D_KAPPA_L6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6i
SV_D_KAPPA_L6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6o
SV_D_KAPPA_L7I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L7i
SV_D_KAPPA_L7O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L7o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_D_KAPPA_R3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3i
SV_D_KAPPA_R3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3o
SV_D_KAPPA_R4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4i
SV_D_KAPPA_R4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4o
SV_D_KAPPA_R5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5i
SV_D_KAPPA_R5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5o
SV_D_KAPPA_R6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6i
SV_D_KAPPA_R6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6o
SV_D_KAPPA_R7I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R7i
SV_D_KAPPA_R7O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R7o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control, veh #1
SV_ESC_STATE_2      0 ; - ! State of ESC engine torque control, veh #2
SV_FBK              0 ; N ! ODE: Instant boost force (above input force, vehicle #1
SV_FBK_2            0 ; N ! ODE: Instant boost force (above input force, vehicle #2
SV_FBOOST           0 ; N ! ODE: Delayed boost force, veh. #1 {F_boost}
SV_FBOOST_2         0 ; N ! ODE: Delayed boost force, veh. #2 {F_boost_2}
SV_FS_L1  14721.72617 ; N ! Force from ride spring L1
SV_FS_L2  7717.359378 ; N ! Force from ride spring L2
SV_FS_L3  15561.16269 ; N ! Force from ride spring L3
SV_FS_L4  27303.75974 ; N ! Force from ride spring L4
SV_FS_L5  27303.75974 ; N ! Force from ride spring L5
SV_FS_L6  30459.04467 ; N ! Force from ride spring L6
SV_FS_L7  30459.04467 ; N ! Force from ride spring L7
SV_FS_R1  15431.04218 ; N ! Force from ride spring R1
SV_FS_R2    4550.5751 ; N ! Force from ride spring R2
SV_FS_R3  17801.54291 ; N ! Force from ride spring R3
SV_FS_R4  36753.85812 ; N ! Force from ride spring R4
SV_FS_R5  36753.85812 ; N ! Force from ride spring R5
SV_FS_R6  40037.36823 ; N ! Force from ride spring R6
SV_FS_R7  40037.36823 ; N ! Force from ride spring R7
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}, veh #1
SV_FUEL_2           0 ; kg ! ODE: Mass of fuel consumed {Mfuel}, veh #2
SV_FX_SM_L1 109.4868366 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 2741.361777 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_L3 211.4724379 ; N ! Tire force [sx] component, wheel L3
SV_FX_SM_L4 6105.462532 ; N ! Tire force [sx] component, wheel L4
SV_FX_SM_L5 6111.666179 ; N ! Tire force [sx] component, wheel L5
SV_FX_SM_L6 -238.8074664 ; N ! Tire force [sx] component, wheel L6
SV_FX_SM_L7 -238.8142704 ; N ! Tire force [sx] component, wheel L7
SV_FX_SM_R1 67.37459833 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 2794.253795 ; N ! Tire force [sx] component, wheel R2
SV_FX_SM_R3 242.6886546 ; N ! Tire force [sx] component, wheel R3
SV_FX_SM_R4 6209.236206 ; N ! Tire force [sx] component, wheel R4
SV_FX_SM_R5 6213.689928 ; N ! Tire force [sx] component, wheel R5
SV_FX_SM_R6 -285.9046649 ; N ! Tire force [sx] component, wheel R6
SV_FX_SM_R7 -285.7023433 ; N ! Tire force [sx] component, wheel R7
SV_FY_SM_L1 -1538.090869 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 1793.573447 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_L3 1285.296869 ; N ! Tire force [sy] component, wheel L3
SV_FY_SM_L4 1826.328073 ; N ! Tire force [sy] component, wheel L4
SV_FY_SM_L5 1821.235249 ; N ! Tire force [sy] component, wheel L5
SV_FY_SM_L6 2013.87139 ; N ! Tire force [sy] component, wheel L6
SV_FY_SM_L7 1988.092604 ; N ! Tire force [sy] component, wheel L7
SV_FY_SM_R1 -905.428489 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 1778.353958 ; N ! Tire force [sy] component, wheel R2
SV_FY_SM_R3 1471.902204 ; N ! Tire force [sy] component, wheel R3
SV_FY_SM_R4 2201.978373 ; N ! Tire force [sy] component, wheel R4
SV_FY_SM_R5 2186.558773 ; N ! Tire force [sy] component, wheel R5
SV_FY_SM_R6 2514.713427 ; N ! Tire force [sy] component, wheel R6
SV_FY_SM_R7 2480.906242 ; N ! Tire force [sy] component, wheel R7
SV_FZ_SM_L1 17416.57407 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 10903.24613 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_L3 18121.99343 ; N ! Tire force force [sz] component, wheel L3
SV_FZ_SM_L4 32881.374 ; N ! Tire force force [sz] component, wheel L4
SV_FZ_SM_L5 33127.00647 ; N ! Tire force force [sz] component, wheel L5
SV_FZ_SM_L6 34464.86731 ; N ! Tire force force [sz] component, wheel L6
SV_FZ_SM_L7 34469.0941 ; N ! Tire force force [sz] component, wheel L7
SV_FZ_SM_R1 18158.61411 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 11297.90114 ; N ! Tire force force [sz] component, wheel R2
SV_FZ_SM_R3 20472.87508 ; N ! Tire force force [sz] component, wheel R3
SV_FZ_SM_R4 40525.11093 ; N ! Tire force force [sz] component, wheel R4
SV_FZ_SM_R5 40680.29444 ; N ! Tire force force [sz] component, wheel R5
SV_FZ_SM_R6 43976.89532 ; N ! Tire force force [sz] component, wheel R6
SV_FZ_SM_R7 43940.13314 ; N ! Tire force force [sz] component, wheel R7
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A3    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A4    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A5    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A6    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A7    0 ; N ! Friction force at rack
SV_GEAR             3 ; - ! Automatic transmission gear {GearAuto}, veh #1
SV_GEAR_2          13 ; - ! Automatic transmission gear {GearAuto}, veh #2
SV_GEAR_DELAY       3 ; - ! Delayed transmission gear position, veh #1
SV_GEAR_DELAY_2    13 ; - ! Delayed transmission gear position, veh #2
SV_GEAR_MEM         3 ; - ! Gear saved in memory, used for transition, veh #1
SV_GEAR_MEM_2      13 ; - ! Gear saved in memory, used for transition, veh #2
SV_GEAR_STAT        3 ; - ! Transmission gear status {GearStat}, veh #1
SV_GEAR_STAT_2     13 ; - ! Transmission gear status {GearStat}, veh #2
SV_IVERR 0.3919062251 ; m ! ODE: Integral of SC speed error, veh #1 {Vx_IErr}
SV_IVERR_2 10.85397035 ; m ! ODE: Integral of SC speed error, veh #2 {Vx_IErr_2}
SV_I_GEAR_SHIFT   0.2 ; kg-m2 ! Transmission gear inertia modulated by shift, veh #1
SV_I_GEAR_SHIFT_2 0.2 ; kg-m2 ! Transmission gear inertia modulated by shift, veh #2
SV_I_GEAR_SHIFT_START 0 ; kg-m2 ! Gear spin inertia when automatic shift started,
                        ! veh #1
SV_I_GEAR_SHIFT_START_2 0 ; kg-m2 ! Gear spin inertia when automatic shift started,
                          ! veh #2
SV_JNCR_A1 0.006770682493 ; m/s ! ODE: Jounce rate of axle 1
SV_JNCR_A2 -0.002726994983 ; m/s ! ODE: Jounce rate of axle 2
SV_JNCR_A3 -0.006260365325 ; m/s ! ODE: Jounce rate of axle 3
SV_JNCR_A4 -0.001115065557 ; m/s ! ODE: Jounce rate of axle 4
SV_JNCR_A5 0.004969366384 ; m/s ! ODE: Jounce rate of axle 5
SV_JNCR_A6 0.00034144376 ; m/s ! ODE: Jounce rate of axle 6
SV_JNCR_A7 -0.0001300806264 ; m/s ! ODE: Jounce rate of axle 7
SV_JNC_A1 -0.002814134058 ; m ! ODE: Jounce of axle 1
SV_JNC_A2 0.0005727355526 ; m ! ODE: Jounce of axle 2
SV_JNC_A3 -0.01236227056 ; m ! ODE: Jounce of axle 3
SV_JNC_A4 0.02551933936 ; m ! ODE: Jounce of axle 4
SV_JNC_A5 0.04952411649 ; m ! ODE: Jounce of axle 5
SV_JNC_A6 0.03855324562 ; m ! ODE: Jounce of axle 6
SV_JNC_A7 0.03883883125 ; m ! ODE: Jounce of axle 7
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_L3        0 ; - ! Lockup state for wheel L3
SV_LK_WHL_L4        0 ; - ! Lockup state for wheel L4
SV_LK_WHL_L5        0 ; - ! Lockup state for wheel L5
SV_LK_WHL_L6        0 ; - ! Lockup state for wheel L6
SV_LK_WHL_L7        0 ; - ! Lockup state for wheel L7
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LK_WHL_R3        0 ; - ! Lockup state for wheel R3
SV_LK_WHL_R4        0 ; - ! Lockup state for wheel R4
SV_LK_WHL_R5        0 ; - ! Lockup state for wheel R5
SV_LK_WHL_R6        0 ; - ! Lockup state for wheel R6
SV_LK_WHL_R7        0 ; - ! Lockup state for wheel R7
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Is clutch locked while in neutral?, veh #1
SV_LOCKED_CLUTCH_NEUTRAL_2 0 ; - ! Is clutch locked while in neutral?, veh #2
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque, veh. #1 {M_boost}
SV_MBOOST_2         0 ; N-m ! ODE: Delayed boost torque, veh. #2 {M_boost_2}
SV_MX_H2  7001.863033 ; N-m ! Roll moment, hitch 2
SV_MY_BRK_L1 -47.31815644 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 -1432.16254 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_L3 18.86619119 ; N-m ! Spin moment, wheel L3
SV_MY_BRK_L4 -2883.023436 ; N-m ! Spin moment, wheel L4
SV_MY_BRK_L5 -2884.454145 ; N-m ! Spin moment, wheel L5
SV_MY_BRK_L6 33.4092886 ; N-m ! Spin moment, wheel L6
SV_MY_BRK_L7 33.42535212 ; N-m ! Spin moment, wheel L7
SV_MY_BRK_R1 -34.83011505 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 -1461.675177 ; N-m ! Spin moment, wheel R2
SV_MY_BRK_R3 19.29315661 ; N-m ! Spin moment, wheel R3
SV_MY_BRK_R4 -2882.491692 ; N-m ! Spin moment, wheel R4
SV_MY_BRK_R5 -2883.658763 ; N-m ! Spin moment, wheel R5
SV_MY_BRK_R6 32.83125879 ; N-m ! Spin moment, wheel R6
SV_MY_BRK_R7 32.85644263 ; N-m ! Spin moment, wheel R7
SV_MY_H2            0 ; N-m ! Pitch moment, hitch 2
SV_MZ_H2            0 ; N-m ! Articulation moment, hitch 2
SV_MZ_WHEEL_L1 131.1927256 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 -70.93618171 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_L3 -89.08749366 ; N-m ! Tire Mz, wheel L3
SV_MZ_WHEEL_L4 -114.3167963 ; N-m ! Tire Mz, wheel L4
SV_MZ_WHEEL_L5 -114.0493863 ; N-m ! Tire Mz, wheel L5
SV_MZ_WHEEL_L6 -112.7132883 ; N-m ! Tire Mz, wheel L6
SV_MZ_WHEEL_L7 -110.8853103 ; N-m ! Tire Mz, wheel L7
SV_MZ_WHEEL_R1 67.38711243 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 -71.25968287 ; N-m ! Tire Mz, wheel R2
SV_MZ_WHEEL_R3 -108.0304577 ; N-m ! Tire Mz, wheel R3
SV_MZ_WHEEL_R4 -150.0380085 ; N-m ! Tire Mz, wheel R4
SV_MZ_WHEEL_R5 -148.9687498 ; N-m ! Tire Mz, wheel R5
SV_MZ_WHEEL_R6 -160.9300259 ; N-m ! Tire Mz, wheel R6
SV_MZ_WHEEL_R7 -158.1140999 ; N-m ! Tire Mz, wheel R7
SV_M_CL2_CAP_FD_DYN_2 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff,
                        ! veh #2
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff, veh
                      ! #1
SV_M_CL2_CAP_RD_DYN_2 0 ; N-m ! ODE: 2nd Clutch capacity for 2nd drive axle diff,
                        ! veh #2
SV_M_CL2_CAP_XC_DYN_2 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for
                        ! axles 1,2, veh #2
SV_M_CLUTCH_DEL 899.9769216 ; N-m ! ODE: Time delayed clutch torque capacity, veh #1
SV_M_CLUTCH_DEL_2 4998.721209 ; N-m ! ODE: Time delayed clutch torque capacity, veh
                              ! #2
SV_M_CL_CAP_FD_DYN_2 0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff, veh #2
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff, veh #1
SV_M_CL_CAP_RD_DYN_2 0 ; N-m ! ODE: Clutch capacity for 2nd drive axle diff, veh #2
SV_M_CL_CAP_XC_DYN_2 0 ; N-m ! ODE: Clutch capacity for inter-axle diff for axles
                       ! 1,2, veh #2
SV_M_CL_LF_CAP_DYN_2 0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle
                       ! diff, veh #2
SV_M_CL_LR_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle
                      ! diff, veh #1
SV_M_CL_LR_CAP_DYN_2 0 ; N-m ! ODE: Left twin clutch capacity for 2nd drive axle
                       ! diff, veh #2
SV_M_CL_L_D3_CAP_DYN_2 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                         ! for axles 1,2, veh #2
SV_M_CL_RF_CAP_DYN_2 0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                       ! diff, veh #2
SV_M_CL_RR_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                      ! diff, veh #1
SV_M_CL_RR_CAP_DYN_2 0 ; N-m ! ODE: Right twin clutch capacity for 2nd drive axle
                       ! diff, veh #2
SV_M_CL_R_D3_CAP_DYN_2 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                         ! for axles 1,2, veh #2
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS, veh #1
SV_M_ENG_ESC_APPLY_2 0 ; N-m ! ODE: Applied engine torque from ESC/TCS, veh #2
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request, veh #1
SV_M_ENG_ESC_ERROR_2 0 ; N-m-s ! ODE: Integral of error from ESC request, veh #2
SV_M_HYS_COL        0 ; N-m ! Steering column friction, vehicle #1
SV_M_HYS_COL_2      0 ; N-m ! Steering column friction, vehicle #2
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A3    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A4    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A5    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A6    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A7    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 52.51857992 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_L3 -301.8251564 ; N-m ! Kingpin moment, wheel L3
SV_M_KP_L4          0 ; N-m ! Kingpin moment, wheel L4
SV_M_KP_L5          0 ; N-m ! Kingpin moment, wheel L5
SV_M_KP_L6          0 ; N-m ! Kingpin moment, wheel L6
SV_M_KP_L7          0 ; N-m ! Kingpin moment, wheel L7
SV_M_KP_R1 232.9414746 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_KP_R3 21.62694296 ; N-m ! Kingpin moment, wheel R3
SV_M_KP_R4          0 ; N-m ! Kingpin moment, wheel R4
SV_M_KP_R5          0 ; N-m ! Kingpin moment, wheel R5
SV_M_KP_R6          0 ; N-m ! Kingpin moment, wheel R6
SV_M_KP_R7          0 ; N-m ! Kingpin moment, wheel R7
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_L3        0 ; N-m ! Kingpin steer park torque, wheel L3
SV_M_PARK_L4        0 ; N-m ! Kingpin steer park torque, wheel L4
SV_M_PARK_L5        0 ; N-m ! Kingpin steer park torque, wheel L5
SV_M_PARK_L6        0 ; N-m ! Kingpin steer park torque, wheel L6
SV_M_PARK_L7        0 ; N-m ! Kingpin steer park torque, wheel L7
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_PARK_R3        0 ; N-m ! Kingpin steer park torque, wheel R3
SV_M_PARK_R4        0 ; N-m ! Kingpin steer park torque, wheel R4
SV_M_PARK_R5        0 ; N-m ! Kingpin steer park torque, wheel R5
SV_M_PARK_R6        0 ; N-m ! Kingpin steer park torque, wheel R6
SV_M_PARK_R7        0 ; N-m ! Kingpin steer park torque, wheel R7
SV_M_TC   199.6785904 ; N-m ! Transmission input shaft torque, veh #1
SV_M_TC_2 1825.889512 ; N-m ! Transmission input shaft torque, veh #2
SV_N_START_CROSS    0 ; - ! Count of start-crossings of vehicle #1 on looped path
                      ! PATH_ID_DM(1)
SV_N_START_CROSS_2  0 ; - ! Count of start-crossings of vehicle #2 on looped path
                      ! PATH_ID_DM(2)
SV_PBK_L1 9.214686775e-26 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2 9.214686709e-26 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_L3 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel L3
SV_PBK_L4 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel L4
SV_PBK_L5 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel L5
SV_PBK_L6 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel L6
SV_PBK_L7 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel L7
SV_PBK_R1 9.214686775e-26 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2 9.214686775e-26 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PBK_R3 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel R3
SV_PBK_R4 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel R4
SV_PBK_R5 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel R5
SV_PBK_R6 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel R6
SV_PBK_R7 1.96032134e-16 ; MPa ! ODE: Brake actuator pressure for wheel R7
SV_PITCH 0.1839530833 ; deg ! ODE: Pitch of sprung mass, unit 1 {Pitch}
SV_PITCH_2 -1.098016472 ; deg ! ODE: Pitch of sprung mass, unit 2 {Pitch_2}
SV_PITCH_H2 1.075375666 ; deg ! ODE: Relative pitch for unit 3
SV_PITCH_H2_OLD 1.07523236 ; deg ! Relative pitch for hitch 2
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio, veh #1
SV_RGEAR_CVT_2      0 ; - ! ODE: Delayed CVT gear ratio, veh #2
SV_ROLL   1.553827301 ; deg ! ODE: Roll (Euler) of sprung mass, unit 1 {Roll_E}
SV_ROLL_2 3.360839017 ; deg ! ODE: Roll (Euler) of sprung mass, unit 2 {Roll_E_2}
SV_ROLL_A1 -0.2149415216 ; deg ! ODE: Roll of axle 1
SV_ROLL_A2 -0.1871267661 ; deg ! ODE: Roll of axle 2
SV_ROLL_A3 -0.5650177785 ; deg ! ODE: Roll of axle 3
SV_ROLL_A4 -0.5140253019 ; deg ! ODE: Roll of axle 4
SV_ROLL_A5 -0.5154412773 ; deg ! ODE: Roll of axle 5
SV_ROLL_A6 -0.5545836841 ; deg ! ODE: Roll of axle 6
SV_ROLL_A7 -0.5552290409 ; deg ! ODE: Roll of axle 7
SV_ROLL_H2 0.07101778759 ; deg ! ODE: Relative roll for unit 3
SV_ROLL_H2_OLD 0.07001863033 ; deg ! Relative roll for hitch 2
SV_ROT_L1  44.4943701 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 43.94732664 ; rev ! ODE: Rotation of wheel L2
SV_ROT_L3 43.34910628 ; rev ! ODE: Rotation of wheel L3
SV_ROT_L4 43.63470264 ; rev ! ODE: Rotation of wheel L4
SV_ROT_L5 44.48842106 ; rev ! ODE: Rotation of wheel L5
SV_ROT_L6 40.89049019 ; rev ! ODE: Rotation of wheel L6
SV_ROT_L7 40.91744478 ; rev ! ODE: Rotation of wheel L7
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_L3        0 ; rev ! Rotation reference of wheel L3 in "locked" mode
SV_ROT_LK_L4        0 ; rev ! Rotation reference of wheel L4 in "locked" mode
SV_ROT_LK_L5        0 ; rev ! Rotation reference of wheel L5 in "locked" mode
SV_ROT_LK_L6        0 ; rev ! Rotation reference of wheel L6 in "locked" mode
SV_ROT_LK_L7        0 ; rev ! Rotation reference of wheel L7 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_LK_R3        0 ; rev ! Rotation reference of wheel R3 in "locked" mode
SV_ROT_LK_R4        0 ; rev ! Rotation reference of wheel R4 in "locked" mode
SV_ROT_LK_R5        0 ; rev ! Rotation reference of wheel R5 in "locked" mode
SV_ROT_LK_R6        0 ; rev ! Rotation reference of wheel R6 in "locked" mode
SV_ROT_LK_R7        0 ; rev ! Rotation reference of wheel R7 in "locked" mode
SV_ROT_R1 45.80650213 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 44.85471246 ; rev ! ODE: Rotation of wheel R2
SV_ROT_R3 44.72640301 ; rev ! ODE: Rotation of wheel R3
SV_ROT_R4 44.84711687 ; rev ! ODE: Rotation of wheel R4
SV_ROT_R5 44.84622592 ; rev ! ODE: Rotation of wheel R5
SV_ROT_R6  42.1490513 ; rev ! ODE: Rotation of wheel R6
SV_ROT_R7 42.14762978 ; rev ! ODE: Rotation of wheel R7
SV_ROT_SHAFT_1_2 194.6600029 ; rev ! ODE: 1st drive axle diff input shaft rotation,
                             ! veh #2
SV_ROT_SHAFT_2 222.0050977 ; rev ! ODE: 2nd drive axle diff input shaft rotation,
                           ! veh #1
SV_ROT_SHAFT_2_2 196.5362233 ; rev ! ODE: 2nd drive axle diff input shaft rotation,
                             ! veh #2
SV_ROT_SHAFT_3_2 195.5981131 ; rev ! ODE: Inter-axle diff for axles 1,2 input shaft
                             ! rotation, veh #2
SV_ROT_SHAFT_L_D1_2 43.63470264 ; rev ! ODE: Diff1 Left (first) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_L_D2 43.94732664 ; rev ! ODE: Diff2 Left (first) output shaft rotation,
                              ! veh #1
SV_ROT_SHAFT_L_D2_2 44.48842106 ; rev ! ODE: Diff2 Left (first) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_L_D3_2 194.6600029 ; rev ! ODE: Diff3 Left (first) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_R_D1_2 44.84711687 ; rev ! ODE: Diff1 Right (second) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_R_D2 44.85471246 ; rev ! ODE: Diff2 Right (second) output shaft
                              ! rotation, veh #1
SV_ROT_SHAFT_R_D2_2 44.84622592 ; rev ! ODE: Diff2 Right (second) output shaft
                                ! rotation, veh #2
SV_ROT_SHAFT_R_D3_2 196.5362233 ; rev ! ODE: Diff3 Right (second) output shaft
                                ! rotation, veh #2
SV_ROT_TC 488.4100337 ; rev ! ODE: Torque coupling output shaft rotation, veh #1
SV_ROT_TC_2 495.7969241 ; rev ! ODE: Torque coupling output shaft rotation, veh #2
SV_ROT_TR_OUT 222.0459876 ; rev ! ODE: Transmission output shaft rotation, veh #1
SV_ROT_TR_OUT_2 195.7153116 ; rev ! ODE: Transmission output shaft rotation, veh #2
SV_R_GEAR_SHIFT  3.38 ; - ! Transmission gear ratio modulated by gear shift, veh #1
SV_R_GEAR_SHIFT_2 1.62 ; - ! Transmission gear ratio modulated by gear shift, veh #2
SV_R_GEAR_SHIFT_START 0 ; - ! Gear ratio when automatic shift started, veh #1
SV_R_GEAR_SHIFT_START_2 0 ; - ! Gear ratio when automatic shift started, veh #2
SV_R_GEAR_TOTAL_SC 16.9 ; - ! Driveline total gear ratio for speed controller, veh
                        ! #1
SV_R_GEAR_TOTAL_SC_2 7.128 ; - ! Driveline total gear ratio for speed controller,
                           ! veh #2
SV_R_KP_GND_L1 -1.013087041 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L3 -1.012006367 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L6      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L7      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.010922934 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R3 -1.011958709 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R6      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R7      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1I 0.5022360966 ; m ! Deflected radius for tire L1i
SV_R_L1O 0.5022360966 ; m ! Deflected radius for tire L1o
SV_R_L2I 0.5144181712 ; m ! Deflected radius for tire L2i
SV_R_L2O 0.5144539622 ; m ! Deflected radius for tire L2o
SV_R_L3I 0.5014940266 ; m ! Deflected radius for tire L3i
SV_R_L3O 0.5014940266 ; m ! Deflected radius for tire L3o
SV_R_L4I 0.5028337694 ; m ! Deflected radius for tire L4i
SV_R_L4O 0.5034830638 ; m ! Deflected radius for tire L4o
SV_R_L5I 0.5027122904 ; m ! Deflected radius for tire L5i
SV_R_L5O 0.5033538953 ; m ! Deflected radius for tire L5o
SV_R_L6I 0.5020006138 ; m ! Deflected radius for tire L6i
SV_R_L6O 0.5028086177 ; m ! Deflected radius for tire L6o
SV_R_L7I  0.502000363 ; m ! Deflected radius for tire L7i
SV_R_L7O  0.502804879 ; m ! Deflected radius for tire L7o
SV_R_R1I 0.5014753782 ; m ! Deflected radius for tire R1i
SV_R_R1O 0.5014753782 ; m ! Deflected radius for tire R1o
SV_R_R2I 0.5142507639 ; m ! Deflected radius for tire R2i
SV_R_R2O 0.5142194052 ; m ! Deflected radius for tire R2o
SV_R_R3I 0.4990930355 ; m ! Deflected radius for tire R3i
SV_R_R3O 0.4990930355 ; m ! Deflected radius for tire R3o
SV_R_R4I 0.4995810138 ; m ! Deflected radius for tire R4i
SV_R_R4O 0.4989317194 ; m ! Deflected radius for tire R4o
SV_R_R5I 0.4994980568 ; m ! Deflected radius for tire R5i
SV_R_R5O 0.4988564519 ; m ! Deflected radius for tire R5o
SV_R_R6I 0.4979527747 ; m ! Deflected radius for tire R6i
SV_R_R6O 0.4971447707 ; m ! Deflected radius for tire R6o
SV_R_R7I 0.4979699974 ; m ! Deflected radius for tire R7i
SV_R_R7O 0.4971654814 ; m ! Deflected radius for tire R7o
SV_SHIFT_DELAY      0 ; - ! Is shifting delay in T.C. active?, veh #1
SV_SHIFT_DELAY_2    0 ; - ! Is shifting delay in T.C. active?, veh #2
SV_SLIP_LAT_L1I 0.01063869929 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L2I -0.0160460296 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O -0.01617513042 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_L3I -0.006588743027 ; - ! ODE: Lagged tan of lateral slip, tire L3i
SV_SLIP_LAT_L3O     0 ; - ! ODE: Lagged tan of lateral slip, tire L3o
SV_SLIP_LAT_L4I -0.004641259525 ; - ! ODE: Lagged tan of lateral slip, tire L4i
SV_SLIP_LAT_L4O -0.004639361803 ; - ! ODE: Lagged tan of lateral slip, tire L4o
SV_SLIP_LAT_L5I -0.00458674482 ; - ! ODE: Lagged tan of lateral slip, tire L5i
SV_SLIP_LAT_L5O -0.004586159876 ; - ! ODE: Lagged tan of lateral slip, tire L5o
SV_SLIP_LAT_L6I -0.00515961405 ; - ! ODE: Lagged tan of lateral slip, tire L6i
SV_SLIP_LAT_L6O -0.005157850672 ; - ! ODE: Lagged tan of lateral slip, tire L6o
SV_SLIP_LAT_L7I -0.00507709109 ; - ! ODE: Lagged tan of lateral slip, tire L7i
SV_SLIP_LAT_L7O -0.005075163368 ; - ! ODE: Lagged tan of lateral slip, tire L7o
SV_SLIP_LAT_R1I 0.006396714832 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R2I -0.01542776925 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O -0.01530978385 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LAT_R3I -0.006790214954 ; - ! ODE: Lagged tan of lateral slip, tire R3i
SV_SLIP_LAT_R3O     0 ; - ! ODE: Lagged tan of lateral slip, tire R3o
SV_SLIP_LAT_R4I -0.004650361554 ; - ! ODE: Lagged tan of lateral slip, tire R4i
SV_SLIP_LAT_R4O -0.004652091337 ; - ! ODE: Lagged tan of lateral slip, tire R4o
SV_SLIP_LAT_R5I -0.004589991578 ; - ! ODE: Lagged tan of lateral slip, tire R5i
SV_SLIP_LAT_R5O -0.004590685465 ; - ! ODE: Lagged tan of lateral slip, tire R5o
SV_SLIP_LAT_R6I -0.005167690013 ; - ! ODE: Lagged tan of lateral slip, tire R6i
SV_SLIP_LAT_R6O -0.005169168217 ; - ! ODE: Lagged tan of lateral slip, tire R6o
SV_SLIP_LAT_R7I -0.005085870489 ; - ! ODE: Lagged tan of lateral slip, tire R7i
SV_SLIP_LAT_R7O -0.005087469767 ; - ! ODE: Lagged tan of lateral slip, tire R7o
SV_SLIP_LONG_L1I -0.0008083690244 ; - ! ODE: Lagged long. slip, tire L1i
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o
SV_SLIP_LONG_L2I 0.01742446472 ; - ! ODE: Lagged long. slip, tire L2i
SV_SLIP_LONG_L2O 0.02500357226 ; - ! ODE: Lagged long. slip, tire L2o
SV_SLIP_LONG_L3I -0.0006665829613 ; - ! ODE: Lagged long. slip, tire L3i
SV_SLIP_LONG_L3O    0 ; - ! ODE: Lagged long. slip, tire L3o
SV_SLIP_LONG_L4I 0.01421863023 ; - ! ODE: Lagged long. slip, tire L4i
SV_SLIP_LONG_L4O 0.01422138835 ; - ! ODE: Lagged long. slip, tire L4o
SV_SLIP_LONG_L5I 0.01412972496 ; - ! ODE: Lagged long. slip, tire L5i
SV_SLIP_LONG_L5O 0.01413254191 ; - ! ODE: Lagged long. slip, tire L5o
SV_SLIP_LONG_L6I -0.0006442504467 ; - ! ODE: Lagged long. slip, tire L6i
SV_SLIP_LONG_L6O -0.0006673857342 ; - ! ODE: Lagged long. slip, tire L6o
SV_SLIP_LONG_L7I -0.0006440849477 ; - ! ODE: Lagged long. slip, tire L7i
SV_SLIP_LONG_L7O -0.0006672212985 ; - ! ODE: Lagged long. slip, tire L7o
SV_SLIP_LONG_R1I -0.0006068034056 ; - ! ODE: Lagged long. slip, tire R1i
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o
SV_SLIP_LONG_R2I 0.02442945336 ; - ! ODE: Lagged long. slip, tire R2i
SV_SLIP_LONG_R2O 0.01717624523 ; - ! ODE: Lagged long. slip, tire R2o
SV_SLIP_LONG_R3I -0.0006576713652 ; - ! ODE: Lagged long. slip, tire R3i
SV_SLIP_LONG_R3O    0 ; - ! ODE: Lagged long. slip, tire R3o
SV_SLIP_LONG_R4I 0.0117825801 ; - ! ODE: Lagged long. slip, tire R4i
SV_SLIP_LONG_R4O 0.01177990364 ; - ! ODE: Lagged long. slip, tire R4o
SV_SLIP_LONG_R5I 0.01174363641 ; - ! ODE: Lagged long. slip, tire R5i
SV_SLIP_LONG_R5O 0.0117409444 ; - ! ODE: Lagged long. slip, tire R5o
SV_SLIP_LONG_R6I -0.000645742573 ; - ! ODE: Lagged long. slip, tire R6i
SV_SLIP_LONG_R6O -0.0006229694923 ; - ! ODE: Lagged long. slip, tire R6o
SV_SLIP_LONG_R7I -0.0006456570476 ; - ! ODE: Lagged long. slip, tire R7i
SV_SLIP_LONG_R7O -0.0006228836062 ; - ! ODE: Lagged long. slip, tire R7o
SV_SO_DIST 144.4616476 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SO_DIST_2 140.5209233 ; m ! ODE: Distance used for tire "wandering profiles"
                         ! {Sta_Prof_2}
SV_SPEED_DVDS 0.1506691059 ; - ! dVdS derivative for speed control, veh #1
SV_SPEED_DVDS_2 0.1266967771 ; - ! dVdS derivative for speed control, veh #2
SV_SPEED_PREVIEW_SSTART 125.1970966 ; m ! Start station in path preview array, veh
                                    ! #1
SV_SPEED_PREVIEW_SSTART_2 210 ; m ! Start station in path preview array, veh #2
SV_SPEED_PREVIEW_V_TARGET 20.14715368 ; km/h ! Initial target speed in preview
                                      ! array, veh #1
SV_SPEED_PREVIEW_V_TARGET_2 54.75452015 ; km/h ! Initial target speed in preview
                                        ! array, veh #2
SV_STATION 127.4371937 ; m ! Station of vehicle #1 on path PATH_ID_DM(1) {Station}
SV_STATION_2 212.2165292 ; m ! Station of vehicle #2 on path PATH_ID_DM(2)
                         ! {Station_2}
SV_STA_ROAD 65.22078594 ; m ! Station of vehicle #1 on road CURRENT_ROAD_ID(1)
                        ! {Sta_Road}
SV_STA_ROAD_2 161.926191 ; m ! Station of vehicle #2 on road CURRENT_ROAD_ID(2)
                         ! {Sta_Road_2}
SV_STR_DM 5.299541167 ; deg ! Road-wheel steer from DM, dm. #1
SV_STR_DM_2 0.1871006787 ; deg ! Road-wheel steer from DM, dm. #2
SV_STR_DM_OLD 5.307519668 ; deg ! Road-wheel steer from DM (prev. time step), dm. #1
SV_STR_DM_OLD_2 0.187093826 ; deg ! Road-wheel steer from DM (prev. time step), dm.
                            ! #2
SV_STR_IN_DGR_A1 -6.965547747 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_DGR_A3 0.005939224513 ; - ! ODE: Steering gear input rate, axle 3
SV_STR_IN_DGR_A4    0 ; - ! ODE: Steering gear input rate, axle 4
SV_STR_IN_DGR_A5    0 ; - ! ODE: Steering gear input rate, axle 5
SV_STR_IN_DGR_A6    0 ; - ! ODE: Steering gear input rate, axle 6
SV_STR_IN_DGR_A7    0 ; - ! ODE: Steering gear input rate, axle 7
SV_STR_IN_GR_A1 2.315911925 ; - ! ODE: Steering gear input position, axle 1
                            ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_IN_GR_A3 0.08163753502 ; - ! ODE: Steering gear input position, axle 3
                              ! {A_StrIn3}
SV_STR_IN_GR_A4     0 ; - ! ODE: Steering gear input position, axle 4 {A_StrIn4}
SV_STR_IN_GR_A5     0 ; - ! ODE: Steering gear input position, axle 5 {A_StrIn5}
SV_STR_IN_GR_A6     0 ; - ! ODE: Steering gear input position, axle 6 {A_StrIn6}
SV_STR_IN_GR_A7     0 ; - ! ODE: Steering gear input position, axle 7 {A_StrIn7}
SV_STR_KP_L1 5.491657996 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD 5.500004542 ; deg ! Kingpin steer angle, wheel L1 (previous time
                             ! step)
SV_STR_KP_L2_OLD    0 ; deg ! Kingpin steer angle, wheel L2 (previous time step)
SV_STR_KP_L3 0.1115373024 ; deg ! Kingpin steer angle, wheel L3
SV_STR_KP_L3_OLD 0.1115373024 ; deg ! Kingpin steer angle, wheel L3 (previous time
                              ! step)
SV_STR_KP_L4_OLD    0 ; deg ! Kingpin steer angle, wheel L4 (previous time step)
SV_STR_KP_L5_OLD    0 ; deg ! Kingpin steer angle, wheel L5 (previous time step)
SV_STR_KP_L6_OLD    0 ; deg ! Kingpin steer angle, wheel L6 (previous time step)
SV_STR_KP_L7_OLD    0 ; deg ! Kingpin steer angle, wheel L7 (previous time step)
SV_STR_KP_R1 5.42657276 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD 5.434177671 ; deg ! Kingpin steer angle, wheel R1 (previous time
                             ! step)
SV_STR_KP_R2_OLD    0 ; deg ! Kingpin steer angle, wheel R2 (previous time step)
SV_STR_KP_R3 0.1244525841 ; deg ! Kingpin steer angle, wheel R3
SV_STR_KP_R3_OLD 0.1243856921 ; deg ! Kingpin steer angle, wheel R3 (previous time
                              ! step)
SV_STR_KP_R4_OLD    0 ; deg ! Kingpin steer angle, wheel R4 (previous time step)
SV_STR_KP_R5_OLD    0 ; deg ! Kingpin steer angle, wheel R5 (previous time step)
SV_STR_KP_R6_OLD    0 ; deg ! Kingpin steer angle, wheel R6 (previous time step)
SV_STR_KP_R7_OLD    0 ; deg ! Kingpin steer angle, wheel R7 (previous time step)
SV_STR_OUT_GR_A1 0.09277578797 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_STR_OUT_GR_A3 0.003265382616 ; - ! Steering gear output
SV_STR_OUT_GR_A4    0 ; - ! Steering gear output
SV_STR_OUT_GR_A5    0 ; - ! Steering gear output
SV_STR_OUT_GR_A6    0 ; - ! Steering gear output
SV_STR_OUT_GR_A7    0 ; - ! Steering gear output
SV_SWA    132.6919791 ; deg ! ODE: Steering wheel angle, vehicle #1
SV_SWA_2  4.677486207 ; deg ! ODE: Steering wheel angle, vehicle #2
SV_SWA_DM 132.8915273 ; deg ! Steering wheel angle from DM, vehicle #1
SV_SWA_DM_2 4.67731606 ; deg ! Steering wheel angle from DM, vehicle #2
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control, veh. #1
SV_SWA_OLD 132.8915273 ; deg ! Steering wheel angle (previous time step, veh. #1
SV_SWA_OLD_2 4.67731606 ; deg ! Steering wheel angle (previous time step, veh. #2
SV_SWA_OL_2         0 ; deg ! Steering wheel angle from open loop control, veh. #2
SV_S_RDO_1          0 ; m ! Station of object 1 on road path {S_RdO_1}
SV_S_RDO_2          0 ; m ! Station of object 2 on road path {S_RdO_2}
SV_S_RDO_3          0 ; m ! Station of object 3 on road path {S_RdO_3}
SV_S_RDO_4          0 ; m ! Station of object 4 on road path {S_RdO_4}
SV_THROTTLE 0.4180148522 ; - ! ODE: Time delayed engine throttle, veh #1
SV_THROTTLE_2 0.9999996962 ; - ! ODE: Time delayed engine throttle, veh #2
SV_THR_REQ 0.3680507471 ; - ! Requested Throttle, veh #1
SV_THR_REQ_2        1 ; - ! Requested Throttle, veh #2
SV_TH_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto throttle for a gear shift, veh #1
SV_TH_AUTO_SHIFT_2  0 ; - ! Boolean: 1 if auto throttle for a gear shift, veh #2
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_L3          0 ; C ! ODE: Brake rotor L3 temperature {T_Rtr_L3}
SV_TROT_L4          0 ; C ! ODE: Brake rotor L4 temperature {T_Rtr_L4}
SV_TROT_L5          0 ; C ! ODE: Brake rotor L5 temperature {T_Rtr_L5}
SV_TROT_L6          0 ; C ! ODE: Brake rotor L6 temperature {T_Rtr_L6}
SV_TROT_L7          0 ; C ! ODE: Brake rotor L7 temperature {T_Rtr_L7}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_TROT_R3          0 ; C ! ODE: Brake rotor R3 temperature {T_Rtr_R3}
SV_TROT_R4          0 ; C ! ODE: Brake rotor R4 temperature {T_Rtr_R4}
SV_TROT_R5          0 ; C ! ODE: Brake rotor R5 temperature {T_Rtr_R5}
SV_TROT_R6          0 ; C ! ODE: Brake rotor R6 temperature {T_Rtr_R6}
SV_TROT_R7          0 ; C ! ODE: Brake rotor R7 temperature {T_Rtr_R7}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time of ESC control status changed, veh #1
SV_T_ESC_STATE_CHANGE_2 -10000000 ; s ! Time of ESC control status changed, veh #2
SV_T_SHIFT_START 18.516 ; s ! Time when automatic gear shift started, veh #1
SV_T_SHIFT_START_2 18.746 ; s ! Time when automatic gear shift started, veh #2
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_L3           0 ; mm3 ! ODE: Brake caliper L3 volume
SV_VBK_L4           0 ; mm3 ! ODE: Brake caliper L4 volume
SV_VBK_L5           0 ; mm3 ! ODE: Brake caliper L5 volume
SV_VBK_L6           0 ; mm3 ! ODE: Brake caliper L6 volume
SV_VBK_L7           0 ; mm3 ! ODE: Brake caliper L7 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VBK_R3           0 ; mm3 ! ODE: Brake caliper R3 volume
SV_VBK_R4           0 ; mm3 ! ODE: Brake caliper R4 volume
SV_VBK_R5           0 ; mm3 ! ODE: Brake caliper R5 volume
SV_VBK_R6           0 ; mm3 ! ODE: Brake caliper R6 volume
SV_VBK_R7           0 ; mm3 ! ODE: Brake caliper R7 volume
SV_VERR_OLD -0.4875854779 ; km/h ! Speed controller error at previous time step, veh
                          ! #1
SV_VERR_OLD_2 13.97156717 ; km/h ! Speed controller error at previous time step, veh
                          ! #2
SV_VXS    21.84949925 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 1
SV_VXS_2  41.78547095 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 2
SV_VX_SM3 41.79377109 ; km/h ! ODE: Body X velocity at hitch for trailer 3
SV_VYS   0.4463518767 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 1
SV_VYS_2 -0.05573888347 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 2
SV_VY_SM3 -0.0625433995 ; m/s ! ODE: Body Y velocity at hitch for trailer 3
SV_VZS -0.03985810801 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 1
SV_VZS_2 -0.2099403925 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 2
SV_VZ_SM3 -0.003889471424 ; m/s ! ODE: Body Z velocity at hitch for trailer 3
SV_XO     -13.1167147 ; m ! ODE: Global X coord. of sprung-mass origin, unit 1 {Xo}
SV_XO_2   2.133192148 ; m ! ODE: Global X coord. of sprung-mass origin, unit 2
                      ! {Xo_2}
SV_X_GND  -10.9884511 ; m ! X coord, ground, unit 1 aero ref. pt
SV_X_GND_2 2.142311527 ; m ! X coord, ground, unit 2 aero ref. pt
SV_X_GND_3 2.147465426 ; m ! X coord, ground, unit 3 aero ref. pt
SV_X_H2 -0.04019172631 ; mm ! ODE: X translation for hitch 2
SV_YAW    211.7436316 ; deg ! ODE: Yaw of sprung mass, unit 1 {Yaw}
SV_YAW_2   90.1948857 ; deg ! ODE: Yaw of sprung mass, unit 2 {Yaw_2}
SV_YAW_H2 0.05444813625 ; deg ! ODE: Relative yaw for unit 3
SV_YO      9.68648032 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 1 {Yo}
SV_YO_2   96.04610666 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 2
                      ! {Yo_2}
SV_Y_GND   11.0037324 ; m ! Y coord, ground, unit 1 aero ref. pt
SV_Y_GND_2 93.89070591 ; m ! Y coord, ground, unit 2 aero ref. pt
SV_Y_GND_3 92.38529929 ; m ! Y coord, ground, unit 3 aero ref. pt
SV_Y_H2  -0.014686364 ; mm ! ODE: Y translation for hitch 2
SV_ZO   0.03734285483 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 1 {Zo}
SV_ZO_2 -0.09880152308 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 2
                       ! {Zo_2}
SV_Z_CTC_L1I 0.06499813135 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O 0.06499813135 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L2I 0.08800195482 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O 0.0953604029 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_L3I -0.05351731985 ; m ! Center of tire contact L3i {Zgnd_L3i}
SV_Z_CTC_L3O -0.05351731985 ; m ! Center of tire contact L3o {Zgnd_L3o}
SV_Z_CTC_L4I -0.06557195542 ; m ! Center of tire contact L4i {Zgnd_L4i}
SV_Z_CTC_L4O -0.0508268662 ; m ! Center of tire contact L4o {Zgnd_L4o}
SV_Z_CTC_L5I -0.06583547341 ; m ! Center of tire contact L5i {Zgnd_L5i}
SV_Z_CTC_L5O -0.05109038492 ; m ! Center of tire contact L5o {Zgnd_L5o}
SV_Z_CTC_L6I -0.06813906205 ; m ! Center of tire contact L6i {Zgnd_L6i}
SV_Z_CTC_L6O -0.05339403604 ; m ! Center of tire contact L6o {Zgnd_L6o}
SV_Z_CTC_L7I -0.06846189229 ; m ! Center of tire contact L7i {Zgnd_L7i}
SV_Z_CTC_L7O -0.05371686672 ; m ! Center of tire contact L7o {Zgnd_L7o}
SV_Z_CTC_R1I 0.02000760354 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O 0.02000760354 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R2I 0.05112659902 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O 0.04376371448 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_CTC_R3I -0.1500741778 ; m ! Center of tire contact R3i {Zgnd_R3i}
SV_Z_CTC_R3O -0.1500741778 ; m ! Center of tire contact R3o {Zgnd_R3o}
SV_Z_CTC_R4I -0.1394400959 ; m ! Center of tire contact R4i {Zgnd_R4i}
SV_Z_CTC_R4O -0.1541851852 ; m ! Center of tire contact R4o {Zgnd_R4o}
SV_Z_CTC_R5I -0.1397036103 ; m ! Center of tire contact R5i {Zgnd_R5i}
SV_Z_CTC_R5O -0.1544486988 ; m ! Center of tire contact R5o {Zgnd_R5o}
SV_Z_CTC_R6I -0.1420068859 ; m ! Center of tire contact R6i {Zgnd_R6i}
SV_Z_CTC_R6O -0.1567519119 ; m ! Center of tire contact R6o {Zgnd_R6o}
SV_Z_CTC_R7I -0.142329714 ; m ! Center of tire contact R7i {Zgnd_R7i}
SV_Z_CTC_R7O -0.1570747396 ; m ! Center of tire contact R7o {Zgnd_R7o}
SV_Z_GND 0.06069462279 ; m ! Z coord, ground, unit 1 aero ref. pt
SV_Z_GND_2 -0.1020148346 ; m ! Z coord, ground, unit 2 aero ref. pt
SV_Z_GND_3 -0.1022602584 ; m ! Z coord, ground, unit 3 aero ref. pt
SV_Z_H2 0.004411168536 ; mm ! ODE: Z translation for hitch 2


END
