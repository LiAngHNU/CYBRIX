PARSFILE
! TruckSim 2020.1
! Revision 143796, June 26, 2020
MODEL_LAYOUT SS_SSS__SSS_SSS_SSS_SSS_SS__SSS_SSS_SSS_SSS_SS__SSS_SSS_SSS_SSS_SS

DATASET_TITLE 5A Tractor+3 14A Trailers
CATEGORY Vehicle Configurations
TITLE 5A Tractor+3 14A Trailers <Vehicle Configurations>

! Echo: Results\Run_05fea403-0787-48a3-b88c-2ecd435e34cd\LastRun_echo.par
! This run was made 11:56 on June 29, 2020.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE   824 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE      872 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [L]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME   2.193264495 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             32 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       32 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              64 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP        -100 ; km/h ! Minimum allowed absolute speed: stop the run if
                      ! reached; use -1 to disable

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! N_VEHICLES        1 ! Number of vehicles (lead units) (read-only)
! VEHICLE_NUNITS    4 ! Number of vehicle units (read-only)
! VEHICLE_NAXLES   47 ! Number of vehicle axles (read-only)
! VEHICLE_AXLE_MAP(1) 5 ! Number of axles on unit 1 (read-only)
! VEHICLE_AXLE_MAP(2) 14 ! Number of axles on unit 2 (read-only)
! VEHICLE_AXLE_MAP(3) 14 ! Number of axles on unit 3 (read-only)
! VEHICLE_AXLE_MAP(4) 14 ! Number of axles on unit 4 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL(1) 821.1804727 ; mm ! CALC -- Height of TL CG, unit 1
! LX_CG_TL(1) 2823.104006 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL(1) -0.01276017179 ; mm ! CALC -- Y coordinate of TL CG, unit 1
! M_TL(1)       10509 ; kg ! CALC -- TL mass, unit 1
! IXX_TL(1) 8699.165203 ; kg-m2 ! CALC -- TL roll inertia moment, unit 1
! IYY_TL(1) 98470.15452 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 1
! IZZ_TL(1) 95938.74836 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 1

! H_CG_TL(2) 654.5235315 ; mm ! CALC -- Height of TL CG, unit 2
! LX_CG_TL(2) 9558.796085 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(2) -0.004533595288 ; mm ! CALC -- Y coordinate of TL CG, unit 2
! M_TL(2)       21862 ; kg ! CALC -- TL mass, unit 2
! IXX_TL(2) 17056.15763 ; kg-m2 ! CALC -- TL roll inertia moment, unit 2
! IYY_TL(2) 1114163.523 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 2
! IZZ_TL(2) 1121894.265 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 2

! H_CG_TL(3) 650.3746504 ; mm ! CALC -- Height of TL CG, unit 3
! LX_CG_TL(3) 9558.796085 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(3) 0.008071520835 ; mm ! CALC -- Y coordinate of TL CG, unit 3
! M_TL(3)       21862 ; kg ! CALC -- TL mass, unit 3
! IXX_TL(3) 17248.14897 ; kg-m2 ! CALC -- TL roll inertia moment, unit 3
! IYY_TL(3) 1114355.514 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 3
! IZZ_TL(3) 1121894.265 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 3

! H_CG_TL(4) 637.6753578 ; mm ! CALC -- Height of TL CG, unit 4
! LX_CG_TL(4) 9558.796085 ; mm ! CALC -- X distance TL CG is behind front hitch
! Y_CG_TL(4) 0.009943496908 ; mm ! CALC -- Y coordinate of TL CG, unit 4
! M_TL(4)       21862 ; kg ! CALC -- TL mass, unit 4
! IXX_TL(4) 17426.70528 ; kg-m2 ! CALC -- TL roll inertia moment, unit 4
! IYY_TL(4) 1114534.07 ; kg-m2 ! CALC -- TL pitch inertia moment, unit 4
! IZZ_TL(4) 1121894.265 ; kg-m2 ! CALC -- TL yaw inertia moment, unit 4

!------------------------------------------------------------------------------------
! SPRUNG MASSES
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU(1)       1019 ; mm ! Height of CG of sprung mass, unladen (SU), unit 1 [I]
LX_CG_SU(1)      1400 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU(1)          0 ; mm ! Y coordinate of SU CG, unit 1 [I]
M_SU(1)          6310 ; kg ! Mass of unladen sprung mass (SU), unit 1 [I]
IXX_SU(1)        6879 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 1 [I]
IYY_SU(1)       21711 ; kg-m2 ! Pitch inertia for SU, unit 1 [I]
IZZ_SU(1)       19665 ; kg-m2 ! Yaw inertia for SU, unit 1 [I]
IXY_SU(1)           0 ; kg-m2 ! XY product of inertia for SU, unit 1 [I]
IXZ_SU(1)         130 ; kg-m2 ! XZ product of inertia for SU, unit 1 [I]
IYZ_SU(1)           0 ; kg-m2 ! YZ product of inertia for SU, unit 1 [I]

! N_PAYLOADS(1)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(1)         1500 ; mm ! [D] Reference height of sprung mass (maybe for target)
LEN_SM(1)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(1)        1600 ; mm ! [D] Reference width of sprung mass (maybe for target)
LX_F_SM(1)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

H_H_FRONT(2)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(2)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 2 [I]
LX_CG_SU(2)      5220 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(2)          0 ; mm ! Y coordinate of SU CG, unit 2 [I]
M_SU(2)          6000 ; kg ! Mass of unladen sprung mass (SU), unit 2 [I]
IXX_SU(2)      9959.7 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 2 [I]
IYY_SU(2)      171336 ; kg-m2 ! Pitch inertia for SU, unit 2 [I]
IZZ_SU(2)      179992 ; kg-m2 ! Yaw inertia for SU, unit 2 [I]
IXY_SU(2)           0 ; kg-m2 ! XY product of inertia for SU, unit 2 [I]
IXZ_SU(2)           0 ; kg-m2 ! XZ product of inertia for SU, unit 2 [I]
IYZ_SU(2)           0 ; kg-m2 ! YZ product of inertia for SU, unit 2 [I]

! N_PAYLOADS(2)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(2)          180 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(2)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(2)        2438 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(2)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

H_H_FRONT(3)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(3)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 3 [I]
LX_CG_SU(3)      5220 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(3)          0 ; mm ! Y coordinate of SU CG, unit 3 [I]
M_SU(3)          6000 ; kg ! Mass of unladen sprung mass (SU), unit 3 [I]
IXX_SU(3)      9959.7 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 3 [I]
IYY_SU(3)      171336 ; kg-m2 ! Pitch inertia for SU, unit 3 [I]
IZZ_SU(3)      179992 ; kg-m2 ! Yaw inertia for SU, unit 3 [I]
IXY_SU(3)           0 ; kg-m2 ! XY product of inertia for SU, unit 3 [I]
IXZ_SU(3)           0 ; kg-m2 ! XZ product of inertia for SU, unit 3 [I]
IYZ_SU(3)           0 ; kg-m2 ! YZ product of inertia for SU, unit 3 [I]

! N_PAYLOADS(3)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(3)          180 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(3)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(3)        2438 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(3)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

H_H_FRONT(4)     1100 ; mm ! Height (Z) of front hitch point in SM coord. system [I]
H_CG_SU(4)       1000 ; mm ! Height of CG of sprung mass, unladen (SU), unit 4 [I]
LX_CG_SU(4)      5220 ; mm ! X distance SU CG is behind front hitch point [I]
Y_CG_SU(4)          0 ; mm ! Y coordinate of SU CG, unit 4 [I]
M_SU(4)          6000 ; kg ! Mass of unladen sprung mass (SU), unit 4 [I]
IXX_SU(4)      9959.7 ; kg-m2 ! Roll inertia for unladen sprung mass, unit 4 [I]
IYY_SU(4)      171336 ; kg-m2 ! Pitch inertia for SU, unit 4 [I]
IZZ_SU(4)      179992 ; kg-m2 ! Yaw inertia for SU, unit 4 [I]
IXY_SU(4)           0 ; kg-m2 ! XY product of inertia for SU, unit 4 [I]
IXZ_SU(4)           0 ; kg-m2 ! XZ product of inertia for SU, unit 4 [I]
IYZ_SU(4)           0 ; kg-m2 ! YZ product of inertia for SU, unit 4 [I]

! N_PAYLOADS(4)     0 ! No. of payloads attached to this sprung mass (read only)

HT_SM(4)          180 ; mm ! Reference height of sprung mass (maybe for target)
LEN_SM(4)        4000 ; mm ! [D] Reference length of sprung mass (maybe for target)
WID_SM(4)        2438 ; mm ! Reference width of sprung mass (maybe for target)
LX_F_SM(4)       1000 ; mm ! [D] Length from front to control pt (maybe for target)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! HITCHES
!------------------------------------------------------------------------------------
! Hitches can apply rotational damping and friction to resist pitch, roll, and
! articulation. Also, the Configurable Functions MX_HITCH, MY_HITCH, and MZ_HITCH
! apply resisting moments as nonlinear functions of the hitch rotation angles.

! FZH_L(1) 23812.67666 ; N ! CALC -- Static load, laden vehicle, hitch 1
! FZH_UL(1) 31416.30375 ; N ! CALC -- Static load, unladen vehicle, hitch 1
HITCH_DMP_X(1)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 1
HITCH_DMP_Y(1)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 1
HITCH_DMP_Z(1)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 1
HITCH_FRIC_X(1)     0 ; N-m ! [D] Roll friction, hitch 1
HITCH_FRIC_Y(1)     0 ; N-m ! [D] Pitch friction, hitch 1
HITCH_FRIC_Z(1)     0 ; N-m ! [D] Articulation friction, hitch 1
HITCH_FREQ(1)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 1 [I]
HITCH_ZETA(1)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 1 [I]
H_H(1)           1100 ; mm ! Hitch point height (Z coord.), sprung mass 1 [I]
LX_H(1)          6000 ; mm ! X dist. hitch is behind sprung mass origin [I]
Y_H(1)              0 ; mm ! Y coordinate, hitch point 1 [I]

! FZH_L(2) 12903.12475 ; N ! CALC -- Static load, laden vehicle, hitch 2
! FZH_UL(2) 31416.30375 ; N ! CALC -- Static load, unladen vehicle, hitch 2
HITCH_DMP_X(2)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 2
HITCH_DMP_Y(2)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 2
HITCH_DMP_Z(2)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 2
HITCH_FRIC_X(2)     0 ; N-m ! [D] Roll friction, hitch 2
HITCH_FRIC_Y(2)     0 ; N-m ! [D] Pitch friction, hitch 2
HITCH_FRIC_Z(2)     0 ; N-m ! [D] Articulation friction, hitch 2
HITCH_FREQ(2)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 2 [I]
HITCH_ZETA(2)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 2 [I]
H_H(2)           1100 ; mm ! Hitch point height (Z coord.), sprung mass 2 [I]
LX_H(2)         17800 ; mm ! X dist. hitch is behind front hitch point [I]
Y_H(2)              0 ; mm ! Y coordinate, hitch point 2 [I]

! FZH_L(3) 31416.30375 ; N ! CALC -- Static load, laden vehicle, hitch 3
! FZH_UL(3) 31416.30375 ; N ! CALC -- Static load, unladen vehicle, hitch 3
HITCH_DMP_X(3)      0 ; N-m-s/deg ! [D] Roll damping coefficient, hitch 3
HITCH_DMP_Y(3)      0 ; N-m-s/deg ! [D] Pitch damping coefficient, hitch 3
HITCH_DMP_Z(3)      0 ; N-m-s/deg ! [D] Articulation damping coefficient, hitch 3
HITCH_FRIC_X(3)     0 ; N-m ! [D] Roll friction, hitch 3
HITCH_FRIC_Y(3)     0 ; N-m ! [D] Pitch friction, hitch 3
HITCH_FRIC_Z(3)     0 ; N-m ! [D] Articulation friction, hitch 3
HITCH_FREQ(3)      40 ; Hz ! [D] Natural frequency of XYZ springs in hitch 3 [I]
HITCH_ZETA(3)     0.1 ; - ! [D] Damping ratio of XYZ dampers in hitch 3 [I]
H_H(3)           1100 ; mm ! Hitch point height (Z coord.), sprung mass 3 [I]
LX_H(3)         17800 ; mm ! X dist. hitch is behind front hitch point [I]
Y_H(3)              0 ; mm ! Y coordinate, hitch point 3 [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO(1)      7.3 ; m2 ! Frontal cross-section area, unit 1
H_REF_AERO(1)       0 ; mm ! Height of aerodynamic reference point, unit 1
L_REF_AERO(1)    6000 ; mm ! Aerodynamic reference length, unit 1
X_REF_AERO(1)   -3000 ; mm ! X coordinate of aerodynamic reference point, unit 1
Y_REF_AERO(1)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 1

AREA_AERO(2)        0 ; m2 ! Frontal cross-section area, unit 2
H_REF_AERO(2)       0 ; mm ! Height of aerodynamic reference point, unit 2
L_REF_AERO(2)       0 ; mm ! Aerodynamic reference length, unit 2
X_REF_AERO(2)       0 ; mm ! X coordinate of aerodynamic reference point, unit 2
Y_REF_AERO(2)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 2

AREA_AERO(3)        0 ; m2 ! Frontal cross-section area, unit 3
H_REF_AERO(3)       0 ; mm ! Height of aerodynamic reference point, unit 3
L_REF_AERO(3)       0 ; mm ! Aerodynamic reference length, unit 3
X_REF_AERO(3)       0 ; mm ! X coordinate of aerodynamic reference point, unit 3
Y_REF_AERO(3)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 3

AREA_AERO(4)        0 ; m2 ! Frontal cross-section area, unit 4
H_REF_AERO(4)       0 ; mm ! Height of aerodynamic reference point, unit 4
L_REF_AERO(4)       0 ; mm ! Aerodynamic reference length, unit 4
X_REF_AERO(4)       0 ; mm ! X coordinate of aerodynamic reference point, unit 4
Y_REF_AERO(4)       0 ; mm ! Y coordinate of aerodynamic reference point, unit 4

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For solid-axle suspensions, these include
! the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE, SUSP_X_AXLE, and
! SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the origin of the
! sprung mass (SM) coordinate system.

! Solid-axle suspension for axle 1 on unit 1
OPT_JNC_DESIGN(1,1) 1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1,1)     0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,1,2)     0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1,1)        0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,1,2)        0 ; deg ! Static toe for wheel R1 [I]
H_CG_AXLE(1,1)    485 ; mm ! Z coordinate of axle 1 CG [I]
H_WC(1,1,1)       485 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,1,2)       485 ; mm ! Reference Z coordinate of wheel center R1 [I]
IA(1,1)            60 ; kg-m2 ! Yaw and roll moment of inertia, axle 1 [I]
! ISPIN(1,1,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L1 [I]
! ISPIN(1,1,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R1 [I]
! ISPIN_XXZZ(1,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L1 [I]
! ISPIN_XXZZ(1,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R1 [I]
IW(1,1,1)          10 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,1,2)          10 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1,1)   0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,1,2)   0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1,1)     2070 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1,1)        0 ; mm ! X dist. axle 1 is behind the sprung-mass origin [I]
M_US_AXLE(1,1)    174 ; kg ! Unsteered mass for axle 1 [I]
M_US_STR(1,1,1)    22 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,1,2)    22 ; kg ! Steered mass for wheel R1 [I]
! M_US(1,1)       400 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1,1) 0.565 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
Y_CG_AXLE(1,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1,1)      0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2 on unit 1
OPT_JNC_DESIGN(1,2) 1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(1,2,1)     0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(1,2,2)     0 ; deg ! Static camber for wheel R2 [I]
A_TOE(1,2,1)        0 ; deg ! Static toe for wheel L2 [I]
A_TOE(1,2,2)        0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(1,2)    485 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(1,2,1)       485 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(1,2,2)       485 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(1,2)            60 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(1,2,1)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L2 [I]
! ISPIN(1,2,2)   14.8 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R2 [I]
! ISPIN_XXZZ(1,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L2 [I]
! ISPIN_XXZZ(1,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R2 [I]
IW(1,2,1)          10 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(1,2,2)          10 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(1,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(1,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(1,2,1)   0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(1,2,2)   0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(1,2)     2070 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(1,2)     1100 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(1,2)    174 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(1,2,1)    22 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(1,2,2)    22 ; kg ! Steered mass for wheel R2 [I]
! M_US(1,2)       400 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(1,2) 0.565 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(1,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(1,2)      0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

! Solid-axle suspension for axle 3 on unit 1
OPT_JNC_DESIGN(1,3) 1 ! Specify JNC_DESIGN explicitly for axle 3? [I]
A_CAMBER(1,3,1)     0 ; deg ! Static camber for wheel L3 [I]
A_CAMBER(1,3,2)     0 ; deg ! Static camber for wheel R3 [I]
A_TOE(1,3,1)        0 ; deg ! Static toe for wheel L3 [I]
A_TOE(1,3,2)        0 ; deg ! Static toe for wheel R3 [I]
H_CG_AXLE(1,3)    530 ; mm ! Z coordinate of axle 3 CG [I]
H_WC(1,3,1)       530 ; mm ! Reference Z coordinate of wheel center L3 [I]
H_WC(1,3,2)       530 ; mm ! Reference Z coordinate of wheel center R3 [I]
IA(1,3)           223 ; kg-m2 ! Yaw and roll moment of inertia, axle 3 [I]
! ISPIN(1,3,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L3 [I]
! ISPIN(1,3,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R3 [I]
! ISPIN_XXZZ(1,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L3 [I]
! ISPIN_XXZZ(1,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R3 [I]
IW(1,3,1)          20 ; kg-m2 ! Spin inertia for wheel L3 [I]
IW(1,3,2)          20 ; kg-m2 ! Spin inertia for wheel R3 [I]
IW_XXZZ(1,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L3 [I]
IW_XXZZ(1,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R3 [I]
JNC_DESIGN(1,3,1)   0 ; mm ! Jounce when center of wheel L3 is at H_WC [I]
JNC_DESIGN(1,3,2)   0 ; mm ! Jounce when center of wheel R3 is at H_WC [I]
L_TRACK(1,3)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 3 [I]
LX_AXLE(1,3)     4900 ; mm ! X dist. axle 3 is behind the sprung-mass origin [I]
M_US_AXLE(1,3)    769 ; kg ! Unsteered mass for axle 3 [I]
M_US_STR(1,3,1)     0 ; kg ! Steered mass for wheel L3 [I]
M_US_STR(1,3,2)     0 ; kg ! Steered mass for wheel R3 [I]
! M_US(1,3)      1133 ; kg ! CALC -- Total unsprung mass for axle 3
! R_US_STR(1,3) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 3
Y_CG_AXLE(1,3)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 3 [I]
Y_CL_SUSP(1,3)      0 ; mm ! Y coord. for suspension centerline, axle 3 [I]

! Solid-axle suspension for axle 4 on unit 1
OPT_JNC_DESIGN(1,4) 1 ! Specify JNC_DESIGN explicitly for axle 4? [I]
A_CAMBER(1,4,1)     0 ; deg ! Static camber for wheel L4 [I]
A_CAMBER(1,4,2)     0 ; deg ! Static camber for wheel R4 [I]
A_TOE(1,4,1)        0 ; deg ! Static toe for wheel L4 [I]
A_TOE(1,4,2)        0 ; deg ! Static toe for wheel R4 [I]
H_CG_AXLE(1,4)    530 ; mm ! Z coordinate of axle 4 CG [I]
H_WC(1,4,1)       530 ; mm ! Reference Z coordinate of wheel center L4 [I]
H_WC(1,4,2)       530 ; mm ! Reference Z coordinate of wheel center R4 [I]
IA(1,4)           223 ; kg-m2 ! Yaw and roll moment of inertia, axle 4 [I]
! ISPIN(1,4,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L4 [I]
! ISPIN(1,4,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R4 [I]
! ISPIN_XXZZ(1,4,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L4 [I]
! ISPIN_XXZZ(1,4,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R4 [I]
IW(1,4,1)          20 ; kg-m2 ! Spin inertia for wheel L4 [I]
IW(1,4,2)          20 ; kg-m2 ! Spin inertia for wheel R4 [I]
IW_XXZZ(1,4,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L4 [I]
IW_XXZZ(1,4,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R4 [I]
JNC_DESIGN(1,4,1)   0 ; mm ! Jounce when center of wheel L4 is at H_WC [I]
JNC_DESIGN(1,4,2)   0 ; mm ! Jounce when center of wheel R4 is at H_WC [I]
L_TRACK(1,4)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 4 [I]
LX_AXLE(1,4)     6000 ; mm ! X dist. axle 4 is behind the sprung-mass origin [I]
M_US_AXLE(1,4)    769 ; kg ! Unsteered mass for axle 4 [I]
M_US_STR(1,4,1)     0 ; kg ! Steered mass for wheel L4 [I]
M_US_STR(1,4,2)     0 ; kg ! Steered mass for wheel R4 [I]
! M_US(1,4)      1133 ; kg ! CALC -- Total unsprung mass for axle 4
! R_US_STR(1,4) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 4
Y_CG_AXLE(1,4)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,4)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 4 [I]
Y_CL_SUSP(1,4)      0 ; mm ! Y coord. for suspension centerline, axle 4 [I]

! Solid-axle suspension for axle 5 on unit 1
OPT_JNC_DESIGN(1,5) 1 ! Specify JNC_DESIGN explicitly for axle 5? [I]
A_CAMBER(1,5,1)     0 ; deg ! Static camber for wheel L5 [I]
A_CAMBER(1,5,2)     0 ; deg ! Static camber for wheel R5 [I]
A_TOE(1,5,1)        0 ; deg ! Static toe for wheel L5 [I]
A_TOE(1,5,2)        0 ; deg ! Static toe for wheel R5 [I]
H_CG_AXLE(1,5)    530 ; mm ! Z coordinate of axle 5 CG [I]
H_WC(1,5,1)       530 ; mm ! Reference Z coordinate of wheel center L5 [I]
H_WC(1,5,2)       530 ; mm ! Reference Z coordinate of wheel center R5 [I]
IA(1,5)           223 ; kg-m2 ! Yaw and roll moment of inertia, axle 5 [I]
! ISPIN(1,5,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L5 [I]
! ISPIN(1,5,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R5 [I]
! ISPIN_XXZZ(1,5,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L5 [I]
! ISPIN_XXZZ(1,5,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R5 [I]
IW(1,5,1)          20 ; kg-m2 ! Spin inertia for wheel L5 [I]
IW(1,5,2)          20 ; kg-m2 ! Spin inertia for wheel R5 [I]
IW_XXZZ(1,5,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L5 [I]
IW_XXZZ(1,5,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R5 [I]
JNC_DESIGN(1,5,1)   0 ; mm ! Jounce when center of wheel L5 is at H_WC [I]
JNC_DESIGN(1,5,2)   0 ; mm ! Jounce when center of wheel R5 is at H_WC [I]
L_TRACK(1,5)     1863 ; mm ! Track width, wheel-center to wheel-center, axle 5 [I]
LX_AXLE(1,5)     7100 ; mm ! X dist. axle 5 is behind the sprung-mass origin [I]
M_US_AXLE(1,5)    769 ; kg ! Unsteered mass for axle 5 [I]
M_US_STR(1,5,1)     0 ; kg ! Steered mass for wheel L5 [I]
M_US_STR(1,5,2)     0 ; kg ! Steered mass for wheel R5 [I]
! M_US(1,5)      1133 ; kg ! CALC -- Total unsprung mass for axle 5
! R_US_STR(1,5) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 5
Y_CG_AXLE(1,5)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(1,5)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 5 [I]
Y_CL_SUSP(1,5)      0 ; mm ! Y coord. for suspension centerline, axle 5 [I]

! Solid-axle suspension for axle 1 on unit 2
OPT_JNC_DESIGN(2,1) 1 ! Specify JNC_DESIGN explicitly for axle 6? [I]
A_CAMBER(2,1,1)     0 ; deg ! Static camber for wheel L6 [I]
A_CAMBER(2,1,2)     0 ; deg ! Static camber for wheel R6 [I]
A_TOE(2,1,1)        0 ; deg ! Static toe for wheel L6 [I]
A_TOE(2,1,2)        0 ; deg ! Static toe for wheel R6 [I]
H_CG_AXLE(2,1)    510 ; mm ! Z coordinate of axle 6 CG [I]
H_WC(2,1,1)       510 ; mm ! Reference Z coordinate of wheel center L6 [I]
H_WC(2,1,2)       510 ; mm ! Reference Z coordinate of wheel center R6 [I]
IA(2,1)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 6 [I]
! ISPIN(2,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L6 [I]
! ISPIN(2,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R6 [I]
! ISPIN_XXZZ(2,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L6 [I]
! ISPIN_XXZZ(2,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R6 [I]
IW(2,1,1)          20 ; kg-m2 ! Spin inertia for wheel L6 [I]
IW(2,1,2)          20 ; kg-m2 ! Spin inertia for wheel R6 [I]
IW_XXZZ(2,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L6 [I]
IW_XXZZ(2,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R6 [I]
JNC_DESIGN(2,1,1)   0 ; mm ! Jounce when center of wheel L6 is at H_WC [I]
JNC_DESIGN(2,1,2)   0 ; mm ! Jounce when center of wheel R6 is at H_WC [I]
L_TRACK(2,1)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 6 [I]
LX_AXLE(2,1)     3400 ; mm ! X dist. axle 6 is behind the sprung-mass origin [I]
M_US_AXLE(2,1)    769 ; kg ! Unsteered mass for axle 6 [I]
M_US_STR(2,1,1)     0 ; kg ! Steered mass for wheel L6 [I]
M_US_STR(2,1,2)     0 ; kg ! Steered mass for wheel R6 [I]
! M_US(2,1)      1133 ; kg ! CALC -- Total unsprung mass for axle 6
! R_US_STR(2,1) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 6
Y_CG_AXLE(2,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 6 [I]
Y_CL_SUSP(2,1)      0 ; mm ! Y coord. for suspension centerline, axle 6 [I]

! Solid-axle suspension for axle 2 on unit 2
OPT_JNC_DESIGN(2,2) 1 ! Specify JNC_DESIGN explicitly for axle 7? [I]
A_CAMBER(2,2,1)     0 ; deg ! Static camber for wheel L7 [I]
A_CAMBER(2,2,2)     0 ; deg ! Static camber for wheel R7 [I]
A_TOE(2,2,1)        0 ; deg ! Static toe for wheel L7 [I]
A_TOE(2,2,2)        0 ; deg ! Static toe for wheel R7 [I]
H_CG_AXLE(2,2)    510 ; mm ! Z coordinate of axle 7 CG [I]
H_WC(2,2,1)       510 ; mm ! Reference Z coordinate of wheel center L7 [I]
H_WC(2,2,2)       510 ; mm ! Reference Z coordinate of wheel center R7 [I]
IA(2,2)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 7 [I]
! ISPIN(2,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L7 [I]
! ISPIN(2,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R7 [I]
! ISPIN_XXZZ(2,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L7 [I]
! ISPIN_XXZZ(2,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R7 [I]
IW(2,2,1)          20 ; kg-m2 ! Spin inertia for wheel L7 [I]
IW(2,2,2)          20 ; kg-m2 ! Spin inertia for wheel R7 [I]
IW_XXZZ(2,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L7 [I]
IW_XXZZ(2,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R7 [I]
JNC_DESIGN(2,2,1)   0 ; mm ! Jounce when center of wheel L7 is at H_WC [I]
JNC_DESIGN(2,2,2)   0 ; mm ! Jounce when center of wheel R7 is at H_WC [I]
L_TRACK(2,2)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 7 [I]
LX_AXLE(2,2)     4600 ; mm ! X dist. axle 7 is behind the sprung-mass origin [I]
M_US_AXLE(2,2)    769 ; kg ! Unsteered mass for axle 7 [I]
M_US_STR(2,2,1)     0 ; kg ! Steered mass for wheel L7 [I]
M_US_STR(2,2,2)     0 ; kg ! Steered mass for wheel R7 [I]
! M_US(2,2)      1133 ; kg ! CALC -- Total unsprung mass for axle 7
! R_US_STR(2,2) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 7
Y_CG_AXLE(2,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 7 [I]
Y_CL_SUSP(2,2)      0 ; mm ! Y coord. for suspension centerline, axle 7 [I]

! Solid-axle suspension for axle 3 on unit 2
OPT_JNC_DESIGN(2,3) 1 ! Specify JNC_DESIGN explicitly for axle 8? [I]
A_CAMBER(2,3,1)     0 ; deg ! Static camber for wheel L8 [I]
A_CAMBER(2,3,2)     0 ; deg ! Static camber for wheel R8 [I]
A_TOE(2,3,1)        0 ; deg ! Static toe for wheel L8 [I]
A_TOE(2,3,2)        0 ; deg ! Static toe for wheel R8 [I]
H_CG_AXLE(2,3)    510 ; mm ! Z coordinate of axle 8 CG [I]
H_WC(2,3,1)       510 ; mm ! Reference Z coordinate of wheel center L8 [I]
H_WC(2,3,2)       510 ; mm ! Reference Z coordinate of wheel center R8 [I]
IA(2,3)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 8 [I]
! ISPIN(2,3,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L8 [I]
! ISPIN(2,3,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R8 [I]
! ISPIN_XXZZ(2,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L8 [I]
! ISPIN_XXZZ(2,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R8 [I]
IW(2,3,1)          20 ; kg-m2 ! Spin inertia for wheel L8 [I]
IW(2,3,2)          20 ; kg-m2 ! Spin inertia for wheel R8 [I]
IW_XXZZ(2,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L8 [I]
IW_XXZZ(2,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R8 [I]
JNC_DESIGN(2,3,1)   0 ; mm ! Jounce when center of wheel L8 is at H_WC [I]
JNC_DESIGN(2,3,2)   0 ; mm ! Jounce when center of wheel R8 is at H_WC [I]
L_TRACK(2,3)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 8 [I]
LX_AXLE(2,3)     5800 ; mm ! X dist. axle 8 is behind the sprung-mass origin [I]
M_US_AXLE(2,3)    769 ; kg ! Unsteered mass for axle 8 [I]
M_US_STR(2,3,1)     0 ; kg ! Steered mass for wheel L8 [I]
M_US_STR(2,3,2)     0 ; kg ! Steered mass for wheel R8 [I]
! M_US(2,3)      1133 ; kg ! CALC -- Total unsprung mass for axle 8
! R_US_STR(2,3) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 8
Y_CG_AXLE(2,3)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 8 [I]
Y_CL_SUSP(2,3)      0 ; mm ! Y coord. for suspension centerline, axle 8 [I]

! Solid-axle suspension for axle 4 on unit 2
OPT_JNC_DESIGN(2,4) 1 ! Specify JNC_DESIGN explicitly for axle 9? [I]
A_CAMBER(2,4,1)     0 ; deg ! Static camber for wheel L9 [I]
A_CAMBER(2,4,2)     0 ; deg ! Static camber for wheel R9 [I]
A_TOE(2,4,1)        0 ; deg ! Static toe for wheel L9 [I]
A_TOE(2,4,2)        0 ; deg ! Static toe for wheel R9 [I]
H_CG_AXLE(2,4)    510 ; mm ! Z coordinate of axle 9 CG [I]
H_WC(2,4,1)       510 ; mm ! Reference Z coordinate of wheel center L9 [I]
H_WC(2,4,2)       510 ; mm ! Reference Z coordinate of wheel center R9 [I]
IA(2,4)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 9 [I]
! ISPIN(2,4,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L9 [I]
! ISPIN(2,4,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R9 [I]
! ISPIN_XXZZ(2,4,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L9 [I]
! ISPIN_XXZZ(2,4,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R9 [I]
IW(2,4,1)          20 ; kg-m2 ! Spin inertia for wheel L9 [I]
IW(2,4,2)          20 ; kg-m2 ! Spin inertia for wheel R9 [I]
IW_XXZZ(2,4,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L9 [I]
IW_XXZZ(2,4,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R9 [I]
JNC_DESIGN(2,4,1)   0 ; mm ! Jounce when center of wheel L9 is at H_WC [I]
JNC_DESIGN(2,4,2)   0 ; mm ! Jounce when center of wheel R9 is at H_WC [I]
L_TRACK(2,4)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 9 [I]
LX_AXLE(2,4)     7000 ; mm ! X dist. axle 9 is behind the sprung-mass origin [I]
M_US_AXLE(2,4)    769 ; kg ! Unsteered mass for axle 9 [I]
M_US_STR(2,4,1)     0 ; kg ! Steered mass for wheel L9 [I]
M_US_STR(2,4,2)     0 ; kg ! Steered mass for wheel R9 [I]
! M_US(2,4)      1133 ; kg ! CALC -- Total unsprung mass for axle 9
! R_US_STR(2,4) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 9
Y_CG_AXLE(2,4)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,4)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 9 [I]
Y_CL_SUSP(2,4)      0 ; mm ! Y coord. for suspension centerline, axle 9 [I]

! Solid-axle suspension for axle 5 on unit 2
OPT_JNC_DESIGN(2,5) 1 ! Specify JNC_DESIGN explicitly for axle 10? [I]
A_CAMBER(2,5,1)     0 ; deg ! Static camber for wheel L10 [I]
A_CAMBER(2,5,2)     0 ; deg ! Static camber for wheel R10 [I]
A_TOE(2,5,1)        0 ; deg ! Static toe for wheel L10 [I]
A_TOE(2,5,2)        0 ; deg ! Static toe for wheel R10 [I]
H_CG_AXLE(2,5)    510 ; mm ! Z coordinate of axle 10 CG [I]
H_WC(2,5,1)       510 ; mm ! Reference Z coordinate of wheel center L10 [I]
H_WC(2,5,2)       510 ; mm ! Reference Z coordinate of wheel center R10 [I]
IA(2,5)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 10 [I]
! ISPIN(2,5,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L10 [I]
! ISPIN(2,5,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R10 [I]
! ISPIN_XXZZ(2,5,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L10 [I]
! ISPIN_XXZZ(2,5,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R10 [I]
IW(2,5,1)          20 ; kg-m2 ! Spin inertia for wheel L10 [I]
IW(2,5,2)          20 ; kg-m2 ! Spin inertia for wheel R10 [I]
IW_XXZZ(2,5,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L10 [I]
IW_XXZZ(2,5,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R10 [I]
JNC_DESIGN(2,5,1)   0 ; mm ! Jounce when center of wheel L10 is at H_WC [I]
JNC_DESIGN(2,5,2)   0 ; mm ! Jounce when center of wheel R10 is at H_WC [I]
L_TRACK(2,5)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 10 [I]
LX_AXLE(2,5)     8200 ; mm ! X dist. axle 10 is behind the sprung-mass origin [I]
M_US_AXLE(2,5)    769 ; kg ! Unsteered mass for axle 10 [I]
M_US_STR(2,5,1)     0 ; kg ! Steered mass for wheel L10 [I]
M_US_STR(2,5,2)     0 ; kg ! Steered mass for wheel R10 [I]
! M_US(2,5)      1133 ; kg ! CALC -- Total unsprung mass for axle 10
! R_US_STR(2,5) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 10
Y_CG_AXLE(2,5)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,5)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 10 [I]
Y_CL_SUSP(2,5)      0 ; mm ! Y coord. for suspension centerline, axle 10 [I]

! Solid-axle suspension for axle 6 on unit 2
OPT_JNC_DESIGN(2,6) 1 ! Specify JNC_DESIGN explicitly for axle 11? [I]
A_CAMBER(2,6,1)     0 ; deg ! Static camber for wheel L11 [I]
A_CAMBER(2,6,2)     0 ; deg ! Static camber for wheel R11 [I]
A_TOE(2,6,1)        0 ; deg ! Static toe for wheel L11 [I]
A_TOE(2,6,2)        0 ; deg ! Static toe for wheel R11 [I]
H_CG_AXLE(2,6)    510 ; mm ! Z coordinate of axle 11 CG [I]
H_WC(2,6,1)       510 ; mm ! Reference Z coordinate of wheel center L11 [I]
H_WC(2,6,2)       510 ; mm ! Reference Z coordinate of wheel center R11 [I]
IA(2,6)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 11 [I]
! ISPIN(2,6,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L11 [I]
! ISPIN(2,6,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R11 [I]
! ISPIN_XXZZ(2,6,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L11 [I]
! ISPIN_XXZZ(2,6,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R11 [I]
IW(2,6,1)          20 ; kg-m2 ! Spin inertia for wheel L11 [I]
IW(2,6,2)          20 ; kg-m2 ! Spin inertia for wheel R11 [I]
IW_XXZZ(2,6,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L11 [I]
IW_XXZZ(2,6,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R11 [I]
JNC_DESIGN(2,6,1)   0 ; mm ! Jounce when center of wheel L11 is at H_WC [I]
JNC_DESIGN(2,6,2)   0 ; mm ! Jounce when center of wheel R11 is at H_WC [I]
L_TRACK(2,6)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 11 [I]
LX_AXLE(2,6)     9400 ; mm ! X dist. axle 11 is behind the sprung-mass origin [I]
M_US_AXLE(2,6)    769 ; kg ! Unsteered mass for axle 11 [I]
M_US_STR(2,6,1)     0 ; kg ! Steered mass for wheel L11 [I]
M_US_STR(2,6,2)     0 ; kg ! Steered mass for wheel R11 [I]
! M_US(2,6)      1133 ; kg ! CALC -- Total unsprung mass for axle 11
! R_US_STR(2,6) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 11
Y_CG_AXLE(2,6)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,6)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 11 [I]
Y_CL_SUSP(2,6)      0 ; mm ! Y coord. for suspension centerline, axle 11 [I]

! Solid-axle suspension for axle 7 on unit 2
OPT_JNC_DESIGN(2,7) 1 ! Specify JNC_DESIGN explicitly for axle 12? [I]
A_CAMBER(2,7,1)     0 ; deg ! Static camber for wheel L12 [I]
A_CAMBER(2,7,2)     0 ; deg ! Static camber for wheel R12 [I]
A_TOE(2,7,1)        0 ; deg ! Static toe for wheel L12 [I]
A_TOE(2,7,2)        0 ; deg ! Static toe for wheel R12 [I]
H_CG_AXLE(2,7)    510 ; mm ! Z coordinate of axle 12 CG [I]
H_WC(2,7,1)       510 ; mm ! Reference Z coordinate of wheel center L12 [I]
H_WC(2,7,2)       510 ; mm ! Reference Z coordinate of wheel center R12 [I]
IA(2,7)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 12 [I]
! ISPIN(2,7,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L12 [I]
! ISPIN(2,7,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R12 [I]
! ISPIN_XXZZ(2,7,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L12 [I]
! ISPIN_XXZZ(2,7,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R12 [I]
IW(2,7,1)          20 ; kg-m2 ! Spin inertia for wheel L12 [I]
IW(2,7,2)          20 ; kg-m2 ! Spin inertia for wheel R12 [I]
IW_XXZZ(2,7,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L12 [I]
IW_XXZZ(2,7,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R12 [I]
JNC_DESIGN(2,7,1)   0 ; mm ! Jounce when center of wheel L12 is at H_WC [I]
JNC_DESIGN(2,7,2)   0 ; mm ! Jounce when center of wheel R12 is at H_WC [I]
L_TRACK(2,7)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 12 [I]
LX_AXLE(2,7)    10600 ; mm ! X dist. axle 12 is behind the sprung-mass origin [I]
M_US_AXLE(2,7)    769 ; kg ! Unsteered mass for axle 12 [I]
M_US_STR(2,7,1)     0 ; kg ! Steered mass for wheel L12 [I]
M_US_STR(2,7,2)     0 ; kg ! Steered mass for wheel R12 [I]
! M_US(2,7)      1133 ; kg ! CALC -- Total unsprung mass for axle 12
! R_US_STR(2,7) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 12
Y_CG_AXLE(2,7)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,7)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 12 [I]
Y_CL_SUSP(2,7)      0 ; mm ! Y coord. for suspension centerline, axle 12 [I]

! Solid-axle suspension for axle 8 on unit 2
OPT_JNC_DESIGN(2,8) 1 ! Specify JNC_DESIGN explicitly for axle 13? [I]
A_CAMBER(2,8,1)     0 ; deg ! Static camber for wheel L13 [I]
A_CAMBER(2,8,2)     0 ; deg ! Static camber for wheel R13 [I]
A_TOE(2,8,1)        0 ; deg ! Static toe for wheel L13 [I]
A_TOE(2,8,2)        0 ; deg ! Static toe for wheel R13 [I]
H_CG_AXLE(2,8)    510 ; mm ! Z coordinate of axle 13 CG [I]
H_WC(2,8,1)       510 ; mm ! Reference Z coordinate of wheel center L13 [I]
H_WC(2,8,2)       510 ; mm ! Reference Z coordinate of wheel center R13 [I]
IA(2,8)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 13 [I]
! ISPIN(2,8,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L13 [I]
! ISPIN(2,8,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R13 [I]
! ISPIN_XXZZ(2,8,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L13 [I]
! ISPIN_XXZZ(2,8,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R13 [I]
IW(2,8,1)          20 ; kg-m2 ! Spin inertia for wheel L13 [I]
IW(2,8,2)          20 ; kg-m2 ! Spin inertia for wheel R13 [I]
IW_XXZZ(2,8,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L13 [I]
IW_XXZZ(2,8,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R13 [I]
JNC_DESIGN(2,8,1)   0 ; mm ! Jounce when center of wheel L13 is at H_WC [I]
JNC_DESIGN(2,8,2)   0 ; mm ! Jounce when center of wheel R13 is at H_WC [I]
L_TRACK(2,8)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 13 [I]
LX_AXLE(2,8)    11800 ; mm ! X dist. axle 13 is behind the sprung-mass origin [I]
M_US_AXLE(2,8)    769 ; kg ! Unsteered mass for axle 13 [I]
M_US_STR(2,8,1)     0 ; kg ! Steered mass for wheel L13 [I]
M_US_STR(2,8,2)     0 ; kg ! Steered mass for wheel R13 [I]
! M_US(2,8)      1133 ; kg ! CALC -- Total unsprung mass for axle 13
! R_US_STR(2,8) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 13
Y_CG_AXLE(2,8)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,8)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 13 [I]
Y_CL_SUSP(2,8)      0 ; mm ! Y coord. for suspension centerline, axle 13 [I]

! Solid-axle suspension for axle 9 on unit 2
OPT_JNC_DESIGN(2,9) 1 ! Specify JNC_DESIGN explicitly for axle 14? [I]
A_CAMBER(2,9,1)     0 ; deg ! Static camber for wheel L14 [I]
A_CAMBER(2,9,2)     0 ; deg ! Static camber for wheel R14 [I]
A_TOE(2,9,1)        0 ; deg ! Static toe for wheel L14 [I]
A_TOE(2,9,2)        0 ; deg ! Static toe for wheel R14 [I]
H_CG_AXLE(2,9)    510 ; mm ! Z coordinate of axle 14 CG [I]
H_WC(2,9,1)       510 ; mm ! Reference Z coordinate of wheel center L14 [I]
H_WC(2,9,2)       510 ; mm ! Reference Z coordinate of wheel center R14 [I]
IA(2,9)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 14 [I]
! ISPIN(2,9,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L14 [I]
! ISPIN(2,9,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R14 [I]
! ISPIN_XXZZ(2,9,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L14 [I]
! ISPIN_XXZZ(2,9,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R14 [I]
IW(2,9,1)          20 ; kg-m2 ! Spin inertia for wheel L14 [I]
IW(2,9,2)          20 ; kg-m2 ! Spin inertia for wheel R14 [I]
IW_XXZZ(2,9,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L14 [I]
IW_XXZZ(2,9,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R14 [I]
JNC_DESIGN(2,9,1)   0 ; mm ! Jounce when center of wheel L14 is at H_WC [I]
JNC_DESIGN(2,9,2)   0 ; mm ! Jounce when center of wheel R14 is at H_WC [I]
L_TRACK(2,9)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 14 [I]
LX_AXLE(2,9)    13000 ; mm ! X dist. axle 14 is behind the sprung-mass origin [I]
M_US_AXLE(2,9)    769 ; kg ! Unsteered mass for axle 14 [I]
M_US_STR(2,9,1)     0 ; kg ! Steered mass for wheel L14 [I]
M_US_STR(2,9,2)     0 ; kg ! Steered mass for wheel R14 [I]
! M_US(2,9)      1133 ; kg ! CALC -- Total unsprung mass for axle 14
! R_US_STR(2,9) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 14
Y_CG_AXLE(2,9)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,9)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 14 [I]
Y_CL_SUSP(2,9)      0 ; mm ! Y coord. for suspension centerline, axle 14 [I]

! Solid-axle suspension for axle 10 on unit 2
OPT_JNC_DESIGN(2,10) 1 ! Specify JNC_DESIGN explicitly for axle 15? [I]
A_CAMBER(2,10,1)    0 ; deg ! Static camber for wheel L15 [I]
A_CAMBER(2,10,2)    0 ; deg ! Static camber for wheel R15 [I]
A_TOE(2,10,1)       0 ; deg ! Static toe for wheel L15 [I]
A_TOE(2,10,2)       0 ; deg ! Static toe for wheel R15 [I]
H_CG_AXLE(2,10)   510 ; mm ! Z coordinate of axle 15 CG [I]
H_WC(2,10,1)      510 ; mm ! Reference Z coordinate of wheel center L15 [I]
H_WC(2,10,2)      510 ; mm ! Reference Z coordinate of wheel center R15 [I]
IA(2,10)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 15 [I]
! ISPIN(2,10,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L15 [I]
! ISPIN(2,10,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R15 [I]
! ISPIN_XXZZ(2,10,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L15 [I]
! ISPIN_XXZZ(2,10,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R15 [I]
IW(2,10,1)         20 ; kg-m2 ! Spin inertia for wheel L15 [I]
IW(2,10,2)         20 ; kg-m2 ! Spin inertia for wheel R15 [I]
IW_XXZZ(2,10,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L15 [I]
IW_XXZZ(2,10,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R15 [I]
JNC_DESIGN(2,10,1)  0 ; mm ! Jounce when center of wheel L15 is at H_WC [I]
JNC_DESIGN(2,10,2)  0 ; mm ! Jounce when center of wheel R15 is at H_WC [I]
L_TRACK(2,10)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 15 [I]
LX_AXLE(2,10)   14200 ; mm ! X dist. axle 15 is behind the sprung-mass origin [I]
M_US_AXLE(2,10)   769 ; kg ! Unsteered mass for axle 15 [I]
M_US_STR(2,10,1)    0 ; kg ! Steered mass for wheel L15 [I]
M_US_STR(2,10,2)    0 ; kg ! Steered mass for wheel R15 [I]
! M_US(2,10)     1133 ; kg ! CALC -- Total unsprung mass for axle 15
! R_US_STR(2,10) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 15
Y_CG_AXLE(2,10)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,10)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 15 [I]
Y_CL_SUSP(2,10)     0 ; mm ! Y coord. for suspension centerline, axle 15 [I]

! Solid-axle suspension for axle 11 on unit 2
OPT_JNC_DESIGN(2,11) 1 ! Specify JNC_DESIGN explicitly for axle 16? [I]
A_CAMBER(2,11,1)    0 ; deg ! Static camber for wheel L16 [I]
A_CAMBER(2,11,2)    0 ; deg ! Static camber for wheel R16 [I]
A_TOE(2,11,1)       0 ; deg ! Static toe for wheel L16 [I]
A_TOE(2,11,2)       0 ; deg ! Static toe for wheel R16 [I]
H_CG_AXLE(2,11)   510 ; mm ! Z coordinate of axle 16 CG [I]
H_WC(2,11,1)      510 ; mm ! Reference Z coordinate of wheel center L16 [I]
H_WC(2,11,2)      510 ; mm ! Reference Z coordinate of wheel center R16 [I]
IA(2,11)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 16 [I]
! ISPIN(2,11,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L16 [I]
! ISPIN(2,11,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R16 [I]
! ISPIN_XXZZ(2,11,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L16 [I]
! ISPIN_XXZZ(2,11,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R16 [I]
IW(2,11,1)         20 ; kg-m2 ! Spin inertia for wheel L16 [I]
IW(2,11,2)         20 ; kg-m2 ! Spin inertia for wheel R16 [I]
IW_XXZZ(2,11,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L16 [I]
IW_XXZZ(2,11,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R16 [I]
JNC_DESIGN(2,11,1)  0 ; mm ! Jounce when center of wheel L16 is at H_WC [I]
JNC_DESIGN(2,11,2)  0 ; mm ! Jounce when center of wheel R16 is at H_WC [I]
L_TRACK(2,11)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 16 [I]
LX_AXLE(2,11)   15400 ; mm ! X dist. axle 16 is behind the sprung-mass origin [I]
M_US_AXLE(2,11)   769 ; kg ! Unsteered mass for axle 16 [I]
M_US_STR(2,11,1)    0 ; kg ! Steered mass for wheel L16 [I]
M_US_STR(2,11,2)    0 ; kg ! Steered mass for wheel R16 [I]
! M_US(2,11)     1133 ; kg ! CALC -- Total unsprung mass for axle 16
! R_US_STR(2,11) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 16
Y_CG_AXLE(2,11)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,11)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 16 [I]
Y_CL_SUSP(2,11)     0 ; mm ! Y coord. for suspension centerline, axle 16 [I]

! Solid-axle suspension for axle 12 on unit 2
OPT_JNC_DESIGN(2,12) 1 ! Specify JNC_DESIGN explicitly for axle 17? [I]
A_CAMBER(2,12,1)    0 ; deg ! Static camber for wheel L17 [I]
A_CAMBER(2,12,2)    0 ; deg ! Static camber for wheel R17 [I]
A_TOE(2,12,1)       0 ; deg ! Static toe for wheel L17 [I]
A_TOE(2,12,2)       0 ; deg ! Static toe for wheel R17 [I]
H_CG_AXLE(2,12)   510 ; mm ! Z coordinate of axle 17 CG [I]
H_WC(2,12,1)      510 ; mm ! Reference Z coordinate of wheel center L17 [I]
H_WC(2,12,2)      510 ; mm ! Reference Z coordinate of wheel center R17 [I]
IA(2,12)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 17 [I]
! ISPIN(2,12,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L17 [I]
! ISPIN(2,12,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R17 [I]
! ISPIN_XXZZ(2,12,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L17 [I]
! ISPIN_XXZZ(2,12,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R17 [I]
IW(2,12,1)         20 ; kg-m2 ! Spin inertia for wheel L17 [I]
IW(2,12,2)         20 ; kg-m2 ! Spin inertia for wheel R17 [I]
IW_XXZZ(2,12,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L17 [I]
IW_XXZZ(2,12,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R17 [I]
JNC_DESIGN(2,12,1)  0 ; mm ! Jounce when center of wheel L17 is at H_WC [I]
JNC_DESIGN(2,12,2)  0 ; mm ! Jounce when center of wheel R17 is at H_WC [I]
L_TRACK(2,12)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 17 [I]
LX_AXLE(2,12)   16600 ; mm ! X dist. axle 17 is behind the sprung-mass origin [I]
M_US_AXLE(2,12)   769 ; kg ! Unsteered mass for axle 17 [I]
M_US_STR(2,12,1)    0 ; kg ! Steered mass for wheel L17 [I]
M_US_STR(2,12,2)    0 ; kg ! Steered mass for wheel R17 [I]
! M_US(2,12)     1133 ; kg ! CALC -- Total unsprung mass for axle 17
! R_US_STR(2,12) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 17
Y_CG_AXLE(2,12)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,12)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 17 [I]
Y_CL_SUSP(2,12)     0 ; mm ! Y coord. for suspension centerline, axle 17 [I]

! Solid-axle suspension for axle 13 on unit 2
OPT_JNC_DESIGN(2,13) 1 ! Specify JNC_DESIGN explicitly for axle 18? [I]
A_CAMBER(2,13,1)    0 ; deg ! Static camber for wheel L18 [I]
A_CAMBER(2,13,2)    0 ; deg ! Static camber for wheel R18 [I]
A_TOE(2,13,1)       0 ; deg ! Static toe for wheel L18 [I]
A_TOE(2,13,2)       0 ; deg ! Static toe for wheel R18 [I]
H_CG_AXLE(2,13)   510 ; mm ! Z coordinate of axle 18 CG [I]
H_WC(2,13,1)      510 ; mm ! Reference Z coordinate of wheel center L18 [I]
H_WC(2,13,2)      510 ; mm ! Reference Z coordinate of wheel center R18 [I]
IA(2,13)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 18 [I]
! ISPIN(2,13,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L18 [I]
! ISPIN(2,13,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R18 [I]
! ISPIN_XXZZ(2,13,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L18 [I]
! ISPIN_XXZZ(2,13,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R18 [I]
IW(2,13,1)         20 ; kg-m2 ! Spin inertia for wheel L18 [I]
IW(2,13,2)         20 ; kg-m2 ! Spin inertia for wheel R18 [I]
IW_XXZZ(2,13,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L18 [I]
IW_XXZZ(2,13,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R18 [I]
JNC_DESIGN(2,13,1)  0 ; mm ! Jounce when center of wheel L18 is at H_WC [I]
JNC_DESIGN(2,13,2)  0 ; mm ! Jounce when center of wheel R18 is at H_WC [I]
L_TRACK(2,13)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 18 [I]
LX_AXLE(2,13)   17800 ; mm ! X dist. axle 18 is behind the sprung-mass origin [I]
M_US_AXLE(2,13)   769 ; kg ! Unsteered mass for axle 18 [I]
M_US_STR(2,13,1)    0 ; kg ! Steered mass for wheel L18 [I]
M_US_STR(2,13,2)    0 ; kg ! Steered mass for wheel R18 [I]
! M_US(2,13)     1133 ; kg ! CALC -- Total unsprung mass for axle 18
! R_US_STR(2,13) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 18
Y_CG_AXLE(2,13)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,13)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 18 [I]
Y_CL_SUSP(2,13)     0 ; mm ! Y coord. for suspension centerline, axle 18 [I]

! Solid-axle suspension for axle 14 on unit 2
OPT_JNC_DESIGN(2,14) 1 ! Specify JNC_DESIGN explicitly for axle 19? [I]
A_CAMBER(2,14,1)    0 ; deg ! Static camber for wheel L19 [I]
A_CAMBER(2,14,2)    0 ; deg ! Static camber for wheel R19 [I]
A_TOE(2,14,1)       0 ; deg ! Static toe for wheel L19 [I]
A_TOE(2,14,2)       0 ; deg ! Static toe for wheel R19 [I]
H_CG_AXLE(2,14)   510 ; mm ! Z coordinate of axle 19 CG [I]
H_WC(2,14,1)      510 ; mm ! Reference Z coordinate of wheel center L19 [I]
H_WC(2,14,2)      510 ; mm ! Reference Z coordinate of wheel center R19 [I]
IA(2,14)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 19 [I]
! ISPIN(2,14,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L19 [I]
! ISPIN(2,14,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R19 [I]
! ISPIN_XXZZ(2,14,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L19 [I]
! ISPIN_XXZZ(2,14,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R19 [I]
IW(2,14,1)         20 ; kg-m2 ! Spin inertia for wheel L19 [I]
IW(2,14,2)         20 ; kg-m2 ! Spin inertia for wheel R19 [I]
IW_XXZZ(2,14,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L19 [I]
IW_XXZZ(2,14,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R19 [I]
JNC_DESIGN(2,14,1)  0 ; mm ! Jounce when center of wheel L19 is at H_WC [I]
JNC_DESIGN(2,14,2)  0 ; mm ! Jounce when center of wheel R19 is at H_WC [I]
L_TRACK(2,14)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 19 [I]
LX_AXLE(2,14)   19000 ; mm ! X dist. axle 19 is behind the sprung-mass origin [I]
M_US_AXLE(2,14)   769 ; kg ! Unsteered mass for axle 19 [I]
M_US_STR(2,14,1)    0 ; kg ! Steered mass for wheel L19 [I]
M_US_STR(2,14,2)    0 ; kg ! Steered mass for wheel R19 [I]
! M_US(2,14)     1133 ; kg ! CALC -- Total unsprung mass for axle 19
! R_US_STR(2,14) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 19
Y_CG_AXLE(2,14)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2,14)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 19 [I]
Y_CL_SUSP(2,14)     0 ; mm ! Y coord. for suspension centerline, axle 19 [I]

! Solid-axle suspension for axle 1 on unit 3
OPT_JNC_DESIGN(3,1) 1 ! Specify JNC_DESIGN explicitly for axle 20? [I]
A_CAMBER(3,1,1)     0 ; deg ! Static camber for wheel L20 [I]
A_CAMBER(3,1,2)     0 ; deg ! Static camber for wheel R20 [I]
A_TOE(3,1,1)        0 ; deg ! Static toe for wheel L20 [I]
A_TOE(3,1,2)        0 ; deg ! Static toe for wheel R20 [I]
H_CG_AXLE(3,1)    510 ; mm ! Z coordinate of axle 20 CG [I]
H_WC(3,1,1)       510 ; mm ! Reference Z coordinate of wheel center L20 [I]
H_WC(3,1,2)       510 ; mm ! Reference Z coordinate of wheel center R20 [I]
IA(3,1)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 20 [I]
! ISPIN(3,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L20 [I]
! ISPIN(3,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R20 [I]
! ISPIN_XXZZ(3,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L20 [I]
! ISPIN_XXZZ(3,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R20 [I]
IW(3,1,1)          20 ; kg-m2 ! Spin inertia for wheel L20 [I]
IW(3,1,2)          20 ; kg-m2 ! Spin inertia for wheel R20 [I]
IW_XXZZ(3,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L20 [I]
IW_XXZZ(3,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R20 [I]
JNC_DESIGN(3,1,1)   0 ; mm ! Jounce when center of wheel L20 is at H_WC [I]
JNC_DESIGN(3,1,2)   0 ; mm ! Jounce when center of wheel R20 is at H_WC [I]
L_TRACK(3,1)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 20 [I]
LX_AXLE(3,1)     3400 ; mm ! X dist. axle 20 is behind the sprung-mass origin [I]
M_US_AXLE(3,1)    769 ; kg ! Unsteered mass for axle 20 [I]
M_US_STR(3,1,1)     0 ; kg ! Steered mass for wheel L20 [I]
M_US_STR(3,1,2)     0 ; kg ! Steered mass for wheel R20 [I]
! M_US(3,1)      1133 ; kg ! CALC -- Total unsprung mass for axle 20
! R_US_STR(3,1) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 20
Y_CG_AXLE(3,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 20 [I]
Y_CL_SUSP(3,1)      0 ; mm ! Y coord. for suspension centerline, axle 20 [I]

! Solid-axle suspension for axle 2 on unit 3
OPT_JNC_DESIGN(3,2) 1 ! Specify JNC_DESIGN explicitly for axle 21? [I]
A_CAMBER(3,2,1)     0 ; deg ! Static camber for wheel L21 [I]
A_CAMBER(3,2,2)     0 ; deg ! Static camber for wheel R21 [I]
A_TOE(3,2,1)        0 ; deg ! Static toe for wheel L21 [I]
A_TOE(3,2,2)        0 ; deg ! Static toe for wheel R21 [I]
H_CG_AXLE(3,2)    510 ; mm ! Z coordinate of axle 21 CG [I]
H_WC(3,2,1)       510 ; mm ! Reference Z coordinate of wheel center L21 [I]
H_WC(3,2,2)       510 ; mm ! Reference Z coordinate of wheel center R21 [I]
IA(3,2)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 21 [I]
! ISPIN(3,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L21 [I]
! ISPIN(3,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R21 [I]
! ISPIN_XXZZ(3,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L21 [I]
! ISPIN_XXZZ(3,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R21 [I]
IW(3,2,1)          20 ; kg-m2 ! Spin inertia for wheel L21 [I]
IW(3,2,2)          20 ; kg-m2 ! Spin inertia for wheel R21 [I]
IW_XXZZ(3,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L21 [I]
IW_XXZZ(3,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R21 [I]
JNC_DESIGN(3,2,1)   0 ; mm ! Jounce when center of wheel L21 is at H_WC [I]
JNC_DESIGN(3,2,2)   0 ; mm ! Jounce when center of wheel R21 is at H_WC [I]
L_TRACK(3,2)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 21 [I]
LX_AXLE(3,2)     4600 ; mm ! X dist. axle 21 is behind the sprung-mass origin [I]
M_US_AXLE(3,2)    769 ; kg ! Unsteered mass for axle 21 [I]
M_US_STR(3,2,1)     0 ; kg ! Steered mass for wheel L21 [I]
M_US_STR(3,2,2)     0 ; kg ! Steered mass for wheel R21 [I]
! M_US(3,2)      1133 ; kg ! CALC -- Total unsprung mass for axle 21
! R_US_STR(3,2) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 21
Y_CG_AXLE(3,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 21 [I]
Y_CL_SUSP(3,2)      0 ; mm ! Y coord. for suspension centerline, axle 21 [I]

! Solid-axle suspension for axle 3 on unit 3
OPT_JNC_DESIGN(3,3) 1 ! Specify JNC_DESIGN explicitly for axle 22? [I]
A_CAMBER(3,3,1)     0 ; deg ! Static camber for wheel L22 [I]
A_CAMBER(3,3,2)     0 ; deg ! Static camber for wheel R22 [I]
A_TOE(3,3,1)        0 ; deg ! Static toe for wheel L22 [I]
A_TOE(3,3,2)        0 ; deg ! Static toe for wheel R22 [I]
H_CG_AXLE(3,3)    510 ; mm ! Z coordinate of axle 22 CG [I]
H_WC(3,3,1)       510 ; mm ! Reference Z coordinate of wheel center L22 [I]
H_WC(3,3,2)       510 ; mm ! Reference Z coordinate of wheel center R22 [I]
IA(3,3)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 22 [I]
! ISPIN(3,3,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L22 [I]
! ISPIN(3,3,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R22 [I]
! ISPIN_XXZZ(3,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L22 [I]
! ISPIN_XXZZ(3,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R22 [I]
IW(3,3,1)          20 ; kg-m2 ! Spin inertia for wheel L22 [I]
IW(3,3,2)          20 ; kg-m2 ! Spin inertia for wheel R22 [I]
IW_XXZZ(3,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L22 [I]
IW_XXZZ(3,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R22 [I]
JNC_DESIGN(3,3,1)   0 ; mm ! Jounce when center of wheel L22 is at H_WC [I]
JNC_DESIGN(3,3,2)   0 ; mm ! Jounce when center of wheel R22 is at H_WC [I]
L_TRACK(3,3)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 22 [I]
LX_AXLE(3,3)     5800 ; mm ! X dist. axle 22 is behind the sprung-mass origin [I]
M_US_AXLE(3,3)    769 ; kg ! Unsteered mass for axle 22 [I]
M_US_STR(3,3,1)     0 ; kg ! Steered mass for wheel L22 [I]
M_US_STR(3,3,2)     0 ; kg ! Steered mass for wheel R22 [I]
! M_US(3,3)      1133 ; kg ! CALC -- Total unsprung mass for axle 22
! R_US_STR(3,3) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 22
Y_CG_AXLE(3,3)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 22 [I]
Y_CL_SUSP(3,3)      0 ; mm ! Y coord. for suspension centerline, axle 22 [I]

! Solid-axle suspension for axle 4 on unit 3
OPT_JNC_DESIGN(3,4) 1 ! Specify JNC_DESIGN explicitly for axle 23? [I]
A_CAMBER(3,4,1)     0 ; deg ! Static camber for wheel L23 [I]
A_CAMBER(3,4,2)     0 ; deg ! Static camber for wheel R23 [I]
A_TOE(3,4,1)        0 ; deg ! Static toe for wheel L23 [I]
A_TOE(3,4,2)        0 ; deg ! Static toe for wheel R23 [I]
H_CG_AXLE(3,4)    510 ; mm ! Z coordinate of axle 23 CG [I]
H_WC(3,4,1)       510 ; mm ! Reference Z coordinate of wheel center L23 [I]
H_WC(3,4,2)       510 ; mm ! Reference Z coordinate of wheel center R23 [I]
IA(3,4)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 23 [I]
! ISPIN(3,4,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L23 [I]
! ISPIN(3,4,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R23 [I]
! ISPIN_XXZZ(3,4,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L23 [I]
! ISPIN_XXZZ(3,4,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R23 [I]
IW(3,4,1)          20 ; kg-m2 ! Spin inertia for wheel L23 [I]
IW(3,4,2)          20 ; kg-m2 ! Spin inertia for wheel R23 [I]
IW_XXZZ(3,4,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L23 [I]
IW_XXZZ(3,4,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R23 [I]
JNC_DESIGN(3,4,1)   0 ; mm ! Jounce when center of wheel L23 is at H_WC [I]
JNC_DESIGN(3,4,2)   0 ; mm ! Jounce when center of wheel R23 is at H_WC [I]
L_TRACK(3,4)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 23 [I]
LX_AXLE(3,4)     7000 ; mm ! X dist. axle 23 is behind the sprung-mass origin [I]
M_US_AXLE(3,4)    769 ; kg ! Unsteered mass for axle 23 [I]
M_US_STR(3,4,1)     0 ; kg ! Steered mass for wheel L23 [I]
M_US_STR(3,4,2)     0 ; kg ! Steered mass for wheel R23 [I]
! M_US(3,4)      1133 ; kg ! CALC -- Total unsprung mass for axle 23
! R_US_STR(3,4) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 23
Y_CG_AXLE(3,4)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,4)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 23 [I]
Y_CL_SUSP(3,4)      0 ; mm ! Y coord. for suspension centerline, axle 23 [I]

! Solid-axle suspension for axle 5 on unit 3
OPT_JNC_DESIGN(3,5) 1 ! Specify JNC_DESIGN explicitly for axle 24? [I]
A_CAMBER(3,5,1)     0 ; deg ! Static camber for wheel L24 [I]
A_CAMBER(3,5,2)     0 ; deg ! Static camber for wheel R24 [I]
A_TOE(3,5,1)        0 ; deg ! Static toe for wheel L24 [I]
A_TOE(3,5,2)        0 ; deg ! Static toe for wheel R24 [I]
H_CG_AXLE(3,5)    510 ; mm ! Z coordinate of axle 24 CG [I]
H_WC(3,5,1)       510 ; mm ! Reference Z coordinate of wheel center L24 [I]
H_WC(3,5,2)       510 ; mm ! Reference Z coordinate of wheel center R24 [I]
IA(3,5)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 24 [I]
! ISPIN(3,5,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L24 [I]
! ISPIN(3,5,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R24 [I]
! ISPIN_XXZZ(3,5,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L24 [I]
! ISPIN_XXZZ(3,5,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R24 [I]
IW(3,5,1)          20 ; kg-m2 ! Spin inertia for wheel L24 [I]
IW(3,5,2)          20 ; kg-m2 ! Spin inertia for wheel R24 [I]
IW_XXZZ(3,5,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L24 [I]
IW_XXZZ(3,5,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R24 [I]
JNC_DESIGN(3,5,1)   0 ; mm ! Jounce when center of wheel L24 is at H_WC [I]
JNC_DESIGN(3,5,2)   0 ; mm ! Jounce when center of wheel R24 is at H_WC [I]
L_TRACK(3,5)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 24 [I]
LX_AXLE(3,5)     8200 ; mm ! X dist. axle 24 is behind the sprung-mass origin [I]
M_US_AXLE(3,5)    769 ; kg ! Unsteered mass for axle 24 [I]
M_US_STR(3,5,1)     0 ; kg ! Steered mass for wheel L24 [I]
M_US_STR(3,5,2)     0 ; kg ! Steered mass for wheel R24 [I]
! M_US(3,5)      1133 ; kg ! CALC -- Total unsprung mass for axle 24
! R_US_STR(3,5) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 24
Y_CG_AXLE(3,5)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,5)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 24 [I]
Y_CL_SUSP(3,5)      0 ; mm ! Y coord. for suspension centerline, axle 24 [I]

! Solid-axle suspension for axle 6 on unit 3
OPT_JNC_DESIGN(3,6) 1 ! Specify JNC_DESIGN explicitly for axle 25? [I]
A_CAMBER(3,6,1)     0 ; deg ! Static camber for wheel L25 [I]
A_CAMBER(3,6,2)     0 ; deg ! Static camber for wheel R25 [I]
A_TOE(3,6,1)        0 ; deg ! Static toe for wheel L25 [I]
A_TOE(3,6,2)        0 ; deg ! Static toe for wheel R25 [I]
H_CG_AXLE(3,6)    510 ; mm ! Z coordinate of axle 25 CG [I]
H_WC(3,6,1)       510 ; mm ! Reference Z coordinate of wheel center L25 [I]
H_WC(3,6,2)       510 ; mm ! Reference Z coordinate of wheel center R25 [I]
IA(3,6)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 25 [I]
! ISPIN(3,6,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L25 [I]
! ISPIN(3,6,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R25 [I]
! ISPIN_XXZZ(3,6,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L25 [I]
! ISPIN_XXZZ(3,6,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R25 [I]
IW(3,6,1)          20 ; kg-m2 ! Spin inertia for wheel L25 [I]
IW(3,6,2)          20 ; kg-m2 ! Spin inertia for wheel R25 [I]
IW_XXZZ(3,6,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L25 [I]
IW_XXZZ(3,6,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R25 [I]
JNC_DESIGN(3,6,1)   0 ; mm ! Jounce when center of wheel L25 is at H_WC [I]
JNC_DESIGN(3,6,2)   0 ; mm ! Jounce when center of wheel R25 is at H_WC [I]
L_TRACK(3,6)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 25 [I]
LX_AXLE(3,6)     9400 ; mm ! X dist. axle 25 is behind the sprung-mass origin [I]
M_US_AXLE(3,6)    769 ; kg ! Unsteered mass for axle 25 [I]
M_US_STR(3,6,1)     0 ; kg ! Steered mass for wheel L25 [I]
M_US_STR(3,6,2)     0 ; kg ! Steered mass for wheel R25 [I]
! M_US(3,6)      1133 ; kg ! CALC -- Total unsprung mass for axle 25
! R_US_STR(3,6) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 25
Y_CG_AXLE(3,6)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,6)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 25 [I]
Y_CL_SUSP(3,6)      0 ; mm ! Y coord. for suspension centerline, axle 25 [I]

! Solid-axle suspension for axle 7 on unit 3
OPT_JNC_DESIGN(3,7) 1 ! Specify JNC_DESIGN explicitly for axle 26? [I]
A_CAMBER(3,7,1)     0 ; deg ! Static camber for wheel L26 [I]
A_CAMBER(3,7,2)     0 ; deg ! Static camber for wheel R26 [I]
A_TOE(3,7,1)        0 ; deg ! Static toe for wheel L26 [I]
A_TOE(3,7,2)        0 ; deg ! Static toe for wheel R26 [I]
H_CG_AXLE(3,7)    510 ; mm ! Z coordinate of axle 26 CG [I]
H_WC(3,7,1)       510 ; mm ! Reference Z coordinate of wheel center L26 [I]
H_WC(3,7,2)       510 ; mm ! Reference Z coordinate of wheel center R26 [I]
IA(3,7)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 26 [I]
! ISPIN(3,7,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L26 [I]
! ISPIN(3,7,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R26 [I]
! ISPIN_XXZZ(3,7,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L26 [I]
! ISPIN_XXZZ(3,7,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R26 [I]
IW(3,7,1)          20 ; kg-m2 ! Spin inertia for wheel L26 [I]
IW(3,7,2)          20 ; kg-m2 ! Spin inertia for wheel R26 [I]
IW_XXZZ(3,7,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L26 [I]
IW_XXZZ(3,7,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R26 [I]
JNC_DESIGN(3,7,1)   0 ; mm ! Jounce when center of wheel L26 is at H_WC [I]
JNC_DESIGN(3,7,2)   0 ; mm ! Jounce when center of wheel R26 is at H_WC [I]
L_TRACK(3,7)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 26 [I]
LX_AXLE(3,7)    10600 ; mm ! X dist. axle 26 is behind the sprung-mass origin [I]
M_US_AXLE(3,7)    769 ; kg ! Unsteered mass for axle 26 [I]
M_US_STR(3,7,1)     0 ; kg ! Steered mass for wheel L26 [I]
M_US_STR(3,7,2)     0 ; kg ! Steered mass for wheel R26 [I]
! M_US(3,7)      1133 ; kg ! CALC -- Total unsprung mass for axle 26
! R_US_STR(3,7) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 26
Y_CG_AXLE(3,7)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,7)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 26 [I]
Y_CL_SUSP(3,7)      0 ; mm ! Y coord. for suspension centerline, axle 26 [I]

! Solid-axle suspension for axle 8 on unit 3
OPT_JNC_DESIGN(3,8) 1 ! Specify JNC_DESIGN explicitly for axle 27? [I]
A_CAMBER(3,8,1)     0 ; deg ! Static camber for wheel L27 [I]
A_CAMBER(3,8,2)     0 ; deg ! Static camber for wheel R27 [I]
A_TOE(3,8,1)        0 ; deg ! Static toe for wheel L27 [I]
A_TOE(3,8,2)        0 ; deg ! Static toe for wheel R27 [I]
H_CG_AXLE(3,8)    510 ; mm ! Z coordinate of axle 27 CG [I]
H_WC(3,8,1)       510 ; mm ! Reference Z coordinate of wheel center L27 [I]
H_WC(3,8,2)       510 ; mm ! Reference Z coordinate of wheel center R27 [I]
IA(3,8)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 27 [I]
! ISPIN(3,8,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L27 [I]
! ISPIN(3,8,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R27 [I]
! ISPIN_XXZZ(3,8,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L27 [I]
! ISPIN_XXZZ(3,8,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R27 [I]
IW(3,8,1)          20 ; kg-m2 ! Spin inertia for wheel L27 [I]
IW(3,8,2)          20 ; kg-m2 ! Spin inertia for wheel R27 [I]
IW_XXZZ(3,8,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L27 [I]
IW_XXZZ(3,8,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R27 [I]
JNC_DESIGN(3,8,1)   0 ; mm ! Jounce when center of wheel L27 is at H_WC [I]
JNC_DESIGN(3,8,2)   0 ; mm ! Jounce when center of wheel R27 is at H_WC [I]
L_TRACK(3,8)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 27 [I]
LX_AXLE(3,8)    11800 ; mm ! X dist. axle 27 is behind the sprung-mass origin [I]
M_US_AXLE(3,8)    769 ; kg ! Unsteered mass for axle 27 [I]
M_US_STR(3,8,1)     0 ; kg ! Steered mass for wheel L27 [I]
M_US_STR(3,8,2)     0 ; kg ! Steered mass for wheel R27 [I]
! M_US(3,8)      1133 ; kg ! CALC -- Total unsprung mass for axle 27
! R_US_STR(3,8) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 27
Y_CG_AXLE(3,8)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,8)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 27 [I]
Y_CL_SUSP(3,8)      0 ; mm ! Y coord. for suspension centerline, axle 27 [I]

! Solid-axle suspension for axle 9 on unit 3
OPT_JNC_DESIGN(3,9) 1 ! Specify JNC_DESIGN explicitly for axle 28? [I]
A_CAMBER(3,9,1)     0 ; deg ! Static camber for wheel L28 [I]
A_CAMBER(3,9,2)     0 ; deg ! Static camber for wheel R28 [I]
A_TOE(3,9,1)        0 ; deg ! Static toe for wheel L28 [I]
A_TOE(3,9,2)        0 ; deg ! Static toe for wheel R28 [I]
H_CG_AXLE(3,9)    510 ; mm ! Z coordinate of axle 28 CG [I]
H_WC(3,9,1)       510 ; mm ! Reference Z coordinate of wheel center L28 [I]
H_WC(3,9,2)       510 ; mm ! Reference Z coordinate of wheel center R28 [I]
IA(3,9)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 28 [I]
! ISPIN(3,9,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L28 [I]
! ISPIN(3,9,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R28 [I]
! ISPIN_XXZZ(3,9,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L28 [I]
! ISPIN_XXZZ(3,9,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R28 [I]
IW(3,9,1)          20 ; kg-m2 ! Spin inertia for wheel L28 [I]
IW(3,9,2)          20 ; kg-m2 ! Spin inertia for wheel R28 [I]
IW_XXZZ(3,9,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L28 [I]
IW_XXZZ(3,9,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R28 [I]
JNC_DESIGN(3,9,1)   0 ; mm ! Jounce when center of wheel L28 is at H_WC [I]
JNC_DESIGN(3,9,2)   0 ; mm ! Jounce when center of wheel R28 is at H_WC [I]
L_TRACK(3,9)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 28 [I]
LX_AXLE(3,9)    13000 ; mm ! X dist. axle 28 is behind the sprung-mass origin [I]
M_US_AXLE(3,9)    769 ; kg ! Unsteered mass for axle 28 [I]
M_US_STR(3,9,1)     0 ; kg ! Steered mass for wheel L28 [I]
M_US_STR(3,9,2)     0 ; kg ! Steered mass for wheel R28 [I]
! M_US(3,9)      1133 ; kg ! CALC -- Total unsprung mass for axle 28
! R_US_STR(3,9) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 28
Y_CG_AXLE(3,9)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,9)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 28 [I]
Y_CL_SUSP(3,9)      0 ; mm ! Y coord. for suspension centerline, axle 28 [I]

! Solid-axle suspension for axle 10 on unit 3
OPT_JNC_DESIGN(3,10) 1 ! Specify JNC_DESIGN explicitly for axle 29? [I]
A_CAMBER(3,10,1)    0 ; deg ! Static camber for wheel L29 [I]
A_CAMBER(3,10,2)    0 ; deg ! Static camber for wheel R29 [I]
A_TOE(3,10,1)       0 ; deg ! Static toe for wheel L29 [I]
A_TOE(3,10,2)       0 ; deg ! Static toe for wheel R29 [I]
H_CG_AXLE(3,10)   510 ; mm ! Z coordinate of axle 29 CG [I]
H_WC(3,10,1)      510 ; mm ! Reference Z coordinate of wheel center L29 [I]
H_WC(3,10,2)      510 ; mm ! Reference Z coordinate of wheel center R29 [I]
IA(3,10)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 29 [I]
! ISPIN(3,10,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L29 [I]
! ISPIN(3,10,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R29 [I]
! ISPIN_XXZZ(3,10,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L29 [I]
! ISPIN_XXZZ(3,10,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R29 [I]
IW(3,10,1)         20 ; kg-m2 ! Spin inertia for wheel L29 [I]
IW(3,10,2)         20 ; kg-m2 ! Spin inertia for wheel R29 [I]
IW_XXZZ(3,10,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L29 [I]
IW_XXZZ(3,10,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R29 [I]
JNC_DESIGN(3,10,1)  0 ; mm ! Jounce when center of wheel L29 is at H_WC [I]
JNC_DESIGN(3,10,2)  0 ; mm ! Jounce when center of wheel R29 is at H_WC [I]
L_TRACK(3,10)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 29 [I]
LX_AXLE(3,10)   14200 ; mm ! X dist. axle 29 is behind the sprung-mass origin [I]
M_US_AXLE(3,10)   769 ; kg ! Unsteered mass for axle 29 [I]
M_US_STR(3,10,1)    0 ; kg ! Steered mass for wheel L29 [I]
M_US_STR(3,10,2)    0 ; kg ! Steered mass for wheel R29 [I]
! M_US(3,10)     1133 ; kg ! CALC -- Total unsprung mass for axle 29
! R_US_STR(3,10) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 29
Y_CG_AXLE(3,10)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,10)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 29 [I]
Y_CL_SUSP(3,10)     0 ; mm ! Y coord. for suspension centerline, axle 29 [I]

! Solid-axle suspension for axle 11 on unit 3
OPT_JNC_DESIGN(3,11) 1 ! Specify JNC_DESIGN explicitly for axle 30? [I]
A_CAMBER(3,11,1)    0 ; deg ! Static camber for wheel L30 [I]
A_CAMBER(3,11,2)    0 ; deg ! Static camber for wheel R30 [I]
A_TOE(3,11,1)       0 ; deg ! Static toe for wheel L30 [I]
A_TOE(3,11,2)       0 ; deg ! Static toe for wheel R30 [I]
H_CG_AXLE(3,11)   510 ; mm ! Z coordinate of axle 30 CG [I]
H_WC(3,11,1)      510 ; mm ! Reference Z coordinate of wheel center L30 [I]
H_WC(3,11,2)      510 ; mm ! Reference Z coordinate of wheel center R30 [I]
IA(3,11)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 30 [I]
! ISPIN(3,11,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L30 [I]
! ISPIN(3,11,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R30 [I]
! ISPIN_XXZZ(3,11,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L30 [I]
! ISPIN_XXZZ(3,11,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R30 [I]
IW(3,11,1)         20 ; kg-m2 ! Spin inertia for wheel L30 [I]
IW(3,11,2)         20 ; kg-m2 ! Spin inertia for wheel R30 [I]
IW_XXZZ(3,11,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L30 [I]
IW_XXZZ(3,11,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R30 [I]
JNC_DESIGN(3,11,1)  0 ; mm ! Jounce when center of wheel L30 is at H_WC [I]
JNC_DESIGN(3,11,2)  0 ; mm ! Jounce when center of wheel R30 is at H_WC [I]
L_TRACK(3,11)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 30 [I]
LX_AXLE(3,11)   15400 ; mm ! X dist. axle 30 is behind the sprung-mass origin [I]
M_US_AXLE(3,11)   769 ; kg ! Unsteered mass for axle 30 [I]
M_US_STR(3,11,1)    0 ; kg ! Steered mass for wheel L30 [I]
M_US_STR(3,11,2)    0 ; kg ! Steered mass for wheel R30 [I]
! M_US(3,11)     1133 ; kg ! CALC -- Total unsprung mass for axle 30
! R_US_STR(3,11) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 30
Y_CG_AXLE(3,11)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,11)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 30 [I]
Y_CL_SUSP(3,11)     0 ; mm ! Y coord. for suspension centerline, axle 30 [I]

! Solid-axle suspension for axle 12 on unit 3
OPT_JNC_DESIGN(3,12) 1 ! Specify JNC_DESIGN explicitly for axle 31? [I]
A_CAMBER(3,12,1)    0 ; deg ! Static camber for wheel L31 [I]
A_CAMBER(3,12,2)    0 ; deg ! Static camber for wheel R31 [I]
A_TOE(3,12,1)       0 ; deg ! Static toe for wheel L31 [I]
A_TOE(3,12,2)       0 ; deg ! Static toe for wheel R31 [I]
H_CG_AXLE(3,12)   510 ; mm ! Z coordinate of axle 31 CG [I]
H_WC(3,12,1)      510 ; mm ! Reference Z coordinate of wheel center L31 [I]
H_WC(3,12,2)      510 ; mm ! Reference Z coordinate of wheel center R31 [I]
IA(3,12)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 31 [I]
! ISPIN(3,12,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L31 [I]
! ISPIN(3,12,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R31 [I]
! ISPIN_XXZZ(3,12,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L31 [I]
! ISPIN_XXZZ(3,12,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R31 [I]
IW(3,12,1)         20 ; kg-m2 ! Spin inertia for wheel L31 [I]
IW(3,12,2)         20 ; kg-m2 ! Spin inertia for wheel R31 [I]
IW_XXZZ(3,12,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L31 [I]
IW_XXZZ(3,12,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R31 [I]
JNC_DESIGN(3,12,1)  0 ; mm ! Jounce when center of wheel L31 is at H_WC [I]
JNC_DESIGN(3,12,2)  0 ; mm ! Jounce when center of wheel R31 is at H_WC [I]
L_TRACK(3,12)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 31 [I]
LX_AXLE(3,12)   16600 ; mm ! X dist. axle 31 is behind the sprung-mass origin [I]
M_US_AXLE(3,12)   769 ; kg ! Unsteered mass for axle 31 [I]
M_US_STR(3,12,1)    0 ; kg ! Steered mass for wheel L31 [I]
M_US_STR(3,12,2)    0 ; kg ! Steered mass for wheel R31 [I]
! M_US(3,12)     1133 ; kg ! CALC -- Total unsprung mass for axle 31
! R_US_STR(3,12) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 31
Y_CG_AXLE(3,12)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,12)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 31 [I]
Y_CL_SUSP(3,12)     0 ; mm ! Y coord. for suspension centerline, axle 31 [I]

! Solid-axle suspension for axle 13 on unit 3
OPT_JNC_DESIGN(3,13) 1 ! Specify JNC_DESIGN explicitly for axle 32? [I]
A_CAMBER(3,13,1)    0 ; deg ! Static camber for wheel L32 [I]
A_CAMBER(3,13,2)    0 ; deg ! Static camber for wheel R32 [I]
A_TOE(3,13,1)       0 ; deg ! Static toe for wheel L32 [I]
A_TOE(3,13,2)       0 ; deg ! Static toe for wheel R32 [I]
H_CG_AXLE(3,13)   510 ; mm ! Z coordinate of axle 32 CG [I]
H_WC(3,13,1)      510 ; mm ! Reference Z coordinate of wheel center L32 [I]
H_WC(3,13,2)      510 ; mm ! Reference Z coordinate of wheel center R32 [I]
IA(3,13)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 32 [I]
! ISPIN(3,13,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L32 [I]
! ISPIN(3,13,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R32 [I]
! ISPIN_XXZZ(3,13,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L32 [I]
! ISPIN_XXZZ(3,13,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R32 [I]
IW(3,13,1)         20 ; kg-m2 ! Spin inertia for wheel L32 [I]
IW(3,13,2)         20 ; kg-m2 ! Spin inertia for wheel R32 [I]
IW_XXZZ(3,13,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L32 [I]
IW_XXZZ(3,13,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R32 [I]
JNC_DESIGN(3,13,1)  0 ; mm ! Jounce when center of wheel L32 is at H_WC [I]
JNC_DESIGN(3,13,2)  0 ; mm ! Jounce when center of wheel R32 is at H_WC [I]
L_TRACK(3,13)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 32 [I]
LX_AXLE(3,13)   17800 ; mm ! X dist. axle 32 is behind the sprung-mass origin [I]
M_US_AXLE(3,13)   769 ; kg ! Unsteered mass for axle 32 [I]
M_US_STR(3,13,1)    0 ; kg ! Steered mass for wheel L32 [I]
M_US_STR(3,13,2)    0 ; kg ! Steered mass for wheel R32 [I]
! M_US(3,13)     1133 ; kg ! CALC -- Total unsprung mass for axle 32
! R_US_STR(3,13) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 32
Y_CG_AXLE(3,13)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,13)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 32 [I]
Y_CL_SUSP(3,13)     0 ; mm ! Y coord. for suspension centerline, axle 32 [I]

! Solid-axle suspension for axle 14 on unit 3
OPT_JNC_DESIGN(3,14) 1 ! Specify JNC_DESIGN explicitly for axle 33? [I]
A_CAMBER(3,14,1)    0 ; deg ! Static camber for wheel L33 [I]
A_CAMBER(3,14,2)    0 ; deg ! Static camber for wheel R33 [I]
A_TOE(3,14,1)       0 ; deg ! Static toe for wheel L33 [I]
A_TOE(3,14,2)       0 ; deg ! Static toe for wheel R33 [I]
H_CG_AXLE(3,14)   510 ; mm ! Z coordinate of axle 33 CG [I]
H_WC(3,14,1)      510 ; mm ! Reference Z coordinate of wheel center L33 [I]
H_WC(3,14,2)      510 ; mm ! Reference Z coordinate of wheel center R33 [I]
IA(3,14)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 33 [I]
! ISPIN(3,14,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L33 [I]
! ISPIN(3,14,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R33 [I]
! ISPIN_XXZZ(3,14,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L33 [I]
! ISPIN_XXZZ(3,14,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R33 [I]
IW(3,14,1)         20 ; kg-m2 ! Spin inertia for wheel L33 [I]
IW(3,14,2)         20 ; kg-m2 ! Spin inertia for wheel R33 [I]
IW_XXZZ(3,14,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L33 [I]
IW_XXZZ(3,14,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R33 [I]
JNC_DESIGN(3,14,1)  0 ; mm ! Jounce when center of wheel L33 is at H_WC [I]
JNC_DESIGN(3,14,2)  0 ; mm ! Jounce when center of wheel R33 is at H_WC [I]
L_TRACK(3,14)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 33 [I]
LX_AXLE(3,14)   19000 ; mm ! X dist. axle 33 is behind the sprung-mass origin [I]
M_US_AXLE(3,14)   769 ; kg ! Unsteered mass for axle 33 [I]
M_US_STR(3,14,1)    0 ; kg ! Steered mass for wheel L33 [I]
M_US_STR(3,14,2)    0 ; kg ! Steered mass for wheel R33 [I]
! M_US(3,14)     1133 ; kg ! CALC -- Total unsprung mass for axle 33
! R_US_STR(3,14) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 33
Y_CG_AXLE(3,14)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(3,14)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 33 [I]
Y_CL_SUSP(3,14)     0 ; mm ! Y coord. for suspension centerline, axle 33 [I]

! Solid-axle suspension for axle 1 on unit 4
OPT_JNC_DESIGN(4,1) 1 ! Specify JNC_DESIGN explicitly for axle 34? [I]
A_CAMBER(4,1,1)     0 ; deg ! Static camber for wheel L34 [I]
A_CAMBER(4,1,2)     0 ; deg ! Static camber for wheel R34 [I]
A_TOE(4,1,1)        0 ; deg ! Static toe for wheel L34 [I]
A_TOE(4,1,2)        0 ; deg ! Static toe for wheel R34 [I]
H_CG_AXLE(4,1)    510 ; mm ! Z coordinate of axle 34 CG [I]
H_WC(4,1,1)       510 ; mm ! Reference Z coordinate of wheel center L34 [I]
H_WC(4,1,2)       510 ; mm ! Reference Z coordinate of wheel center R34 [I]
IA(4,1)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 34 [I]
! ISPIN(4,1,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L34 [I]
! ISPIN(4,1,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R34 [I]
! ISPIN_XXZZ(4,1,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L34 [I]
! ISPIN_XXZZ(4,1,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R34 [I]
IW(4,1,1)          20 ; kg-m2 ! Spin inertia for wheel L34 [I]
IW(4,1,2)          20 ; kg-m2 ! Spin inertia for wheel R34 [I]
IW_XXZZ(4,1,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L34 [I]
IW_XXZZ(4,1,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R34 [I]
JNC_DESIGN(4,1,1)   0 ; mm ! Jounce when center of wheel L34 is at H_WC [I]
JNC_DESIGN(4,1,2)   0 ; mm ! Jounce when center of wheel R34 is at H_WC [I]
L_TRACK(4,1)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 34 [I]
LX_AXLE(4,1)     3400 ; mm ! X dist. axle 34 is behind the sprung-mass origin [I]
M_US_AXLE(4,1)    769 ; kg ! Unsteered mass for axle 34 [I]
M_US_STR(4,1,1)     0 ; kg ! Steered mass for wheel L34 [I]
M_US_STR(4,1,2)     0 ; kg ! Steered mass for wheel R34 [I]
! M_US(4,1)      1133 ; kg ! CALC -- Total unsprung mass for axle 34
! R_US_STR(4,1) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 34
Y_CG_AXLE(4,1)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,1)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 34 [I]
Y_CL_SUSP(4,1)      0 ; mm ! Y coord. for suspension centerline, axle 34 [I]

! Solid-axle suspension for axle 2 on unit 4
OPT_JNC_DESIGN(4,2) 1 ! Specify JNC_DESIGN explicitly for axle 35? [I]
A_CAMBER(4,2,1)     0 ; deg ! Static camber for wheel L35 [I]
A_CAMBER(4,2,2)     0 ; deg ! Static camber for wheel R35 [I]
A_TOE(4,2,1)        0 ; deg ! Static toe for wheel L35 [I]
A_TOE(4,2,2)        0 ; deg ! Static toe for wheel R35 [I]
H_CG_AXLE(4,2)    510 ; mm ! Z coordinate of axle 35 CG [I]
H_WC(4,2,1)       510 ; mm ! Reference Z coordinate of wheel center L35 [I]
H_WC(4,2,2)       510 ; mm ! Reference Z coordinate of wheel center R35 [I]
IA(4,2)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 35 [I]
! ISPIN(4,2,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L35 [I]
! ISPIN(4,2,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R35 [I]
! ISPIN_XXZZ(4,2,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L35 [I]
! ISPIN_XXZZ(4,2,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R35 [I]
IW(4,2,1)          20 ; kg-m2 ! Spin inertia for wheel L35 [I]
IW(4,2,2)          20 ; kg-m2 ! Spin inertia for wheel R35 [I]
IW_XXZZ(4,2,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L35 [I]
IW_XXZZ(4,2,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R35 [I]
JNC_DESIGN(4,2,1)   0 ; mm ! Jounce when center of wheel L35 is at H_WC [I]
JNC_DESIGN(4,2,2)   0 ; mm ! Jounce when center of wheel R35 is at H_WC [I]
L_TRACK(4,2)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 35 [I]
LX_AXLE(4,2)     4600 ; mm ! X dist. axle 35 is behind the sprung-mass origin [I]
M_US_AXLE(4,2)    769 ; kg ! Unsteered mass for axle 35 [I]
M_US_STR(4,2,1)     0 ; kg ! Steered mass for wheel L35 [I]
M_US_STR(4,2,2)     0 ; kg ! Steered mass for wheel R35 [I]
! M_US(4,2)      1133 ; kg ! CALC -- Total unsprung mass for axle 35
! R_US_STR(4,2) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 35
Y_CG_AXLE(4,2)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,2)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 35 [I]
Y_CL_SUSP(4,2)      0 ; mm ! Y coord. for suspension centerline, axle 35 [I]

! Solid-axle suspension for axle 3 on unit 4
OPT_JNC_DESIGN(4,3) 1 ! Specify JNC_DESIGN explicitly for axle 36? [I]
A_CAMBER(4,3,1)     0 ; deg ! Static camber for wheel L36 [I]
A_CAMBER(4,3,2)     0 ; deg ! Static camber for wheel R36 [I]
A_TOE(4,3,1)        0 ; deg ! Static toe for wheel L36 [I]
A_TOE(4,3,2)        0 ; deg ! Static toe for wheel R36 [I]
H_CG_AXLE(4,3)    510 ; mm ! Z coordinate of axle 36 CG [I]
H_WC(4,3,1)       510 ; mm ! Reference Z coordinate of wheel center L36 [I]
H_WC(4,3,2)       510 ; mm ! Reference Z coordinate of wheel center R36 [I]
IA(4,3)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 36 [I]
! ISPIN(4,3,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L36 [I]
! ISPIN(4,3,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R36 [I]
! ISPIN_XXZZ(4,3,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L36 [I]
! ISPIN_XXZZ(4,3,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R36 [I]
IW(4,3,1)          20 ; kg-m2 ! Spin inertia for wheel L36 [I]
IW(4,3,2)          20 ; kg-m2 ! Spin inertia for wheel R36 [I]
IW_XXZZ(4,3,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L36 [I]
IW_XXZZ(4,3,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R36 [I]
JNC_DESIGN(4,3,1)   0 ; mm ! Jounce when center of wheel L36 is at H_WC [I]
JNC_DESIGN(4,3,2)   0 ; mm ! Jounce when center of wheel R36 is at H_WC [I]
L_TRACK(4,3)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 36 [I]
LX_AXLE(4,3)     5800 ; mm ! X dist. axle 36 is behind the sprung-mass origin [I]
M_US_AXLE(4,3)    769 ; kg ! Unsteered mass for axle 36 [I]
M_US_STR(4,3,1)     0 ; kg ! Steered mass for wheel L36 [I]
M_US_STR(4,3,2)     0 ; kg ! Steered mass for wheel R36 [I]
! M_US(4,3)      1133 ; kg ! CALC -- Total unsprung mass for axle 36
! R_US_STR(4,3) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 36
Y_CG_AXLE(4,3)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,3)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 36 [I]
Y_CL_SUSP(4,3)      0 ; mm ! Y coord. for suspension centerline, axle 36 [I]

! Solid-axle suspension for axle 4 on unit 4
OPT_JNC_DESIGN(4,4) 1 ! Specify JNC_DESIGN explicitly for axle 37? [I]
A_CAMBER(4,4,1)     0 ; deg ! Static camber for wheel L37 [I]
A_CAMBER(4,4,2)     0 ; deg ! Static camber for wheel R37 [I]
A_TOE(4,4,1)        0 ; deg ! Static toe for wheel L37 [I]
A_TOE(4,4,2)        0 ; deg ! Static toe for wheel R37 [I]
H_CG_AXLE(4,4)    510 ; mm ! Z coordinate of axle 37 CG [I]
H_WC(4,4,1)       510 ; mm ! Reference Z coordinate of wheel center L37 [I]
H_WC(4,4,2)       510 ; mm ! Reference Z coordinate of wheel center R37 [I]
IA(4,4)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 37 [I]
! ISPIN(4,4,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L37 [I]
! ISPIN(4,4,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R37 [I]
! ISPIN_XXZZ(4,4,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L37 [I]
! ISPIN_XXZZ(4,4,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R37 [I]
IW(4,4,1)          20 ; kg-m2 ! Spin inertia for wheel L37 [I]
IW(4,4,2)          20 ; kg-m2 ! Spin inertia for wheel R37 [I]
IW_XXZZ(4,4,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L37 [I]
IW_XXZZ(4,4,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R37 [I]
JNC_DESIGN(4,4,1)   0 ; mm ! Jounce when center of wheel L37 is at H_WC [I]
JNC_DESIGN(4,4,2)   0 ; mm ! Jounce when center of wheel R37 is at H_WC [I]
L_TRACK(4,4)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 37 [I]
LX_AXLE(4,4)     7000 ; mm ! X dist. axle 37 is behind the sprung-mass origin [I]
M_US_AXLE(4,4)    769 ; kg ! Unsteered mass for axle 37 [I]
M_US_STR(4,4,1)     0 ; kg ! Steered mass for wheel L37 [I]
M_US_STR(4,4,2)     0 ; kg ! Steered mass for wheel R37 [I]
! M_US(4,4)      1133 ; kg ! CALC -- Total unsprung mass for axle 37
! R_US_STR(4,4) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 37
Y_CG_AXLE(4,4)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,4)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 37 [I]
Y_CL_SUSP(4,4)      0 ; mm ! Y coord. for suspension centerline, axle 37 [I]

! Solid-axle suspension for axle 5 on unit 4
OPT_JNC_DESIGN(4,5) 1 ! Specify JNC_DESIGN explicitly for axle 38? [I]
A_CAMBER(4,5,1)     0 ; deg ! Static camber for wheel L38 [I]
A_CAMBER(4,5,2)     0 ; deg ! Static camber for wheel R38 [I]
A_TOE(4,5,1)        0 ; deg ! Static toe for wheel L38 [I]
A_TOE(4,5,2)        0 ; deg ! Static toe for wheel R38 [I]
H_CG_AXLE(4,5)    510 ; mm ! Z coordinate of axle 38 CG [I]
H_WC(4,5,1)       510 ; mm ! Reference Z coordinate of wheel center L38 [I]
H_WC(4,5,2)       510 ; mm ! Reference Z coordinate of wheel center R38 [I]
IA(4,5)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 38 [I]
! ISPIN(4,5,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L38 [I]
! ISPIN(4,5,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R38 [I]
! ISPIN_XXZZ(4,5,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L38 [I]
! ISPIN_XXZZ(4,5,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R38 [I]
IW(4,5,1)          20 ; kg-m2 ! Spin inertia for wheel L38 [I]
IW(4,5,2)          20 ; kg-m2 ! Spin inertia for wheel R38 [I]
IW_XXZZ(4,5,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L38 [I]
IW_XXZZ(4,5,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R38 [I]
JNC_DESIGN(4,5,1)   0 ; mm ! Jounce when center of wheel L38 is at H_WC [I]
JNC_DESIGN(4,5,2)   0 ; mm ! Jounce when center of wheel R38 is at H_WC [I]
L_TRACK(4,5)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 38 [I]
LX_AXLE(4,5)     8200 ; mm ! X dist. axle 38 is behind the sprung-mass origin [I]
M_US_AXLE(4,5)    769 ; kg ! Unsteered mass for axle 38 [I]
M_US_STR(4,5,1)     0 ; kg ! Steered mass for wheel L38 [I]
M_US_STR(4,5,2)     0 ; kg ! Steered mass for wheel R38 [I]
! M_US(4,5)      1133 ; kg ! CALC -- Total unsprung mass for axle 38
! R_US_STR(4,5) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 38
Y_CG_AXLE(4,5)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,5)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 38 [I]
Y_CL_SUSP(4,5)      0 ; mm ! Y coord. for suspension centerline, axle 38 [I]

! Solid-axle suspension for axle 6 on unit 4
OPT_JNC_DESIGN(4,6) 1 ! Specify JNC_DESIGN explicitly for axle 39? [I]
A_CAMBER(4,6,1)     0 ; deg ! Static camber for wheel L39 [I]
A_CAMBER(4,6,2)     0 ; deg ! Static camber for wheel R39 [I]
A_TOE(4,6,1)        0 ; deg ! Static toe for wheel L39 [I]
A_TOE(4,6,2)        0 ; deg ! Static toe for wheel R39 [I]
H_CG_AXLE(4,6)    510 ; mm ! Z coordinate of axle 39 CG [I]
H_WC(4,6,1)       510 ; mm ! Reference Z coordinate of wheel center L39 [I]
H_WC(4,6,2)       510 ; mm ! Reference Z coordinate of wheel center R39 [I]
IA(4,6)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 39 [I]
! ISPIN(4,6,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L39 [I]
! ISPIN(4,6,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R39 [I]
! ISPIN_XXZZ(4,6,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L39 [I]
! ISPIN_XXZZ(4,6,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R39 [I]
IW(4,6,1)          20 ; kg-m2 ! Spin inertia for wheel L39 [I]
IW(4,6,2)          20 ; kg-m2 ! Spin inertia for wheel R39 [I]
IW_XXZZ(4,6,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L39 [I]
IW_XXZZ(4,6,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R39 [I]
JNC_DESIGN(4,6,1)   0 ; mm ! Jounce when center of wheel L39 is at H_WC [I]
JNC_DESIGN(4,6,2)   0 ; mm ! Jounce when center of wheel R39 is at H_WC [I]
L_TRACK(4,6)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 39 [I]
LX_AXLE(4,6)     9400 ; mm ! X dist. axle 39 is behind the sprung-mass origin [I]
M_US_AXLE(4,6)    769 ; kg ! Unsteered mass for axle 39 [I]
M_US_STR(4,6,1)     0 ; kg ! Steered mass for wheel L39 [I]
M_US_STR(4,6,2)     0 ; kg ! Steered mass for wheel R39 [I]
! M_US(4,6)      1133 ; kg ! CALC -- Total unsprung mass for axle 39
! R_US_STR(4,6) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 39
Y_CG_AXLE(4,6)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,6)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 39 [I]
Y_CL_SUSP(4,6)      0 ; mm ! Y coord. for suspension centerline, axle 39 [I]

! Solid-axle suspension for axle 7 on unit 4
OPT_JNC_DESIGN(4,7) 1 ! Specify JNC_DESIGN explicitly for axle 40? [I]
A_CAMBER(4,7,1)     0 ; deg ! Static camber for wheel L40 [I]
A_CAMBER(4,7,2)     0 ; deg ! Static camber for wheel R40 [I]
A_TOE(4,7,1)        0 ; deg ! Static toe for wheel L40 [I]
A_TOE(4,7,2)        0 ; deg ! Static toe for wheel R40 [I]
H_CG_AXLE(4,7)    510 ; mm ! Z coordinate of axle 40 CG [I]
H_WC(4,7,1)       510 ; mm ! Reference Z coordinate of wheel center L40 [I]
H_WC(4,7,2)       510 ; mm ! Reference Z coordinate of wheel center R40 [I]
IA(4,7)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 40 [I]
! ISPIN(4,7,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L40 [I]
! ISPIN(4,7,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R40 [I]
! ISPIN_XXZZ(4,7,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L40 [I]
! ISPIN_XXZZ(4,7,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R40 [I]
IW(4,7,1)          20 ; kg-m2 ! Spin inertia for wheel L40 [I]
IW(4,7,2)          20 ; kg-m2 ! Spin inertia for wheel R40 [I]
IW_XXZZ(4,7,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L40 [I]
IW_XXZZ(4,7,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R40 [I]
JNC_DESIGN(4,7,1)   0 ; mm ! Jounce when center of wheel L40 is at H_WC [I]
JNC_DESIGN(4,7,2)   0 ; mm ! Jounce when center of wheel R40 is at H_WC [I]
L_TRACK(4,7)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 40 [I]
LX_AXLE(4,7)    10600 ; mm ! X dist. axle 40 is behind the sprung-mass origin [I]
M_US_AXLE(4,7)    769 ; kg ! Unsteered mass for axle 40 [I]
M_US_STR(4,7,1)     0 ; kg ! Steered mass for wheel L40 [I]
M_US_STR(4,7,2)     0 ; kg ! Steered mass for wheel R40 [I]
! M_US(4,7)      1133 ; kg ! CALC -- Total unsprung mass for axle 40
! R_US_STR(4,7) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 40
Y_CG_AXLE(4,7)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,7)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 40 [I]
Y_CL_SUSP(4,7)      0 ; mm ! Y coord. for suspension centerline, axle 40 [I]

! Solid-axle suspension for axle 8 on unit 4
OPT_JNC_DESIGN(4,8) 1 ! Specify JNC_DESIGN explicitly for axle 41? [I]
A_CAMBER(4,8,1)     0 ; deg ! Static camber for wheel L41 [I]
A_CAMBER(4,8,2)     0 ; deg ! Static camber for wheel R41 [I]
A_TOE(4,8,1)        0 ; deg ! Static toe for wheel L41 [I]
A_TOE(4,8,2)        0 ; deg ! Static toe for wheel R41 [I]
H_CG_AXLE(4,8)    510 ; mm ! Z coordinate of axle 41 CG [I]
H_WC(4,8,1)       510 ; mm ! Reference Z coordinate of wheel center L41 [I]
H_WC(4,8,2)       510 ; mm ! Reference Z coordinate of wheel center R41 [I]
IA(4,8)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 41 [I]
! ISPIN(4,8,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L41 [I]
! ISPIN(4,8,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R41 [I]
! ISPIN_XXZZ(4,8,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L41 [I]
! ISPIN_XXZZ(4,8,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R41 [I]
IW(4,8,1)          20 ; kg-m2 ! Spin inertia for wheel L41 [I]
IW(4,8,2)          20 ; kg-m2 ! Spin inertia for wheel R41 [I]
IW_XXZZ(4,8,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L41 [I]
IW_XXZZ(4,8,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R41 [I]
JNC_DESIGN(4,8,1)   0 ; mm ! Jounce when center of wheel L41 is at H_WC [I]
JNC_DESIGN(4,8,2)   0 ; mm ! Jounce when center of wheel R41 is at H_WC [I]
L_TRACK(4,8)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 41 [I]
LX_AXLE(4,8)    11800 ; mm ! X dist. axle 41 is behind the sprung-mass origin [I]
M_US_AXLE(4,8)    769 ; kg ! Unsteered mass for axle 41 [I]
M_US_STR(4,8,1)     0 ; kg ! Steered mass for wheel L41 [I]
M_US_STR(4,8,2)     0 ; kg ! Steered mass for wheel R41 [I]
! M_US(4,8)      1133 ; kg ! CALC -- Total unsprung mass for axle 41
! R_US_STR(4,8) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 41
Y_CG_AXLE(4,8)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,8)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 41 [I]
Y_CL_SUSP(4,8)      0 ; mm ! Y coord. for suspension centerline, axle 41 [I]

! Solid-axle suspension for axle 9 on unit 4
OPT_JNC_DESIGN(4,9) 1 ! Specify JNC_DESIGN explicitly for axle 42? [I]
A_CAMBER(4,9,1)     0 ; deg ! Static camber for wheel L42 [I]
A_CAMBER(4,9,2)     0 ; deg ! Static camber for wheel R42 [I]
A_TOE(4,9,1)        0 ; deg ! Static toe for wheel L42 [I]
A_TOE(4,9,2)        0 ; deg ! Static toe for wheel R42 [I]
H_CG_AXLE(4,9)    510 ; mm ! Z coordinate of axle 42 CG [I]
H_WC(4,9,1)       510 ; mm ! Reference Z coordinate of wheel center L42 [I]
H_WC(4,9,2)       510 ; mm ! Reference Z coordinate of wheel center R42 [I]
IA(4,9)           250 ; kg-m2 ! Yaw and roll moment of inertia, axle 42 [I]
! ISPIN(4,9,1)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L42 [I]
! ISPIN(4,9,2)   29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R42 [I]
! ISPIN_XXZZ(4,9,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L42 [I]
! ISPIN_XXZZ(4,9,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R42 [I]
IW(4,9,1)          20 ; kg-m2 ! Spin inertia for wheel L42 [I]
IW(4,9,2)          20 ; kg-m2 ! Spin inertia for wheel R42 [I]
IW_XXZZ(4,9,1)      0 ; kg-m2 ! IXX/IZZ inertia for wheel L42 [I]
IW_XXZZ(4,9,2)      0 ; kg-m2 ! IXX/IZZ inertia for wheel R42 [I]
JNC_DESIGN(4,9,1)   0 ; mm ! Jounce when center of wheel L42 is at H_WC [I]
JNC_DESIGN(4,9,2)   0 ; mm ! Jounce when center of wheel R42 is at H_WC [I]
L_TRACK(4,9)     1815 ; mm ! Track width, wheel-center to wheel-center, axle 42 [I]
LX_AXLE(4,9)    13000 ; mm ! X dist. axle 42 is behind the sprung-mass origin [I]
M_US_AXLE(4,9)    769 ; kg ! Unsteered mass for axle 42 [I]
M_US_STR(4,9,1)     0 ; kg ! Steered mass for wheel L42 [I]
M_US_STR(4,9,2)     0 ; kg ! Steered mass for wheel R42 [I]
! M_US(4,9)      1133 ; kg ! CALC -- Total unsprung mass for axle 42
! R_US_STR(4,9) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle 42
Y_CG_AXLE(4,9)      0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,9)    0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 42 [I]
Y_CL_SUSP(4,9)      0 ; mm ! Y coord. for suspension centerline, axle 42 [I]

! Solid-axle suspension for axle 10 on unit 4
OPT_JNC_DESIGN(4,10) 1 ! Specify JNC_DESIGN explicitly for axle 43? [I]
A_CAMBER(4,10,1)    0 ; deg ! Static camber for wheel L43 [I]
A_CAMBER(4,10,2)    0 ; deg ! Static camber for wheel R43 [I]
A_TOE(4,10,1)       0 ; deg ! Static toe for wheel L43 [I]
A_TOE(4,10,2)       0 ; deg ! Static toe for wheel R43 [I]
H_CG_AXLE(4,10)   510 ; mm ! Z coordinate of axle 43 CG [I]
H_WC(4,10,1)      510 ; mm ! Reference Z coordinate of wheel center L43 [I]
H_WC(4,10,2)      510 ; mm ! Reference Z coordinate of wheel center R43 [I]
IA(4,10)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 43 [I]
! ISPIN(4,10,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L43 [I]
! ISPIN(4,10,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R43 [I]
! ISPIN_XXZZ(4,10,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L43 [I]
! ISPIN_XXZZ(4,10,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R43 [I]
IW(4,10,1)         20 ; kg-m2 ! Spin inertia for wheel L43 [I]
IW(4,10,2)         20 ; kg-m2 ! Spin inertia for wheel R43 [I]
IW_XXZZ(4,10,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L43 [I]
IW_XXZZ(4,10,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R43 [I]
JNC_DESIGN(4,10,1)  0 ; mm ! Jounce when center of wheel L43 is at H_WC [I]
JNC_DESIGN(4,10,2)  0 ; mm ! Jounce when center of wheel R43 is at H_WC [I]
L_TRACK(4,10)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 43 [I]
LX_AXLE(4,10)   14200 ; mm ! X dist. axle 43 is behind the sprung-mass origin [I]
M_US_AXLE(4,10)   769 ; kg ! Unsteered mass for axle 43 [I]
M_US_STR(4,10,1)    0 ; kg ! Steered mass for wheel L43 [I]
M_US_STR(4,10,2)    0 ; kg ! Steered mass for wheel R43 [I]
! M_US(4,10)     1133 ; kg ! CALC -- Total unsprung mass for axle 43
! R_US_STR(4,10) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 43
Y_CG_AXLE(4,10)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,10)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 43 [I]
Y_CL_SUSP(4,10)     0 ; mm ! Y coord. for suspension centerline, axle 43 [I]

! Solid-axle suspension for axle 11 on unit 4
OPT_JNC_DESIGN(4,11) 1 ! Specify JNC_DESIGN explicitly for axle 44? [I]
A_CAMBER(4,11,1)    0 ; deg ! Static camber for wheel L44 [I]
A_CAMBER(4,11,2)    0 ; deg ! Static camber for wheel R44 [I]
A_TOE(4,11,1)       0 ; deg ! Static toe for wheel L44 [I]
A_TOE(4,11,2)       0 ; deg ! Static toe for wheel R44 [I]
H_CG_AXLE(4,11)   510 ; mm ! Z coordinate of axle 44 CG [I]
H_WC(4,11,1)      510 ; mm ! Reference Z coordinate of wheel center L44 [I]
H_WC(4,11,2)      510 ; mm ! Reference Z coordinate of wheel center R44 [I]
IA(4,11)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 44 [I]
! ISPIN(4,11,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L44 [I]
! ISPIN(4,11,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R44 [I]
! ISPIN_XXZZ(4,11,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L44 [I]
! ISPIN_XXZZ(4,11,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R44 [I]
IW(4,11,1)         20 ; kg-m2 ! Spin inertia for wheel L44 [I]
IW(4,11,2)         20 ; kg-m2 ! Spin inertia for wheel R44 [I]
IW_XXZZ(4,11,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L44 [I]
IW_XXZZ(4,11,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R44 [I]
JNC_DESIGN(4,11,1)  0 ; mm ! Jounce when center of wheel L44 is at H_WC [I]
JNC_DESIGN(4,11,2)  0 ; mm ! Jounce when center of wheel R44 is at H_WC [I]
L_TRACK(4,11)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 44 [I]
LX_AXLE(4,11)   15400 ; mm ! X dist. axle 44 is behind the sprung-mass origin [I]
M_US_AXLE(4,11)   769 ; kg ! Unsteered mass for axle 44 [I]
M_US_STR(4,11,1)    0 ; kg ! Steered mass for wheel L44 [I]
M_US_STR(4,11,2)    0 ; kg ! Steered mass for wheel R44 [I]
! M_US(4,11)     1133 ; kg ! CALC -- Total unsprung mass for axle 44
! R_US_STR(4,11) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 44
Y_CG_AXLE(4,11)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,11)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 44 [I]
Y_CL_SUSP(4,11)     0 ; mm ! Y coord. for suspension centerline, axle 44 [I]

! Solid-axle suspension for axle 12 on unit 4
OPT_JNC_DESIGN(4,12) 1 ! Specify JNC_DESIGN explicitly for axle 45? [I]
A_CAMBER(4,12,1)    0 ; deg ! Static camber for wheel L45 [I]
A_CAMBER(4,12,2)    0 ; deg ! Static camber for wheel R45 [I]
A_TOE(4,12,1)       0 ; deg ! Static toe for wheel L45 [I]
A_TOE(4,12,2)       0 ; deg ! Static toe for wheel R45 [I]
H_CG_AXLE(4,12)   510 ; mm ! Z coordinate of axle 45 CG [I]
H_WC(4,12,1)      510 ; mm ! Reference Z coordinate of wheel center L45 [I]
H_WC(4,12,2)      510 ; mm ! Reference Z coordinate of wheel center R45 [I]
IA(4,12)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 45 [I]
! ISPIN(4,12,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L45 [I]
! ISPIN(4,12,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R45 [I]
! ISPIN_XXZZ(4,12,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L45 [I]
! ISPIN_XXZZ(4,12,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R45 [I]
IW(4,12,1)         20 ; kg-m2 ! Spin inertia for wheel L45 [I]
IW(4,12,2)         20 ; kg-m2 ! Spin inertia for wheel R45 [I]
IW_XXZZ(4,12,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L45 [I]
IW_XXZZ(4,12,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R45 [I]
JNC_DESIGN(4,12,1)  0 ; mm ! Jounce when center of wheel L45 is at H_WC [I]
JNC_DESIGN(4,12,2)  0 ; mm ! Jounce when center of wheel R45 is at H_WC [I]
L_TRACK(4,12)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 45 [I]
LX_AXLE(4,12)   16600 ; mm ! X dist. axle 45 is behind the sprung-mass origin [I]
M_US_AXLE(4,12)   769 ; kg ! Unsteered mass for axle 45 [I]
M_US_STR(4,12,1)    0 ; kg ! Steered mass for wheel L45 [I]
M_US_STR(4,12,2)    0 ; kg ! Steered mass for wheel R45 [I]
! M_US(4,12)     1133 ; kg ! CALC -- Total unsprung mass for axle 45
! R_US_STR(4,12) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 45
Y_CG_AXLE(4,12)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,12)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 45 [I]
Y_CL_SUSP(4,12)     0 ; mm ! Y coord. for suspension centerline, axle 45 [I]

! Solid-axle suspension for axle 13 on unit 4
OPT_JNC_DESIGN(4,13) 1 ! Specify JNC_DESIGN explicitly for axle 46? [I]
A_CAMBER(4,13,1)    0 ; deg ! Static camber for wheel L46 [I]
A_CAMBER(4,13,2)    0 ; deg ! Static camber for wheel R46 [I]
A_TOE(4,13,1)       0 ; deg ! Static toe for wheel L46 [I]
A_TOE(4,13,2)       0 ; deg ! Static toe for wheel R46 [I]
H_CG_AXLE(4,13)   510 ; mm ! Z coordinate of axle 46 CG [I]
H_WC(4,13,1)      510 ; mm ! Reference Z coordinate of wheel center L46 [I]
H_WC(4,13,2)      510 ; mm ! Reference Z coordinate of wheel center R46 [I]
IA(4,13)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 46 [I]
! ISPIN(4,13,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L46 [I]
! ISPIN(4,13,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R46 [I]
! ISPIN_XXZZ(4,13,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L46 [I]
! ISPIN_XXZZ(4,13,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R46 [I]
IW(4,13,1)         20 ; kg-m2 ! Spin inertia for wheel L46 [I]
IW(4,13,2)         20 ; kg-m2 ! Spin inertia for wheel R46 [I]
IW_XXZZ(4,13,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L46 [I]
IW_XXZZ(4,13,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R46 [I]
JNC_DESIGN(4,13,1)  0 ; mm ! Jounce when center of wheel L46 is at H_WC [I]
JNC_DESIGN(4,13,2)  0 ; mm ! Jounce when center of wheel R46 is at H_WC [I]
L_TRACK(4,13)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 46 [I]
LX_AXLE(4,13)   17800 ; mm ! X dist. axle 46 is behind the sprung-mass origin [I]
M_US_AXLE(4,13)   769 ; kg ! Unsteered mass for axle 46 [I]
M_US_STR(4,13,1)    0 ; kg ! Steered mass for wheel L46 [I]
M_US_STR(4,13,2)    0 ; kg ! Steered mass for wheel R46 [I]
! M_US(4,13)     1133 ; kg ! CALC -- Total unsprung mass for axle 46
! R_US_STR(4,13) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 46
Y_CG_AXLE(4,13)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,13)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 46 [I]
Y_CL_SUSP(4,13)     0 ; mm ! Y coord. for suspension centerline, axle 46 [I]

! Solid-axle suspension for axle 14 on unit 4
OPT_JNC_DESIGN(4,14) 1 ! Specify JNC_DESIGN explicitly for axle 47? [I]
A_CAMBER(4,14,1)    0 ; deg ! Static camber for wheel L47 [I]
A_CAMBER(4,14,2)    0 ; deg ! Static camber for wheel R47 [I]
A_TOE(4,14,1)       0 ; deg ! Static toe for wheel L47 [I]
A_TOE(4,14,2)       0 ; deg ! Static toe for wheel R47 [I]
H_CG_AXLE(4,14)   510 ; mm ! Z coordinate of axle 47 CG [I]
H_WC(4,14,1)      510 ; mm ! Reference Z coordinate of wheel center L47 [I]
H_WC(4,14,2)      510 ; mm ! Reference Z coordinate of wheel center R47 [I]
IA(4,14)          250 ; kg-m2 ! Yaw and roll moment of inertia, axle 47 [I]
! ISPIN(4,14,1)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) L47 [I]
! ISPIN(4,14,2)  29.6 ; kg-m2 ! CALC -- Spin inertia for wheel + tire(s) R47 [I]
! ISPIN_XXZZ(4,14,1) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) L47 [I]
! ISPIN_XXZZ(4,14,2) 0 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire(s) R47 [I]
IW(4,14,1)         20 ; kg-m2 ! Spin inertia for wheel L47 [I]
IW(4,14,2)         20 ; kg-m2 ! Spin inertia for wheel R47 [I]
IW_XXZZ(4,14,1)     0 ; kg-m2 ! IXX/IZZ inertia for wheel L47 [I]
IW_XXZZ(4,14,2)     0 ; kg-m2 ! IXX/IZZ inertia for wheel R47 [I]
JNC_DESIGN(4,14,1)  0 ; mm ! Jounce when center of wheel L47 is at H_WC [I]
JNC_DESIGN(4,14,2)  0 ; mm ! Jounce when center of wheel R47 is at H_WC [I]
L_TRACK(4,14)    1815 ; mm ! Track width, wheel-center to wheel-center, axle 47 [I]
LX_AXLE(4,14)   19000 ; mm ! X dist. axle 47 is behind the sprung-mass origin [I]
M_US_AXLE(4,14)   769 ; kg ! Unsteered mass for axle 47 [I]
M_US_STR(4,14,1)    0 ; kg ! Steered mass for wheel L47 [I]
M_US_STR(4,14,2)    0 ; kg ! Steered mass for wheel R47 [I]
! M_US(4,14)     1133 ; kg ! CALC -- Total unsprung mass for axle 47
! R_US_STR(4,14) 0.321270962 ; - ! CALC -- Steered fraction of unsprung mass, axle
                             ! 47
Y_CG_AXLE(4,14)     0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(4,14)   0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 47 [I]
Y_CL_SUSP(4,14)     0 ; mm ! Y coord. for suspension centerline, axle 47 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Solid-axle suspension for axle 1 on unit 1
OPT_EXT_SP(1,1,1)   0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,1,2)   0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,1) 1 ! [D] Subtract offset from each compliance table
                                  ! to avoid double-counting kinematical offset? 1
                                  ! -> Yes, subtract the offset, 0 -> No, use
                                  ! compliance table as is [I]
CMP_OFFSET(1,1,1)   0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,1,2)   0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1,1) 65.28619791 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,1,2) 65.28619791 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
DMP_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L1 [I]
DMP_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R1 [I]
DMP_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L1 [I]
DMP_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R1 [I]
DMP_LEN(1,1,1)      0 ; mm ! [D] Length at design for damper L1 [I]
DMP_LEN(1,1,2)      0 ; mm ! [D] Length at design for damper R1 [I]
SPG_AX(1,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L1 [I]
SPG_AX(1,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R1 [I]
SPG_AY(1,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L1 [I]
SPG_AY(1,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R1 [I]
SPG_LEN(1,1,1)      0 ; mm ! [D] Length at design for spring L1 [I]
SPG_LEN(1,1,2)      0 ; mm ! [D] Length at design for spring R1 [I]
! FSA_DESIGN(1,1) 26114.47917 ; N ! CALC -- Design Load (susp., unladen), axle 1
! FSA_L(1,1) 26114.47917 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1,1)    0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,1,2)    0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1,1) 13057.23958 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,1,2) 13057.23958 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1,1) 30037.13917 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1,1) 30037.13917 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1,1) 15018.56958 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,1,2) 15018.56958 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1,1) 1782.475301 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_DAMPERS(1,1)   1100 ; mm ! Distance between dampers on axle 1 [I]
Y_DAMPERS(1,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 1 [I]
L_JNC_STOPS(1,1)  890 ; mm ! Distance between jounce stops on axle 1 [I]
L_REB_STOPS(1,1)  890 ; mm ! Distance between rebound stops on axle 1 [I]
L_SPRINGS(1,1)    890 ; mm ! Distance between springs on axle 1 [I]
Y_SPRINGS(1,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 1 [I]
L_SPG_ADJ(1,1,1)    0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,1,2)    0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                          ! compression needed to go from the lower force boundary
                          ! to the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2 on unit 1
OPT_EXT_SP(1,2,1)   0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,2,2)   0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,2,1)   0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(1,2,2)   0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(1,2,1) 65.28619791 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(1,2,2) 65.28619791 ; mm ! CALC -- Compression at design load, spring R2
DAUX(1,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(1,2,1)      0 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(1,2,2)      0 ; mm ! [D] Length at design for damper R2 [I]
SPG_AX(1,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L2 [I]
SPG_AX(1,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R2 [I]
SPG_AY(1,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L2 [I]
SPG_AY(1,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R2 [I]
SPG_LEN(1,2,1)      0 ; mm ! [D] Length at design for spring L2 [I]
SPG_LEN(1,2,2)      0 ; mm ! [D] Length at design for spring R2 [I]
! FSA_DESIGN(1,2) 26114.47917 ; N ! CALC -- Design Load (susp., unladen), axle 2
! FSA_L(1,2) 26114.47917 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(1,2,1)    0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(1,2,2)    0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(1,2,1) 13057.23958 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(1,2,2) 13057.23958 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(1,2) 30037.13917 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(1,2) 30037.13917 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(1,2,1) 15018.56958 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(1,2,2) 15018.56958 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(1,2) 1782.475301 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(1,2)   1100 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(1,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(1,2)  890 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(1,2)  890 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(1,2)    890 ; mm ! Distance between springs on axle 2 [I]
Y_SPRINGS(1,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 2 [I]
L_SPG_ADJ(1,2,1)    0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(1,2,2)    0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(1,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(1,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(1,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(1,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

! Solid-axle suspension for axle 3 on unit 1
OPT_EXT_SP(1,3,1)   0 ! Disable built-in spring L3? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,3,2)   0 ! Disable built-in spring R3? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,3,1)   0 ; mm ! Initial compression of external spring L3 [I]
CMP_OFFSET(1,3,2)   0 ; mm ! Initial compression of external spring R3 [I]
! CMP_DESIGN(1,3,1) 1.787222809 ; mm ! CALC -- Compression at design load, spring L3
! CMP_DESIGN(1,3,2) 1.787222809 ; mm ! CALC -- Compression at design load, spring R3
DAUX(1,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 3
DMP_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L3 [I]
DMP_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R3 [I]
DMP_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L3 [I]
DMP_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R3 [I]
DMP_LEN(1,3,1)      0 ; mm ! [D] Length at design for damper L3 [I]
DMP_LEN(1,3,2)      0 ; mm ! [D] Length at design for damper R3 [I]
SPG_AX(1,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L3 [I]
SPG_AX(1,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R3 [I]
SPG_AY(1,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L3 [I]
SPG_AY(1,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R3 [I]
SPG_LEN(1,3,1)      0 ; mm ! [D] Length at design for spring L3 [I]
SPG_LEN(1,3,2)      0 ; mm ! [D] Length at design for spring R3 [I]
! FSA_DESIGN(1,3) 3217.001057 ; N ! CALC -- Design Load (susp., unladen), axle 3
! FSA_L(1,3) 11154.55994 ; N ! CALC -- Static suspension load, laden, axle  3
FS_OFFSET(1,3,1)    0 ; N ! Force offset subtracted from built-in spring L3 [I]
FS_OFFSET(1,3,2)    0 ; N ! Force offset subtracted from built-in spring R3 [I]
! FS_STATIC(1,3,1) 5577.279972 ; N ! CALC -- Static spring force, laden, spring L3
! FS_STATIC(1,3,2) 5577.279972 ; N ! CALC -- Static spring force, laden, spring R3
! FZA_L(1,3) 22265.49439 ; N ! CALC -- Static ground load, laden, axle 3
! FZA_UL(1,3) 14327.93551 ; N ! CALC -- Static ground load, unladen, axle 3
! FZ_STATIC(1,3,1) 11132.7472 ; N ! CALC -- Static ground force, laden, wheel L3
! FZ_STATIC(1,3,2) 11132.7472 ; N ! CALC -- Static ground force, laden, wheel R3
! KA_ROLL(1,3) 10853.98163 ; N-m/deg ! CALC -- Total roll stiffness, axle 3
L_DAMPERS(1,3)   1000 ; mm ! Distance between dampers on axle 3 [I]
Y_DAMPERS(1,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 3 [I]
L_JNC_STOPS(1,3) 1000 ; mm ! Distance between jounce stops on axle 3 [I]
L_REB_STOPS(1,3) 1000 ; mm ! Distance between rebound stops on axle 3 [I]
L_SPRINGS(1,3)   1000 ; mm ! Distance between springs on axle 3 [I]
Y_SPRINGS(1,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 3 [I]
L_SPG_ADJ(1,3,1)    0 ; mm ! Upper seat height increase for spring L3 [I]
L_SPG_ADJ(1,3,2)    0 ; mm ! Upper seat height increase for spring R3 [I]
SPRING_COMP_BETA(1,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L3
SPRING_COMP_BETA(1,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R3
SPRING_EXT_BETA(1,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L3
SPRING_EXT_BETA(1,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R3

! Solid-axle suspension for axle 4 on unit 1
OPT_EXT_SP(1,4,1)   0 ! Disable built-in spring L4? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,4,2)   0 ! Disable built-in spring R4? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,4) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,4,1)   0 ; mm ! Initial compression of external spring L4 [I]
CMP_OFFSET(1,4,2)   0 ; mm ! Initial compression of external spring R4 [I]
! CMP_DESIGN(1,4,1) 1.787222809 ; mm ! CALC -- Compression at design load, spring L4
! CMP_DESIGN(1,4,2) 1.787222809 ; mm ! CALC -- Compression at design load, spring R4
DAUX(1,4)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 4
DMP_AX(1,4,1)       0 ; deg ! [D] Front-view inclination angle for damper L4 [I]
DMP_AX(1,4,2)       0 ; deg ! [D] Front-view inclination angle for damper R4 [I]
DMP_AY(1,4,1)       0 ; deg ! [D] Side-view inclination angle for damper L4 [I]
DMP_AY(1,4,2)       0 ; deg ! [D] Side-view inclination angle for damper R4 [I]
DMP_LEN(1,4,1)      0 ; mm ! [D] Length at design for damper L4 [I]
DMP_LEN(1,4,2)      0 ; mm ! [D] Length at design for damper R4 [I]
SPG_AX(1,4,1)       0 ; deg ! [D] Front-view inclination angle for spring L4 [I]
SPG_AX(1,4,2)       0 ; deg ! [D] Front-view inclination angle for spring R4 [I]
SPG_AY(1,4,1)       0 ; deg ! [D] Side-view inclination angle for spring L4 [I]
SPG_AY(1,4,2)       0 ; deg ! [D] Side-view inclination angle for spring R4 [I]
SPG_LEN(1,4,1)      0 ; mm ! [D] Length at design for spring L4 [I]
SPG_LEN(1,4,2)      0 ; mm ! [D] Length at design for spring R4 [I]
! FSA_DESIGN(1,4) 3217.001057 ; N ! CALC -- Design Load (susp., unladen), axle 4
! FSA_L(1,4) 11154.55994 ; N ! CALC -- Static suspension load, laden, axle  4
FS_OFFSET(1,4,1)    0 ; N ! Force offset subtracted from built-in spring L4 [I]
FS_OFFSET(1,4,2)    0 ; N ! Force offset subtracted from built-in spring R4 [I]
! FS_STATIC(1,4,1) 5577.279972 ; N ! CALC -- Static spring force, laden, spring L4
! FS_STATIC(1,4,2) 5577.279972 ; N ! CALC -- Static spring force, laden, spring R4
! FZA_L(1,4) 22265.49439 ; N ! CALC -- Static ground load, laden, axle 4
! FZA_UL(1,4) 14327.93551 ; N ! CALC -- Static ground load, unladen, axle 4
! FZ_STATIC(1,4,1) 11132.7472 ; N ! CALC -- Static ground force, laden, wheel L4
! FZ_STATIC(1,4,2) 11132.7472 ; N ! CALC -- Static ground force, laden, wheel R4
! KA_ROLL(1,4) 10853.98163 ; N-m/deg ! CALC -- Total roll stiffness, axle 4
L_DAMPERS(1,4)   1000 ; mm ! Distance between dampers on axle 4 [I]
Y_DAMPERS(1,4)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 4 [I]
L_JNC_STOPS(1,4) 1000 ; mm ! Distance between jounce stops on axle 4 [I]
L_REB_STOPS(1,4) 1000 ; mm ! Distance between rebound stops on axle 4 [I]
L_SPRINGS(1,4)   1000 ; mm ! Distance between springs on axle 4 [I]
Y_SPRINGS(1,4)      0 ; mm ! [D] Lateral (left) offset of springs on axle 4 [I]
L_SPG_ADJ(1,4,1)    0 ; mm ! Upper seat height increase for spring L4 [I]
L_SPG_ADJ(1,4,2)    0 ; mm ! Upper seat height increase for spring R4 [I]
SPRING_COMP_BETA(1,4,1) 2 ; mm ! Ref. hysteretic compression, ride spring L4
SPRING_COMP_BETA(1,4,2) 2 ; mm ! Ref. hysteretic compression, ride spring R4
SPRING_EXT_BETA(1,4,1) 2 ; mm ! Ref. hysteretic extension, ride spring L4
SPRING_EXT_BETA(1,4,2) 2 ; mm ! Ref. hysteretic extension, ride spring R4

! Solid-axle suspension for axle 5 on unit 1
OPT_EXT_SP(1,5,1)   0 ! Disable built-in spring L5? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(1,5,2)   0 ! Disable built-in spring R5? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1,5) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(1,5,1)   0 ; mm ! Initial compression of external spring L5 [I]
CMP_OFFSET(1,5,2)   0 ; mm ! Initial compression of external spring R5 [I]
! CMP_DESIGN(1,5,1) 1.787222809 ; mm ! CALC -- Compression at design load, spring L5
! CMP_DESIGN(1,5,2) 1.787222809 ; mm ! CALC -- Compression at design load, spring R5
DAUX(1,5)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 5
DMP_AX(1,5,1)       0 ; deg ! [D] Front-view inclination angle for damper L5 [I]
DMP_AX(1,5,2)       0 ; deg ! [D] Front-view inclination angle for damper R5 [I]
DMP_AY(1,5,1)       0 ; deg ! [D] Side-view inclination angle for damper L5 [I]
DMP_AY(1,5,2)       0 ; deg ! [D] Side-view inclination angle for damper R5 [I]
DMP_LEN(1,5,1)      0 ; mm ! [D] Length at design for damper L5 [I]
DMP_LEN(1,5,2)      0 ; mm ! [D] Length at design for damper R5 [I]
SPG_AX(1,5,1)       0 ; deg ! [D] Front-view inclination angle for spring L5 [I]
SPG_AX(1,5,2)       0 ; deg ! [D] Front-view inclination angle for spring R5 [I]
SPG_AY(1,5,1)       0 ; deg ! [D] Side-view inclination angle for spring L5 [I]
SPG_AY(1,5,2)       0 ; deg ! [D] Side-view inclination angle for spring R5 [I]
SPG_LEN(1,5,1)      0 ; mm ! [D] Length at design for spring L5 [I]
SPG_LEN(1,5,2)      0 ; mm ! [D] Length at design for spring R5 [I]
! FSA_DESIGN(1,5) 3217.001057 ; N ! CALC -- Design Load (susp., unladen), axle 5
! FSA_L(1,5) 11154.55994 ; N ! CALC -- Static suspension load, laden, axle  5
FS_OFFSET(1,5,1)    0 ; N ! Force offset subtracted from built-in spring L5 [I]
FS_OFFSET(1,5,2)    0 ; N ! Force offset subtracted from built-in spring R5 [I]
! FS_STATIC(1,5,1) 5577.279972 ; N ! CALC -- Static spring force, laden, spring L5
! FS_STATIC(1,5,2) 5577.279972 ; N ! CALC -- Static spring force, laden, spring R5
! FZA_L(1,5) 22265.49439 ; N ! CALC -- Static ground load, laden, axle 5
! FZA_UL(1,5) 14327.93551 ; N ! CALC -- Static ground load, unladen, axle 5
! FZ_STATIC(1,5,1) 11132.7472 ; N ! CALC -- Static ground force, laden, wheel L5
! FZ_STATIC(1,5,2) 11132.7472 ; N ! CALC -- Static ground force, laden, wheel R5
! KA_ROLL(1,5) 10853.98163 ; N-m/deg ! CALC -- Total roll stiffness, axle 5
L_DAMPERS(1,5)   1000 ; mm ! Distance between dampers on axle 5 [I]
Y_DAMPERS(1,5)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 5 [I]
L_JNC_STOPS(1,5) 1000 ; mm ! Distance between jounce stops on axle 5 [I]
L_REB_STOPS(1,5) 1000 ; mm ! Distance between rebound stops on axle 5 [I]
L_SPRINGS(1,5)   1000 ; mm ! Distance between springs on axle 5 [I]
Y_SPRINGS(1,5)      0 ; mm ! [D] Lateral (left) offset of springs on axle 5 [I]
L_SPG_ADJ(1,5,1)    0 ; mm ! Upper seat height increase for spring L5 [I]
L_SPG_ADJ(1,5,2)    0 ; mm ! Upper seat height increase for spring R5 [I]
SPRING_COMP_BETA(1,5,1) 2 ; mm ! Ref. hysteretic compression, ride spring L5
SPRING_COMP_BETA(1,5,2) 2 ; mm ! Ref. hysteretic compression, ride spring R5
SPRING_EXT_BETA(1,5,1) 2 ; mm ! Ref. hysteretic extension, ride spring L5
SPRING_EXT_BETA(1,5,2) 2 ; mm ! Ref. hysteretic extension, ride spring R5

! Solid-axle suspension for axle 1 on unit 2
OPT_EXT_SP(2,1,1)   0 ! Disable built-in spring L6? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,1,2)   0 ! Disable built-in spring R6? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,1,1)   0 ; mm ! Initial compression of external spring L6 [I]
CMP_OFFSET(2,1,2)   0 ; mm ! Initial compression of external spring R6 [I]
! CMP_DESIGN(2,1,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring L6
! CMP_DESIGN(2,1,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring R6
DAUX(2,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 6
DMP_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L6 [I]
DMP_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R6 [I]
DMP_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L6 [I]
DMP_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R6 [I]
DMP_LEN(2,1,1)      0 ; mm ! [D] Length at design for damper L6 [I]
DMP_LEN(2,1,2)      0 ; mm ! [D] Length at design for damper R6 [I]
SPG_AX(2,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L6 [I]
SPG_AX(2,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R6 [I]
SPG_AY(2,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L6 [I]
SPG_AY(2,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R6 [I]
SPG_LEN(2,1,1)      0 ; mm ! [D] Length at design for spring L6 [I]
SPG_LEN(2,1,2)      0 ; mm ! [D] Length at design for spring R6 [I]
! FSA_DESIGN(2,1) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 6
! FSA_L(2,1) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  6
FS_OFFSET(2,1,1)    0 ; N ! Force offset subtracted from built-in spring L6 [I]
FS_OFFSET(2,1,2)    0 ; N ! Force offset subtracted from built-in spring R6 [I]
! FS_STATIC(2,1,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L6
! FS_STATIC(2,1,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R6
! FZA_L(2,1) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 6
! FZA_UL(2,1) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 6
! FZ_STATIC(2,1,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L6
! FZ_STATIC(2,1,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R6
! KA_ROLL(2,1) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 6
L_DAMPERS(2,1)   1000 ; mm ! Distance between dampers on axle 6 [I]
Y_DAMPERS(2,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 6 [I]
L_JNC_STOPS(2,1) 1000 ; mm ! Distance between jounce stops on axle 6 [I]
L_REB_STOPS(2,1) 1000 ; mm ! Distance between rebound stops on axle 6 [I]
L_SPRINGS(2,1)   1000 ; mm ! Distance between springs on axle 6 [I]
Y_SPRINGS(2,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 6 [I]
L_SPG_ADJ(2,1,1)    0 ; mm ! Upper seat height increase for spring L6 [I]
L_SPG_ADJ(2,1,2)    0 ; mm ! Upper seat height increase for spring R6 [I]
SPRING_COMP_BETA(2,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L6
SPRING_COMP_BETA(2,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R6
SPRING_EXT_BETA(2,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L6
SPRING_EXT_BETA(2,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R6

! Solid-axle suspension for axle 2 on unit 2
OPT_EXT_SP(2,2,1)   0 ! Disable built-in spring L7? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2,2)   0 ! Disable built-in spring R7? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,2,1)   0 ; mm ! Initial compression of external spring L7 [I]
CMP_OFFSET(2,2,2)   0 ; mm ! Initial compression of external spring R7 [I]
! CMP_DESIGN(2,2,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring L7
! CMP_DESIGN(2,2,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring R7
DAUX(2,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 7
DMP_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L7 [I]
DMP_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R7 [I]
DMP_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L7 [I]
DMP_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R7 [I]
DMP_LEN(2,2,1)      0 ; mm ! [D] Length at design for damper L7 [I]
DMP_LEN(2,2,2)      0 ; mm ! [D] Length at design for damper R7 [I]
SPG_AX(2,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L7 [I]
SPG_AX(2,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R7 [I]
SPG_AY(2,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L7 [I]
SPG_AY(2,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R7 [I]
SPG_LEN(2,2,1)      0 ; mm ! [D] Length at design for spring L7 [I]
SPG_LEN(2,2,2)      0 ; mm ! [D] Length at design for spring R7 [I]
! FSA_DESIGN(2,2) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 7
! FSA_L(2,2) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  7
FS_OFFSET(2,2,1)    0 ; N ! Force offset subtracted from built-in spring L7 [I]
FS_OFFSET(2,2,2)    0 ; N ! Force offset subtracted from built-in spring R7 [I]
! FS_STATIC(2,2,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L7
! FS_STATIC(2,2,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R7
! FZA_L(2,2) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 7
! FZA_UL(2,2) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 7
! FZ_STATIC(2,2,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L7
! FZ_STATIC(2,2,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R7
! KA_ROLL(2,2) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 7
L_DAMPERS(2,2)   1000 ; mm ! Distance between dampers on axle 7 [I]
Y_DAMPERS(2,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 7 [I]
L_JNC_STOPS(2,2) 1000 ; mm ! Distance between jounce stops on axle 7 [I]
L_REB_STOPS(2,2) 1000 ; mm ! Distance between rebound stops on axle 7 [I]
L_SPRINGS(2,2)   1000 ; mm ! Distance between springs on axle 7 [I]
Y_SPRINGS(2,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 7 [I]
L_SPG_ADJ(2,2,1)    0 ; mm ! Upper seat height increase for spring L7 [I]
L_SPG_ADJ(2,2,2)    0 ; mm ! Upper seat height increase for spring R7 [I]
SPRING_COMP_BETA(2,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L7
SPRING_COMP_BETA(2,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R7
SPRING_EXT_BETA(2,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L7
SPRING_EXT_BETA(2,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R7

! Solid-axle suspension for axle 3 on unit 2
OPT_EXT_SP(2,3,1)   0 ! Disable built-in spring L8? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,3,2)   0 ! Disable built-in spring R8? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,3,1)   0 ; mm ! Initial compression of external spring L8 [I]
CMP_OFFSET(2,3,2)   0 ; mm ! Initial compression of external spring R8 [I]
! CMP_DESIGN(2,3,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring L8
! CMP_DESIGN(2,3,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring R8
DAUX(2,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 8
DMP_AX(2,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L8 [I]
DMP_AX(2,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R8 [I]
DMP_AY(2,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L8 [I]
DMP_AY(2,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R8 [I]
DMP_LEN(2,3,1)      0 ; mm ! [D] Length at design for damper L8 [I]
DMP_LEN(2,3,2)      0 ; mm ! [D] Length at design for damper R8 [I]
SPG_AX(2,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L8 [I]
SPG_AX(2,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R8 [I]
SPG_AY(2,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L8 [I]
SPG_AY(2,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R8 [I]
SPG_LEN(2,3,1)      0 ; mm ! [D] Length at design for spring L8 [I]
SPG_LEN(2,3,2)      0 ; mm ! [D] Length at design for spring R8 [I]
! FSA_DESIGN(2,3) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 8
! FSA_L(2,3) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  8
FS_OFFSET(2,3,1)    0 ; N ! Force offset subtracted from built-in spring L8 [I]
FS_OFFSET(2,3,2)    0 ; N ! Force offset subtracted from built-in spring R8 [I]
! FS_STATIC(2,3,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L8
! FS_STATIC(2,3,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R8
! FZA_L(2,3) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 8
! FZA_UL(2,3) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 8
! FZ_STATIC(2,3,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L8
! FZ_STATIC(2,3,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R8
! KA_ROLL(2,3) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 8
L_DAMPERS(2,3)   1000 ; mm ! Distance between dampers on axle 8 [I]
Y_DAMPERS(2,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 8 [I]
L_JNC_STOPS(2,3) 1000 ; mm ! Distance between jounce stops on axle 8 [I]
L_REB_STOPS(2,3) 1000 ; mm ! Distance between rebound stops on axle 8 [I]
L_SPRINGS(2,3)   1000 ; mm ! Distance between springs on axle 8 [I]
Y_SPRINGS(2,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 8 [I]
L_SPG_ADJ(2,3,1)    0 ; mm ! Upper seat height increase for spring L8 [I]
L_SPG_ADJ(2,3,2)    0 ; mm ! Upper seat height increase for spring R8 [I]
SPRING_COMP_BETA(2,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L8
SPRING_COMP_BETA(2,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R8
SPRING_EXT_BETA(2,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L8
SPRING_EXT_BETA(2,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R8

! Solid-axle suspension for axle 4 on unit 2
OPT_EXT_SP(2,4,1)   0 ! Disable built-in spring L9? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,4,2)   0 ! Disable built-in spring R9? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,4) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,4,1)   0 ; mm ! Initial compression of external spring L9 [I]
CMP_OFFSET(2,4,2)   0 ; mm ! Initial compression of external spring R9 [I]
! CMP_DESIGN(2,4,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring L9
! CMP_DESIGN(2,4,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring R9
DAUX(2,4)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 9
DMP_AX(2,4,1)       0 ; deg ! [D] Front-view inclination angle for damper L9 [I]
DMP_AX(2,4,2)       0 ; deg ! [D] Front-view inclination angle for damper R9 [I]
DMP_AY(2,4,1)       0 ; deg ! [D] Side-view inclination angle for damper L9 [I]
DMP_AY(2,4,2)       0 ; deg ! [D] Side-view inclination angle for damper R9 [I]
DMP_LEN(2,4,1)      0 ; mm ! [D] Length at design for damper L9 [I]
DMP_LEN(2,4,2)      0 ; mm ! [D] Length at design for damper R9 [I]
SPG_AX(2,4,1)       0 ; deg ! [D] Front-view inclination angle for spring L9 [I]
SPG_AX(2,4,2)       0 ; deg ! [D] Front-view inclination angle for spring R9 [I]
SPG_AY(2,4,1)       0 ; deg ! [D] Side-view inclination angle for spring L9 [I]
SPG_AY(2,4,2)       0 ; deg ! [D] Side-view inclination angle for spring R9 [I]
SPG_LEN(2,4,1)      0 ; mm ! [D] Length at design for spring L9 [I]
SPG_LEN(2,4,2)      0 ; mm ! [D] Length at design for spring R9 [I]
! FSA_DESIGN(2,4) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 9
! FSA_L(2,4) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  9
FS_OFFSET(2,4,1)    0 ; N ! Force offset subtracted from built-in spring L9 [I]
FS_OFFSET(2,4,2)    0 ; N ! Force offset subtracted from built-in spring R9 [I]
! FS_STATIC(2,4,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L9
! FS_STATIC(2,4,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R9
! FZA_L(2,4) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 9
! FZA_UL(2,4) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 9
! FZ_STATIC(2,4,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L9
! FZ_STATIC(2,4,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R9
! KA_ROLL(2,4) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 9
L_DAMPERS(2,4)   1000 ; mm ! Distance between dampers on axle 9 [I]
Y_DAMPERS(2,4)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 9 [I]
L_JNC_STOPS(2,4) 1000 ; mm ! Distance between jounce stops on axle 9 [I]
L_REB_STOPS(2,4) 1000 ; mm ! Distance between rebound stops on axle 9 [I]
L_SPRINGS(2,4)   1000 ; mm ! Distance between springs on axle 9 [I]
Y_SPRINGS(2,4)      0 ; mm ! [D] Lateral (left) offset of springs on axle 9 [I]
L_SPG_ADJ(2,4,1)    0 ; mm ! Upper seat height increase for spring L9 [I]
L_SPG_ADJ(2,4,2)    0 ; mm ! Upper seat height increase for spring R9 [I]
SPRING_COMP_BETA(2,4,1) 2 ; mm ! Ref. hysteretic compression, ride spring L9
SPRING_COMP_BETA(2,4,2) 2 ; mm ! Ref. hysteretic compression, ride spring R9
SPRING_EXT_BETA(2,4,1) 2 ; mm ! Ref. hysteretic extension, ride spring L9
SPRING_EXT_BETA(2,4,2) 2 ; mm ! Ref. hysteretic extension, ride spring R9

! Solid-axle suspension for axle 5 on unit 2
OPT_EXT_SP(2,5,1)   0 ! Disable built-in spring L10? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,5,2)   0 ! Disable built-in spring R10? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,5) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,5,1)   0 ; mm ! Initial compression of external spring L10 [I]
CMP_OFFSET(2,5,2)   0 ; mm ! Initial compression of external spring R10 [I]
! CMP_DESIGN(2,5,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L10
! CMP_DESIGN(2,5,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R10
DAUX(2,5)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 10
DMP_AX(2,5,1)       0 ; deg ! [D] Front-view inclination angle for damper L10 [I]
DMP_AX(2,5,2)       0 ; deg ! [D] Front-view inclination angle for damper R10 [I]
DMP_AY(2,5,1)       0 ; deg ! [D] Side-view inclination angle for damper L10 [I]
DMP_AY(2,5,2)       0 ; deg ! [D] Side-view inclination angle for damper R10 [I]
DMP_LEN(2,5,1)      0 ; mm ! [D] Length at design for damper L10 [I]
DMP_LEN(2,5,2)      0 ; mm ! [D] Length at design for damper R10 [I]
SPG_AX(2,5,1)       0 ; deg ! [D] Front-view inclination angle for spring L10 [I]
SPG_AX(2,5,2)       0 ; deg ! [D] Front-view inclination angle for spring R10 [I]
SPG_AY(2,5,1)       0 ; deg ! [D] Side-view inclination angle for spring L10 [I]
SPG_AY(2,5,2)       0 ; deg ! [D] Side-view inclination angle for spring R10 [I]
SPG_LEN(2,5,1)      0 ; mm ! [D] Length at design for spring L10 [I]
SPG_LEN(2,5,2)      0 ; mm ! [D] Length at design for spring R10 [I]
! FSA_DESIGN(2,5) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 10
! FSA_L(2,5) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  10
FS_OFFSET(2,5,1)    0 ; N ! Force offset subtracted from built-in spring L10 [I]
FS_OFFSET(2,5,2)    0 ; N ! Force offset subtracted from built-in spring R10 [I]
! FS_STATIC(2,5,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L10
! FS_STATIC(2,5,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R10
! FZA_L(2,5) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 10
! FZA_UL(2,5) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 10
! FZ_STATIC(2,5,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L10
! FZ_STATIC(2,5,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R10
! KA_ROLL(2,5) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 10
L_DAMPERS(2,5)   1000 ; mm ! Distance between dampers on axle 10 [I]
Y_DAMPERS(2,5)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 10 [I]
L_JNC_STOPS(2,5) 1000 ; mm ! Distance between jounce stops on axle 10 [I]
L_REB_STOPS(2,5) 1000 ; mm ! Distance between rebound stops on axle 10 [I]
L_SPRINGS(2,5)   1000 ; mm ! Distance between springs on axle 10 [I]
Y_SPRINGS(2,5)      0 ; mm ! [D] Lateral (left) offset of springs on axle 10 [I]
L_SPG_ADJ(2,5,1)    0 ; mm ! Upper seat height increase for spring L10 [I]
L_SPG_ADJ(2,5,2)    0 ; mm ! Upper seat height increase for spring R10 [I]
SPRING_COMP_BETA(2,5,1) 2 ; mm ! Ref. hysteretic compression, ride spring L10
SPRING_COMP_BETA(2,5,2) 2 ; mm ! Ref. hysteretic compression, ride spring R10
SPRING_EXT_BETA(2,5,1) 2 ; mm ! Ref. hysteretic extension, ride spring L10
SPRING_EXT_BETA(2,5,2) 2 ; mm ! Ref. hysteretic extension, ride spring R10

! Solid-axle suspension for axle 6 on unit 2
OPT_EXT_SP(2,6,1)   0 ! Disable built-in spring L11? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,6,2)   0 ! Disable built-in spring R11? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,6) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,6,1)   0 ; mm ! Initial compression of external spring L11 [I]
CMP_OFFSET(2,6,2)   0 ; mm ! Initial compression of external spring R11 [I]
! CMP_DESIGN(2,6,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L11
! CMP_DESIGN(2,6,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R11
DAUX(2,6)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 11
DMP_AX(2,6,1)       0 ; deg ! [D] Front-view inclination angle for damper L11 [I]
DMP_AX(2,6,2)       0 ; deg ! [D] Front-view inclination angle for damper R11 [I]
DMP_AY(2,6,1)       0 ; deg ! [D] Side-view inclination angle for damper L11 [I]
DMP_AY(2,6,2)       0 ; deg ! [D] Side-view inclination angle for damper R11 [I]
DMP_LEN(2,6,1)      0 ; mm ! [D] Length at design for damper L11 [I]
DMP_LEN(2,6,2)      0 ; mm ! [D] Length at design for damper R11 [I]
SPG_AX(2,6,1)       0 ; deg ! [D] Front-view inclination angle for spring L11 [I]
SPG_AX(2,6,2)       0 ; deg ! [D] Front-view inclination angle for spring R11 [I]
SPG_AY(2,6,1)       0 ; deg ! [D] Side-view inclination angle for spring L11 [I]
SPG_AY(2,6,2)       0 ; deg ! [D] Side-view inclination angle for spring R11 [I]
SPG_LEN(2,6,1)      0 ; mm ! [D] Length at design for spring L11 [I]
SPG_LEN(2,6,2)      0 ; mm ! [D] Length at design for spring R11 [I]
! FSA_DESIGN(2,6) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 11
! FSA_L(2,6) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  11
FS_OFFSET(2,6,1)    0 ; N ! Force offset subtracted from built-in spring L11 [I]
FS_OFFSET(2,6,2)    0 ; N ! Force offset subtracted from built-in spring R11 [I]
! FS_STATIC(2,6,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L11
! FS_STATIC(2,6,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R11
! FZA_L(2,6) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 11
! FZA_UL(2,6) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 11
! FZ_STATIC(2,6,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L11
! FZ_STATIC(2,6,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R11
! KA_ROLL(2,6) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 11
L_DAMPERS(2,6)   1000 ; mm ! Distance between dampers on axle 11 [I]
Y_DAMPERS(2,6)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 11 [I]
L_JNC_STOPS(2,6) 1000 ; mm ! Distance between jounce stops on axle 11 [I]
L_REB_STOPS(2,6) 1000 ; mm ! Distance between rebound stops on axle 11 [I]
L_SPRINGS(2,6)   1000 ; mm ! Distance between springs on axle 11 [I]
Y_SPRINGS(2,6)      0 ; mm ! [D] Lateral (left) offset of springs on axle 11 [I]
L_SPG_ADJ(2,6,1)    0 ; mm ! Upper seat height increase for spring L11 [I]
L_SPG_ADJ(2,6,2)    0 ; mm ! Upper seat height increase for spring R11 [I]
SPRING_COMP_BETA(2,6,1) 2 ; mm ! Ref. hysteretic compression, ride spring L11
SPRING_COMP_BETA(2,6,2) 2 ; mm ! Ref. hysteretic compression, ride spring R11
SPRING_EXT_BETA(2,6,1) 2 ; mm ! Ref. hysteretic extension, ride spring L11
SPRING_EXT_BETA(2,6,2) 2 ; mm ! Ref. hysteretic extension, ride spring R11

! Solid-axle suspension for axle 7 on unit 2
OPT_EXT_SP(2,7,1)   0 ! Disable built-in spring L12? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,7,2)   0 ! Disable built-in spring R12? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,7) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,7,1)   0 ; mm ! Initial compression of external spring L12 [I]
CMP_OFFSET(2,7,2)   0 ; mm ! Initial compression of external spring R12 [I]
! CMP_DESIGN(2,7,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L12
! CMP_DESIGN(2,7,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R12
DAUX(2,7)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 12
DMP_AX(2,7,1)       0 ; deg ! [D] Front-view inclination angle for damper L12 [I]
DMP_AX(2,7,2)       0 ; deg ! [D] Front-view inclination angle for damper R12 [I]
DMP_AY(2,7,1)       0 ; deg ! [D] Side-view inclination angle for damper L12 [I]
DMP_AY(2,7,2)       0 ; deg ! [D] Side-view inclination angle for damper R12 [I]
DMP_LEN(2,7,1)      0 ; mm ! [D] Length at design for damper L12 [I]
DMP_LEN(2,7,2)      0 ; mm ! [D] Length at design for damper R12 [I]
SPG_AX(2,7,1)       0 ; deg ! [D] Front-view inclination angle for spring L12 [I]
SPG_AX(2,7,2)       0 ; deg ! [D] Front-view inclination angle for spring R12 [I]
SPG_AY(2,7,1)       0 ; deg ! [D] Side-view inclination angle for spring L12 [I]
SPG_AY(2,7,2)       0 ; deg ! [D] Side-view inclination angle for spring R12 [I]
SPG_LEN(2,7,1)      0 ; mm ! [D] Length at design for spring L12 [I]
SPG_LEN(2,7,2)      0 ; mm ! [D] Length at design for spring R12 [I]
! FSA_DESIGN(2,7) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 12
! FSA_L(2,7) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  12
FS_OFFSET(2,7,1)    0 ; N ! Force offset subtracted from built-in spring L12 [I]
FS_OFFSET(2,7,2)    0 ; N ! Force offset subtracted from built-in spring R12 [I]
! FS_STATIC(2,7,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L12
! FS_STATIC(2,7,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R12
! FZA_L(2,7) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 12
! FZA_UL(2,7) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 12
! FZ_STATIC(2,7,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L12
! FZ_STATIC(2,7,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R12
! KA_ROLL(2,7) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 12
L_DAMPERS(2,7)   1000 ; mm ! Distance between dampers on axle 12 [I]
Y_DAMPERS(2,7)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 12 [I]
L_JNC_STOPS(2,7) 1000 ; mm ! Distance between jounce stops on axle 12 [I]
L_REB_STOPS(2,7) 1000 ; mm ! Distance between rebound stops on axle 12 [I]
L_SPRINGS(2,7)   1000 ; mm ! Distance between springs on axle 12 [I]
Y_SPRINGS(2,7)      0 ; mm ! [D] Lateral (left) offset of springs on axle 12 [I]
L_SPG_ADJ(2,7,1)    0 ; mm ! Upper seat height increase for spring L12 [I]
L_SPG_ADJ(2,7,2)    0 ; mm ! Upper seat height increase for spring R12 [I]
SPRING_COMP_BETA(2,7,1) 2 ; mm ! Ref. hysteretic compression, ride spring L12
SPRING_COMP_BETA(2,7,2) 2 ; mm ! Ref. hysteretic compression, ride spring R12
SPRING_EXT_BETA(2,7,1) 2 ; mm ! Ref. hysteretic extension, ride spring L12
SPRING_EXT_BETA(2,7,2) 2 ; mm ! Ref. hysteretic extension, ride spring R12

! Solid-axle suspension for axle 8 on unit 2
OPT_EXT_SP(2,8,1)   0 ! Disable built-in spring L13? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,8,2)   0 ! Disable built-in spring R13? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,8) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,8,1)   0 ; mm ! Initial compression of external spring L13 [I]
CMP_OFFSET(2,8,2)   0 ; mm ! Initial compression of external spring R13 [I]
! CMP_DESIGN(2,8,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L13
! CMP_DESIGN(2,8,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R13
DAUX(2,8)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 13
DMP_AX(2,8,1)       0 ; deg ! [D] Front-view inclination angle for damper L13 [I]
DMP_AX(2,8,2)       0 ; deg ! [D] Front-view inclination angle for damper R13 [I]
DMP_AY(2,8,1)       0 ; deg ! [D] Side-view inclination angle for damper L13 [I]
DMP_AY(2,8,2)       0 ; deg ! [D] Side-view inclination angle for damper R13 [I]
DMP_LEN(2,8,1)      0 ; mm ! [D] Length at design for damper L13 [I]
DMP_LEN(2,8,2)      0 ; mm ! [D] Length at design for damper R13 [I]
SPG_AX(2,8,1)       0 ; deg ! [D] Front-view inclination angle for spring L13 [I]
SPG_AX(2,8,2)       0 ; deg ! [D] Front-view inclination angle for spring R13 [I]
SPG_AY(2,8,1)       0 ; deg ! [D] Side-view inclination angle for spring L13 [I]
SPG_AY(2,8,2)       0 ; deg ! [D] Side-view inclination angle for spring R13 [I]
SPG_LEN(2,8,1)      0 ; mm ! [D] Length at design for spring L13 [I]
SPG_LEN(2,8,2)      0 ; mm ! [D] Length at design for spring R13 [I]
! FSA_DESIGN(2,8) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 13
! FSA_L(2,8) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  13
FS_OFFSET(2,8,1)    0 ; N ! Force offset subtracted from built-in spring L13 [I]
FS_OFFSET(2,8,2)    0 ; N ! Force offset subtracted from built-in spring R13 [I]
! FS_STATIC(2,8,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L13
! FS_STATIC(2,8,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R13
! FZA_L(2,8) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 13
! FZA_UL(2,8) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 13
! FZ_STATIC(2,8,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L13
! FZ_STATIC(2,8,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R13
! KA_ROLL(2,8) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 13
L_DAMPERS(2,8)   1000 ; mm ! Distance between dampers on axle 13 [I]
Y_DAMPERS(2,8)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 13 [I]
L_JNC_STOPS(2,8) 1000 ; mm ! Distance between jounce stops on axle 13 [I]
L_REB_STOPS(2,8) 1000 ; mm ! Distance between rebound stops on axle 13 [I]
L_SPRINGS(2,8)   1000 ; mm ! Distance between springs on axle 13 [I]
Y_SPRINGS(2,8)      0 ; mm ! [D] Lateral (left) offset of springs on axle 13 [I]
L_SPG_ADJ(2,8,1)    0 ; mm ! Upper seat height increase for spring L13 [I]
L_SPG_ADJ(2,8,2)    0 ; mm ! Upper seat height increase for spring R13 [I]
SPRING_COMP_BETA(2,8,1) 2 ; mm ! Ref. hysteretic compression, ride spring L13
SPRING_COMP_BETA(2,8,2) 2 ; mm ! Ref. hysteretic compression, ride spring R13
SPRING_EXT_BETA(2,8,1) 2 ; mm ! Ref. hysteretic extension, ride spring L13
SPRING_EXT_BETA(2,8,2) 2 ; mm ! Ref. hysteretic extension, ride spring R13

! Solid-axle suspension for axle 9 on unit 2
OPT_EXT_SP(2,9,1)   0 ! Disable built-in spring L14? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,9,2)   0 ! Disable built-in spring R14? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,9) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,9,1)   0 ; mm ! Initial compression of external spring L14 [I]
CMP_OFFSET(2,9,2)   0 ; mm ! Initial compression of external spring R14 [I]
! CMP_DESIGN(2,9,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L14
! CMP_DESIGN(2,9,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R14
DAUX(2,9)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 14
DMP_AX(2,9,1)       0 ; deg ! [D] Front-view inclination angle for damper L14 [I]
DMP_AX(2,9,2)       0 ; deg ! [D] Front-view inclination angle for damper R14 [I]
DMP_AY(2,9,1)       0 ; deg ! [D] Side-view inclination angle for damper L14 [I]
DMP_AY(2,9,2)       0 ; deg ! [D] Side-view inclination angle for damper R14 [I]
DMP_LEN(2,9,1)      0 ; mm ! [D] Length at design for damper L14 [I]
DMP_LEN(2,9,2)      0 ; mm ! [D] Length at design for damper R14 [I]
SPG_AX(2,9,1)       0 ; deg ! [D] Front-view inclination angle for spring L14 [I]
SPG_AX(2,9,2)       0 ; deg ! [D] Front-view inclination angle for spring R14 [I]
SPG_AY(2,9,1)       0 ; deg ! [D] Side-view inclination angle for spring L14 [I]
SPG_AY(2,9,2)       0 ; deg ! [D] Side-view inclination angle for spring R14 [I]
SPG_LEN(2,9,1)      0 ; mm ! [D] Length at design for spring L14 [I]
SPG_LEN(2,9,2)      0 ; mm ! [D] Length at design for spring R14 [I]
! FSA_DESIGN(2,9) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 14
! FSA_L(2,9) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  14
FS_OFFSET(2,9,1)    0 ; N ! Force offset subtracted from built-in spring L14 [I]
FS_OFFSET(2,9,2)    0 ; N ! Force offset subtracted from built-in spring R14 [I]
! FS_STATIC(2,9,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L14
! FS_STATIC(2,9,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R14
! FZA_L(2,9) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 14
! FZA_UL(2,9) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 14
! FZ_STATIC(2,9,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L14
! FZ_STATIC(2,9,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R14
! KA_ROLL(2,9) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 14
L_DAMPERS(2,9)   1000 ; mm ! Distance between dampers on axle 14 [I]
Y_DAMPERS(2,9)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 14 [I]
L_JNC_STOPS(2,9) 1000 ; mm ! Distance between jounce stops on axle 14 [I]
L_REB_STOPS(2,9) 1000 ; mm ! Distance between rebound stops on axle 14 [I]
L_SPRINGS(2,9)   1000 ; mm ! Distance between springs on axle 14 [I]
Y_SPRINGS(2,9)      0 ; mm ! [D] Lateral (left) offset of springs on axle 14 [I]
L_SPG_ADJ(2,9,1)    0 ; mm ! Upper seat height increase for spring L14 [I]
L_SPG_ADJ(2,9,2)    0 ; mm ! Upper seat height increase for spring R14 [I]
SPRING_COMP_BETA(2,9,1) 2 ; mm ! Ref. hysteretic compression, ride spring L14
SPRING_COMP_BETA(2,9,2) 2 ; mm ! Ref. hysteretic compression, ride spring R14
SPRING_EXT_BETA(2,9,1) 2 ; mm ! Ref. hysteretic extension, ride spring L14
SPRING_EXT_BETA(2,9,2) 2 ; mm ! Ref. hysteretic extension, ride spring R14

! Solid-axle suspension for axle 10 on unit 2
OPT_EXT_SP(2,10,1)  0 ! Disable built-in spring L15? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,10,2)  0 ! Disable built-in spring R15? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,10) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,10,1)  0 ; mm ! Initial compression of external spring L15 [I]
CMP_OFFSET(2,10,2)  0 ; mm ! Initial compression of external spring R15 [I]
! CMP_DESIGN(2,10,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L15
! CMP_DESIGN(2,10,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R15
DAUX(2,10)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 15
DMP_AX(2,10,1)      0 ; deg ! [D] Front-view inclination angle for damper L15 [I]
DMP_AX(2,10,2)      0 ; deg ! [D] Front-view inclination angle for damper R15 [I]
DMP_AY(2,10,1)      0 ; deg ! [D] Side-view inclination angle for damper L15 [I]
DMP_AY(2,10,2)      0 ; deg ! [D] Side-view inclination angle for damper R15 [I]
DMP_LEN(2,10,1)     0 ; mm ! [D] Length at design for damper L15 [I]
DMP_LEN(2,10,2)     0 ; mm ! [D] Length at design for damper R15 [I]
SPG_AX(2,10,1)      0 ; deg ! [D] Front-view inclination angle for spring L15 [I]
SPG_AX(2,10,2)      0 ; deg ! [D] Front-view inclination angle for spring R15 [I]
SPG_AY(2,10,1)      0 ; deg ! [D] Side-view inclination angle for spring L15 [I]
SPG_AY(2,10,2)      0 ; deg ! [D] Side-view inclination angle for spring R15 [I]
SPG_LEN(2,10,1)     0 ; mm ! [D] Length at design for spring L15 [I]
SPG_LEN(2,10,2)     0 ; mm ! [D] Length at design for spring R15 [I]
! FSA_DESIGN(2,10) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 15
! FSA_L(2,10) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  15
FS_OFFSET(2,10,1)   0 ; N ! Force offset subtracted from built-in spring L15 [I]
FS_OFFSET(2,10,2)   0 ; N ! Force offset subtracted from built-in spring R15 [I]
! FS_STATIC(2,10,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L15
! FS_STATIC(2,10,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R15
! FZA_L(2,10) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 15
! FZA_UL(2,10) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 15
! FZ_STATIC(2,10,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L15
! FZ_STATIC(2,10,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R15
! KA_ROLL(2,10) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 15
L_DAMPERS(2,10)  1000 ; mm ! Distance between dampers on axle 15 [I]
Y_DAMPERS(2,10)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 15 [I]
L_JNC_STOPS(2,10) 1000 ; mm ! Distance between jounce stops on axle 15 [I]
L_REB_STOPS(2,10) 1000 ; mm ! Distance between rebound stops on axle 15 [I]
L_SPRINGS(2,10)  1000 ; mm ! Distance between springs on axle 15 [I]
Y_SPRINGS(2,10)     0 ; mm ! [D] Lateral (left) offset of springs on axle 15 [I]
L_SPG_ADJ(2,10,1)   0 ; mm ! Upper seat height increase for spring L15 [I]
L_SPG_ADJ(2,10,2)   0 ; mm ! Upper seat height increase for spring R15 [I]
SPRING_COMP_BETA(2,10,1) 2 ; mm ! Ref. hysteretic compression, ride spring L15
SPRING_COMP_BETA(2,10,2) 2 ; mm ! Ref. hysteretic compression, ride spring R15
SPRING_EXT_BETA(2,10,1) 2 ; mm ! Ref. hysteretic extension, ride spring L15
SPRING_EXT_BETA(2,10,2) 2 ; mm ! Ref. hysteretic extension, ride spring R15

! Solid-axle suspension for axle 11 on unit 2
OPT_EXT_SP(2,11,1)  0 ! Disable built-in spring L16? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,11,2)  0 ! Disable built-in spring R16? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,11) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,11,1)  0 ; mm ! Initial compression of external spring L16 [I]
CMP_OFFSET(2,11,2)  0 ; mm ! Initial compression of external spring R16 [I]
! CMP_DESIGN(2,11,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L16
! CMP_DESIGN(2,11,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R16
DAUX(2,11)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 16
DMP_AX(2,11,1)      0 ; deg ! [D] Front-view inclination angle for damper L16 [I]
DMP_AX(2,11,2)      0 ; deg ! [D] Front-view inclination angle for damper R16 [I]
DMP_AY(2,11,1)      0 ; deg ! [D] Side-view inclination angle for damper L16 [I]
DMP_AY(2,11,2)      0 ; deg ! [D] Side-view inclination angle for damper R16 [I]
DMP_LEN(2,11,1)     0 ; mm ! [D] Length at design for damper L16 [I]
DMP_LEN(2,11,2)     0 ; mm ! [D] Length at design for damper R16 [I]
SPG_AX(2,11,1)      0 ; deg ! [D] Front-view inclination angle for spring L16 [I]
SPG_AX(2,11,2)      0 ; deg ! [D] Front-view inclination angle for spring R16 [I]
SPG_AY(2,11,1)      0 ; deg ! [D] Side-view inclination angle for spring L16 [I]
SPG_AY(2,11,2)      0 ; deg ! [D] Side-view inclination angle for spring R16 [I]
SPG_LEN(2,11,1)     0 ; mm ! [D] Length at design for spring L16 [I]
SPG_LEN(2,11,2)     0 ; mm ! [D] Length at design for spring R16 [I]
! FSA_DESIGN(2,11) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 16
! FSA_L(2,11) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  16
FS_OFFSET(2,11,1)   0 ; N ! Force offset subtracted from built-in spring L16 [I]
FS_OFFSET(2,11,2)   0 ; N ! Force offset subtracted from built-in spring R16 [I]
! FS_STATIC(2,11,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L16
! FS_STATIC(2,11,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R16
! FZA_L(2,11) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 16
! FZA_UL(2,11) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 16
! FZ_STATIC(2,11,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L16
! FZ_STATIC(2,11,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R16
! KA_ROLL(2,11) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 16
L_DAMPERS(2,11)  1000 ; mm ! Distance between dampers on axle 16 [I]
Y_DAMPERS(2,11)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 16 [I]
L_JNC_STOPS(2,11) 1000 ; mm ! Distance between jounce stops on axle 16 [I]
L_REB_STOPS(2,11) 1000 ; mm ! Distance between rebound stops on axle 16 [I]
L_SPRINGS(2,11)  1000 ; mm ! Distance between springs on axle 16 [I]
Y_SPRINGS(2,11)     0 ; mm ! [D] Lateral (left) offset of springs on axle 16 [I]
L_SPG_ADJ(2,11,1)   0 ; mm ! Upper seat height increase for spring L16 [I]
L_SPG_ADJ(2,11,2)   0 ; mm ! Upper seat height increase for spring R16 [I]
SPRING_COMP_BETA(2,11,1) 2 ; mm ! Ref. hysteretic compression, ride spring L16
SPRING_COMP_BETA(2,11,2) 2 ; mm ! Ref. hysteretic compression, ride spring R16
SPRING_EXT_BETA(2,11,1) 2 ; mm ! Ref. hysteretic extension, ride spring L16
SPRING_EXT_BETA(2,11,2) 2 ; mm ! Ref. hysteretic extension, ride spring R16

! Solid-axle suspension for axle 12 on unit 2
OPT_EXT_SP(2,12,1)  0 ! Disable built-in spring L17? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,12,2)  0 ! Disable built-in spring R17? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,12) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,12,1)  0 ; mm ! Initial compression of external spring L17 [I]
CMP_OFFSET(2,12,2)  0 ; mm ! Initial compression of external spring R17 [I]
! CMP_DESIGN(2,12,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L17
! CMP_DESIGN(2,12,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R17
DAUX(2,12)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 17
DMP_AX(2,12,1)      0 ; deg ! [D] Front-view inclination angle for damper L17 [I]
DMP_AX(2,12,2)      0 ; deg ! [D] Front-view inclination angle for damper R17 [I]
DMP_AY(2,12,1)      0 ; deg ! [D] Side-view inclination angle for damper L17 [I]
DMP_AY(2,12,2)      0 ; deg ! [D] Side-view inclination angle for damper R17 [I]
DMP_LEN(2,12,1)     0 ; mm ! [D] Length at design for damper L17 [I]
DMP_LEN(2,12,2)     0 ; mm ! [D] Length at design for damper R17 [I]
SPG_AX(2,12,1)      0 ; deg ! [D] Front-view inclination angle for spring L17 [I]
SPG_AX(2,12,2)      0 ; deg ! [D] Front-view inclination angle for spring R17 [I]
SPG_AY(2,12,1)      0 ; deg ! [D] Side-view inclination angle for spring L17 [I]
SPG_AY(2,12,2)      0 ; deg ! [D] Side-view inclination angle for spring R17 [I]
SPG_LEN(2,12,1)     0 ; mm ! [D] Length at design for spring L17 [I]
SPG_LEN(2,12,2)     0 ; mm ! [D] Length at design for spring R17 [I]
! FSA_DESIGN(2,12) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 17
! FSA_L(2,12) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  17
FS_OFFSET(2,12,1)   0 ; N ! Force offset subtracted from built-in spring L17 [I]
FS_OFFSET(2,12,2)   0 ; N ! Force offset subtracted from built-in spring R17 [I]
! FS_STATIC(2,12,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L17
! FS_STATIC(2,12,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R17
! FZA_L(2,12) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 17
! FZA_UL(2,12) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 17
! FZ_STATIC(2,12,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L17
! FZ_STATIC(2,12,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R17
! KA_ROLL(2,12) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 17
L_DAMPERS(2,12)  1000 ; mm ! Distance between dampers on axle 17 [I]
Y_DAMPERS(2,12)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 17 [I]
L_JNC_STOPS(2,12) 1000 ; mm ! Distance between jounce stops on axle 17 [I]
L_REB_STOPS(2,12) 1000 ; mm ! Distance between rebound stops on axle 17 [I]
L_SPRINGS(2,12)  1000 ; mm ! Distance between springs on axle 17 [I]
Y_SPRINGS(2,12)     0 ; mm ! [D] Lateral (left) offset of springs on axle 17 [I]
L_SPG_ADJ(2,12,1)   0 ; mm ! Upper seat height increase for spring L17 [I]
L_SPG_ADJ(2,12,2)   0 ; mm ! Upper seat height increase for spring R17 [I]
SPRING_COMP_BETA(2,12,1) 2 ; mm ! Ref. hysteretic compression, ride spring L17
SPRING_COMP_BETA(2,12,2) 2 ; mm ! Ref. hysteretic compression, ride spring R17
SPRING_EXT_BETA(2,12,1) 2 ; mm ! Ref. hysteretic extension, ride spring L17
SPRING_EXT_BETA(2,12,2) 2 ; mm ! Ref. hysteretic extension, ride spring R17

! Solid-axle suspension for axle 13 on unit 2
OPT_EXT_SP(2,13,1)  0 ! Disable built-in spring L18? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,13,2)  0 ! Disable built-in spring R18? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,13) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,13,1)  0 ; mm ! Initial compression of external spring L18 [I]
CMP_OFFSET(2,13,2)  0 ; mm ! Initial compression of external spring R18 [I]
! CMP_DESIGN(2,13,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L18
! CMP_DESIGN(2,13,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R18
DAUX(2,13)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 18
DMP_AX(2,13,1)      0 ; deg ! [D] Front-view inclination angle for damper L18 [I]
DMP_AX(2,13,2)      0 ; deg ! [D] Front-view inclination angle for damper R18 [I]
DMP_AY(2,13,1)      0 ; deg ! [D] Side-view inclination angle for damper L18 [I]
DMP_AY(2,13,2)      0 ; deg ! [D] Side-view inclination angle for damper R18 [I]
DMP_LEN(2,13,1)     0 ; mm ! [D] Length at design for damper L18 [I]
DMP_LEN(2,13,2)     0 ; mm ! [D] Length at design for damper R18 [I]
SPG_AX(2,13,1)      0 ; deg ! [D] Front-view inclination angle for spring L18 [I]
SPG_AX(2,13,2)      0 ; deg ! [D] Front-view inclination angle for spring R18 [I]
SPG_AY(2,13,1)      0 ; deg ! [D] Side-view inclination angle for spring L18 [I]
SPG_AY(2,13,2)      0 ; deg ! [D] Side-view inclination angle for spring R18 [I]
SPG_LEN(2,13,1)     0 ; mm ! [D] Length at design for spring L18 [I]
SPG_LEN(2,13,2)     0 ; mm ! [D] Length at design for spring R18 [I]
! FSA_DESIGN(2,13) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 18
! FSA_L(2,13) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  18
FS_OFFSET(2,13,1)   0 ; N ! Force offset subtracted from built-in spring L18 [I]
FS_OFFSET(2,13,2)   0 ; N ! Force offset subtracted from built-in spring R18 [I]
! FS_STATIC(2,13,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L18
! FS_STATIC(2,13,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R18
! FZA_L(2,13) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 18
! FZA_UL(2,13) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 18
! FZ_STATIC(2,13,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L18
! FZ_STATIC(2,13,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R18
! KA_ROLL(2,13) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 18
L_DAMPERS(2,13)  1000 ; mm ! Distance between dampers on axle 18 [I]
Y_DAMPERS(2,13)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 18 [I]
L_JNC_STOPS(2,13) 1000 ; mm ! Distance between jounce stops on axle 18 [I]
L_REB_STOPS(2,13) 1000 ; mm ! Distance between rebound stops on axle 18 [I]
L_SPRINGS(2,13)  1000 ; mm ! Distance between springs on axle 18 [I]
Y_SPRINGS(2,13)     0 ; mm ! [D] Lateral (left) offset of springs on axle 18 [I]
L_SPG_ADJ(2,13,1)   0 ; mm ! Upper seat height increase for spring L18 [I]
L_SPG_ADJ(2,13,2)   0 ; mm ! Upper seat height increase for spring R18 [I]
SPRING_COMP_BETA(2,13,1) 2 ; mm ! Ref. hysteretic compression, ride spring L18
SPRING_COMP_BETA(2,13,2) 2 ; mm ! Ref. hysteretic compression, ride spring R18
SPRING_EXT_BETA(2,13,1) 2 ; mm ! Ref. hysteretic extension, ride spring L18
SPRING_EXT_BETA(2,13,2) 2 ; mm ! Ref. hysteretic extension, ride spring R18

! Solid-axle suspension for axle 14 on unit 2
OPT_EXT_SP(2,14,1)  0 ! Disable built-in spring L19? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,14,2)  0 ! Disable built-in spring R19? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2,14) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(2,14,1)  0 ; mm ! Initial compression of external spring L19 [I]
CMP_OFFSET(2,14,2)  0 ; mm ! Initial compression of external spring R19 [I]
! CMP_DESIGN(2,14,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L19
! CMP_DESIGN(2,14,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R19
DAUX(2,14)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 19
DMP_AX(2,14,1)      0 ; deg ! [D] Front-view inclination angle for damper L19 [I]
DMP_AX(2,14,2)      0 ; deg ! [D] Front-view inclination angle for damper R19 [I]
DMP_AY(2,14,1)      0 ; deg ! [D] Side-view inclination angle for damper L19 [I]
DMP_AY(2,14,2)      0 ; deg ! [D] Side-view inclination angle for damper R19 [I]
DMP_LEN(2,14,1)     0 ; mm ! [D] Length at design for damper L19 [I]
DMP_LEN(2,14,2)     0 ; mm ! [D] Length at design for damper R19 [I]
SPG_AX(2,14,1)      0 ; deg ! [D] Front-view inclination angle for spring L19 [I]
SPG_AX(2,14,2)      0 ; deg ! [D] Front-view inclination angle for spring R19 [I]
SPG_AY(2,14,1)      0 ; deg ! [D] Side-view inclination angle for spring L19 [I]
SPG_AY(2,14,2)      0 ; deg ! [D] Side-view inclination angle for spring R19 [I]
SPG_LEN(2,14,1)     0 ; mm ! [D] Length at design for spring L19 [I]
SPG_LEN(2,14,2)     0 ; mm ! [D] Length at design for spring R19 [I]
! FSA_DESIGN(2,14) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 19
! FSA_L(2,14) 3423.596292 ; N ! CALC -- Static suspension load, laden, axle  19
FS_OFFSET(2,14,1)   0 ; N ! Force offset subtracted from built-in spring L19 [I]
FS_OFFSET(2,14,2)   0 ; N ! Force offset subtracted from built-in spring R19 [I]
! FS_STATIC(2,14,1) 1711.798146 ; N ! CALC -- Static spring force, laden, spring L19
! FS_STATIC(2,14,2) 1711.798146 ; N ! CALC -- Static spring force, laden, spring R19
! FZA_L(2,14) 14534.53074 ; N ! CALC -- Static ground load, laden, axle 19
! FZA_UL(2,14) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 19
! FZ_STATIC(2,14,1) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel L19
! FZ_STATIC(2,14,2) 7267.265371 ; N ! CALC -- Static ground force, laden, wheel R19
! KA_ROLL(2,14) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 19
L_DAMPERS(2,14)  1000 ; mm ! Distance between dampers on axle 19 [I]
Y_DAMPERS(2,14)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 19 [I]
L_JNC_STOPS(2,14) 1000 ; mm ! Distance between jounce stops on axle 19 [I]
L_REB_STOPS(2,14) 1000 ; mm ! Distance between rebound stops on axle 19 [I]
L_SPRINGS(2,14)  1000 ; mm ! Distance between springs on axle 19 [I]
Y_SPRINGS(2,14)     0 ; mm ! [D] Lateral (left) offset of springs on axle 19 [I]
L_SPG_ADJ(2,14,1)   0 ; mm ! Upper seat height increase for spring L19 [I]
L_SPG_ADJ(2,14,2)   0 ; mm ! Upper seat height increase for spring R19 [I]
SPRING_COMP_BETA(2,14,1) 2 ; mm ! Ref. hysteretic compression, ride spring L19
SPRING_COMP_BETA(2,14,2) 2 ; mm ! Ref. hysteretic compression, ride spring R19
SPRING_EXT_BETA(2,14,1) 2 ; mm ! Ref. hysteretic extension, ride spring L19
SPRING_EXT_BETA(2,14,2) 2 ; mm ! Ref. hysteretic extension, ride spring R19

! Solid-axle suspension for axle 1 on unit 3
OPT_EXT_SP(3,1,1)   0 ! Disable built-in spring L20? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,1,2)   0 ! Disable built-in spring R20? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,1,1)   0 ; mm ! Initial compression of external spring L20 [I]
CMP_OFFSET(3,1,2)   0 ; mm ! Initial compression of external spring R20 [I]
! CMP_DESIGN(3,1,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L20
! CMP_DESIGN(3,1,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R20
DAUX(3,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 20
DMP_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L20 [I]
DMP_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R20 [I]
DMP_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L20 [I]
DMP_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R20 [I]
DMP_LEN(3,1,1)      0 ; mm ! [D] Length at design for damper L20 [I]
DMP_LEN(3,1,2)      0 ; mm ! [D] Length at design for damper R20 [I]
SPG_AX(3,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L20 [I]
SPG_AX(3,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R20 [I]
SPG_AY(3,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L20 [I]
SPG_AY(3,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R20 [I]
SPG_LEN(3,1,1)      0 ; mm ! [D] Length at design for spring L20 [I]
SPG_LEN(3,1,2)      0 ; mm ! [D] Length at design for spring R20 [I]
! FSA_DESIGN(3,1) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 20
! FSA_L(3,1) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  20
FS_OFFSET(3,1,1)    0 ; N ! Force offset subtracted from built-in spring L20 [I]
FS_OFFSET(3,1,2)    0 ; N ! Force offset subtracted from built-in spring R20 [I]
! FS_STATIC(3,1,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L20
! FS_STATIC(3,1,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R20
! FZA_L(3,1) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 20
! FZA_UL(3,1) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 20
! FZ_STATIC(3,1,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L20
! FZ_STATIC(3,1,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R20
! KA_ROLL(3,1) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 20
L_DAMPERS(3,1)   1000 ; mm ! Distance between dampers on axle 20 [I]
Y_DAMPERS(3,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 20 [I]
L_JNC_STOPS(3,1) 1000 ; mm ! Distance between jounce stops on axle 20 [I]
L_REB_STOPS(3,1) 1000 ; mm ! Distance between rebound stops on axle 20 [I]
L_SPRINGS(3,1)   1000 ; mm ! Distance between springs on axle 20 [I]
Y_SPRINGS(3,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 20 [I]
L_SPG_ADJ(3,1,1)    0 ; mm ! Upper seat height increase for spring L20 [I]
L_SPG_ADJ(3,1,2)    0 ; mm ! Upper seat height increase for spring R20 [I]
SPRING_COMP_BETA(3,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L20
SPRING_COMP_BETA(3,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R20
SPRING_EXT_BETA(3,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L20
SPRING_EXT_BETA(3,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R20

! Solid-axle suspension for axle 2 on unit 3
OPT_EXT_SP(3,2,1)   0 ! Disable built-in spring L21? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,2,2)   0 ! Disable built-in spring R21? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,2,1)   0 ; mm ! Initial compression of external spring L21 [I]
CMP_OFFSET(3,2,2)   0 ; mm ! Initial compression of external spring R21 [I]
! CMP_DESIGN(3,2,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L21
! CMP_DESIGN(3,2,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R21
DAUX(3,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 21
DMP_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L21 [I]
DMP_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R21 [I]
DMP_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L21 [I]
DMP_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R21 [I]
DMP_LEN(3,2,1)      0 ; mm ! [D] Length at design for damper L21 [I]
DMP_LEN(3,2,2)      0 ; mm ! [D] Length at design for damper R21 [I]
SPG_AX(3,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L21 [I]
SPG_AX(3,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R21 [I]
SPG_AY(3,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L21 [I]
SPG_AY(3,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R21 [I]
SPG_LEN(3,2,1)      0 ; mm ! [D] Length at design for spring L21 [I]
SPG_LEN(3,2,2)      0 ; mm ! [D] Length at design for spring R21 [I]
! FSA_DESIGN(3,2) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 21
! FSA_L(3,2) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  21
FS_OFFSET(3,2,1)    0 ; N ! Force offset subtracted from built-in spring L21 [I]
FS_OFFSET(3,2,2)    0 ; N ! Force offset subtracted from built-in spring R21 [I]
! FS_STATIC(3,2,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L21
! FS_STATIC(3,2,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R21
! FZA_L(3,2) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 21
! FZA_UL(3,2) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 21
! FZ_STATIC(3,2,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L21
! FZ_STATIC(3,2,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R21
! KA_ROLL(3,2) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 21
L_DAMPERS(3,2)   1000 ; mm ! Distance between dampers on axle 21 [I]
Y_DAMPERS(3,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 21 [I]
L_JNC_STOPS(3,2) 1000 ; mm ! Distance between jounce stops on axle 21 [I]
L_REB_STOPS(3,2) 1000 ; mm ! Distance between rebound stops on axle 21 [I]
L_SPRINGS(3,2)   1000 ; mm ! Distance between springs on axle 21 [I]
Y_SPRINGS(3,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 21 [I]
L_SPG_ADJ(3,2,1)    0 ; mm ! Upper seat height increase for spring L21 [I]
L_SPG_ADJ(3,2,2)    0 ; mm ! Upper seat height increase for spring R21 [I]
SPRING_COMP_BETA(3,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L21
SPRING_COMP_BETA(3,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R21
SPRING_EXT_BETA(3,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L21
SPRING_EXT_BETA(3,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R21

! Solid-axle suspension for axle 3 on unit 3
OPT_EXT_SP(3,3,1)   0 ! Disable built-in spring L22? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,3,2)   0 ! Disable built-in spring R22? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,3,1)   0 ; mm ! Initial compression of external spring L22 [I]
CMP_OFFSET(3,3,2)   0 ; mm ! Initial compression of external spring R22 [I]
! CMP_DESIGN(3,3,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L22
! CMP_DESIGN(3,3,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R22
DAUX(3,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 22
DMP_AX(3,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L22 [I]
DMP_AX(3,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R22 [I]
DMP_AY(3,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L22 [I]
DMP_AY(3,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R22 [I]
DMP_LEN(3,3,1)      0 ; mm ! [D] Length at design for damper L22 [I]
DMP_LEN(3,3,2)      0 ; mm ! [D] Length at design for damper R22 [I]
SPG_AX(3,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L22 [I]
SPG_AX(3,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R22 [I]
SPG_AY(3,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L22 [I]
SPG_AY(3,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R22 [I]
SPG_LEN(3,3,1)      0 ; mm ! [D] Length at design for spring L22 [I]
SPG_LEN(3,3,2)      0 ; mm ! [D] Length at design for spring R22 [I]
! FSA_DESIGN(3,3) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 22
! FSA_L(3,3) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  22
FS_OFFSET(3,3,1)    0 ; N ! Force offset subtracted from built-in spring L22 [I]
FS_OFFSET(3,3,2)    0 ; N ! Force offset subtracted from built-in spring R22 [I]
! FS_STATIC(3,3,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L22
! FS_STATIC(3,3,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R22
! FZA_L(3,3) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 22
! FZA_UL(3,3) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 22
! FZ_STATIC(3,3,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L22
! FZ_STATIC(3,3,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R22
! KA_ROLL(3,3) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 22
L_DAMPERS(3,3)   1000 ; mm ! Distance between dampers on axle 22 [I]
Y_DAMPERS(3,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 22 [I]
L_JNC_STOPS(3,3) 1000 ; mm ! Distance between jounce stops on axle 22 [I]
L_REB_STOPS(3,3) 1000 ; mm ! Distance between rebound stops on axle 22 [I]
L_SPRINGS(3,3)   1000 ; mm ! Distance between springs on axle 22 [I]
Y_SPRINGS(3,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 22 [I]
L_SPG_ADJ(3,3,1)    0 ; mm ! Upper seat height increase for spring L22 [I]
L_SPG_ADJ(3,3,2)    0 ; mm ! Upper seat height increase for spring R22 [I]
SPRING_COMP_BETA(3,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L22
SPRING_COMP_BETA(3,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R22
SPRING_EXT_BETA(3,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L22
SPRING_EXT_BETA(3,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R22

! Solid-axle suspension for axle 4 on unit 3
OPT_EXT_SP(3,4,1)   0 ! Disable built-in spring L23? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,4,2)   0 ! Disable built-in spring R23? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,4) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,4,1)   0 ; mm ! Initial compression of external spring L23 [I]
CMP_OFFSET(3,4,2)   0 ; mm ! Initial compression of external spring R23 [I]
! CMP_DESIGN(3,4,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L23
! CMP_DESIGN(3,4,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R23
DAUX(3,4)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 23
DMP_AX(3,4,1)       0 ; deg ! [D] Front-view inclination angle for damper L23 [I]
DMP_AX(3,4,2)       0 ; deg ! [D] Front-view inclination angle for damper R23 [I]
DMP_AY(3,4,1)       0 ; deg ! [D] Side-view inclination angle for damper L23 [I]
DMP_AY(3,4,2)       0 ; deg ! [D] Side-view inclination angle for damper R23 [I]
DMP_LEN(3,4,1)      0 ; mm ! [D] Length at design for damper L23 [I]
DMP_LEN(3,4,2)      0 ; mm ! [D] Length at design for damper R23 [I]
SPG_AX(3,4,1)       0 ; deg ! [D] Front-view inclination angle for spring L23 [I]
SPG_AX(3,4,2)       0 ; deg ! [D] Front-view inclination angle for spring R23 [I]
SPG_AY(3,4,1)       0 ; deg ! [D] Side-view inclination angle for spring L23 [I]
SPG_AY(3,4,2)       0 ; deg ! [D] Side-view inclination angle for spring R23 [I]
SPG_LEN(3,4,1)      0 ; mm ! [D] Length at design for spring L23 [I]
SPG_LEN(3,4,2)      0 ; mm ! [D] Length at design for spring R23 [I]
! FSA_DESIGN(3,4) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 23
! FSA_L(3,4) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  23
FS_OFFSET(3,4,1)    0 ; N ! Force offset subtracted from built-in spring L23 [I]
FS_OFFSET(3,4,2)    0 ; N ! Force offset subtracted from built-in spring R23 [I]
! FS_STATIC(3,4,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L23
! FS_STATIC(3,4,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R23
! FZA_L(3,4) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 23
! FZA_UL(3,4) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 23
! FZ_STATIC(3,4,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L23
! FZ_STATIC(3,4,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R23
! KA_ROLL(3,4) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 23
L_DAMPERS(3,4)   1000 ; mm ! Distance between dampers on axle 23 [I]
Y_DAMPERS(3,4)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 23 [I]
L_JNC_STOPS(3,4) 1000 ; mm ! Distance between jounce stops on axle 23 [I]
L_REB_STOPS(3,4) 1000 ; mm ! Distance between rebound stops on axle 23 [I]
L_SPRINGS(3,4)   1000 ; mm ! Distance between springs on axle 23 [I]
Y_SPRINGS(3,4)      0 ; mm ! [D] Lateral (left) offset of springs on axle 23 [I]
L_SPG_ADJ(3,4,1)    0 ; mm ! Upper seat height increase for spring L23 [I]
L_SPG_ADJ(3,4,2)    0 ; mm ! Upper seat height increase for spring R23 [I]
SPRING_COMP_BETA(3,4,1) 2 ; mm ! Ref. hysteretic compression, ride spring L23
SPRING_COMP_BETA(3,4,2) 2 ; mm ! Ref. hysteretic compression, ride spring R23
SPRING_EXT_BETA(3,4,1) 2 ; mm ! Ref. hysteretic extension, ride spring L23
SPRING_EXT_BETA(3,4,2) 2 ; mm ! Ref. hysteretic extension, ride spring R23

! Solid-axle suspension for axle 5 on unit 3
OPT_EXT_SP(3,5,1)   0 ! Disable built-in spring L24? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,5,2)   0 ! Disable built-in spring R24? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,5) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,5,1)   0 ; mm ! Initial compression of external spring L24 [I]
CMP_OFFSET(3,5,2)   0 ; mm ! Initial compression of external spring R24 [I]
! CMP_DESIGN(3,5,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L24
! CMP_DESIGN(3,5,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R24
DAUX(3,5)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 24
DMP_AX(3,5,1)       0 ; deg ! [D] Front-view inclination angle for damper L24 [I]
DMP_AX(3,5,2)       0 ; deg ! [D] Front-view inclination angle for damper R24 [I]
DMP_AY(3,5,1)       0 ; deg ! [D] Side-view inclination angle for damper L24 [I]
DMP_AY(3,5,2)       0 ; deg ! [D] Side-view inclination angle for damper R24 [I]
DMP_LEN(3,5,1)      0 ; mm ! [D] Length at design for damper L24 [I]
DMP_LEN(3,5,2)      0 ; mm ! [D] Length at design for damper R24 [I]
SPG_AX(3,5,1)       0 ; deg ! [D] Front-view inclination angle for spring L24 [I]
SPG_AX(3,5,2)       0 ; deg ! [D] Front-view inclination angle for spring R24 [I]
SPG_AY(3,5,1)       0 ; deg ! [D] Side-view inclination angle for spring L24 [I]
SPG_AY(3,5,2)       0 ; deg ! [D] Side-view inclination angle for spring R24 [I]
SPG_LEN(3,5,1)      0 ; mm ! [D] Length at design for spring L24 [I]
SPG_LEN(3,5,2)      0 ; mm ! [D] Length at design for spring R24 [I]
! FSA_DESIGN(3,5) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 24
! FSA_L(3,5) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  24
FS_OFFSET(3,5,1)    0 ; N ! Force offset subtracted from built-in spring L24 [I]
FS_OFFSET(3,5,2)    0 ; N ! Force offset subtracted from built-in spring R24 [I]
! FS_STATIC(3,5,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L24
! FS_STATIC(3,5,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R24
! FZA_L(3,5) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 24
! FZA_UL(3,5) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 24
! FZ_STATIC(3,5,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L24
! FZ_STATIC(3,5,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R24
! KA_ROLL(3,5) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 24
L_DAMPERS(3,5)   1000 ; mm ! Distance between dampers on axle 24 [I]
Y_DAMPERS(3,5)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 24 [I]
L_JNC_STOPS(3,5) 1000 ; mm ! Distance between jounce stops on axle 24 [I]
L_REB_STOPS(3,5) 1000 ; mm ! Distance between rebound stops on axle 24 [I]
L_SPRINGS(3,5)   1000 ; mm ! Distance between springs on axle 24 [I]
Y_SPRINGS(3,5)      0 ; mm ! [D] Lateral (left) offset of springs on axle 24 [I]
L_SPG_ADJ(3,5,1)    0 ; mm ! Upper seat height increase for spring L24 [I]
L_SPG_ADJ(3,5,2)    0 ; mm ! Upper seat height increase for spring R24 [I]
SPRING_COMP_BETA(3,5,1) 2 ; mm ! Ref. hysteretic compression, ride spring L24
SPRING_COMP_BETA(3,5,2) 2 ; mm ! Ref. hysteretic compression, ride spring R24
SPRING_EXT_BETA(3,5,1) 2 ; mm ! Ref. hysteretic extension, ride spring L24
SPRING_EXT_BETA(3,5,2) 2 ; mm ! Ref. hysteretic extension, ride spring R24

! Solid-axle suspension for axle 6 on unit 3
OPT_EXT_SP(3,6,1)   0 ! Disable built-in spring L25? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,6,2)   0 ! Disable built-in spring R25? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,6) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,6,1)   0 ; mm ! Initial compression of external spring L25 [I]
CMP_OFFSET(3,6,2)   0 ; mm ! Initial compression of external spring R25 [I]
! CMP_DESIGN(3,6,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L25
! CMP_DESIGN(3,6,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R25
DAUX(3,6)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 25
DMP_AX(3,6,1)       0 ; deg ! [D] Front-view inclination angle for damper L25 [I]
DMP_AX(3,6,2)       0 ; deg ! [D] Front-view inclination angle for damper R25 [I]
DMP_AY(3,6,1)       0 ; deg ! [D] Side-view inclination angle for damper L25 [I]
DMP_AY(3,6,2)       0 ; deg ! [D] Side-view inclination angle for damper R25 [I]
DMP_LEN(3,6,1)      0 ; mm ! [D] Length at design for damper L25 [I]
DMP_LEN(3,6,2)      0 ; mm ! [D] Length at design for damper R25 [I]
SPG_AX(3,6,1)       0 ; deg ! [D] Front-view inclination angle for spring L25 [I]
SPG_AX(3,6,2)       0 ; deg ! [D] Front-view inclination angle for spring R25 [I]
SPG_AY(3,6,1)       0 ; deg ! [D] Side-view inclination angle for spring L25 [I]
SPG_AY(3,6,2)       0 ; deg ! [D] Side-view inclination angle for spring R25 [I]
SPG_LEN(3,6,1)      0 ; mm ! [D] Length at design for spring L25 [I]
SPG_LEN(3,6,2)      0 ; mm ! [D] Length at design for spring R25 [I]
! FSA_DESIGN(3,6) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 25
! FSA_L(3,6) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  25
FS_OFFSET(3,6,1)    0 ; N ! Force offset subtracted from built-in spring L25 [I]
FS_OFFSET(3,6,2)    0 ; N ! Force offset subtracted from built-in spring R25 [I]
! FS_STATIC(3,6,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L25
! FS_STATIC(3,6,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R25
! FZA_L(3,6) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 25
! FZA_UL(3,6) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 25
! FZ_STATIC(3,6,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L25
! FZ_STATIC(3,6,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R25
! KA_ROLL(3,6) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 25
L_DAMPERS(3,6)   1000 ; mm ! Distance between dampers on axle 25 [I]
Y_DAMPERS(3,6)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 25 [I]
L_JNC_STOPS(3,6) 1000 ; mm ! Distance between jounce stops on axle 25 [I]
L_REB_STOPS(3,6) 1000 ; mm ! Distance between rebound stops on axle 25 [I]
L_SPRINGS(3,6)   1000 ; mm ! Distance between springs on axle 25 [I]
Y_SPRINGS(3,6)      0 ; mm ! [D] Lateral (left) offset of springs on axle 25 [I]
L_SPG_ADJ(3,6,1)    0 ; mm ! Upper seat height increase for spring L25 [I]
L_SPG_ADJ(3,6,2)    0 ; mm ! Upper seat height increase for spring R25 [I]
SPRING_COMP_BETA(3,6,1) 2 ; mm ! Ref. hysteretic compression, ride spring L25
SPRING_COMP_BETA(3,6,2) 2 ; mm ! Ref. hysteretic compression, ride spring R25
SPRING_EXT_BETA(3,6,1) 2 ; mm ! Ref. hysteretic extension, ride spring L25
SPRING_EXT_BETA(3,6,2) 2 ; mm ! Ref. hysteretic extension, ride spring R25

! Solid-axle suspension for axle 7 on unit 3
OPT_EXT_SP(3,7,1)   0 ! Disable built-in spring L26? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,7,2)   0 ! Disable built-in spring R26? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,7) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,7,1)   0 ; mm ! Initial compression of external spring L26 [I]
CMP_OFFSET(3,7,2)   0 ; mm ! Initial compression of external spring R26 [I]
! CMP_DESIGN(3,7,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L26
! CMP_DESIGN(3,7,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R26
DAUX(3,7)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 26
DMP_AX(3,7,1)       0 ; deg ! [D] Front-view inclination angle for damper L26 [I]
DMP_AX(3,7,2)       0 ; deg ! [D] Front-view inclination angle for damper R26 [I]
DMP_AY(3,7,1)       0 ; deg ! [D] Side-view inclination angle for damper L26 [I]
DMP_AY(3,7,2)       0 ; deg ! [D] Side-view inclination angle for damper R26 [I]
DMP_LEN(3,7,1)      0 ; mm ! [D] Length at design for damper L26 [I]
DMP_LEN(3,7,2)      0 ; mm ! [D] Length at design for damper R26 [I]
SPG_AX(3,7,1)       0 ; deg ! [D] Front-view inclination angle for spring L26 [I]
SPG_AX(3,7,2)       0 ; deg ! [D] Front-view inclination angle for spring R26 [I]
SPG_AY(3,7,1)       0 ; deg ! [D] Side-view inclination angle for spring L26 [I]
SPG_AY(3,7,2)       0 ; deg ! [D] Side-view inclination angle for spring R26 [I]
SPG_LEN(3,7,1)      0 ; mm ! [D] Length at design for spring L26 [I]
SPG_LEN(3,7,2)      0 ; mm ! [D] Length at design for spring R26 [I]
! FSA_DESIGN(3,7) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 26
! FSA_L(3,7) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  26
FS_OFFSET(3,7,1)    0 ; N ! Force offset subtracted from built-in spring L26 [I]
FS_OFFSET(3,7,2)    0 ; N ! Force offset subtracted from built-in spring R26 [I]
! FS_STATIC(3,7,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L26
! FS_STATIC(3,7,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R26
! FZA_L(3,7) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 26
! FZA_UL(3,7) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 26
! FZ_STATIC(3,7,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L26
! FZ_STATIC(3,7,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R26
! KA_ROLL(3,7) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 26
L_DAMPERS(3,7)   1000 ; mm ! Distance between dampers on axle 26 [I]
Y_DAMPERS(3,7)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 26 [I]
L_JNC_STOPS(3,7) 1000 ; mm ! Distance between jounce stops on axle 26 [I]
L_REB_STOPS(3,7) 1000 ; mm ! Distance between rebound stops on axle 26 [I]
L_SPRINGS(3,7)   1000 ; mm ! Distance between springs on axle 26 [I]
Y_SPRINGS(3,7)      0 ; mm ! [D] Lateral (left) offset of springs on axle 26 [I]
L_SPG_ADJ(3,7,1)    0 ; mm ! Upper seat height increase for spring L26 [I]
L_SPG_ADJ(3,7,2)    0 ; mm ! Upper seat height increase for spring R26 [I]
SPRING_COMP_BETA(3,7,1) 2 ; mm ! Ref. hysteretic compression, ride spring L26
SPRING_COMP_BETA(3,7,2) 2 ; mm ! Ref. hysteretic compression, ride spring R26
SPRING_EXT_BETA(3,7,1) 2 ; mm ! Ref. hysteretic extension, ride spring L26
SPRING_EXT_BETA(3,7,2) 2 ; mm ! Ref. hysteretic extension, ride spring R26

! Solid-axle suspension for axle 8 on unit 3
OPT_EXT_SP(3,8,1)   0 ! Disable built-in spring L27? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,8,2)   0 ! Disable built-in spring R27? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,8) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,8,1)   0 ; mm ! Initial compression of external spring L27 [I]
CMP_OFFSET(3,8,2)   0 ; mm ! Initial compression of external spring R27 [I]
! CMP_DESIGN(3,8,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L27
! CMP_DESIGN(3,8,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R27
DAUX(3,8)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 27
DMP_AX(3,8,1)       0 ; deg ! [D] Front-view inclination angle for damper L27 [I]
DMP_AX(3,8,2)       0 ; deg ! [D] Front-view inclination angle for damper R27 [I]
DMP_AY(3,8,1)       0 ; deg ! [D] Side-view inclination angle for damper L27 [I]
DMP_AY(3,8,2)       0 ; deg ! [D] Side-view inclination angle for damper R27 [I]
DMP_LEN(3,8,1)      0 ; mm ! [D] Length at design for damper L27 [I]
DMP_LEN(3,8,2)      0 ; mm ! [D] Length at design for damper R27 [I]
SPG_AX(3,8,1)       0 ; deg ! [D] Front-view inclination angle for spring L27 [I]
SPG_AX(3,8,2)       0 ; deg ! [D] Front-view inclination angle for spring R27 [I]
SPG_AY(3,8,1)       0 ; deg ! [D] Side-view inclination angle for spring L27 [I]
SPG_AY(3,8,2)       0 ; deg ! [D] Side-view inclination angle for spring R27 [I]
SPG_LEN(3,8,1)      0 ; mm ! [D] Length at design for spring L27 [I]
SPG_LEN(3,8,2)      0 ; mm ! [D] Length at design for spring R27 [I]
! FSA_DESIGN(3,8) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 27
! FSA_L(3,8) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  27
FS_OFFSET(3,8,1)    0 ; N ! Force offset subtracted from built-in spring L27 [I]
FS_OFFSET(3,8,2)    0 ; N ! Force offset subtracted from built-in spring R27 [I]
! FS_STATIC(3,8,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L27
! FS_STATIC(3,8,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R27
! FZA_L(3,8) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 27
! FZA_UL(3,8) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 27
! FZ_STATIC(3,8,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L27
! FZ_STATIC(3,8,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R27
! KA_ROLL(3,8) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 27
L_DAMPERS(3,8)   1000 ; mm ! Distance between dampers on axle 27 [I]
Y_DAMPERS(3,8)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 27 [I]
L_JNC_STOPS(3,8) 1000 ; mm ! Distance between jounce stops on axle 27 [I]
L_REB_STOPS(3,8) 1000 ; mm ! Distance between rebound stops on axle 27 [I]
L_SPRINGS(3,8)   1000 ; mm ! Distance between springs on axle 27 [I]
Y_SPRINGS(3,8)      0 ; mm ! [D] Lateral (left) offset of springs on axle 27 [I]
L_SPG_ADJ(3,8,1)    0 ; mm ! Upper seat height increase for spring L27 [I]
L_SPG_ADJ(3,8,2)    0 ; mm ! Upper seat height increase for spring R27 [I]
SPRING_COMP_BETA(3,8,1) 2 ; mm ! Ref. hysteretic compression, ride spring L27
SPRING_COMP_BETA(3,8,2) 2 ; mm ! Ref. hysteretic compression, ride spring R27
SPRING_EXT_BETA(3,8,1) 2 ; mm ! Ref. hysteretic extension, ride spring L27
SPRING_EXT_BETA(3,8,2) 2 ; mm ! Ref. hysteretic extension, ride spring R27

! Solid-axle suspension for axle 9 on unit 3
OPT_EXT_SP(3,9,1)   0 ! Disable built-in spring L28? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,9,2)   0 ! Disable built-in spring R28? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,9) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,9,1)   0 ; mm ! Initial compression of external spring L28 [I]
CMP_OFFSET(3,9,2)   0 ; mm ! Initial compression of external spring R28 [I]
! CMP_DESIGN(3,9,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L28
! CMP_DESIGN(3,9,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R28
DAUX(3,9)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 28
DMP_AX(3,9,1)       0 ; deg ! [D] Front-view inclination angle for damper L28 [I]
DMP_AX(3,9,2)       0 ; deg ! [D] Front-view inclination angle for damper R28 [I]
DMP_AY(3,9,1)       0 ; deg ! [D] Side-view inclination angle for damper L28 [I]
DMP_AY(3,9,2)       0 ; deg ! [D] Side-view inclination angle for damper R28 [I]
DMP_LEN(3,9,1)      0 ; mm ! [D] Length at design for damper L28 [I]
DMP_LEN(3,9,2)      0 ; mm ! [D] Length at design for damper R28 [I]
SPG_AX(3,9,1)       0 ; deg ! [D] Front-view inclination angle for spring L28 [I]
SPG_AX(3,9,2)       0 ; deg ! [D] Front-view inclination angle for spring R28 [I]
SPG_AY(3,9,1)       0 ; deg ! [D] Side-view inclination angle for spring L28 [I]
SPG_AY(3,9,2)       0 ; deg ! [D] Side-view inclination angle for spring R28 [I]
SPG_LEN(3,9,1)      0 ; mm ! [D] Length at design for spring L28 [I]
SPG_LEN(3,9,2)      0 ; mm ! [D] Length at design for spring R28 [I]
! FSA_DESIGN(3,9) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 28
! FSA_L(3,9) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  28
FS_OFFSET(3,9,1)    0 ; N ! Force offset subtracted from built-in spring L28 [I]
FS_OFFSET(3,9,2)    0 ; N ! Force offset subtracted from built-in spring R28 [I]
! FS_STATIC(3,9,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L28
! FS_STATIC(3,9,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R28
! FZA_L(3,9) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 28
! FZA_UL(3,9) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 28
! FZ_STATIC(3,9,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L28
! FZ_STATIC(3,9,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R28
! KA_ROLL(3,9) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 28
L_DAMPERS(3,9)   1000 ; mm ! Distance between dampers on axle 28 [I]
Y_DAMPERS(3,9)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 28 [I]
L_JNC_STOPS(3,9) 1000 ; mm ! Distance between jounce stops on axle 28 [I]
L_REB_STOPS(3,9) 1000 ; mm ! Distance between rebound stops on axle 28 [I]
L_SPRINGS(3,9)   1000 ; mm ! Distance between springs on axle 28 [I]
Y_SPRINGS(3,9)      0 ; mm ! [D] Lateral (left) offset of springs on axle 28 [I]
L_SPG_ADJ(3,9,1)    0 ; mm ! Upper seat height increase for spring L28 [I]
L_SPG_ADJ(3,9,2)    0 ; mm ! Upper seat height increase for spring R28 [I]
SPRING_COMP_BETA(3,9,1) 2 ; mm ! Ref. hysteretic compression, ride spring L28
SPRING_COMP_BETA(3,9,2) 2 ; mm ! Ref. hysteretic compression, ride spring R28
SPRING_EXT_BETA(3,9,1) 2 ; mm ! Ref. hysteretic extension, ride spring L28
SPRING_EXT_BETA(3,9,2) 2 ; mm ! Ref. hysteretic extension, ride spring R28

! Solid-axle suspension for axle 10 on unit 3
OPT_EXT_SP(3,10,1)  0 ! Disable built-in spring L29? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,10,2)  0 ! Disable built-in spring R29? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,10) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,10,1)  0 ; mm ! Initial compression of external spring L29 [I]
CMP_OFFSET(3,10,2)  0 ; mm ! Initial compression of external spring R29 [I]
! CMP_DESIGN(3,10,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L29
! CMP_DESIGN(3,10,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R29
DAUX(3,10)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 29
DMP_AX(3,10,1)      0 ; deg ! [D] Front-view inclination angle for damper L29 [I]
DMP_AX(3,10,2)      0 ; deg ! [D] Front-view inclination angle for damper R29 [I]
DMP_AY(3,10,1)      0 ; deg ! [D] Side-view inclination angle for damper L29 [I]
DMP_AY(3,10,2)      0 ; deg ! [D] Side-view inclination angle for damper R29 [I]
DMP_LEN(3,10,1)     0 ; mm ! [D] Length at design for damper L29 [I]
DMP_LEN(3,10,2)     0 ; mm ! [D] Length at design for damper R29 [I]
SPG_AX(3,10,1)      0 ; deg ! [D] Front-view inclination angle for spring L29 [I]
SPG_AX(3,10,2)      0 ; deg ! [D] Front-view inclination angle for spring R29 [I]
SPG_AY(3,10,1)      0 ; deg ! [D] Side-view inclination angle for spring L29 [I]
SPG_AY(3,10,2)      0 ; deg ! [D] Side-view inclination angle for spring R29 [I]
SPG_LEN(3,10,1)     0 ; mm ! [D] Length at design for spring L29 [I]
SPG_LEN(3,10,2)     0 ; mm ! [D] Length at design for spring R29 [I]
! FSA_DESIGN(3,10) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 29
! FSA_L(3,10) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  29
FS_OFFSET(3,10,1)   0 ; N ! Force offset subtracted from built-in spring L29 [I]
FS_OFFSET(3,10,2)   0 ; N ! Force offset subtracted from built-in spring R29 [I]
! FS_STATIC(3,10,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L29
! FS_STATIC(3,10,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R29
! FZA_L(3,10) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 29
! FZA_UL(3,10) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 29
! FZ_STATIC(3,10,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L29
! FZ_STATIC(3,10,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R29
! KA_ROLL(3,10) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 29
L_DAMPERS(3,10)  1000 ; mm ! Distance between dampers on axle 29 [I]
Y_DAMPERS(3,10)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 29 [I]
L_JNC_STOPS(3,10) 1000 ; mm ! Distance between jounce stops on axle 29 [I]
L_REB_STOPS(3,10) 1000 ; mm ! Distance between rebound stops on axle 29 [I]
L_SPRINGS(3,10)  1000 ; mm ! Distance between springs on axle 29 [I]
Y_SPRINGS(3,10)     0 ; mm ! [D] Lateral (left) offset of springs on axle 29 [I]
L_SPG_ADJ(3,10,1)   0 ; mm ! Upper seat height increase for spring L29 [I]
L_SPG_ADJ(3,10,2)   0 ; mm ! Upper seat height increase for spring R29 [I]
SPRING_COMP_BETA(3,10,1) 2 ; mm ! Ref. hysteretic compression, ride spring L29
SPRING_COMP_BETA(3,10,2) 2 ; mm ! Ref. hysteretic compression, ride spring R29
SPRING_EXT_BETA(3,10,1) 2 ; mm ! Ref. hysteretic extension, ride spring L29
SPRING_EXT_BETA(3,10,2) 2 ; mm ! Ref. hysteretic extension, ride spring R29

! Solid-axle suspension for axle 11 on unit 3
OPT_EXT_SP(3,11,1)  0 ! Disable built-in spring L30? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,11,2)  0 ! Disable built-in spring R30? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,11) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,11,1)  0 ; mm ! Initial compression of external spring L30 [I]
CMP_OFFSET(3,11,2)  0 ; mm ! Initial compression of external spring R30 [I]
! CMP_DESIGN(3,11,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L30
! CMP_DESIGN(3,11,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R30
DAUX(3,11)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 30
DMP_AX(3,11,1)      0 ; deg ! [D] Front-view inclination angle for damper L30 [I]
DMP_AX(3,11,2)      0 ; deg ! [D] Front-view inclination angle for damper R30 [I]
DMP_AY(3,11,1)      0 ; deg ! [D] Side-view inclination angle for damper L30 [I]
DMP_AY(3,11,2)      0 ; deg ! [D] Side-view inclination angle for damper R30 [I]
DMP_LEN(3,11,1)     0 ; mm ! [D] Length at design for damper L30 [I]
DMP_LEN(3,11,2)     0 ; mm ! [D] Length at design for damper R30 [I]
SPG_AX(3,11,1)      0 ; deg ! [D] Front-view inclination angle for spring L30 [I]
SPG_AX(3,11,2)      0 ; deg ! [D] Front-view inclination angle for spring R30 [I]
SPG_AY(3,11,1)      0 ; deg ! [D] Side-view inclination angle for spring L30 [I]
SPG_AY(3,11,2)      0 ; deg ! [D] Side-view inclination angle for spring R30 [I]
SPG_LEN(3,11,1)     0 ; mm ! [D] Length at design for spring L30 [I]
SPG_LEN(3,11,2)     0 ; mm ! [D] Length at design for spring R30 [I]
! FSA_DESIGN(3,11) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 30
! FSA_L(3,11) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  30
FS_OFFSET(3,11,1)   0 ; N ! Force offset subtracted from built-in spring L30 [I]
FS_OFFSET(3,11,2)   0 ; N ! Force offset subtracted from built-in spring R30 [I]
! FS_STATIC(3,11,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L30
! FS_STATIC(3,11,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R30
! FZA_L(3,11) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 30
! FZA_UL(3,11) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 30
! FZ_STATIC(3,11,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L30
! FZ_STATIC(3,11,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R30
! KA_ROLL(3,11) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 30
L_DAMPERS(3,11)  1000 ; mm ! Distance between dampers on axle 30 [I]
Y_DAMPERS(3,11)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 30 [I]
L_JNC_STOPS(3,11) 1000 ; mm ! Distance between jounce stops on axle 30 [I]
L_REB_STOPS(3,11) 1000 ; mm ! Distance between rebound stops on axle 30 [I]
L_SPRINGS(3,11)  1000 ; mm ! Distance between springs on axle 30 [I]
Y_SPRINGS(3,11)     0 ; mm ! [D] Lateral (left) offset of springs on axle 30 [I]
L_SPG_ADJ(3,11,1)   0 ; mm ! Upper seat height increase for spring L30 [I]
L_SPG_ADJ(3,11,2)   0 ; mm ! Upper seat height increase for spring R30 [I]
SPRING_COMP_BETA(3,11,1) 2 ; mm ! Ref. hysteretic compression, ride spring L30
SPRING_COMP_BETA(3,11,2) 2 ; mm ! Ref. hysteretic compression, ride spring R30
SPRING_EXT_BETA(3,11,1) 2 ; mm ! Ref. hysteretic extension, ride spring L30
SPRING_EXT_BETA(3,11,2) 2 ; mm ! Ref. hysteretic extension, ride spring R30

! Solid-axle suspension for axle 12 on unit 3
OPT_EXT_SP(3,12,1)  0 ! Disable built-in spring L31? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,12,2)  0 ! Disable built-in spring R31? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,12) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,12,1)  0 ; mm ! Initial compression of external spring L31 [I]
CMP_OFFSET(3,12,2)  0 ; mm ! Initial compression of external spring R31 [I]
! CMP_DESIGN(3,12,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L31
! CMP_DESIGN(3,12,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R31
DAUX(3,12)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 31
DMP_AX(3,12,1)      0 ; deg ! [D] Front-view inclination angle for damper L31 [I]
DMP_AX(3,12,2)      0 ; deg ! [D] Front-view inclination angle for damper R31 [I]
DMP_AY(3,12,1)      0 ; deg ! [D] Side-view inclination angle for damper L31 [I]
DMP_AY(3,12,2)      0 ; deg ! [D] Side-view inclination angle for damper R31 [I]
DMP_LEN(3,12,1)     0 ; mm ! [D] Length at design for damper L31 [I]
DMP_LEN(3,12,2)     0 ; mm ! [D] Length at design for damper R31 [I]
SPG_AX(3,12,1)      0 ; deg ! [D] Front-view inclination angle for spring L31 [I]
SPG_AX(3,12,2)      0 ; deg ! [D] Front-view inclination angle for spring R31 [I]
SPG_AY(3,12,1)      0 ; deg ! [D] Side-view inclination angle for spring L31 [I]
SPG_AY(3,12,2)      0 ; deg ! [D] Side-view inclination angle for spring R31 [I]
SPG_LEN(3,12,1)     0 ; mm ! [D] Length at design for spring L31 [I]
SPG_LEN(3,12,2)     0 ; mm ! [D] Length at design for spring R31 [I]
! FSA_DESIGN(3,12) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 31
! FSA_L(3,12) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  31
FS_OFFSET(3,12,1)   0 ; N ! Force offset subtracted from built-in spring L31 [I]
FS_OFFSET(3,12,2)   0 ; N ! Force offset subtracted from built-in spring R31 [I]
! FS_STATIC(3,12,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L31
! FS_STATIC(3,12,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R31
! FZA_L(3,12) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 31
! FZA_UL(3,12) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 31
! FZ_STATIC(3,12,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L31
! FZ_STATIC(3,12,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R31
! KA_ROLL(3,12) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 31
L_DAMPERS(3,12)  1000 ; mm ! Distance between dampers on axle 31 [I]
Y_DAMPERS(3,12)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 31 [I]
L_JNC_STOPS(3,12) 1000 ; mm ! Distance between jounce stops on axle 31 [I]
L_REB_STOPS(3,12) 1000 ; mm ! Distance between rebound stops on axle 31 [I]
L_SPRINGS(3,12)  1000 ; mm ! Distance between springs on axle 31 [I]
Y_SPRINGS(3,12)     0 ; mm ! [D] Lateral (left) offset of springs on axle 31 [I]
L_SPG_ADJ(3,12,1)   0 ; mm ! Upper seat height increase for spring L31 [I]
L_SPG_ADJ(3,12,2)   0 ; mm ! Upper seat height increase for spring R31 [I]
SPRING_COMP_BETA(3,12,1) 2 ; mm ! Ref. hysteretic compression, ride spring L31
SPRING_COMP_BETA(3,12,2) 2 ; mm ! Ref. hysteretic compression, ride spring R31
SPRING_EXT_BETA(3,12,1) 2 ; mm ! Ref. hysteretic extension, ride spring L31
SPRING_EXT_BETA(3,12,2) 2 ; mm ! Ref. hysteretic extension, ride spring R31

! Solid-axle suspension for axle 13 on unit 3
OPT_EXT_SP(3,13,1)  0 ! Disable built-in spring L32? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,13,2)  0 ! Disable built-in spring R32? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,13) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,13,1)  0 ; mm ! Initial compression of external spring L32 [I]
CMP_OFFSET(3,13,2)  0 ; mm ! Initial compression of external spring R32 [I]
! CMP_DESIGN(3,13,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L32
! CMP_DESIGN(3,13,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R32
DAUX(3,13)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 32
DMP_AX(3,13,1)      0 ; deg ! [D] Front-view inclination angle for damper L32 [I]
DMP_AX(3,13,2)      0 ; deg ! [D] Front-view inclination angle for damper R32 [I]
DMP_AY(3,13,1)      0 ; deg ! [D] Side-view inclination angle for damper L32 [I]
DMP_AY(3,13,2)      0 ; deg ! [D] Side-view inclination angle for damper R32 [I]
DMP_LEN(3,13,1)     0 ; mm ! [D] Length at design for damper L32 [I]
DMP_LEN(3,13,2)     0 ; mm ! [D] Length at design for damper R32 [I]
SPG_AX(3,13,1)      0 ; deg ! [D] Front-view inclination angle for spring L32 [I]
SPG_AX(3,13,2)      0 ; deg ! [D] Front-view inclination angle for spring R32 [I]
SPG_AY(3,13,1)      0 ; deg ! [D] Side-view inclination angle for spring L32 [I]
SPG_AY(3,13,2)      0 ; deg ! [D] Side-view inclination angle for spring R32 [I]
SPG_LEN(3,13,1)     0 ; mm ! [D] Length at design for spring L32 [I]
SPG_LEN(3,13,2)     0 ; mm ! [D] Length at design for spring R32 [I]
! FSA_DESIGN(3,13) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 32
! FSA_L(3,13) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  32
FS_OFFSET(3,13,1)   0 ; N ! Force offset subtracted from built-in spring L32 [I]
FS_OFFSET(3,13,2)   0 ; N ! Force offset subtracted from built-in spring R32 [I]
! FS_STATIC(3,13,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L32
! FS_STATIC(3,13,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R32
! FZA_L(3,13) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 32
! FZA_UL(3,13) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 32
! FZ_STATIC(3,13,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L32
! FZ_STATIC(3,13,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R32
! KA_ROLL(3,13) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 32
L_DAMPERS(3,13)  1000 ; mm ! Distance between dampers on axle 32 [I]
Y_DAMPERS(3,13)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 32 [I]
L_JNC_STOPS(3,13) 1000 ; mm ! Distance between jounce stops on axle 32 [I]
L_REB_STOPS(3,13) 1000 ; mm ! Distance between rebound stops on axle 32 [I]
L_SPRINGS(3,13)  1000 ; mm ! Distance between springs on axle 32 [I]
Y_SPRINGS(3,13)     0 ; mm ! [D] Lateral (left) offset of springs on axle 32 [I]
L_SPG_ADJ(3,13,1)   0 ; mm ! Upper seat height increase for spring L32 [I]
L_SPG_ADJ(3,13,2)   0 ; mm ! Upper seat height increase for spring R32 [I]
SPRING_COMP_BETA(3,13,1) 2 ; mm ! Ref. hysteretic compression, ride spring L32
SPRING_COMP_BETA(3,13,2) 2 ; mm ! Ref. hysteretic compression, ride spring R32
SPRING_EXT_BETA(3,13,1) 2 ; mm ! Ref. hysteretic extension, ride spring L32
SPRING_EXT_BETA(3,13,2) 2 ; mm ! Ref. hysteretic extension, ride spring R32

! Solid-axle suspension for axle 14 on unit 3
OPT_EXT_SP(3,14,1)  0 ! Disable built-in spring L33? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(3,14,2)  0 ! Disable built-in spring R33? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(3,14) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(3,14,1)  0 ; mm ! Initial compression of external spring L33 [I]
CMP_OFFSET(3,14,2)  0 ; mm ! Initial compression of external spring R33 [I]
! CMP_DESIGN(3,14,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L33
! CMP_DESIGN(3,14,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R33
DAUX(3,14)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 33
DMP_AX(3,14,1)      0 ; deg ! [D] Front-view inclination angle for damper L33 [I]
DMP_AX(3,14,2)      0 ; deg ! [D] Front-view inclination angle for damper R33 [I]
DMP_AY(3,14,1)      0 ; deg ! [D] Side-view inclination angle for damper L33 [I]
DMP_AY(3,14,2)      0 ; deg ! [D] Side-view inclination angle for damper R33 [I]
DMP_LEN(3,14,1)     0 ; mm ! [D] Length at design for damper L33 [I]
DMP_LEN(3,14,2)     0 ; mm ! [D] Length at design for damper R33 [I]
SPG_AX(3,14,1)      0 ; deg ! [D] Front-view inclination angle for spring L33 [I]
SPG_AX(3,14,2)      0 ; deg ! [D] Front-view inclination angle for spring R33 [I]
SPG_AY(3,14,1)      0 ; deg ! [D] Side-view inclination angle for spring L33 [I]
SPG_AY(3,14,2)      0 ; deg ! [D] Side-view inclination angle for spring R33 [I]
SPG_LEN(3,14,1)     0 ; mm ! [D] Length at design for spring L33 [I]
SPG_LEN(3,14,2)     0 ; mm ! [D] Length at design for spring R33 [I]
! FSA_DESIGN(3,14) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 33
! FSA_L(3,14) 5525.219928 ; N ! CALC -- Static suspension load, laden, axle  33
FS_OFFSET(3,14,1)   0 ; N ! Force offset subtracted from built-in spring L33 [I]
FS_OFFSET(3,14,2)   0 ; N ! Force offset subtracted from built-in spring R33 [I]
! FS_STATIC(3,14,1) 2762.609964 ; N ! CALC -- Static spring force, laden, spring L33
! FS_STATIC(3,14,2) 2762.609964 ; N ! CALC -- Static spring force, laden, spring R33
! FZA_L(3,14) 16636.15438 ; N ! CALC -- Static ground load, laden, axle 33
! FZA_UL(3,14) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 33
! FZ_STATIC(3,14,1) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel L33
! FZ_STATIC(3,14,2) 8318.077189 ; N ! CALC -- Static ground force, laden, wheel R33
! KA_ROLL(3,14) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 33
L_DAMPERS(3,14)  1000 ; mm ! Distance between dampers on axle 33 [I]
Y_DAMPERS(3,14)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 33 [I]
L_JNC_STOPS(3,14) 1000 ; mm ! Distance between jounce stops on axle 33 [I]
L_REB_STOPS(3,14) 1000 ; mm ! Distance between rebound stops on axle 33 [I]
L_SPRINGS(3,14)  1000 ; mm ! Distance between springs on axle 33 [I]
Y_SPRINGS(3,14)     0 ; mm ! [D] Lateral (left) offset of springs on axle 33 [I]
L_SPG_ADJ(3,14,1)   0 ; mm ! Upper seat height increase for spring L33 [I]
L_SPG_ADJ(3,14,2)   0 ; mm ! Upper seat height increase for spring R33 [I]
SPRING_COMP_BETA(3,14,1) 2 ; mm ! Ref. hysteretic compression, ride spring L33
SPRING_COMP_BETA(3,14,2) 2 ; mm ! Ref. hysteretic compression, ride spring R33
SPRING_EXT_BETA(3,14,1) 2 ; mm ! Ref. hysteretic extension, ride spring L33
SPRING_EXT_BETA(3,14,2) 2 ; mm ! Ref. hysteretic extension, ride spring R33

! Solid-axle suspension for axle 1 on unit 4
OPT_EXT_SP(4,1,1)   0 ! Disable built-in spring L34? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,1,2)   0 ! Disable built-in spring R34? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,1) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,1,1)   0 ; mm ! Initial compression of external spring L34 [I]
CMP_OFFSET(4,1,2)   0 ; mm ! Initial compression of external spring R34 [I]
! CMP_DESIGN(4,1,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L34
! CMP_DESIGN(4,1,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R34
DAUX(4,1)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 34
DMP_AX(4,1,1)       0 ; deg ! [D] Front-view inclination angle for damper L34 [I]
DMP_AX(4,1,2)       0 ; deg ! [D] Front-view inclination angle for damper R34 [I]
DMP_AY(4,1,1)       0 ; deg ! [D] Side-view inclination angle for damper L34 [I]
DMP_AY(4,1,2)       0 ; deg ! [D] Side-view inclination angle for damper R34 [I]
DMP_LEN(4,1,1)      0 ; mm ! [D] Length at design for damper L34 [I]
DMP_LEN(4,1,2)      0 ; mm ! [D] Length at design for damper R34 [I]
SPG_AX(4,1,1)       0 ; deg ! [D] Front-view inclination angle for spring L34 [I]
SPG_AX(4,1,2)       0 ; deg ! [D] Front-view inclination angle for spring R34 [I]
SPG_AY(4,1,1)       0 ; deg ! [D] Side-view inclination angle for spring L34 [I]
SPG_AY(4,1,2)       0 ; deg ! [D] Side-view inclination angle for spring R34 [I]
SPG_LEN(4,1,1)      0 ; mm ! [D] Length at design for spring L34 [I]
SPG_LEN(4,1,2)      0 ; mm ! [D] Length at design for spring R34 [I]
! FSA_DESIGN(4,1) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 34
! FSA_L(4,1) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  34
FS_OFFSET(4,1,1)    0 ; N ! Force offset subtracted from built-in spring L34 [I]
FS_OFFSET(4,1,2)    0 ; N ! Force offset subtracted from built-in spring R34 [I]
! FS_STATIC(4,1,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L34
! FS_STATIC(4,1,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R34
! FZA_L(4,1) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 34
! FZA_UL(4,1) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 34
! FZ_STATIC(4,1,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L34
! FZ_STATIC(4,1,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R34
! KA_ROLL(4,1) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 34
L_DAMPERS(4,1)   1000 ; mm ! Distance between dampers on axle 34 [I]
Y_DAMPERS(4,1)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 34 [I]
L_JNC_STOPS(4,1) 1000 ; mm ! Distance between jounce stops on axle 34 [I]
L_REB_STOPS(4,1) 1000 ; mm ! Distance between rebound stops on axle 34 [I]
L_SPRINGS(4,1)   1000 ; mm ! Distance between springs on axle 34 [I]
Y_SPRINGS(4,1)      0 ; mm ! [D] Lateral (left) offset of springs on axle 34 [I]
L_SPG_ADJ(4,1,1)    0 ; mm ! Upper seat height increase for spring L34 [I]
L_SPG_ADJ(4,1,2)    0 ; mm ! Upper seat height increase for spring R34 [I]
SPRING_COMP_BETA(4,1,1) 2 ; mm ! Ref. hysteretic compression, ride spring L34
SPRING_COMP_BETA(4,1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R34
SPRING_EXT_BETA(4,1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L34
SPRING_EXT_BETA(4,1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R34

! Solid-axle suspension for axle 2 on unit 4
OPT_EXT_SP(4,2,1)   0 ! Disable built-in spring L35? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,2,2)   0 ! Disable built-in spring R35? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,2) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,2,1)   0 ; mm ! Initial compression of external spring L35 [I]
CMP_OFFSET(4,2,2)   0 ; mm ! Initial compression of external spring R35 [I]
! CMP_DESIGN(4,2,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L35
! CMP_DESIGN(4,2,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R35
DAUX(4,2)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 35
DMP_AX(4,2,1)       0 ; deg ! [D] Front-view inclination angle for damper L35 [I]
DMP_AX(4,2,2)       0 ; deg ! [D] Front-view inclination angle for damper R35 [I]
DMP_AY(4,2,1)       0 ; deg ! [D] Side-view inclination angle for damper L35 [I]
DMP_AY(4,2,2)       0 ; deg ! [D] Side-view inclination angle for damper R35 [I]
DMP_LEN(4,2,1)      0 ; mm ! [D] Length at design for damper L35 [I]
DMP_LEN(4,2,2)      0 ; mm ! [D] Length at design for damper R35 [I]
SPG_AX(4,2,1)       0 ; deg ! [D] Front-view inclination angle for spring L35 [I]
SPG_AX(4,2,2)       0 ; deg ! [D] Front-view inclination angle for spring R35 [I]
SPG_AY(4,2,1)       0 ; deg ! [D] Side-view inclination angle for spring L35 [I]
SPG_AY(4,2,2)       0 ; deg ! [D] Side-view inclination angle for spring R35 [I]
SPG_LEN(4,2,1)      0 ; mm ! [D] Length at design for spring L35 [I]
SPG_LEN(4,2,2)      0 ; mm ! [D] Length at design for spring R35 [I]
! FSA_DESIGN(4,2) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 35
! FSA_L(4,2) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  35
FS_OFFSET(4,2,1)    0 ; N ! Force offset subtracted from built-in spring L35 [I]
FS_OFFSET(4,2,2)    0 ; N ! Force offset subtracted from built-in spring R35 [I]
! FS_STATIC(4,2,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L35
! FS_STATIC(4,2,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R35
! FZA_L(4,2) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 35
! FZA_UL(4,2) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 35
! FZ_STATIC(4,2,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L35
! FZ_STATIC(4,2,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R35
! KA_ROLL(4,2) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 35
L_DAMPERS(4,2)   1000 ; mm ! Distance between dampers on axle 35 [I]
Y_DAMPERS(4,2)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 35 [I]
L_JNC_STOPS(4,2) 1000 ; mm ! Distance between jounce stops on axle 35 [I]
L_REB_STOPS(4,2) 1000 ; mm ! Distance between rebound stops on axle 35 [I]
L_SPRINGS(4,2)   1000 ; mm ! Distance between springs on axle 35 [I]
Y_SPRINGS(4,2)      0 ; mm ! [D] Lateral (left) offset of springs on axle 35 [I]
L_SPG_ADJ(4,2,1)    0 ; mm ! Upper seat height increase for spring L35 [I]
L_SPG_ADJ(4,2,2)    0 ; mm ! Upper seat height increase for spring R35 [I]
SPRING_COMP_BETA(4,2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L35
SPRING_COMP_BETA(4,2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R35
SPRING_EXT_BETA(4,2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L35
SPRING_EXT_BETA(4,2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R35

! Solid-axle suspension for axle 3 on unit 4
OPT_EXT_SP(4,3,1)   0 ! Disable built-in spring L36? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,3,2)   0 ! Disable built-in spring R36? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,3) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,3,1)   0 ; mm ! Initial compression of external spring L36 [I]
CMP_OFFSET(4,3,2)   0 ; mm ! Initial compression of external spring R36 [I]
! CMP_DESIGN(4,3,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L36
! CMP_DESIGN(4,3,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R36
DAUX(4,3)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 36
DMP_AX(4,3,1)       0 ; deg ! [D] Front-view inclination angle for damper L36 [I]
DMP_AX(4,3,2)       0 ; deg ! [D] Front-view inclination angle for damper R36 [I]
DMP_AY(4,3,1)       0 ; deg ! [D] Side-view inclination angle for damper L36 [I]
DMP_AY(4,3,2)       0 ; deg ! [D] Side-view inclination angle for damper R36 [I]
DMP_LEN(4,3,1)      0 ; mm ! [D] Length at design for damper L36 [I]
DMP_LEN(4,3,2)      0 ; mm ! [D] Length at design for damper R36 [I]
SPG_AX(4,3,1)       0 ; deg ! [D] Front-view inclination angle for spring L36 [I]
SPG_AX(4,3,2)       0 ; deg ! [D] Front-view inclination angle for spring R36 [I]
SPG_AY(4,3,1)       0 ; deg ! [D] Side-view inclination angle for spring L36 [I]
SPG_AY(4,3,2)       0 ; deg ! [D] Side-view inclination angle for spring R36 [I]
SPG_LEN(4,3,1)      0 ; mm ! [D] Length at design for spring L36 [I]
SPG_LEN(4,3,2)      0 ; mm ! [D] Length at design for spring R36 [I]
! FSA_DESIGN(4,3) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 36
! FSA_L(4,3) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  36
FS_OFFSET(4,3,1)    0 ; N ! Force offset subtracted from built-in spring L36 [I]
FS_OFFSET(4,3,2)    0 ; N ! Force offset subtracted from built-in spring R36 [I]
! FS_STATIC(4,3,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L36
! FS_STATIC(4,3,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R36
! FZA_L(4,3) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 36
! FZA_UL(4,3) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 36
! FZ_STATIC(4,3,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L36
! FZ_STATIC(4,3,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R36
! KA_ROLL(4,3) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 36
L_DAMPERS(4,3)   1000 ; mm ! Distance between dampers on axle 36 [I]
Y_DAMPERS(4,3)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 36 [I]
L_JNC_STOPS(4,3) 1000 ; mm ! Distance between jounce stops on axle 36 [I]
L_REB_STOPS(4,3) 1000 ; mm ! Distance between rebound stops on axle 36 [I]
L_SPRINGS(4,3)   1000 ; mm ! Distance between springs on axle 36 [I]
Y_SPRINGS(4,3)      0 ; mm ! [D] Lateral (left) offset of springs on axle 36 [I]
L_SPG_ADJ(4,3,1)    0 ; mm ! Upper seat height increase for spring L36 [I]
L_SPG_ADJ(4,3,2)    0 ; mm ! Upper seat height increase for spring R36 [I]
SPRING_COMP_BETA(4,3,1) 2 ; mm ! Ref. hysteretic compression, ride spring L36
SPRING_COMP_BETA(4,3,2) 2 ; mm ! Ref. hysteretic compression, ride spring R36
SPRING_EXT_BETA(4,3,1) 2 ; mm ! Ref. hysteretic extension, ride spring L36
SPRING_EXT_BETA(4,3,2) 2 ; mm ! Ref. hysteretic extension, ride spring R36

! Solid-axle suspension for axle 4 on unit 4
OPT_EXT_SP(4,4,1)   0 ! Disable built-in spring L37? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,4,2)   0 ! Disable built-in spring R37? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,4) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,4,1)   0 ; mm ! Initial compression of external spring L37 [I]
CMP_OFFSET(4,4,2)   0 ; mm ! Initial compression of external spring R37 [I]
! CMP_DESIGN(4,4,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L37
! CMP_DESIGN(4,4,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R37
DAUX(4,4)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 37
DMP_AX(4,4,1)       0 ; deg ! [D] Front-view inclination angle for damper L37 [I]
DMP_AX(4,4,2)       0 ; deg ! [D] Front-view inclination angle for damper R37 [I]
DMP_AY(4,4,1)       0 ; deg ! [D] Side-view inclination angle for damper L37 [I]
DMP_AY(4,4,2)       0 ; deg ! [D] Side-view inclination angle for damper R37 [I]
DMP_LEN(4,4,1)      0 ; mm ! [D] Length at design for damper L37 [I]
DMP_LEN(4,4,2)      0 ; mm ! [D] Length at design for damper R37 [I]
SPG_AX(4,4,1)       0 ; deg ! [D] Front-view inclination angle for spring L37 [I]
SPG_AX(4,4,2)       0 ; deg ! [D] Front-view inclination angle for spring R37 [I]
SPG_AY(4,4,1)       0 ; deg ! [D] Side-view inclination angle for spring L37 [I]
SPG_AY(4,4,2)       0 ; deg ! [D] Side-view inclination angle for spring R37 [I]
SPG_LEN(4,4,1)      0 ; mm ! [D] Length at design for spring L37 [I]
SPG_LEN(4,4,2)      0 ; mm ! [D] Length at design for spring R37 [I]
! FSA_DESIGN(4,4) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 37
! FSA_L(4,4) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  37
FS_OFFSET(4,4,1)    0 ; N ! Force offset subtracted from built-in spring L37 [I]
FS_OFFSET(4,4,2)    0 ; N ! Force offset subtracted from built-in spring R37 [I]
! FS_STATIC(4,4,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L37
! FS_STATIC(4,4,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R37
! FZA_L(4,4) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 37
! FZA_UL(4,4) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 37
! FZ_STATIC(4,4,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L37
! FZ_STATIC(4,4,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R37
! KA_ROLL(4,4) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 37
L_DAMPERS(4,4)   1000 ; mm ! Distance between dampers on axle 37 [I]
Y_DAMPERS(4,4)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 37 [I]
L_JNC_STOPS(4,4) 1000 ; mm ! Distance between jounce stops on axle 37 [I]
L_REB_STOPS(4,4) 1000 ; mm ! Distance between rebound stops on axle 37 [I]
L_SPRINGS(4,4)   1000 ; mm ! Distance between springs on axle 37 [I]
Y_SPRINGS(4,4)      0 ; mm ! [D] Lateral (left) offset of springs on axle 37 [I]
L_SPG_ADJ(4,4,1)    0 ; mm ! Upper seat height increase for spring L37 [I]
L_SPG_ADJ(4,4,2)    0 ; mm ! Upper seat height increase for spring R37 [I]
SPRING_COMP_BETA(4,4,1) 2 ; mm ! Ref. hysteretic compression, ride spring L37
SPRING_COMP_BETA(4,4,2) 2 ; mm ! Ref. hysteretic compression, ride spring R37
SPRING_EXT_BETA(4,4,1) 2 ; mm ! Ref. hysteretic extension, ride spring L37
SPRING_EXT_BETA(4,4,2) 2 ; mm ! Ref. hysteretic extension, ride spring R37

! Solid-axle suspension for axle 5 on unit 4
OPT_EXT_SP(4,5,1)   0 ! Disable built-in spring L38? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,5,2)   0 ! Disable built-in spring R38? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,5) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,5,1)   0 ; mm ! Initial compression of external spring L38 [I]
CMP_OFFSET(4,5,2)   0 ; mm ! Initial compression of external spring R38 [I]
! CMP_DESIGN(4,5,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L38
! CMP_DESIGN(4,5,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R38
DAUX(4,5)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 38
DMP_AX(4,5,1)       0 ; deg ! [D] Front-view inclination angle for damper L38 [I]
DMP_AX(4,5,2)       0 ; deg ! [D] Front-view inclination angle for damper R38 [I]
DMP_AY(4,5,1)       0 ; deg ! [D] Side-view inclination angle for damper L38 [I]
DMP_AY(4,5,2)       0 ; deg ! [D] Side-view inclination angle for damper R38 [I]
DMP_LEN(4,5,1)      0 ; mm ! [D] Length at design for damper L38 [I]
DMP_LEN(4,5,2)      0 ; mm ! [D] Length at design for damper R38 [I]
SPG_AX(4,5,1)       0 ; deg ! [D] Front-view inclination angle for spring L38 [I]
SPG_AX(4,5,2)       0 ; deg ! [D] Front-view inclination angle for spring R38 [I]
SPG_AY(4,5,1)       0 ; deg ! [D] Side-view inclination angle for spring L38 [I]
SPG_AY(4,5,2)       0 ; deg ! [D] Side-view inclination angle for spring R38 [I]
SPG_LEN(4,5,1)      0 ; mm ! [D] Length at design for spring L38 [I]
SPG_LEN(4,5,2)      0 ; mm ! [D] Length at design for spring R38 [I]
! FSA_DESIGN(4,5) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 38
! FSA_L(4,5) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  38
FS_OFFSET(4,5,1)    0 ; N ! Force offset subtracted from built-in spring L38 [I]
FS_OFFSET(4,5,2)    0 ; N ! Force offset subtracted from built-in spring R38 [I]
! FS_STATIC(4,5,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L38
! FS_STATIC(4,5,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R38
! FZA_L(4,5) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 38
! FZA_UL(4,5) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 38
! FZ_STATIC(4,5,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L38
! FZ_STATIC(4,5,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R38
! KA_ROLL(4,5) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 38
L_DAMPERS(4,5)   1000 ; mm ! Distance between dampers on axle 38 [I]
Y_DAMPERS(4,5)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 38 [I]
L_JNC_STOPS(4,5) 1000 ; mm ! Distance between jounce stops on axle 38 [I]
L_REB_STOPS(4,5) 1000 ; mm ! Distance between rebound stops on axle 38 [I]
L_SPRINGS(4,5)   1000 ; mm ! Distance between springs on axle 38 [I]
Y_SPRINGS(4,5)      0 ; mm ! [D] Lateral (left) offset of springs on axle 38 [I]
L_SPG_ADJ(4,5,1)    0 ; mm ! Upper seat height increase for spring L38 [I]
L_SPG_ADJ(4,5,2)    0 ; mm ! Upper seat height increase for spring R38 [I]
SPRING_COMP_BETA(4,5,1) 2 ; mm ! Ref. hysteretic compression, ride spring L38
SPRING_COMP_BETA(4,5,2) 2 ; mm ! Ref. hysteretic compression, ride spring R38
SPRING_EXT_BETA(4,5,1) 2 ; mm ! Ref. hysteretic extension, ride spring L38
SPRING_EXT_BETA(4,5,2) 2 ; mm ! Ref. hysteretic extension, ride spring R38

! Solid-axle suspension for axle 6 on unit 4
OPT_EXT_SP(4,6,1)   0 ! Disable built-in spring L39? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,6,2)   0 ! Disable built-in spring R39? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,6) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,6,1)   0 ; mm ! Initial compression of external spring L39 [I]
CMP_OFFSET(4,6,2)   0 ; mm ! Initial compression of external spring R39 [I]
! CMP_DESIGN(4,6,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L39
! CMP_DESIGN(4,6,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R39
DAUX(4,6)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 39
DMP_AX(4,6,1)       0 ; deg ! [D] Front-view inclination angle for damper L39 [I]
DMP_AX(4,6,2)       0 ; deg ! [D] Front-view inclination angle for damper R39 [I]
DMP_AY(4,6,1)       0 ; deg ! [D] Side-view inclination angle for damper L39 [I]
DMP_AY(4,6,2)       0 ; deg ! [D] Side-view inclination angle for damper R39 [I]
DMP_LEN(4,6,1)      0 ; mm ! [D] Length at design for damper L39 [I]
DMP_LEN(4,6,2)      0 ; mm ! [D] Length at design for damper R39 [I]
SPG_AX(4,6,1)       0 ; deg ! [D] Front-view inclination angle for spring L39 [I]
SPG_AX(4,6,2)       0 ; deg ! [D] Front-view inclination angle for spring R39 [I]
SPG_AY(4,6,1)       0 ; deg ! [D] Side-view inclination angle for spring L39 [I]
SPG_AY(4,6,2)       0 ; deg ! [D] Side-view inclination angle for spring R39 [I]
SPG_LEN(4,6,1)      0 ; mm ! [D] Length at design for spring L39 [I]
SPG_LEN(4,6,2)      0 ; mm ! [D] Length at design for spring R39 [I]
! FSA_DESIGN(4,6) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 39
! FSA_L(4,6) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  39
FS_OFFSET(4,6,1)    0 ; N ! Force offset subtracted from built-in spring L39 [I]
FS_OFFSET(4,6,2)    0 ; N ! Force offset subtracted from built-in spring R39 [I]
! FS_STATIC(4,6,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L39
! FS_STATIC(4,6,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R39
! FZA_L(4,6) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 39
! FZA_UL(4,6) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 39
! FZ_STATIC(4,6,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L39
! FZ_STATIC(4,6,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R39
! KA_ROLL(4,6) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 39
L_DAMPERS(4,6)   1000 ; mm ! Distance between dampers on axle 39 [I]
Y_DAMPERS(4,6)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 39 [I]
L_JNC_STOPS(4,6) 1000 ; mm ! Distance between jounce stops on axle 39 [I]
L_REB_STOPS(4,6) 1000 ; mm ! Distance between rebound stops on axle 39 [I]
L_SPRINGS(4,6)   1000 ; mm ! Distance between springs on axle 39 [I]
Y_SPRINGS(4,6)      0 ; mm ! [D] Lateral (left) offset of springs on axle 39 [I]
L_SPG_ADJ(4,6,1)    0 ; mm ! Upper seat height increase for spring L39 [I]
L_SPG_ADJ(4,6,2)    0 ; mm ! Upper seat height increase for spring R39 [I]
SPRING_COMP_BETA(4,6,1) 2 ; mm ! Ref. hysteretic compression, ride spring L39
SPRING_COMP_BETA(4,6,2) 2 ; mm ! Ref. hysteretic compression, ride spring R39
SPRING_EXT_BETA(4,6,1) 2 ; mm ! Ref. hysteretic extension, ride spring L39
SPRING_EXT_BETA(4,6,2) 2 ; mm ! Ref. hysteretic extension, ride spring R39

! Solid-axle suspension for axle 7 on unit 4
OPT_EXT_SP(4,7,1)   0 ! Disable built-in spring L40? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,7,2)   0 ! Disable built-in spring R40? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,7) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,7,1)   0 ; mm ! Initial compression of external spring L40 [I]
CMP_OFFSET(4,7,2)   0 ; mm ! Initial compression of external spring R40 [I]
! CMP_DESIGN(4,7,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L40
! CMP_DESIGN(4,7,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R40
DAUX(4,7)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 40
DMP_AX(4,7,1)       0 ; deg ! [D] Front-view inclination angle for damper L40 [I]
DMP_AX(4,7,2)       0 ; deg ! [D] Front-view inclination angle for damper R40 [I]
DMP_AY(4,7,1)       0 ; deg ! [D] Side-view inclination angle for damper L40 [I]
DMP_AY(4,7,2)       0 ; deg ! [D] Side-view inclination angle for damper R40 [I]
DMP_LEN(4,7,1)      0 ; mm ! [D] Length at design for damper L40 [I]
DMP_LEN(4,7,2)      0 ; mm ! [D] Length at design for damper R40 [I]
SPG_AX(4,7,1)       0 ; deg ! [D] Front-view inclination angle for spring L40 [I]
SPG_AX(4,7,2)       0 ; deg ! [D] Front-view inclination angle for spring R40 [I]
SPG_AY(4,7,1)       0 ; deg ! [D] Side-view inclination angle for spring L40 [I]
SPG_AY(4,7,2)       0 ; deg ! [D] Side-view inclination angle for spring R40 [I]
SPG_LEN(4,7,1)      0 ; mm ! [D] Length at design for spring L40 [I]
SPG_LEN(4,7,2)      0 ; mm ! [D] Length at design for spring R40 [I]
! FSA_DESIGN(4,7) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 40
! FSA_L(4,7) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  40
FS_OFFSET(4,7,1)    0 ; N ! Force offset subtracted from built-in spring L40 [I]
FS_OFFSET(4,7,2)    0 ; N ! Force offset subtracted from built-in spring R40 [I]
! FS_STATIC(4,7,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L40
! FS_STATIC(4,7,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R40
! FZA_L(4,7) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 40
! FZA_UL(4,7) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 40
! FZ_STATIC(4,7,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L40
! FZ_STATIC(4,7,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R40
! KA_ROLL(4,7) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 40
L_DAMPERS(4,7)   1000 ; mm ! Distance between dampers on axle 40 [I]
Y_DAMPERS(4,7)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 40 [I]
L_JNC_STOPS(4,7) 1000 ; mm ! Distance between jounce stops on axle 40 [I]
L_REB_STOPS(4,7) 1000 ; mm ! Distance between rebound stops on axle 40 [I]
L_SPRINGS(4,7)   1000 ; mm ! Distance between springs on axle 40 [I]
Y_SPRINGS(4,7)      0 ; mm ! [D] Lateral (left) offset of springs on axle 40 [I]
L_SPG_ADJ(4,7,1)    0 ; mm ! Upper seat height increase for spring L40 [I]
L_SPG_ADJ(4,7,2)    0 ; mm ! Upper seat height increase for spring R40 [I]
SPRING_COMP_BETA(4,7,1) 2 ; mm ! Ref. hysteretic compression, ride spring L40
SPRING_COMP_BETA(4,7,2) 2 ; mm ! Ref. hysteretic compression, ride spring R40
SPRING_EXT_BETA(4,7,1) 2 ; mm ! Ref. hysteretic extension, ride spring L40
SPRING_EXT_BETA(4,7,2) 2 ; mm ! Ref. hysteretic extension, ride spring R40

! Solid-axle suspension for axle 8 on unit 4
OPT_EXT_SP(4,8,1)   0 ! Disable built-in spring L41? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,8,2)   0 ! Disable built-in spring R41? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,8) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,8,1)   0 ; mm ! Initial compression of external spring L41 [I]
CMP_OFFSET(4,8,2)   0 ; mm ! Initial compression of external spring R41 [I]
! CMP_DESIGN(4,8,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L41
! CMP_DESIGN(4,8,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R41
DAUX(4,8)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 41
DMP_AX(4,8,1)       0 ; deg ! [D] Front-view inclination angle for damper L41 [I]
DMP_AX(4,8,2)       0 ; deg ! [D] Front-view inclination angle for damper R41 [I]
DMP_AY(4,8,1)       0 ; deg ! [D] Side-view inclination angle for damper L41 [I]
DMP_AY(4,8,2)       0 ; deg ! [D] Side-view inclination angle for damper R41 [I]
DMP_LEN(4,8,1)      0 ; mm ! [D] Length at design for damper L41 [I]
DMP_LEN(4,8,2)      0 ; mm ! [D] Length at design for damper R41 [I]
SPG_AX(4,8,1)       0 ; deg ! [D] Front-view inclination angle for spring L41 [I]
SPG_AX(4,8,2)       0 ; deg ! [D] Front-view inclination angle for spring R41 [I]
SPG_AY(4,8,1)       0 ; deg ! [D] Side-view inclination angle for spring L41 [I]
SPG_AY(4,8,2)       0 ; deg ! [D] Side-view inclination angle for spring R41 [I]
SPG_LEN(4,8,1)      0 ; mm ! [D] Length at design for spring L41 [I]
SPG_LEN(4,8,2)      0 ; mm ! [D] Length at design for spring R41 [I]
! FSA_DESIGN(4,8) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 41
! FSA_L(4,8) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  41
FS_OFFSET(4,8,1)    0 ; N ! Force offset subtracted from built-in spring L41 [I]
FS_OFFSET(4,8,2)    0 ; N ! Force offset subtracted from built-in spring R41 [I]
! FS_STATIC(4,8,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L41
! FS_STATIC(4,8,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R41
! FZA_L(4,8) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 41
! FZA_UL(4,8) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 41
! FZ_STATIC(4,8,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L41
! FZ_STATIC(4,8,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R41
! KA_ROLL(4,8) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 41
L_DAMPERS(4,8)   1000 ; mm ! Distance between dampers on axle 41 [I]
Y_DAMPERS(4,8)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 41 [I]
L_JNC_STOPS(4,8) 1000 ; mm ! Distance between jounce stops on axle 41 [I]
L_REB_STOPS(4,8) 1000 ; mm ! Distance between rebound stops on axle 41 [I]
L_SPRINGS(4,8)   1000 ; mm ! Distance between springs on axle 41 [I]
Y_SPRINGS(4,8)      0 ; mm ! [D] Lateral (left) offset of springs on axle 41 [I]
L_SPG_ADJ(4,8,1)    0 ; mm ! Upper seat height increase for spring L41 [I]
L_SPG_ADJ(4,8,2)    0 ; mm ! Upper seat height increase for spring R41 [I]
SPRING_COMP_BETA(4,8,1) 2 ; mm ! Ref. hysteretic compression, ride spring L41
SPRING_COMP_BETA(4,8,2) 2 ; mm ! Ref. hysteretic compression, ride spring R41
SPRING_EXT_BETA(4,8,1) 2 ; mm ! Ref. hysteretic extension, ride spring L41
SPRING_EXT_BETA(4,8,2) 2 ; mm ! Ref. hysteretic extension, ride spring R41

! Solid-axle suspension for axle 9 on unit 4
OPT_EXT_SP(4,9,1)   0 ! Disable built-in spring L42? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,9,2)   0 ! Disable built-in spring R42? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,9) 1 ! [D] Adjust compliance tables to avoid
                                  ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,9,1)   0 ; mm ! Initial compression of external spring L42 [I]
CMP_OFFSET(4,9,2)   0 ; mm ! Initial compression of external spring R42 [I]
! CMP_DESIGN(4,9,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! L42
! CMP_DESIGN(4,9,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                ! R42
DAUX(4,9)           0 ; N-m-s/deg ! Auxiliary roll damping, axle 42
DMP_AX(4,9,1)       0 ; deg ! [D] Front-view inclination angle for damper L42 [I]
DMP_AX(4,9,2)       0 ; deg ! [D] Front-view inclination angle for damper R42 [I]
DMP_AY(4,9,1)       0 ; deg ! [D] Side-view inclination angle for damper L42 [I]
DMP_AY(4,9,2)       0 ; deg ! [D] Side-view inclination angle for damper R42 [I]
DMP_LEN(4,9,1)      0 ; mm ! [D] Length at design for damper L42 [I]
DMP_LEN(4,9,2)      0 ; mm ! [D] Length at design for damper R42 [I]
SPG_AX(4,9,1)       0 ; deg ! [D] Front-view inclination angle for spring L42 [I]
SPG_AX(4,9,2)       0 ; deg ! [D] Front-view inclination angle for spring R42 [I]
SPG_AY(4,9,1)       0 ; deg ! [D] Side-view inclination angle for spring L42 [I]
SPG_AY(4,9,2)       0 ; deg ! [D] Side-view inclination angle for spring R42 [I]
SPG_LEN(4,9,1)      0 ; mm ! [D] Length at design for spring L42 [I]
SPG_LEN(4,9,2)      0 ; mm ! [D] Length at design for spring R42 [I]
! FSA_DESIGN(4,9) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 42
! FSA_L(4,9) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  42
FS_OFFSET(4,9,1)    0 ; N ! Force offset subtracted from built-in spring L42 [I]
FS_OFFSET(4,9,2)    0 ; N ! Force offset subtracted from built-in spring R42 [I]
! FS_STATIC(4,9,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L42
! FS_STATIC(4,9,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R42
! FZA_L(4,9) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 42
! FZA_UL(4,9) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 42
! FZ_STATIC(4,9,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L42
! FZ_STATIC(4,9,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R42
! KA_ROLL(4,9) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 42
L_DAMPERS(4,9)   1000 ; mm ! Distance between dampers on axle 42 [I]
Y_DAMPERS(4,9)      0 ; mm ! [D] Lateral (left) offset of dampers on axle 42 [I]
L_JNC_STOPS(4,9) 1000 ; mm ! Distance between jounce stops on axle 42 [I]
L_REB_STOPS(4,9) 1000 ; mm ! Distance between rebound stops on axle 42 [I]
L_SPRINGS(4,9)   1000 ; mm ! Distance between springs on axle 42 [I]
Y_SPRINGS(4,9)      0 ; mm ! [D] Lateral (left) offset of springs on axle 42 [I]
L_SPG_ADJ(4,9,1)    0 ; mm ! Upper seat height increase for spring L42 [I]
L_SPG_ADJ(4,9,2)    0 ; mm ! Upper seat height increase for spring R42 [I]
SPRING_COMP_BETA(4,9,1) 2 ; mm ! Ref. hysteretic compression, ride spring L42
SPRING_COMP_BETA(4,9,2) 2 ; mm ! Ref. hysteretic compression, ride spring R42
SPRING_EXT_BETA(4,9,1) 2 ; mm ! Ref. hysteretic extension, ride spring L42
SPRING_EXT_BETA(4,9,2) 2 ; mm ! Ref. hysteretic extension, ride spring R42

! Solid-axle suspension for axle 10 on unit 4
OPT_EXT_SP(4,10,1)  0 ! Disable built-in spring L43? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,10,2)  0 ! Disable built-in spring R43? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,10) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,10,1)  0 ; mm ! Initial compression of external spring L43 [I]
CMP_OFFSET(4,10,2)  0 ; mm ! Initial compression of external spring R43 [I]
! CMP_DESIGN(4,10,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L43
! CMP_DESIGN(4,10,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R43
DAUX(4,10)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 43
DMP_AX(4,10,1)      0 ; deg ! [D] Front-view inclination angle for damper L43 [I]
DMP_AX(4,10,2)      0 ; deg ! [D] Front-view inclination angle for damper R43 [I]
DMP_AY(4,10,1)      0 ; deg ! [D] Side-view inclination angle for damper L43 [I]
DMP_AY(4,10,2)      0 ; deg ! [D] Side-view inclination angle for damper R43 [I]
DMP_LEN(4,10,1)     0 ; mm ! [D] Length at design for damper L43 [I]
DMP_LEN(4,10,2)     0 ; mm ! [D] Length at design for damper R43 [I]
SPG_AX(4,10,1)      0 ; deg ! [D] Front-view inclination angle for spring L43 [I]
SPG_AX(4,10,2)      0 ; deg ! [D] Front-view inclination angle for spring R43 [I]
SPG_AY(4,10,1)      0 ; deg ! [D] Side-view inclination angle for spring L43 [I]
SPG_AY(4,10,2)      0 ; deg ! [D] Side-view inclination angle for spring R43 [I]
SPG_LEN(4,10,1)     0 ; mm ! [D] Length at design for spring L43 [I]
SPG_LEN(4,10,2)     0 ; mm ! [D] Length at design for spring R43 [I]
! FSA_DESIGN(4,10) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 43
! FSA_L(4,10) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  43
FS_OFFSET(4,10,1)   0 ; N ! Force offset subtracted from built-in spring L43 [I]
FS_OFFSET(4,10,2)   0 ; N ! Force offset subtracted from built-in spring R43 [I]
! FS_STATIC(4,10,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L43
! FS_STATIC(4,10,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R43
! FZA_L(4,10) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 43
! FZA_UL(4,10) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 43
! FZ_STATIC(4,10,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L43
! FZ_STATIC(4,10,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R43
! KA_ROLL(4,10) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 43
L_DAMPERS(4,10)  1000 ; mm ! Distance between dampers on axle 43 [I]
Y_DAMPERS(4,10)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 43 [I]
L_JNC_STOPS(4,10) 1000 ; mm ! Distance between jounce stops on axle 43 [I]
L_REB_STOPS(4,10) 1000 ; mm ! Distance between rebound stops on axle 43 [I]
L_SPRINGS(4,10)  1000 ; mm ! Distance between springs on axle 43 [I]
Y_SPRINGS(4,10)     0 ; mm ! [D] Lateral (left) offset of springs on axle 43 [I]
L_SPG_ADJ(4,10,1)   0 ; mm ! Upper seat height increase for spring L43 [I]
L_SPG_ADJ(4,10,2)   0 ; mm ! Upper seat height increase for spring R43 [I]
SPRING_COMP_BETA(4,10,1) 2 ; mm ! Ref. hysteretic compression, ride spring L43
SPRING_COMP_BETA(4,10,2) 2 ; mm ! Ref. hysteretic compression, ride spring R43
SPRING_EXT_BETA(4,10,1) 2 ; mm ! Ref. hysteretic extension, ride spring L43
SPRING_EXT_BETA(4,10,2) 2 ; mm ! Ref. hysteretic extension, ride spring R43

! Solid-axle suspension for axle 11 on unit 4
OPT_EXT_SP(4,11,1)  0 ! Disable built-in spring L44? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,11,2)  0 ! Disable built-in spring R44? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,11) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,11,1)  0 ; mm ! Initial compression of external spring L44 [I]
CMP_OFFSET(4,11,2)  0 ; mm ! Initial compression of external spring R44 [I]
! CMP_DESIGN(4,11,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L44
! CMP_DESIGN(4,11,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R44
DAUX(4,11)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 44
DMP_AX(4,11,1)      0 ; deg ! [D] Front-view inclination angle for damper L44 [I]
DMP_AX(4,11,2)      0 ; deg ! [D] Front-view inclination angle for damper R44 [I]
DMP_AY(4,11,1)      0 ; deg ! [D] Side-view inclination angle for damper L44 [I]
DMP_AY(4,11,2)      0 ; deg ! [D] Side-view inclination angle for damper R44 [I]
DMP_LEN(4,11,1)     0 ; mm ! [D] Length at design for damper L44 [I]
DMP_LEN(4,11,2)     0 ; mm ! [D] Length at design for damper R44 [I]
SPG_AX(4,11,1)      0 ; deg ! [D] Front-view inclination angle for spring L44 [I]
SPG_AX(4,11,2)      0 ; deg ! [D] Front-view inclination angle for spring R44 [I]
SPG_AY(4,11,1)      0 ; deg ! [D] Side-view inclination angle for spring L44 [I]
SPG_AY(4,11,2)      0 ; deg ! [D] Side-view inclination angle for spring R44 [I]
SPG_LEN(4,11,1)     0 ; mm ! [D] Length at design for spring L44 [I]
SPG_LEN(4,11,2)     0 ; mm ! [D] Length at design for spring R44 [I]
! FSA_DESIGN(4,11) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 44
! FSA_L(4,11) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  44
FS_OFFSET(4,11,1)   0 ; N ! Force offset subtracted from built-in spring L44 [I]
FS_OFFSET(4,11,2)   0 ; N ! Force offset subtracted from built-in spring R44 [I]
! FS_STATIC(4,11,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L44
! FS_STATIC(4,11,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R44
! FZA_L(4,11) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 44
! FZA_UL(4,11) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 44
! FZ_STATIC(4,11,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L44
! FZ_STATIC(4,11,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R44
! KA_ROLL(4,11) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 44
L_DAMPERS(4,11)  1000 ; mm ! Distance between dampers on axle 44 [I]
Y_DAMPERS(4,11)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 44 [I]
L_JNC_STOPS(4,11) 1000 ; mm ! Distance between jounce stops on axle 44 [I]
L_REB_STOPS(4,11) 1000 ; mm ! Distance between rebound stops on axle 44 [I]
L_SPRINGS(4,11)  1000 ; mm ! Distance between springs on axle 44 [I]
Y_SPRINGS(4,11)     0 ; mm ! [D] Lateral (left) offset of springs on axle 44 [I]
L_SPG_ADJ(4,11,1)   0 ; mm ! Upper seat height increase for spring L44 [I]
L_SPG_ADJ(4,11,2)   0 ; mm ! Upper seat height increase for spring R44 [I]
SPRING_COMP_BETA(4,11,1) 2 ; mm ! Ref. hysteretic compression, ride spring L44
SPRING_COMP_BETA(4,11,2) 2 ; mm ! Ref. hysteretic compression, ride spring R44
SPRING_EXT_BETA(4,11,1) 2 ; mm ! Ref. hysteretic extension, ride spring L44
SPRING_EXT_BETA(4,11,2) 2 ; mm ! Ref. hysteretic extension, ride spring R44

! Solid-axle suspension for axle 12 on unit 4
OPT_EXT_SP(4,12,1)  0 ! Disable built-in spring L45? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,12,2)  0 ! Disable built-in spring R45? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,12) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,12,1)  0 ; mm ! Initial compression of external spring L45 [I]
CMP_OFFSET(4,12,2)  0 ; mm ! Initial compression of external spring R45 [I]
! CMP_DESIGN(4,12,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L45
! CMP_DESIGN(4,12,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R45
DAUX(4,12)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 45
DMP_AX(4,12,1)      0 ; deg ! [D] Front-view inclination angle for damper L45 [I]
DMP_AX(4,12,2)      0 ; deg ! [D] Front-view inclination angle for damper R45 [I]
DMP_AY(4,12,1)      0 ; deg ! [D] Side-view inclination angle for damper L45 [I]
DMP_AY(4,12,2)      0 ; deg ! [D] Side-view inclination angle for damper R45 [I]
DMP_LEN(4,12,1)     0 ; mm ! [D] Length at design for damper L45 [I]
DMP_LEN(4,12,2)     0 ; mm ! [D] Length at design for damper R45 [I]
SPG_AX(4,12,1)      0 ; deg ! [D] Front-view inclination angle for spring L45 [I]
SPG_AX(4,12,2)      0 ; deg ! [D] Front-view inclination angle for spring R45 [I]
SPG_AY(4,12,1)      0 ; deg ! [D] Side-view inclination angle for spring L45 [I]
SPG_AY(4,12,2)      0 ; deg ! [D] Side-view inclination angle for spring R45 [I]
SPG_LEN(4,12,1)     0 ; mm ! [D] Length at design for spring L45 [I]
SPG_LEN(4,12,2)     0 ; mm ! [D] Length at design for spring R45 [I]
! FSA_DESIGN(4,12) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 45
! FSA_L(4,12) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  45
FS_OFFSET(4,12,1)   0 ; N ! Force offset subtracted from built-in spring L45 [I]
FS_OFFSET(4,12,2)   0 ; N ! Force offset subtracted from built-in spring R45 [I]
! FS_STATIC(4,12,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L45
! FS_STATIC(4,12,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R45
! FZA_L(4,12) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 45
! FZA_UL(4,12) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 45
! FZ_STATIC(4,12,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L45
! FZ_STATIC(4,12,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R45
! KA_ROLL(4,12) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 45
L_DAMPERS(4,12)  1000 ; mm ! Distance between dampers on axle 45 [I]
Y_DAMPERS(4,12)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 45 [I]
L_JNC_STOPS(4,12) 1000 ; mm ! Distance between jounce stops on axle 45 [I]
L_REB_STOPS(4,12) 1000 ; mm ! Distance between rebound stops on axle 45 [I]
L_SPRINGS(4,12)  1000 ; mm ! Distance between springs on axle 45 [I]
Y_SPRINGS(4,12)     0 ; mm ! [D] Lateral (left) offset of springs on axle 45 [I]
L_SPG_ADJ(4,12,1)   0 ; mm ! Upper seat height increase for spring L45 [I]
L_SPG_ADJ(4,12,2)   0 ; mm ! Upper seat height increase for spring R45 [I]
SPRING_COMP_BETA(4,12,1) 2 ; mm ! Ref. hysteretic compression, ride spring L45
SPRING_COMP_BETA(4,12,2) 2 ; mm ! Ref. hysteretic compression, ride spring R45
SPRING_EXT_BETA(4,12,1) 2 ; mm ! Ref. hysteretic extension, ride spring L45
SPRING_EXT_BETA(4,12,2) 2 ; mm ! Ref. hysteretic extension, ride spring R45

! Solid-axle suspension for axle 13 on unit 4
OPT_EXT_SP(4,13,1)  0 ! Disable built-in spring L46? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,13,2)  0 ! Disable built-in spring R46? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,13) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,13,1)  0 ; mm ! Initial compression of external spring L46 [I]
CMP_OFFSET(4,13,2)  0 ; mm ! Initial compression of external spring R46 [I]
! CMP_DESIGN(4,13,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L46
! CMP_DESIGN(4,13,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R46
DAUX(4,13)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 46
DMP_AX(4,13,1)      0 ; deg ! [D] Front-view inclination angle for damper L46 [I]
DMP_AX(4,13,2)      0 ; deg ! [D] Front-view inclination angle for damper R46 [I]
DMP_AY(4,13,1)      0 ; deg ! [D] Side-view inclination angle for damper L46 [I]
DMP_AY(4,13,2)      0 ; deg ! [D] Side-view inclination angle for damper R46 [I]
DMP_LEN(4,13,1)     0 ; mm ! [D] Length at design for damper L46 [I]
DMP_LEN(4,13,2)     0 ; mm ! [D] Length at design for damper R46 [I]
SPG_AX(4,13,1)      0 ; deg ! [D] Front-view inclination angle for spring L46 [I]
SPG_AX(4,13,2)      0 ; deg ! [D] Front-view inclination angle for spring R46 [I]
SPG_AY(4,13,1)      0 ; deg ! [D] Side-view inclination angle for spring L46 [I]
SPG_AY(4,13,2)      0 ; deg ! [D] Side-view inclination angle for spring R46 [I]
SPG_LEN(4,13,1)     0 ; mm ! [D] Length at design for spring L46 [I]
SPG_LEN(4,13,2)     0 ; mm ! [D] Length at design for spring R46 [I]
! FSA_DESIGN(4,13) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 46
! FSA_L(4,13) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  46
FS_OFFSET(4,13,1)   0 ; N ! Force offset subtracted from built-in spring L46 [I]
FS_OFFSET(4,13,2)   0 ; N ! Force offset subtracted from built-in spring R46 [I]
! FS_STATIC(4,13,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L46
! FS_STATIC(4,13,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R46
! FZA_L(4,13) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 46
! FZA_UL(4,13) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 46
! FZ_STATIC(4,13,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L46
! FZ_STATIC(4,13,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R46
! KA_ROLL(4,13) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 46
L_DAMPERS(4,13)  1000 ; mm ! Distance between dampers on axle 46 [I]
Y_DAMPERS(4,13)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 46 [I]
L_JNC_STOPS(4,13) 1000 ; mm ! Distance between jounce stops on axle 46 [I]
L_REB_STOPS(4,13) 1000 ; mm ! Distance between rebound stops on axle 46 [I]
L_SPRINGS(4,13)  1000 ; mm ! Distance between springs on axle 46 [I]
Y_SPRINGS(4,13)     0 ; mm ! [D] Lateral (left) offset of springs on axle 46 [I]
L_SPG_ADJ(4,13,1)   0 ; mm ! Upper seat height increase for spring L46 [I]
L_SPG_ADJ(4,13,2)   0 ; mm ! Upper seat height increase for spring R46 [I]
SPRING_COMP_BETA(4,13,1) 2 ; mm ! Ref. hysteretic compression, ride spring L46
SPRING_COMP_BETA(4,13,2) 2 ; mm ! Ref. hysteretic compression, ride spring R46
SPRING_EXT_BETA(4,13,1) 2 ; mm ! Ref. hysteretic extension, ride spring L46
SPRING_EXT_BETA(4,13,2) 2 ; mm ! Ref. hysteretic extension, ride spring R46

! Solid-axle suspension for axle 14 on unit 4
OPT_EXT_SP(4,14,1)  0 ! Disable built-in spring L47? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(4,14,2)  0 ! Disable built-in spring R47? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(4,14) 1 ! [D] Adjust compliance tables to avoid
                                   ! double-counting? 1 -> Adjust, 0 -> No [I]
CMP_OFFSET(4,14,1)  0 ; mm ! Initial compression of external spring L47 [I]
CMP_OFFSET(4,14,2)  0 ; mm ! Initial compression of external spring R47 [I]
! CMP_DESIGN(4,14,1) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! L47
! CMP_DESIGN(4,14,2) 3.917656607 ; mm ! CALC -- Compression at design load, spring
                                 ! R47
DAUX(4,14)          0 ; N-m-s/deg ! Auxiliary roll damping, axle 47
DMP_AX(4,14,1)      0 ; deg ! [D] Front-view inclination angle for damper L47 [I]
DMP_AX(4,14,2)      0 ; deg ! [D] Front-view inclination angle for damper R47 [I]
DMP_AY(4,14,1)      0 ; deg ! [D] Side-view inclination angle for damper L47 [I]
DMP_AY(4,14,2)      0 ; deg ! [D] Side-view inclination angle for damper R47 [I]
DMP_LEN(4,14,1)     0 ; mm ! [D] Length at design for damper L47 [I]
DMP_LEN(4,14,2)     0 ; mm ! [D] Length at design for damper R47 [I]
SPG_AX(4,14,1)      0 ; deg ! [D] Front-view inclination angle for spring L47 [I]
SPG_AX(4,14,2)      0 ; deg ! [D] Front-view inclination angle for spring R47 [I]
SPG_AY(4,14,1)      0 ; deg ! [D] Side-view inclination angle for spring L47 [I]
SPG_AY(4,14,2)      0 ; deg ! [D] Side-view inclination angle for spring R47 [I]
SPG_LEN(4,14,1)     0 ; mm ! [D] Length at design for spring L47 [I]
SPG_LEN(4,14,2)     0 ; mm ! [D] Length at design for spring R47 [I]
! FSA_DESIGN(4,14) 1958.828304 ; N ! CALC -- Design Load (susp., unladen), axle 47
! FSA_L(4,14) 1958.828304 ; N ! CALC -- Static suspension load, laden, axle  47
FS_OFFSET(4,14,1)   0 ; N ! Force offset subtracted from built-in spring L47 [I]
FS_OFFSET(4,14,2)   0 ; N ! Force offset subtracted from built-in spring R47 [I]
! FS_STATIC(4,14,1) 979.4141518 ; N ! CALC -- Static spring force, laden, spring L47
! FS_STATIC(4,14,2) 979.4141518 ; N ! CALC -- Static spring force, laden, spring R47
! FZA_L(4,14) 13069.76275 ; N ! CALC -- Static ground load, laden, axle 47
! FZA_UL(4,14) 13069.76275 ; N ! CALC -- Static ground load, unladen, axle 47
! FZ_STATIC(4,14,1) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel L47
! FZ_STATIC(4,14,2) 6534.881377 ; N ! CALC -- Static ground force, laden, wheel R47
! KA_ROLL(4,14) 2481.661565 ; N-m/deg ! CALC -- Total roll stiffness, axle 47
L_DAMPERS(4,14)  1000 ; mm ! Distance between dampers on axle 47 [I]
Y_DAMPERS(4,14)     0 ; mm ! [D] Lateral (left) offset of dampers on axle 47 [I]
L_JNC_STOPS(4,14) 1000 ; mm ! Distance between jounce stops on axle 47 [I]
L_REB_STOPS(4,14) 1000 ; mm ! Distance between rebound stops on axle 47 [I]
L_SPRINGS(4,14)  1000 ; mm ! Distance between springs on axle 47 [I]
Y_SPRINGS(4,14)     0 ; mm ! [D] Lateral (left) offset of springs on axle 47 [I]
L_SPG_ADJ(4,14,1)   0 ; mm ! Upper seat height increase for spring L47 [I]
L_SPG_ADJ(4,14,2)   0 ; mm ! Upper seat height increase for spring R47 [I]
SPRING_COMP_BETA(4,14,1) 2 ; mm ! Ref. hysteretic compression, ride spring L47
SPRING_COMP_BETA(4,14,2) 2 ; mm ! Ref. hysteretic compression, ride spring R47
SPRING_EXT_BETA(4,14,1) 2 ; mm ! Ref. hysteretic extension, ride spring L47
SPRING_EXT_BETA(4,14,2) 2 ; mm ! Ref. hysteretic extension, ride spring R47

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       0 ! [D] Option for calculating steering wheel torque when the
                      ! angle is controlled (OPT_STR_BY_TRQ = 0): 0 -> from table,
                      ! 1 -> calculated (see the steering Help document for
                      ! details) [I]
OPT_POWER           0 ! [D] Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! How are steer angles of knuckles defined? 1 -> as in K&C
                      ! test, 0 -> rotation angle about a kingpin axis
BETA_COL            2 ; deg ! [D] Ref hysteretic angle for steering column friction
D_COL               0 ; N-m-s/deg ! [D] Steering column viscous damping
HYS_COL             0 ; N-m ! [D] Steering column friction torque
A_STR_STOP_L      -45 ; deg ! [D] Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! [D] Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! [D] Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! [D] Steering stop stiffness (Right)

OPT_STEER_EXT(1,1)  0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,1)         1 ! Compliance steer option, axle 1: 0 -> symmetric, 1 ->
                      ! control L wheel, 2 -> control R wheel
OPT_RACK(1,1)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,1,1)   5.2 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,1,2)   5.2 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1,1)      7.2 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,1,2)      7.2 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1,1)  0.1 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,1,2)  0.1 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1,1)      2 ; deg ! Ref hys. angle for steering gear friction, axle 1
CS_MZ_ROD(1,1) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 1
CS_MZ_SHAFT(1,1) 0.001 ; deg/N/m ! Compliance: steering shaft, axle 1
C_WRAP(1,1)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 1
D_GEAR(1,1)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1,1)       0 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1,1)      100 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,1,2)      100 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
R_BMP_STR(1,1) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 1
R_WRAP_STR(1,1)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 1
X_KPO(1,1,1)        0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,1,2)        0 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(1,2)  0 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1,2)         1 ! Compliant steer option, axle 2: 0 -> sym, 1 -> L, 2 -> R
OPT_RACK(1,2)       0 ! Steer gear type: 0 -> Recirc. ball, 1 -> Rack & pinion [I]
A_CASTER(1,2,1)   5.2 ; deg ! Caster for wheel L2 [I]
A_CASTER(1,2,2)   5.2 ; deg ! Caster for wheel R2 [I]
A_KPI(1,2,1)      7.2 ; deg ! Kingpin inclination for wheel L2 [I]
A_KPI(1,2,2)      7.2 ; deg ! Kingpin inclination for wheel R2 [I]
A_MZ_BETA(1,2,1)  0.1 ; deg ! Ref. hysteresis angle for L2 parking steer torque
A_MZ_BETA(1,2,2)  0.1 ; deg ! Ref. hysteresis angle for R2 parking steer torque
BETA_GEAR(1,2)      2 ; deg ! Ref hys. angle for steering gear friction, axle 2
CS_MZ_ROD(1,2) 0.0006 ; deg/N/m ! Compliance: steer due to tie rod, axle 2
CS_MZ_SHAFT(1,2) 0.001 ; deg/N/m ! Compliance: steering shaft, axle 2
C_WRAP(1,2)  0.000186 ; deg/N/m ! Wrap compliance: (rel. axle pitch) / (total wheel
                      ! spin torque), axle 2
D_GEAR(1,2)         0 ; N-m-s/deg ! Steering gear viscous damping, axle 2
HYS_GEAR(1,2)       0 ; N-m ! Steering gear hysteresis, axle 2
L_KPO(1,2,1)      100 ; mm ! Lateral kingpin offset to center of wheel L2 [I]
L_KPO(1,2,2)      100 ; mm ! Lateral kingpin offset to center of wheel R2 [I]
R_BMP_STR(1,2) 0.00404 ; deg/mm ! Ratio: suspension steer per unit of jounce,
                       ! relative to design jounce (bump steer coefficient), axle 2
R_WRAP_STR(1,2)  0.14 ; - ! Ratio: suspension steer per relative axle pitch, axle 2
X_KPO(1,2,1)        0 ; mm ! X coord. of kingpin at center of wheel L2 [I]
X_KPO(1,2,2)        0 ; mm ! X coord. of kingpin at center of wheel R2 [I]

OPT_STEER_EXT(1,3)  1 ! Steer model option for axle 3: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(1,4)  1 ! Steer model option for axle 4: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(1,5)  1 ! Steer model option for axle 5: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,1)  1 ! Steer model option for axle 6: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,2)  1 ! Steer model option for axle 7: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,3)  1 ! Steer model option for axle 8: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,4)  1 ! Steer model option for axle 9: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,5)  1 ! Steer model option for axle 10: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,6)  1 ! Steer model option for axle 11: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,7)  1 ! Steer model option for axle 12: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,8)  1 ! Steer model option for axle 13: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,9)  1 ! Steer model option for axle 14: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,10) 1 ! Steer model option for axle 15: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,11) 1 ! Steer model option for axle 16: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,12) 1 ! Steer model option for axle 17: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,13) 1 ! Steer model option for axle 18: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(2,14) 1 ! Steer model option for axle 19: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,1)  1 ! Steer model option for axle 20: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,2)  1 ! Steer model option for axle 21: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,3)  1 ! Steer model option for axle 22: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,4)  1 ! Steer model option for axle 23: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,5)  1 ! Steer model option for axle 24: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,6)  1 ! Steer model option for axle 25: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,7)  1 ! Steer model option for axle 26: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,8)  1 ! Steer model option for axle 27: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,9)  1 ! Steer model option for axle 28: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,10) 1 ! Steer model option for axle 29: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,11) 1 ! Steer model option for axle 30: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,12) 1 ! Steer model option for axle 31: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,13) 1 ! Steer model option for axle 32: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(3,14) 1 ! Steer model option for axle 33: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,1)  1 ! Steer model option for axle 34: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,2)  1 ! Steer model option for axle 35: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,3)  1 ! Steer model option for axle 36: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,4)  1 ! Steer model option for axle 37: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,5)  1 ! Steer model option for axle 38: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,6)  1 ! Steer model option for axle 39: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,7)  1 ! Steer model option for axle 40: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,8)  1 ! Steer model option for axle 41: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,9)  1 ! Steer model option for axle 42: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,10) 1 ! Steer model option for axle 43: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,11) 1 ! Steer model option for axle 44: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,12) 1 ! Steer model option for axle 45: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,13) 1 ! Steer model option for axle 46: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

OPT_STEER_EXT(4,14) 1 ! Steer model option for axle 47: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

L_DUAL(1,1)         0 ; mm ! Dual-tire spacing for axle 1 [I]
L_DUAL(1,2)         0 ; mm ! Dual-tire spacing for axle 2 [I]
L_DUAL(1,3)       310 ; mm ! Dual-tire spacing for axle 3 [I]
L_DUAL(1,4)       310 ; mm ! Dual-tire spacing for axle 4 [I]
L_DUAL(1,5)       310 ; mm ! Dual-tire spacing for axle 5 [I]
L_DUAL(2,1)       310 ; mm ! Dual-tire spacing for axle 6 [I]
L_DUAL(2,2)       310 ; mm ! Dual-tire spacing for axle 7 [I]
L_DUAL(2,3)       310 ; mm ! Dual-tire spacing for axle 8 [I]
L_DUAL(2,4)       310 ; mm ! Dual-tire spacing for axle 9 [I]
L_DUAL(2,5)       310 ; mm ! Dual-tire spacing for axle 10 [I]
L_DUAL(2,6)       310 ; mm ! Dual-tire spacing for axle 11 [I]
L_DUAL(2,7)       310 ; mm ! Dual-tire spacing for axle 12 [I]
L_DUAL(2,8)       310 ; mm ! Dual-tire spacing for axle 13 [I]
L_DUAL(2,9)       310 ; mm ! Dual-tire spacing for axle 14 [I]
L_DUAL(2,10)      310 ; mm ! Dual-tire spacing for axle 15 [I]
L_DUAL(2,11)      310 ; mm ! Dual-tire spacing for axle 16 [I]
L_DUAL(2,12)      310 ; mm ! Dual-tire spacing for axle 17 [I]
L_DUAL(2,13)      310 ; mm ! Dual-tire spacing for axle 18 [I]
L_DUAL(2,14)      310 ; mm ! Dual-tire spacing for axle 19 [I]
L_DUAL(3,1)       310 ; mm ! Dual-tire spacing for axle 20 [I]
L_DUAL(3,2)       310 ; mm ! Dual-tire spacing for axle 21 [I]
L_DUAL(3,3)       310 ; mm ! Dual-tire spacing for axle 22 [I]
L_DUAL(3,4)       310 ; mm ! Dual-tire spacing for axle 23 [I]
L_DUAL(3,5)       310 ; mm ! Dual-tire spacing for axle 24 [I]
L_DUAL(3,6)       310 ; mm ! Dual-tire spacing for axle 25 [I]
L_DUAL(3,7)       310 ; mm ! Dual-tire spacing for axle 26 [I]
L_DUAL(3,8)       310 ; mm ! Dual-tire spacing for axle 27 [I]
L_DUAL(3,9)       310 ; mm ! Dual-tire spacing for axle 28 [I]
L_DUAL(3,10)      310 ; mm ! Dual-tire spacing for axle 29 [I]
L_DUAL(3,11)      310 ; mm ! Dual-tire spacing for axle 30 [I]
L_DUAL(3,12)      310 ; mm ! Dual-tire spacing for axle 31 [I]
L_DUAL(3,13)      310 ; mm ! Dual-tire spacing for axle 32 [I]
L_DUAL(3,14)      310 ; mm ! Dual-tire spacing for axle 33 [I]
L_DUAL(4,1)       310 ; mm ! Dual-tire spacing for axle 34 [I]
L_DUAL(4,2)       310 ; mm ! Dual-tire spacing for axle 35 [I]
L_DUAL(4,3)       310 ; mm ! Dual-tire spacing for axle 36 [I]
L_DUAL(4,4)       310 ; mm ! Dual-tire spacing for axle 37 [I]
L_DUAL(4,5)       310 ; mm ! Dual-tire spacing for axle 38 [I]
L_DUAL(4,6)       310 ; mm ! Dual-tire spacing for axle 39 [I]
L_DUAL(4,7)       310 ; mm ! Dual-tire spacing for axle 40 [I]
L_DUAL(4,8)       310 ; mm ! Dual-tire spacing for axle 41 [I]
L_DUAL(4,9)       310 ; mm ! Dual-tire spacing for axle 42 [I]
L_DUAL(4,10)      310 ; mm ! Dual-tire spacing for axle 43 [I]
L_DUAL(4,11)      310 ; mm ! Dual-tire spacing for axle 44 [I]
L_DUAL(4,12)      310 ; mm ! Dual-tire spacing for axle 45 [I]
L_DUAL(4,13)      310 ; mm ! Dual-tire spacing for axle 46 [I]
L_DUAL(4,14)      310 ; mm ! Dual-tire spacing for axle 47 [I]

OPT_TIRE_MODEL(1,1,1,1) 1 ! Internal tire shear-model option, tire L1i: 1 ->
                          ! original tabular model; 0 -> fully external model; 2 ->
                          ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                          ! tabular with camber extensions; 7 -> built-in Pacejka
                          ! 5.2; 8 -> TNO Delft-Tyre; 9 -> COSIN FTire; 10 ->
                          ! third-party STI tire model [I]
OPT_TIRE_COMB(1,1,1,1) 0 ! Option for combined slip calculation: 0 -> use only
                         ! theoretical combined slip; 1 -> use transition between
                         ! the normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1,1,1) 1 ! Options for handling lag in tire alpha: 1 ->
                              ! transition to using instant slip when the time
                              ! constant is less than 12*TSTEP, 0 -> use fixed time
                              ! constant 12*TSTEP at high speeds
OPT_TIRE_LAG_KAPPA(1,1,1,1) 2 ! Options for handling lag in tire kappa: 2 -> use
                              ! instant slip when absolute kappa is decreasing and
                              ! transition to instant slip when the time constant
                              ! is less than 12*TSTEP; 1 -> transition to instant
                              ! slip when the time constant is less than 12*TSTEP;
                              ! 0 -> use fixed time constant 12*TSTEP at high
                              ! speeds
FZ_MAX(1,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L1i [I]
FZ_REF(1,1,1,1) 30000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L1i [I]
IT_XXZZ(1,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L1i [I]
M_TIRE(1,1,1,1)    91 ; kg ! Mass of tire L1i
MU_REF_X(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L1i
MU_REF_Y(1,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L1i
R0(1,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L1i [I]
RR_C(1,1,1,1)  0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,1,1)      1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1,1,1) 2.56e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                       ! RR_v*Vx)
VLOW_ALPHA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,1,2,1) 1 ! Internal tire shear-model option, R1i [I]
OPT_TIRE_COMB(1,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R1i [I]
FZ_REF(1,1,2,1) 30000 ; N ! Reference vertical force
IT(1,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R1i [I]
IT_XXZZ(1,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R1i [I]
M_TIRE(1,1,2,1)    91 ; kg ! Mass of tire R1i
MU_REF_X(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R1i
MU_REF_Y(1,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R1i
R0(1,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R1i [I]
RR_C(1,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,1,1) 1 ! Internal tire shear-model option, L2i [I]
OPT_TIRE_COMB(1,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L2i [I]
FZ_REF(1,2,1,1) 30000 ; N ! Reference vertical force
IT(1,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L2i [I]
IT_XXZZ(1,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L2i [I]
M_TIRE(1,2,1,1)    91 ; kg ! Mass of tire L2i
MU_REF_X(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L2i
MU_REF_Y(1,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L2i
R0(1,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L2i [I]
RR_C(1,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,2,2,1) 1 ! Internal tire shear-model option, R2i [I]
OPT_TIRE_COMB(1,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R2i [I]
FZ_REF(1,2,2,1) 30000 ; N ! Reference vertical force
IT(1,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R2i [I]
IT_XXZZ(1,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R2i [I]
M_TIRE(1,2,2,1)    91 ; kg ! Mass of tire R2i
MU_REF_X(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R2i
MU_REF_Y(1,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R2i
R0(1,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R2i [I]
RR_C(1,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa


OPT_TIRE_MODEL(1,3,1,1) 1 ! Internal tire shear-model option, L3i [I]
OPT_TIRE_COMB(1,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L3i [I]
FZ_REF(1,3,1,1) 30000 ; N ! Reference vertical force
IT(1,3,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L3i [I]
IT_XXZZ(1,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L3i [I]
M_TIRE(1,3,1,1)    91 ; kg ! Mass of tire L3i
MU_REF_X(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3i
MU_REF_Y(1,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3i
R0(1,3,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L3i [I]
RR_C(1,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,1,2) 1 ! Internal tire shear-model option, L3o [I]
OPT_TIRE_COMB(1,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L3o [I]
FZ_REF(1,3,1,2) 30000 ; N ! Reference vertical force
IT(1,3,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L3o [I]
IT_XXZZ(1,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L3o [I]
M_TIRE(1,3,1,2)    91 ; kg ! Mass of tire L3o
MU_REF_X(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L3o
MU_REF_Y(1,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L3o
R0(1,3,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L3o [I]
RR_C(1,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,1) 1 ! Internal tire shear-model option, R3i [I]
OPT_TIRE_COMB(1,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R3i [I]
FZ_REF(1,3,2,1) 30000 ; N ! Reference vertical force
IT(1,3,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R3i [I]
IT_XXZZ(1,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R3i [I]
M_TIRE(1,3,2,1)    91 ; kg ! Mass of tire R3i
MU_REF_X(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3i
MU_REF_Y(1,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3i
R0(1,3,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R3i [I]
RR_C(1,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,3,2,2) 1 ! Internal tire shear-model option, R3o [I]
OPT_TIRE_COMB(1,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R3o [I]
FZ_REF(1,3,2,2) 30000 ; N ! Reference vertical force
IT(1,3,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R3o [I]
IT_XXZZ(1,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R3o [I]
M_TIRE(1,3,2,2)    91 ; kg ! Mass of tire R3o
MU_REF_X(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R3o
MU_REF_Y(1,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R3o
R0(1,3,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,3,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R3o [I]
RR_C(1,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,1,1) 1 ! Internal tire shear-model option, L4i [I]
OPT_TIRE_COMB(1,4,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L4i [I]
FZ_REF(1,4,1,1) 30000 ; N ! Reference vertical force
IT(1,4,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L4i [I]
IT_XXZZ(1,4,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L4i [I]
M_TIRE(1,4,1,1)    91 ; kg ! Mass of tire L4i
MU_REF_X(1,4,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4i
MU_REF_Y(1,4,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4i
R0(1,4,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4i [I]
RR_C(1,4,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,1,2) 1 ! Internal tire shear-model option, L4o [I]
OPT_TIRE_COMB(1,4,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L4o [I]
FZ_REF(1,4,1,2) 30000 ; N ! Reference vertical force
IT(1,4,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L4o [I]
IT_XXZZ(1,4,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L4o [I]
M_TIRE(1,4,1,2)    91 ; kg ! Mass of tire L4o
MU_REF_X(1,4,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L4o
MU_REF_Y(1,4,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L4o
R0(1,4,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L4o [I]
RR_C(1,4,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,2,1) 1 ! Internal tire shear-model option, R4i [I]
OPT_TIRE_COMB(1,4,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R4i [I]
FZ_REF(1,4,2,1) 30000 ; N ! Reference vertical force
IT(1,4,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R4i [I]
IT_XXZZ(1,4,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R4i [I]
M_TIRE(1,4,2,1)    91 ; kg ! Mass of tire R4i
MU_REF_X(1,4,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4i
MU_REF_Y(1,4,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4i
R0(1,4,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4i [I]
RR_C(1,4,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,4,2,2) 1 ! Internal tire shear-model option, R4o [I]
OPT_TIRE_COMB(1,4,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,4,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,4,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,4,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R4o [I]
FZ_REF(1,4,2,2) 30000 ; N ! Reference vertical force
IT(1,4,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R4o [I]
IT_XXZZ(1,4,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R4o [I]
M_TIRE(1,4,2,2)    91 ; kg ! Mass of tire R4o
MU_REF_X(1,4,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R4o
MU_REF_Y(1,4,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R4o
R0(1,4,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,4,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R4o [I]
RR_C(1,4,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,4,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,4,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,4,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,1,1) 1 ! Internal tire shear-model option, L5i [I]
OPT_TIRE_COMB(1,5,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L5i [I]
FZ_REF(1,5,1,1) 30000 ; N ! Reference vertical force
IT(1,5,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L5i [I]
IT_XXZZ(1,5,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L5i [I]
M_TIRE(1,5,1,1)    91 ; kg ! Mass of tire L5i
MU_REF_X(1,5,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5i
MU_REF_Y(1,5,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5i
R0(1,5,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5i [I]
RR_C(1,5,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,1,2) 1 ! Internal tire shear-model option, L5o [I]
OPT_TIRE_COMB(1,5,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L5o [I]
FZ_REF(1,5,1,2) 30000 ; N ! Reference vertical force
IT(1,5,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L5o [I]
IT_XXZZ(1,5,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L5o [I]
M_TIRE(1,5,1,2)    91 ; kg ! Mass of tire L5o
MU_REF_X(1,5,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L5o
MU_REF_Y(1,5,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L5o
R0(1,5,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L5o [I]
RR_C(1,5,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,2,1) 1 ! Internal tire shear-model option, R5i [I]
OPT_TIRE_COMB(1,5,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R5i [I]
FZ_REF(1,5,2,1) 30000 ; N ! Reference vertical force
IT(1,5,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R5i [I]
IT_XXZZ(1,5,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R5i [I]
M_TIRE(1,5,2,1)    91 ; kg ! Mass of tire R5i
MU_REF_X(1,5,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5i
MU_REF_Y(1,5,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5i
R0(1,5,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5i [I]
RR_C(1,5,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,5,2,2) 1 ! Internal tire shear-model option, R5o [I]
OPT_TIRE_COMB(1,5,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,5,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,5,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,5,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R5o [I]
FZ_REF(1,5,2,2) 30000 ; N ! Reference vertical force
IT(1,5,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R5o [I]
IT_XXZZ(1,5,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R5o [I]
M_TIRE(1,5,2,2)    91 ; kg ! Mass of tire R5o
MU_REF_X(1,5,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R5o
MU_REF_Y(1,5,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R5o
R0(1,5,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,5,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R5o [I]
RR_C(1,5,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,5,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,5,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,5,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,1) 1 ! Internal tire shear-model option, L6i [I]
OPT_TIRE_COMB(2,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L6i [I]
FZ_REF(2,1,1,1) 30000 ; N ! Reference vertical force
IT(2,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L6i [I]
IT_XXZZ(2,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L6i [I]
M_TIRE(2,1,1,1)    91 ; kg ! Mass of tire L6i
MU_REF_X(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6i
MU_REF_Y(2,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6i
R0(2,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L6i [I]
RR_C(2,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,1,2) 1 ! Internal tire shear-model option, L6o [I]
OPT_TIRE_COMB(2,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L6o [I]
FZ_REF(2,1,1,2) 30000 ; N ! Reference vertical force
IT(2,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L6o [I]
IT_XXZZ(2,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L6o [I]
M_TIRE(2,1,1,2)    91 ; kg ! Mass of tire L6o
MU_REF_X(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L6o
MU_REF_Y(2,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L6o
R0(2,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L6o [I]
RR_C(2,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,1) 1 ! Internal tire shear-model option, R6i [I]
OPT_TIRE_COMB(2,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R6i [I]
FZ_REF(2,1,2,1) 30000 ; N ! Reference vertical force
IT(2,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R6i [I]
IT_XXZZ(2,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R6i [I]
M_TIRE(2,1,2,1)    91 ; kg ! Mass of tire R6i
MU_REF_X(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6i
MU_REF_Y(2,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6i
R0(2,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R6i [I]
RR_C(2,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1,2,2) 1 ! Internal tire shear-model option, R6o [I]
OPT_TIRE_COMB(2,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R6o [I]
FZ_REF(2,1,2,2) 30000 ; N ! Reference vertical force
IT(2,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R6o [I]
IT_XXZZ(2,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R6o [I]
M_TIRE(2,1,2,2)    91 ; kg ! Mass of tire R6o
MU_REF_X(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R6o
MU_REF_Y(2,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R6o
R0(2,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R6o [I]
RR_C(2,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,1) 1 ! Internal tire shear-model option, L7i [I]
OPT_TIRE_COMB(2,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L7i [I]
FZ_REF(2,2,1,1) 30000 ; N ! Reference vertical force
IT(2,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L7i [I]
IT_XXZZ(2,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L7i [I]
M_TIRE(2,2,1,1)    91 ; kg ! Mass of tire L7i
MU_REF_X(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7i
MU_REF_Y(2,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7i
R0(2,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L7i [I]
RR_C(2,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,1,2) 1 ! Internal tire shear-model option, L7o [I]
OPT_TIRE_COMB(2,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L7o [I]
FZ_REF(2,2,1,2) 30000 ; N ! Reference vertical force
IT(2,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L7o [I]
IT_XXZZ(2,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L7o [I]
M_TIRE(2,2,1,2)    91 ; kg ! Mass of tire L7o
MU_REF_X(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L7o
MU_REF_Y(2,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L7o
R0(2,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L7o [I]
RR_C(2,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,1) 1 ! Internal tire shear-model option, R7i [I]
OPT_TIRE_COMB(2,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R7i [I]
FZ_REF(2,2,2,1) 30000 ; N ! Reference vertical force
IT(2,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R7i [I]
IT_XXZZ(2,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R7i [I]
M_TIRE(2,2,2,1)    91 ; kg ! Mass of tire R7i
MU_REF_X(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7i
MU_REF_Y(2,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7i
R0(2,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R7i [I]
RR_C(2,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2,2,2) 1 ! Internal tire shear-model option, R7o [I]
OPT_TIRE_COMB(2,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R7o [I]
FZ_REF(2,2,2,2) 30000 ; N ! Reference vertical force
IT(2,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R7o [I]
IT_XXZZ(2,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R7o [I]
M_TIRE(2,2,2,2)    91 ; kg ! Mass of tire R7o
MU_REF_X(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R7o
MU_REF_Y(2,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R7o
R0(2,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R7o [I]
RR_C(2,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,1,1) 1 ! Internal tire shear-model option, L8i [I]
OPT_TIRE_COMB(2,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L8i [I]
FZ_REF(2,3,1,1) 30000 ; N ! Reference vertical force
IT(2,3,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L8i [I]
IT_XXZZ(2,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L8i [I]
M_TIRE(2,3,1,1)    91 ; kg ! Mass of tire L8i
MU_REF_X(2,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L8i
MU_REF_Y(2,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L8i
R0(2,3,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L8i [I]
RR_C(2,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,1,2) 1 ! Internal tire shear-model option, L8o [I]
OPT_TIRE_COMB(2,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L8o [I]
FZ_REF(2,3,1,2) 30000 ; N ! Reference vertical force
IT(2,3,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L8o [I]
IT_XXZZ(2,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L8o [I]
M_TIRE(2,3,1,2)    91 ; kg ! Mass of tire L8o
MU_REF_X(2,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L8o
MU_REF_Y(2,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L8o
R0(2,3,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L8o [I]
RR_C(2,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,2,1) 1 ! Internal tire shear-model option, R8i [I]
OPT_TIRE_COMB(2,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R8i [I]
FZ_REF(2,3,2,1) 30000 ; N ! Reference vertical force
IT(2,3,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R8i [I]
IT_XXZZ(2,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R8i [I]
M_TIRE(2,3,2,1)    91 ; kg ! Mass of tire R8i
MU_REF_X(2,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R8i
MU_REF_Y(2,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R8i
R0(2,3,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R8i [I]
RR_C(2,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,3,2,2) 1 ! Internal tire shear-model option, R8o [I]
OPT_TIRE_COMB(2,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R8o [I]
FZ_REF(2,3,2,2) 30000 ; N ! Reference vertical force
IT(2,3,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R8o [I]
IT_XXZZ(2,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R8o [I]
M_TIRE(2,3,2,2)    91 ; kg ! Mass of tire R8o
MU_REF_X(2,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R8o
MU_REF_Y(2,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R8o
R0(2,3,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,3,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R8o [I]
RR_C(2,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,4,1,1) 1 ! Internal tire shear-model option, L9i [I]
OPT_TIRE_COMB(2,4,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,4,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,4,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,4,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L9i [I]
FZ_REF(2,4,1,1) 30000 ; N ! Reference vertical force
IT(2,4,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L9i [I]
IT_XXZZ(2,4,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L9i [I]
M_TIRE(2,4,1,1)    91 ; kg ! Mass of tire L9i
MU_REF_X(2,4,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L9i
MU_REF_Y(2,4,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L9i
R0(2,4,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,4,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L9i [I]
RR_C(2,4,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,4,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,4,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,4,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,4,1,2) 1 ! Internal tire shear-model option, L9o [I]
OPT_TIRE_COMB(2,4,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,4,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,4,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,4,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L9o [I]
FZ_REF(2,4,1,2) 30000 ; N ! Reference vertical force
IT(2,4,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L9o [I]
IT_XXZZ(2,4,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L9o [I]
M_TIRE(2,4,1,2)    91 ; kg ! Mass of tire L9o
MU_REF_X(2,4,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L9o
MU_REF_Y(2,4,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L9o
R0(2,4,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,4,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L9o [I]
RR_C(2,4,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,4,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,4,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,4,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,4,2,1) 1 ! Internal tire shear-model option, R9i [I]
OPT_TIRE_COMB(2,4,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,4,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,4,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,4,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R9i [I]
FZ_REF(2,4,2,1) 30000 ; N ! Reference vertical force
IT(2,4,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R9i [I]
IT_XXZZ(2,4,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R9i [I]
M_TIRE(2,4,2,1)    91 ; kg ! Mass of tire R9i
MU_REF_X(2,4,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R9i
MU_REF_Y(2,4,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R9i
R0(2,4,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,4,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R9i [I]
RR_C(2,4,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,4,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,4,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,4,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,4,2,2) 1 ! Internal tire shear-model option, R9o [I]
OPT_TIRE_COMB(2,4,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,4,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,4,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,4,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R9o [I]
FZ_REF(2,4,2,2) 30000 ; N ! Reference vertical force
IT(2,4,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R9o [I]
IT_XXZZ(2,4,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R9o [I]
M_TIRE(2,4,2,2)    91 ; kg ! Mass of tire R9o
MU_REF_X(2,4,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R9o
MU_REF_Y(2,4,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R9o
R0(2,4,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,4,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R9o [I]
RR_C(2,4,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,4,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,4,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,4,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,5,1,1) 1 ! Internal tire shear-model option, L10i [I]
OPT_TIRE_COMB(2,5,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,5,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,5,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,5,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L10i [I]
FZ_REF(2,5,1,1) 30000 ; N ! Reference vertical force
IT(2,5,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L10i [I]
IT_XXZZ(2,5,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L10i [I]
M_TIRE(2,5,1,1)    91 ; kg ! Mass of tire L10i
MU_REF_X(2,5,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L10i
MU_REF_Y(2,5,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L10i
R0(2,5,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,5,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L10i [I]
RR_C(2,5,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,5,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,5,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,5,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,5,1,2) 1 ! Internal tire shear-model option, L10o [I]
OPT_TIRE_COMB(2,5,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,5,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,5,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,5,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L10o [I]
FZ_REF(2,5,1,2) 30000 ; N ! Reference vertical force
IT(2,5,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L10o [I]
IT_XXZZ(2,5,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L10o [I]
M_TIRE(2,5,1,2)    91 ; kg ! Mass of tire L10o
MU_REF_X(2,5,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L10o
MU_REF_Y(2,5,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L10o
R0(2,5,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,5,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L10o [I]
RR_C(2,5,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,5,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,5,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,5,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,5,2,1) 1 ! Internal tire shear-model option, R10i [I]
OPT_TIRE_COMB(2,5,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,5,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,5,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,5,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R10i [I]
FZ_REF(2,5,2,1) 30000 ; N ! Reference vertical force
IT(2,5,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R10i [I]
IT_XXZZ(2,5,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R10i [I]
M_TIRE(2,5,2,1)    91 ; kg ! Mass of tire R10i
MU_REF_X(2,5,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R10i
MU_REF_Y(2,5,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R10i
R0(2,5,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,5,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R10i [I]
RR_C(2,5,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,5,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,5,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,5,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,5,2,2) 1 ! Internal tire shear-model option, R10o [I]
OPT_TIRE_COMB(2,5,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,5,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,5,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,5,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R10o [I]
FZ_REF(2,5,2,2) 30000 ; N ! Reference vertical force
IT(2,5,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R10o [I]
IT_XXZZ(2,5,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R10o [I]
M_TIRE(2,5,2,2)    91 ; kg ! Mass of tire R10o
MU_REF_X(2,5,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R10o
MU_REF_Y(2,5,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R10o
R0(2,5,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,5,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R10o [I]
RR_C(2,5,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,5,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,5,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,5,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,6,1,1) 1 ! Internal tire shear-model option, L11i [I]
OPT_TIRE_COMB(2,6,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,6,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,6,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,6,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L11i [I]
FZ_REF(2,6,1,1) 30000 ; N ! Reference vertical force
IT(2,6,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L11i [I]
IT_XXZZ(2,6,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L11i [I]
M_TIRE(2,6,1,1)    91 ; kg ! Mass of tire L11i
MU_REF_X(2,6,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L11i
MU_REF_Y(2,6,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L11i
R0(2,6,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,6,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L11i [I]
RR_C(2,6,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,6,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,6,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,6,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,6,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,6,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,6,1,2) 1 ! Internal tire shear-model option, L11o [I]
OPT_TIRE_COMB(2,6,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,6,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,6,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,6,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L11o [I]
FZ_REF(2,6,1,2) 30000 ; N ! Reference vertical force
IT(2,6,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L11o [I]
IT_XXZZ(2,6,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L11o [I]
M_TIRE(2,6,1,2)    91 ; kg ! Mass of tire L11o
MU_REF_X(2,6,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L11o
MU_REF_Y(2,6,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L11o
R0(2,6,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,6,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L11o [I]
RR_C(2,6,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,6,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,6,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,6,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,6,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,6,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,6,2,1) 1 ! Internal tire shear-model option, R11i [I]
OPT_TIRE_COMB(2,6,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,6,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,6,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,6,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R11i [I]
FZ_REF(2,6,2,1) 30000 ; N ! Reference vertical force
IT(2,6,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R11i [I]
IT_XXZZ(2,6,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R11i [I]
M_TIRE(2,6,2,1)    91 ; kg ! Mass of tire R11i
MU_REF_X(2,6,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R11i
MU_REF_Y(2,6,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R11i
R0(2,6,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,6,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R11i [I]
RR_C(2,6,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,6,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,6,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,6,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,6,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,6,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,6,2,2) 1 ! Internal tire shear-model option, R11o [I]
OPT_TIRE_COMB(2,6,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,6,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,6,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,6,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R11o [I]
FZ_REF(2,6,2,2) 30000 ; N ! Reference vertical force
IT(2,6,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R11o [I]
IT_XXZZ(2,6,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R11o [I]
M_TIRE(2,6,2,2)    91 ; kg ! Mass of tire R11o
MU_REF_X(2,6,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R11o
MU_REF_Y(2,6,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R11o
R0(2,6,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,6,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R11o [I]
RR_C(2,6,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,6,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,6,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,6,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,6,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,6,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,7,1,1) 1 ! Internal tire shear-model option, L12i [I]
OPT_TIRE_COMB(2,7,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,7,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,7,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,7,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L12i [I]
FZ_REF(2,7,1,1) 30000 ; N ! Reference vertical force
IT(2,7,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L12i [I]
IT_XXZZ(2,7,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L12i [I]
M_TIRE(2,7,1,1)    91 ; kg ! Mass of tire L12i
MU_REF_X(2,7,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L12i
MU_REF_Y(2,7,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L12i
R0(2,7,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,7,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L12i [I]
RR_C(2,7,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,7,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,7,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,7,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,7,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,7,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,7,1,2) 1 ! Internal tire shear-model option, L12o [I]
OPT_TIRE_COMB(2,7,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,7,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,7,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,7,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L12o [I]
FZ_REF(2,7,1,2) 30000 ; N ! Reference vertical force
IT(2,7,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L12o [I]
IT_XXZZ(2,7,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L12o [I]
M_TIRE(2,7,1,2)    91 ; kg ! Mass of tire L12o
MU_REF_X(2,7,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L12o
MU_REF_Y(2,7,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L12o
R0(2,7,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,7,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L12o [I]
RR_C(2,7,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,7,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,7,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,7,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,7,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,7,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,7,2,1) 1 ! Internal tire shear-model option, R12i [I]
OPT_TIRE_COMB(2,7,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,7,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,7,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,7,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R12i [I]
FZ_REF(2,7,2,1) 30000 ; N ! Reference vertical force
IT(2,7,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R12i [I]
IT_XXZZ(2,7,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R12i [I]
M_TIRE(2,7,2,1)    91 ; kg ! Mass of tire R12i
MU_REF_X(2,7,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R12i
MU_REF_Y(2,7,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R12i
R0(2,7,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,7,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R12i [I]
RR_C(2,7,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,7,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,7,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,7,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,7,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,7,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,7,2,2) 1 ! Internal tire shear-model option, R12o [I]
OPT_TIRE_COMB(2,7,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,7,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,7,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,7,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R12o [I]
FZ_REF(2,7,2,2) 30000 ; N ! Reference vertical force
IT(2,7,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R12o [I]
IT_XXZZ(2,7,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R12o [I]
M_TIRE(2,7,2,2)    91 ; kg ! Mass of tire R12o
MU_REF_X(2,7,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R12o
MU_REF_Y(2,7,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R12o
R0(2,7,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,7,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R12o [I]
RR_C(2,7,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,7,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,7,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,7,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,7,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,7,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,8,1,1) 1 ! Internal tire shear-model option, L13i [I]
OPT_TIRE_COMB(2,8,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,8,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,8,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,8,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L13i [I]
FZ_REF(2,8,1,1) 30000 ; N ! Reference vertical force
IT(2,8,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L13i [I]
IT_XXZZ(2,8,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L13i [I]
M_TIRE(2,8,1,1)    91 ; kg ! Mass of tire L13i
MU_REF_X(2,8,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L13i
MU_REF_Y(2,8,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L13i
R0(2,8,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,8,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L13i [I]
RR_C(2,8,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,8,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,8,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,8,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,8,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,8,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,8,1,2) 1 ! Internal tire shear-model option, L13o [I]
OPT_TIRE_COMB(2,8,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,8,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,8,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,8,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L13o [I]
FZ_REF(2,8,1,2) 30000 ; N ! Reference vertical force
IT(2,8,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L13o [I]
IT_XXZZ(2,8,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L13o [I]
M_TIRE(2,8,1,2)    91 ; kg ! Mass of tire L13o
MU_REF_X(2,8,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L13o
MU_REF_Y(2,8,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L13o
R0(2,8,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,8,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L13o [I]
RR_C(2,8,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,8,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,8,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,8,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,8,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,8,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,8,2,1) 1 ! Internal tire shear-model option, R13i [I]
OPT_TIRE_COMB(2,8,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,8,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,8,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,8,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R13i [I]
FZ_REF(2,8,2,1) 30000 ; N ! Reference vertical force
IT(2,8,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R13i [I]
IT_XXZZ(2,8,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R13i [I]
M_TIRE(2,8,2,1)    91 ; kg ! Mass of tire R13i
MU_REF_X(2,8,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R13i
MU_REF_Y(2,8,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R13i
R0(2,8,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,8,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R13i [I]
RR_C(2,8,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,8,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,8,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,8,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,8,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,8,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,8,2,2) 1 ! Internal tire shear-model option, R13o [I]
OPT_TIRE_COMB(2,8,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,8,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,8,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,8,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R13o [I]
FZ_REF(2,8,2,2) 30000 ; N ! Reference vertical force
IT(2,8,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R13o [I]
IT_XXZZ(2,8,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R13o [I]
M_TIRE(2,8,2,2)    91 ; kg ! Mass of tire R13o
MU_REF_X(2,8,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R13o
MU_REF_Y(2,8,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R13o
R0(2,8,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,8,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R13o [I]
RR_C(2,8,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,8,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,8,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,8,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,8,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,8,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,9,1,1) 1 ! Internal tire shear-model option, L14i [I]
OPT_TIRE_COMB(2,9,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,9,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,9,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,9,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L14i [I]
FZ_REF(2,9,1,1) 30000 ; N ! Reference vertical force
IT(2,9,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L14i [I]
IT_XXZZ(2,9,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L14i [I]
M_TIRE(2,9,1,1)    91 ; kg ! Mass of tire L14i
MU_REF_X(2,9,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L14i
MU_REF_Y(2,9,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L14i
R0(2,9,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,9,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L14i [I]
RR_C(2,9,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,9,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,9,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,9,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,9,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,9,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,9,1,2) 1 ! Internal tire shear-model option, L14o [I]
OPT_TIRE_COMB(2,9,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,9,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,9,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,9,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L14o [I]
FZ_REF(2,9,1,2) 30000 ; N ! Reference vertical force
IT(2,9,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L14o [I]
IT_XXZZ(2,9,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L14o [I]
M_TIRE(2,9,1,2)    91 ; kg ! Mass of tire L14o
MU_REF_X(2,9,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L14o
MU_REF_Y(2,9,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L14o
R0(2,9,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,9,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L14o [I]
RR_C(2,9,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,9,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,9,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,9,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,9,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,9,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,9,2,1) 1 ! Internal tire shear-model option, R14i [I]
OPT_TIRE_COMB(2,9,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,9,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,9,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,9,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R14i [I]
FZ_REF(2,9,2,1) 30000 ; N ! Reference vertical force
IT(2,9,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R14i [I]
IT_XXZZ(2,9,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R14i [I]
M_TIRE(2,9,2,1)    91 ; kg ! Mass of tire R14i
MU_REF_X(2,9,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R14i
MU_REF_Y(2,9,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R14i
R0(2,9,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,9,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R14i [I]
RR_C(2,9,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,9,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,9,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,9,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,9,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,9,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,9,2,2) 1 ! Internal tire shear-model option, R14o [I]
OPT_TIRE_COMB(2,9,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,9,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,9,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,9,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R14o [I]
FZ_REF(2,9,2,2) 30000 ; N ! Reference vertical force
IT(2,9,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R14o [I]
IT_XXZZ(2,9,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R14o [I]
M_TIRE(2,9,2,2)    91 ; kg ! Mass of tire R14o
MU_REF_X(2,9,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R14o
MU_REF_Y(2,9,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R14o
R0(2,9,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,9,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R14o [I]
RR_C(2,9,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,9,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,9,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,9,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,9,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,9,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,10,1,1) 1 ! Internal tire shear-model option, L15i [I]
OPT_TIRE_COMB(2,10,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,10,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,10,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,10,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L15i [I]
FZ_REF(2,10,1,1) 30000 ; N ! Reference vertical force
IT(2,10,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L15i [I]
IT_XXZZ(2,10,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L15i [I]
M_TIRE(2,10,1,1)   91 ; kg ! Mass of tire L15i
MU_REF_X(2,10,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L15i
MU_REF_Y(2,10,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L15i
R0(2,10,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,10,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L15i [I]
RR_C(2,10,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,10,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,10,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,10,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,10,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,10,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,10,1,2) 1 ! Internal tire shear-model option, L15o [I]
OPT_TIRE_COMB(2,10,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,10,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,10,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,10,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L15o [I]
FZ_REF(2,10,1,2) 30000 ; N ! Reference vertical force
IT(2,10,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L15o [I]
IT_XXZZ(2,10,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L15o [I]
M_TIRE(2,10,1,2)   91 ; kg ! Mass of tire L15o
MU_REF_X(2,10,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L15o
MU_REF_Y(2,10,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L15o
R0(2,10,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,10,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L15o [I]
RR_C(2,10,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,10,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,10,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,10,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,10,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,10,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,10,2,1) 1 ! Internal tire shear-model option, R15i [I]
OPT_TIRE_COMB(2,10,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,10,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,10,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,10,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R15i [I]
FZ_REF(2,10,2,1) 30000 ; N ! Reference vertical force
IT(2,10,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R15i [I]
IT_XXZZ(2,10,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R15i [I]
M_TIRE(2,10,2,1)   91 ; kg ! Mass of tire R15i
MU_REF_X(2,10,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R15i
MU_REF_Y(2,10,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R15i
R0(2,10,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,10,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R15i [I]
RR_C(2,10,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,10,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,10,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,10,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,10,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,10,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,10,2,2) 1 ! Internal tire shear-model option, R15o [I]
OPT_TIRE_COMB(2,10,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,10,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,10,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,10,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R15o [I]
FZ_REF(2,10,2,2) 30000 ; N ! Reference vertical force
IT(2,10,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R15o [I]
IT_XXZZ(2,10,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R15o [I]
M_TIRE(2,10,2,2)   91 ; kg ! Mass of tire R15o
MU_REF_X(2,10,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R15o
MU_REF_Y(2,10,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R15o
R0(2,10,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,10,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R15o [I]
RR_C(2,10,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,10,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,10,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,10,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,10,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,10,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,11,1,1) 1 ! Internal tire shear-model option, L16i [I]
OPT_TIRE_COMB(2,11,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,11,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,11,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,11,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L16i [I]
FZ_REF(2,11,1,1) 30000 ; N ! Reference vertical force
IT(2,11,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L16i [I]
IT_XXZZ(2,11,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L16i [I]
M_TIRE(2,11,1,1)   91 ; kg ! Mass of tire L16i
MU_REF_X(2,11,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L16i
MU_REF_Y(2,11,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L16i
R0(2,11,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,11,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L16i [I]
RR_C(2,11,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,11,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,11,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,11,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,11,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,11,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,11,1,2) 1 ! Internal tire shear-model option, L16o [I]
OPT_TIRE_COMB(2,11,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,11,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,11,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,11,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L16o [I]
FZ_REF(2,11,1,2) 30000 ; N ! Reference vertical force
IT(2,11,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L16o [I]
IT_XXZZ(2,11,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L16o [I]
M_TIRE(2,11,1,2)   91 ; kg ! Mass of tire L16o
MU_REF_X(2,11,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L16o
MU_REF_Y(2,11,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L16o
R0(2,11,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,11,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L16o [I]
RR_C(2,11,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,11,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,11,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,11,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,11,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,11,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,11,2,1) 1 ! Internal tire shear-model option, R16i [I]
OPT_TIRE_COMB(2,11,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,11,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,11,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,11,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R16i [I]
FZ_REF(2,11,2,1) 30000 ; N ! Reference vertical force
IT(2,11,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R16i [I]
IT_XXZZ(2,11,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R16i [I]
M_TIRE(2,11,2,1)   91 ; kg ! Mass of tire R16i
MU_REF_X(2,11,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R16i
MU_REF_Y(2,11,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R16i
R0(2,11,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,11,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R16i [I]
RR_C(2,11,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,11,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,11,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,11,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,11,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,11,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,11,2,2) 1 ! Internal tire shear-model option, R16o [I]
OPT_TIRE_COMB(2,11,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,11,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,11,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,11,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R16o [I]
FZ_REF(2,11,2,2) 30000 ; N ! Reference vertical force
IT(2,11,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R16o [I]
IT_XXZZ(2,11,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R16o [I]
M_TIRE(2,11,2,2)   91 ; kg ! Mass of tire R16o
MU_REF_X(2,11,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R16o
MU_REF_Y(2,11,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R16o
R0(2,11,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,11,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R16o [I]
RR_C(2,11,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,11,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,11,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,11,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,11,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,11,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,12,1,1) 1 ! Internal tire shear-model option, L17i [I]
OPT_TIRE_COMB(2,12,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,12,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,12,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,12,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L17i [I]
FZ_REF(2,12,1,1) 30000 ; N ! Reference vertical force
IT(2,12,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L17i [I]
IT_XXZZ(2,12,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L17i [I]
M_TIRE(2,12,1,1)   91 ; kg ! Mass of tire L17i
MU_REF_X(2,12,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L17i
MU_REF_Y(2,12,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L17i
R0(2,12,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,12,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L17i [I]
RR_C(2,12,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,12,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,12,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,12,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,12,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,12,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,12,1,2) 1 ! Internal tire shear-model option, L17o [I]
OPT_TIRE_COMB(2,12,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,12,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,12,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,12,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L17o [I]
FZ_REF(2,12,1,2) 30000 ; N ! Reference vertical force
IT(2,12,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L17o [I]
IT_XXZZ(2,12,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L17o [I]
M_TIRE(2,12,1,2)   91 ; kg ! Mass of tire L17o
MU_REF_X(2,12,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L17o
MU_REF_Y(2,12,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L17o
R0(2,12,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,12,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L17o [I]
RR_C(2,12,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,12,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,12,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,12,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,12,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,12,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,12,2,1) 1 ! Internal tire shear-model option, R17i [I]
OPT_TIRE_COMB(2,12,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,12,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,12,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,12,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R17i [I]
FZ_REF(2,12,2,1) 30000 ; N ! Reference vertical force
IT(2,12,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R17i [I]
IT_XXZZ(2,12,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R17i [I]
M_TIRE(2,12,2,1)   91 ; kg ! Mass of tire R17i
MU_REF_X(2,12,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R17i
MU_REF_Y(2,12,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R17i
R0(2,12,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,12,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R17i [I]
RR_C(2,12,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,12,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,12,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,12,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,12,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,12,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,12,2,2) 1 ! Internal tire shear-model option, R17o [I]
OPT_TIRE_COMB(2,12,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,12,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,12,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,12,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R17o [I]
FZ_REF(2,12,2,2) 30000 ; N ! Reference vertical force
IT(2,12,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R17o [I]
IT_XXZZ(2,12,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R17o [I]
M_TIRE(2,12,2,2)   91 ; kg ! Mass of tire R17o
MU_REF_X(2,12,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R17o
MU_REF_Y(2,12,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R17o
R0(2,12,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,12,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R17o [I]
RR_C(2,12,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,12,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,12,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,12,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,12,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,12,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,13,1,1) 1 ! Internal tire shear-model option, L18i [I]
OPT_TIRE_COMB(2,13,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,13,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,13,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,13,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L18i [I]
FZ_REF(2,13,1,1) 30000 ; N ! Reference vertical force
IT(2,13,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L18i [I]
IT_XXZZ(2,13,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L18i [I]
M_TIRE(2,13,1,1)   91 ; kg ! Mass of tire L18i
MU_REF_X(2,13,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L18i
MU_REF_Y(2,13,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L18i
R0(2,13,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,13,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L18i [I]
RR_C(2,13,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,13,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,13,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,13,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,13,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,13,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,13,1,2) 1 ! Internal tire shear-model option, L18o [I]
OPT_TIRE_COMB(2,13,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,13,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,13,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,13,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L18o [I]
FZ_REF(2,13,1,2) 30000 ; N ! Reference vertical force
IT(2,13,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L18o [I]
IT_XXZZ(2,13,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L18o [I]
M_TIRE(2,13,1,2)   91 ; kg ! Mass of tire L18o
MU_REF_X(2,13,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L18o
MU_REF_Y(2,13,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L18o
R0(2,13,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,13,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L18o [I]
RR_C(2,13,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,13,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,13,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,13,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,13,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,13,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,13,2,1) 1 ! Internal tire shear-model option, R18i [I]
OPT_TIRE_COMB(2,13,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,13,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,13,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,13,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R18i [I]
FZ_REF(2,13,2,1) 30000 ; N ! Reference vertical force
IT(2,13,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R18i [I]
IT_XXZZ(2,13,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R18i [I]
M_TIRE(2,13,2,1)   91 ; kg ! Mass of tire R18i
MU_REF_X(2,13,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R18i
MU_REF_Y(2,13,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R18i
R0(2,13,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,13,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R18i [I]
RR_C(2,13,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,13,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,13,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,13,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,13,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,13,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,13,2,2) 1 ! Internal tire shear-model option, R18o [I]
OPT_TIRE_COMB(2,13,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,13,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,13,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,13,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R18o [I]
FZ_REF(2,13,2,2) 30000 ; N ! Reference vertical force
IT(2,13,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R18o [I]
IT_XXZZ(2,13,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R18o [I]
M_TIRE(2,13,2,2)   91 ; kg ! Mass of tire R18o
MU_REF_X(2,13,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R18o
MU_REF_Y(2,13,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R18o
R0(2,13,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,13,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R18o [I]
RR_C(2,13,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,13,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,13,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,13,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,13,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,13,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,14,1,1) 1 ! Internal tire shear-model option, L19i [I]
OPT_TIRE_COMB(2,14,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,14,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,14,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,14,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L19i [I]
FZ_REF(2,14,1,1) 30000 ; N ! Reference vertical force
IT(2,14,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L19i [I]
IT_XXZZ(2,14,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L19i [I]
M_TIRE(2,14,1,1)   91 ; kg ! Mass of tire L19i
MU_REF_X(2,14,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L19i
MU_REF_Y(2,14,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L19i
R0(2,14,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,14,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L19i [I]
RR_C(2,14,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,14,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,14,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,14,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,14,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,14,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,14,1,2) 1 ! Internal tire shear-model option, L19o [I]
OPT_TIRE_COMB(2,14,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,14,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,14,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,14,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L19o [I]
FZ_REF(2,14,1,2) 30000 ; N ! Reference vertical force
IT(2,14,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L19o [I]
IT_XXZZ(2,14,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L19o [I]
M_TIRE(2,14,1,2)   91 ; kg ! Mass of tire L19o
MU_REF_X(2,14,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L19o
MU_REF_Y(2,14,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L19o
R0(2,14,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,14,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L19o [I]
RR_C(2,14,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,14,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,14,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,14,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,14,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,14,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,14,2,1) 1 ! Internal tire shear-model option, R19i [I]
OPT_TIRE_COMB(2,14,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,14,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,14,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,14,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R19i [I]
FZ_REF(2,14,2,1) 30000 ; N ! Reference vertical force
IT(2,14,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R19i [I]
IT_XXZZ(2,14,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R19i [I]
M_TIRE(2,14,2,1)   91 ; kg ! Mass of tire R19i
MU_REF_X(2,14,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R19i
MU_REF_Y(2,14,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R19i
R0(2,14,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,14,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R19i [I]
RR_C(2,14,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,14,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,14,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,14,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,14,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,14,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,14,2,2) 1 ! Internal tire shear-model option, R19o [I]
OPT_TIRE_COMB(2,14,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,14,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,14,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,14,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R19o [I]
FZ_REF(2,14,2,2) 30000 ; N ! Reference vertical force
IT(2,14,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R19o [I]
IT_XXZZ(2,14,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R19o [I]
M_TIRE(2,14,2,2)   91 ; kg ! Mass of tire R19o
MU_REF_X(2,14,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R19o
MU_REF_Y(2,14,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R19o
R0(2,14,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,14,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R19o [I]
RR_C(2,14,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,14,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,14,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,14,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,14,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,14,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1,1) 1 ! Internal tire shear-model option, L20i [I]
OPT_TIRE_COMB(3,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L20i [I]
FZ_REF(3,1,1,1) 30000 ; N ! Reference vertical force
IT(3,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L20i [I]
IT_XXZZ(3,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L20i [I]
M_TIRE(3,1,1,1)    91 ; kg ! Mass of tire L20i
MU_REF_X(3,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L20i
MU_REF_Y(3,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L20i
R0(3,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L20i [I]
RR_C(3,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,1,2) 1 ! Internal tire shear-model option, L20o [I]
OPT_TIRE_COMB(3,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L20o [I]
FZ_REF(3,1,1,2) 30000 ; N ! Reference vertical force
IT(3,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L20o [I]
IT_XXZZ(3,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L20o [I]
M_TIRE(3,1,1,2)    91 ; kg ! Mass of tire L20o
MU_REF_X(3,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L20o
MU_REF_Y(3,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L20o
R0(3,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L20o [I]
RR_C(3,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,2,1) 1 ! Internal tire shear-model option, R20i [I]
OPT_TIRE_COMB(3,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R20i [I]
FZ_REF(3,1,2,1) 30000 ; N ! Reference vertical force
IT(3,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R20i [I]
IT_XXZZ(3,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R20i [I]
M_TIRE(3,1,2,1)    91 ; kg ! Mass of tire R20i
MU_REF_X(3,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R20i
MU_REF_Y(3,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R20i
R0(3,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R20i [I]
RR_C(3,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,1,2,2) 1 ! Internal tire shear-model option, R20o [I]
OPT_TIRE_COMB(3,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R20o [I]
FZ_REF(3,1,2,2) 30000 ; N ! Reference vertical force
IT(3,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R20o [I]
IT_XXZZ(3,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R20o [I]
M_TIRE(3,1,2,2)    91 ; kg ! Mass of tire R20o
MU_REF_X(3,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R20o
MU_REF_Y(3,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R20o
R0(3,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R20o [I]
RR_C(3,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,1,1) 1 ! Internal tire shear-model option, L21i [I]
OPT_TIRE_COMB(3,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L21i [I]
FZ_REF(3,2,1,1) 30000 ; N ! Reference vertical force
IT(3,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L21i [I]
IT_XXZZ(3,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L21i [I]
M_TIRE(3,2,1,1)    91 ; kg ! Mass of tire L21i
MU_REF_X(3,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L21i
MU_REF_Y(3,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L21i
R0(3,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L21i [I]
RR_C(3,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,1,2) 1 ! Internal tire shear-model option, L21o [I]
OPT_TIRE_COMB(3,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L21o [I]
FZ_REF(3,2,1,2) 30000 ; N ! Reference vertical force
IT(3,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L21o [I]
IT_XXZZ(3,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L21o [I]
M_TIRE(3,2,1,2)    91 ; kg ! Mass of tire L21o
MU_REF_X(3,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L21o
MU_REF_Y(3,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L21o
R0(3,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L21o [I]
RR_C(3,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2,1) 1 ! Internal tire shear-model option, R21i [I]
OPT_TIRE_COMB(3,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R21i [I]
FZ_REF(3,2,2,1) 30000 ; N ! Reference vertical force
IT(3,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R21i [I]
IT_XXZZ(3,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R21i [I]
M_TIRE(3,2,2,1)    91 ; kg ! Mass of tire R21i
MU_REF_X(3,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R21i
MU_REF_Y(3,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R21i
R0(3,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R21i [I]
RR_C(3,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,2,2,2) 1 ! Internal tire shear-model option, R21o [I]
OPT_TIRE_COMB(3,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R21o [I]
FZ_REF(3,2,2,2) 30000 ; N ! Reference vertical force
IT(3,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R21o [I]
IT_XXZZ(3,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R21o [I]
M_TIRE(3,2,2,2)    91 ; kg ! Mass of tire R21o
MU_REF_X(3,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R21o
MU_REF_Y(3,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R21o
R0(3,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R21o [I]
RR_C(3,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,1,1) 1 ! Internal tire shear-model option, L22i [I]
OPT_TIRE_COMB(3,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L22i [I]
FZ_REF(3,3,1,1) 30000 ; N ! Reference vertical force
IT(3,3,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L22i [I]
IT_XXZZ(3,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L22i [I]
M_TIRE(3,3,1,1)    91 ; kg ! Mass of tire L22i
MU_REF_X(3,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L22i
MU_REF_Y(3,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L22i
R0(3,3,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L22i [I]
RR_C(3,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,1,2) 1 ! Internal tire shear-model option, L22o [I]
OPT_TIRE_COMB(3,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L22o [I]
FZ_REF(3,3,1,2) 30000 ; N ! Reference vertical force
IT(3,3,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L22o [I]
IT_XXZZ(3,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L22o [I]
M_TIRE(3,3,1,2)    91 ; kg ! Mass of tire L22o
MU_REF_X(3,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L22o
MU_REF_Y(3,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L22o
R0(3,3,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L22o [I]
RR_C(3,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,2,1) 1 ! Internal tire shear-model option, R22i [I]
OPT_TIRE_COMB(3,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R22i [I]
FZ_REF(3,3,2,1) 30000 ; N ! Reference vertical force
IT(3,3,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R22i [I]
IT_XXZZ(3,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R22i [I]
M_TIRE(3,3,2,1)    91 ; kg ! Mass of tire R22i
MU_REF_X(3,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R22i
MU_REF_Y(3,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R22i
R0(3,3,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R22i [I]
RR_C(3,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,3,2,2) 1 ! Internal tire shear-model option, R22o [I]
OPT_TIRE_COMB(3,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R22o [I]
FZ_REF(3,3,2,2) 30000 ; N ! Reference vertical force
IT(3,3,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R22o [I]
IT_XXZZ(3,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R22o [I]
M_TIRE(3,3,2,2)    91 ; kg ! Mass of tire R22o
MU_REF_X(3,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R22o
MU_REF_Y(3,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R22o
R0(3,3,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,3,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R22o [I]
RR_C(3,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,4,1,1) 1 ! Internal tire shear-model option, L23i [I]
OPT_TIRE_COMB(3,4,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,4,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,4,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,4,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L23i [I]
FZ_REF(3,4,1,1) 30000 ; N ! Reference vertical force
IT(3,4,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L23i [I]
IT_XXZZ(3,4,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L23i [I]
M_TIRE(3,4,1,1)    91 ; kg ! Mass of tire L23i
MU_REF_X(3,4,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L23i
MU_REF_Y(3,4,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L23i
R0(3,4,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,4,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L23i [I]
RR_C(3,4,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,4,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,4,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,4,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,4,1,2) 1 ! Internal tire shear-model option, L23o [I]
OPT_TIRE_COMB(3,4,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,4,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,4,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,4,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L23o [I]
FZ_REF(3,4,1,2) 30000 ; N ! Reference vertical force
IT(3,4,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L23o [I]
IT_XXZZ(3,4,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L23o [I]
M_TIRE(3,4,1,2)    91 ; kg ! Mass of tire L23o
MU_REF_X(3,4,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L23o
MU_REF_Y(3,4,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L23o
R0(3,4,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,4,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L23o [I]
RR_C(3,4,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,4,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,4,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,4,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,4,2,1) 1 ! Internal tire shear-model option, R23i [I]
OPT_TIRE_COMB(3,4,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,4,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,4,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,4,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R23i [I]
FZ_REF(3,4,2,1) 30000 ; N ! Reference vertical force
IT(3,4,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R23i [I]
IT_XXZZ(3,4,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R23i [I]
M_TIRE(3,4,2,1)    91 ; kg ! Mass of tire R23i
MU_REF_X(3,4,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R23i
MU_REF_Y(3,4,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R23i
R0(3,4,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,4,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R23i [I]
RR_C(3,4,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,4,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,4,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,4,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,4,2,2) 1 ! Internal tire shear-model option, R23o [I]
OPT_TIRE_COMB(3,4,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,4,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,4,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,4,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R23o [I]
FZ_REF(3,4,2,2) 30000 ; N ! Reference vertical force
IT(3,4,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R23o [I]
IT_XXZZ(3,4,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R23o [I]
M_TIRE(3,4,2,2)    91 ; kg ! Mass of tire R23o
MU_REF_X(3,4,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R23o
MU_REF_Y(3,4,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R23o
R0(3,4,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,4,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R23o [I]
RR_C(3,4,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,4,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,4,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,4,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,5,1,1) 1 ! Internal tire shear-model option, L24i [I]
OPT_TIRE_COMB(3,5,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,5,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,5,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,5,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L24i [I]
FZ_REF(3,5,1,1) 30000 ; N ! Reference vertical force
IT(3,5,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L24i [I]
IT_XXZZ(3,5,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L24i [I]
M_TIRE(3,5,1,1)    91 ; kg ! Mass of tire L24i
MU_REF_X(3,5,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L24i
MU_REF_Y(3,5,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L24i
R0(3,5,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,5,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L24i [I]
RR_C(3,5,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,5,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,5,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,5,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,5,1,2) 1 ! Internal tire shear-model option, L24o [I]
OPT_TIRE_COMB(3,5,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,5,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,5,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,5,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L24o [I]
FZ_REF(3,5,1,2) 30000 ; N ! Reference vertical force
IT(3,5,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L24o [I]
IT_XXZZ(3,5,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L24o [I]
M_TIRE(3,5,1,2)    91 ; kg ! Mass of tire L24o
MU_REF_X(3,5,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L24o
MU_REF_Y(3,5,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L24o
R0(3,5,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,5,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L24o [I]
RR_C(3,5,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,5,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,5,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,5,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,5,2,1) 1 ! Internal tire shear-model option, R24i [I]
OPT_TIRE_COMB(3,5,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,5,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,5,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,5,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R24i [I]
FZ_REF(3,5,2,1) 30000 ; N ! Reference vertical force
IT(3,5,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R24i [I]
IT_XXZZ(3,5,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R24i [I]
M_TIRE(3,5,2,1)    91 ; kg ! Mass of tire R24i
MU_REF_X(3,5,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R24i
MU_REF_Y(3,5,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R24i
R0(3,5,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,5,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R24i [I]
RR_C(3,5,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,5,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,5,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,5,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,5,2,2) 1 ! Internal tire shear-model option, R24o [I]
OPT_TIRE_COMB(3,5,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,5,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,5,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,5,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R24o [I]
FZ_REF(3,5,2,2) 30000 ; N ! Reference vertical force
IT(3,5,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R24o [I]
IT_XXZZ(3,5,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R24o [I]
M_TIRE(3,5,2,2)    91 ; kg ! Mass of tire R24o
MU_REF_X(3,5,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R24o
MU_REF_Y(3,5,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R24o
R0(3,5,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,5,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R24o [I]
RR_C(3,5,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,5,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,5,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,5,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,6,1,1) 1 ! Internal tire shear-model option, L25i [I]
OPT_TIRE_COMB(3,6,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,6,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,6,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,6,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L25i [I]
FZ_REF(3,6,1,1) 30000 ; N ! Reference vertical force
IT(3,6,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L25i [I]
IT_XXZZ(3,6,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L25i [I]
M_TIRE(3,6,1,1)    91 ; kg ! Mass of tire L25i
MU_REF_X(3,6,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L25i
MU_REF_Y(3,6,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L25i
R0(3,6,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,6,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L25i [I]
RR_C(3,6,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,6,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,6,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,6,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,6,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,6,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,6,1,2) 1 ! Internal tire shear-model option, L25o [I]
OPT_TIRE_COMB(3,6,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,6,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,6,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,6,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L25o [I]
FZ_REF(3,6,1,2) 30000 ; N ! Reference vertical force
IT(3,6,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L25o [I]
IT_XXZZ(3,6,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L25o [I]
M_TIRE(3,6,1,2)    91 ; kg ! Mass of tire L25o
MU_REF_X(3,6,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L25o
MU_REF_Y(3,6,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L25o
R0(3,6,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,6,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L25o [I]
RR_C(3,6,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,6,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,6,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,6,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,6,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,6,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,6,2,1) 1 ! Internal tire shear-model option, R25i [I]
OPT_TIRE_COMB(3,6,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,6,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,6,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,6,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R25i [I]
FZ_REF(3,6,2,1) 30000 ; N ! Reference vertical force
IT(3,6,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R25i [I]
IT_XXZZ(3,6,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R25i [I]
M_TIRE(3,6,2,1)    91 ; kg ! Mass of tire R25i
MU_REF_X(3,6,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R25i
MU_REF_Y(3,6,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R25i
R0(3,6,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,6,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R25i [I]
RR_C(3,6,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,6,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,6,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,6,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,6,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,6,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,6,2,2) 1 ! Internal tire shear-model option, R25o [I]
OPT_TIRE_COMB(3,6,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,6,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,6,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,6,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R25o [I]
FZ_REF(3,6,2,2) 30000 ; N ! Reference vertical force
IT(3,6,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R25o [I]
IT_XXZZ(3,6,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R25o [I]
M_TIRE(3,6,2,2)    91 ; kg ! Mass of tire R25o
MU_REF_X(3,6,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R25o
MU_REF_Y(3,6,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R25o
R0(3,6,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,6,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R25o [I]
RR_C(3,6,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,6,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,6,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,6,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,6,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,6,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,7,1,1) 1 ! Internal tire shear-model option, L26i [I]
OPT_TIRE_COMB(3,7,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,7,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,7,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,7,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L26i [I]
FZ_REF(3,7,1,1) 30000 ; N ! Reference vertical force
IT(3,7,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L26i [I]
IT_XXZZ(3,7,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L26i [I]
M_TIRE(3,7,1,1)    91 ; kg ! Mass of tire L26i
MU_REF_X(3,7,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L26i
MU_REF_Y(3,7,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L26i
R0(3,7,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,7,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L26i [I]
RR_C(3,7,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,7,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,7,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,7,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,7,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,7,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,7,1,2) 1 ! Internal tire shear-model option, L26o [I]
OPT_TIRE_COMB(3,7,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,7,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,7,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,7,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L26o [I]
FZ_REF(3,7,1,2) 30000 ; N ! Reference vertical force
IT(3,7,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L26o [I]
IT_XXZZ(3,7,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L26o [I]
M_TIRE(3,7,1,2)    91 ; kg ! Mass of tire L26o
MU_REF_X(3,7,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L26o
MU_REF_Y(3,7,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L26o
R0(3,7,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,7,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L26o [I]
RR_C(3,7,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,7,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,7,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,7,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,7,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,7,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,7,2,1) 1 ! Internal tire shear-model option, R26i [I]
OPT_TIRE_COMB(3,7,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,7,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,7,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,7,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R26i [I]
FZ_REF(3,7,2,1) 30000 ; N ! Reference vertical force
IT(3,7,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R26i [I]
IT_XXZZ(3,7,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R26i [I]
M_TIRE(3,7,2,1)    91 ; kg ! Mass of tire R26i
MU_REF_X(3,7,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R26i
MU_REF_Y(3,7,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R26i
R0(3,7,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,7,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R26i [I]
RR_C(3,7,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,7,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,7,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,7,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,7,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,7,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,7,2,2) 1 ! Internal tire shear-model option, R26o [I]
OPT_TIRE_COMB(3,7,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,7,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,7,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,7,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R26o [I]
FZ_REF(3,7,2,2) 30000 ; N ! Reference vertical force
IT(3,7,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R26o [I]
IT_XXZZ(3,7,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R26o [I]
M_TIRE(3,7,2,2)    91 ; kg ! Mass of tire R26o
MU_REF_X(3,7,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R26o
MU_REF_Y(3,7,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R26o
R0(3,7,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,7,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R26o [I]
RR_C(3,7,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,7,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,7,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,7,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,7,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,7,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,8,1,1) 1 ! Internal tire shear-model option, L27i [I]
OPT_TIRE_COMB(3,8,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,8,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,8,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,8,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L27i [I]
FZ_REF(3,8,1,1) 30000 ; N ! Reference vertical force
IT(3,8,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L27i [I]
IT_XXZZ(3,8,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L27i [I]
M_TIRE(3,8,1,1)    91 ; kg ! Mass of tire L27i
MU_REF_X(3,8,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L27i
MU_REF_Y(3,8,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L27i
R0(3,8,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,8,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L27i [I]
RR_C(3,8,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,8,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,8,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,8,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,8,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,8,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,8,1,2) 1 ! Internal tire shear-model option, L27o [I]
OPT_TIRE_COMB(3,8,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,8,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,8,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,8,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L27o [I]
FZ_REF(3,8,1,2) 30000 ; N ! Reference vertical force
IT(3,8,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L27o [I]
IT_XXZZ(3,8,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L27o [I]
M_TIRE(3,8,1,2)    91 ; kg ! Mass of tire L27o
MU_REF_X(3,8,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L27o
MU_REF_Y(3,8,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L27o
R0(3,8,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,8,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L27o [I]
RR_C(3,8,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,8,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,8,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,8,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,8,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,8,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,8,2,1) 1 ! Internal tire shear-model option, R27i [I]
OPT_TIRE_COMB(3,8,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,8,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,8,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,8,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R27i [I]
FZ_REF(3,8,2,1) 30000 ; N ! Reference vertical force
IT(3,8,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R27i [I]
IT_XXZZ(3,8,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R27i [I]
M_TIRE(3,8,2,1)    91 ; kg ! Mass of tire R27i
MU_REF_X(3,8,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R27i
MU_REF_Y(3,8,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R27i
R0(3,8,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,8,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R27i [I]
RR_C(3,8,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,8,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,8,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,8,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,8,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,8,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,8,2,2) 1 ! Internal tire shear-model option, R27o [I]
OPT_TIRE_COMB(3,8,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,8,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,8,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,8,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R27o [I]
FZ_REF(3,8,2,2) 30000 ; N ! Reference vertical force
IT(3,8,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R27o [I]
IT_XXZZ(3,8,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R27o [I]
M_TIRE(3,8,2,2)    91 ; kg ! Mass of tire R27o
MU_REF_X(3,8,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R27o
MU_REF_Y(3,8,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R27o
R0(3,8,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,8,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R27o [I]
RR_C(3,8,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,8,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,8,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,8,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,8,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,8,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,9,1,1) 1 ! Internal tire shear-model option, L28i [I]
OPT_TIRE_COMB(3,9,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,9,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,9,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,9,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L28i [I]
FZ_REF(3,9,1,1) 30000 ; N ! Reference vertical force
IT(3,9,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L28i [I]
IT_XXZZ(3,9,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L28i [I]
M_TIRE(3,9,1,1)    91 ; kg ! Mass of tire L28i
MU_REF_X(3,9,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L28i
MU_REF_Y(3,9,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L28i
R0(3,9,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,9,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L28i [I]
RR_C(3,9,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,9,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,9,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,9,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,9,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,9,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,9,1,2) 1 ! Internal tire shear-model option, L28o [I]
OPT_TIRE_COMB(3,9,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,9,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,9,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,9,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L28o [I]
FZ_REF(3,9,1,2) 30000 ; N ! Reference vertical force
IT(3,9,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L28o [I]
IT_XXZZ(3,9,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L28o [I]
M_TIRE(3,9,1,2)    91 ; kg ! Mass of tire L28o
MU_REF_X(3,9,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L28o
MU_REF_Y(3,9,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L28o
R0(3,9,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,9,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L28o [I]
RR_C(3,9,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,9,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,9,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,9,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,9,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,9,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,9,2,1) 1 ! Internal tire shear-model option, R28i [I]
OPT_TIRE_COMB(3,9,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,9,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,9,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,9,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R28i [I]
FZ_REF(3,9,2,1) 30000 ; N ! Reference vertical force
IT(3,9,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R28i [I]
IT_XXZZ(3,9,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R28i [I]
M_TIRE(3,9,2,1)    91 ; kg ! Mass of tire R28i
MU_REF_X(3,9,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R28i
MU_REF_Y(3,9,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R28i
R0(3,9,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,9,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R28i [I]
RR_C(3,9,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,9,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,9,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,9,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,9,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,9,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,9,2,2) 1 ! Internal tire shear-model option, R28o [I]
OPT_TIRE_COMB(3,9,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,9,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,9,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,9,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R28o [I]
FZ_REF(3,9,2,2) 30000 ; N ! Reference vertical force
IT(3,9,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R28o [I]
IT_XXZZ(3,9,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R28o [I]
M_TIRE(3,9,2,2)    91 ; kg ! Mass of tire R28o
MU_REF_X(3,9,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R28o
MU_REF_Y(3,9,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R28o
R0(3,9,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,9,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R28o [I]
RR_C(3,9,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,9,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,9,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,9,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,9,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,9,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,10,1,1) 1 ! Internal tire shear-model option, L29i [I]
OPT_TIRE_COMB(3,10,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,10,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,10,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,10,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L29i [I]
FZ_REF(3,10,1,1) 30000 ; N ! Reference vertical force
IT(3,10,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L29i [I]
IT_XXZZ(3,10,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L29i [I]
M_TIRE(3,10,1,1)   91 ; kg ! Mass of tire L29i
MU_REF_X(3,10,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L29i
MU_REF_Y(3,10,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L29i
R0(3,10,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,10,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L29i [I]
RR_C(3,10,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,10,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,10,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,10,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,10,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,10,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,10,1,2) 1 ! Internal tire shear-model option, L29o [I]
OPT_TIRE_COMB(3,10,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,10,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,10,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,10,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L29o [I]
FZ_REF(3,10,1,2) 30000 ; N ! Reference vertical force
IT(3,10,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L29o [I]
IT_XXZZ(3,10,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L29o [I]
M_TIRE(3,10,1,2)   91 ; kg ! Mass of tire L29o
MU_REF_X(3,10,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L29o
MU_REF_Y(3,10,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L29o
R0(3,10,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,10,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L29o [I]
RR_C(3,10,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,10,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,10,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,10,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,10,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,10,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,10,2,1) 1 ! Internal tire shear-model option, R29i [I]
OPT_TIRE_COMB(3,10,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,10,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,10,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,10,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R29i [I]
FZ_REF(3,10,2,1) 30000 ; N ! Reference vertical force
IT(3,10,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R29i [I]
IT_XXZZ(3,10,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R29i [I]
M_TIRE(3,10,2,1)   91 ; kg ! Mass of tire R29i
MU_REF_X(3,10,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R29i
MU_REF_Y(3,10,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R29i
R0(3,10,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,10,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R29i [I]
RR_C(3,10,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,10,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,10,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,10,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,10,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,10,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,10,2,2) 1 ! Internal tire shear-model option, R29o [I]
OPT_TIRE_COMB(3,10,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,10,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,10,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,10,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R29o [I]
FZ_REF(3,10,2,2) 30000 ; N ! Reference vertical force
IT(3,10,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R29o [I]
IT_XXZZ(3,10,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R29o [I]
M_TIRE(3,10,2,2)   91 ; kg ! Mass of tire R29o
MU_REF_X(3,10,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R29o
MU_REF_Y(3,10,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R29o
R0(3,10,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,10,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R29o [I]
RR_C(3,10,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,10,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,10,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,10,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,10,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,10,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,11,1,1) 1 ! Internal tire shear-model option, L30i [I]
OPT_TIRE_COMB(3,11,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,11,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,11,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,11,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L30i [I]
FZ_REF(3,11,1,1) 30000 ; N ! Reference vertical force
IT(3,11,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L30i [I]
IT_XXZZ(3,11,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L30i [I]
M_TIRE(3,11,1,1)   91 ; kg ! Mass of tire L30i
MU_REF_X(3,11,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L30i
MU_REF_Y(3,11,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L30i
R0(3,11,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,11,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L30i [I]
RR_C(3,11,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,11,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,11,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,11,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,11,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,11,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,11,1,2) 1 ! Internal tire shear-model option, L30o [I]
OPT_TIRE_COMB(3,11,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,11,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,11,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,11,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L30o [I]
FZ_REF(3,11,1,2) 30000 ; N ! Reference vertical force
IT(3,11,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L30o [I]
IT_XXZZ(3,11,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L30o [I]
M_TIRE(3,11,1,2)   91 ; kg ! Mass of tire L30o
MU_REF_X(3,11,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L30o
MU_REF_Y(3,11,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L30o
R0(3,11,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,11,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L30o [I]
RR_C(3,11,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,11,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,11,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,11,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,11,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,11,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,11,2,1) 1 ! Internal tire shear-model option, R30i [I]
OPT_TIRE_COMB(3,11,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,11,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,11,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,11,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R30i [I]
FZ_REF(3,11,2,1) 30000 ; N ! Reference vertical force
IT(3,11,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R30i [I]
IT_XXZZ(3,11,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R30i [I]
M_TIRE(3,11,2,1)   91 ; kg ! Mass of tire R30i
MU_REF_X(3,11,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R30i
MU_REF_Y(3,11,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R30i
R0(3,11,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,11,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R30i [I]
RR_C(3,11,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,11,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,11,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,11,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,11,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,11,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,11,2,2) 1 ! Internal tire shear-model option, R30o [I]
OPT_TIRE_COMB(3,11,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,11,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,11,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,11,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R30o [I]
FZ_REF(3,11,2,2) 30000 ; N ! Reference vertical force
IT(3,11,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R30o [I]
IT_XXZZ(3,11,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R30o [I]
M_TIRE(3,11,2,2)   91 ; kg ! Mass of tire R30o
MU_REF_X(3,11,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R30o
MU_REF_Y(3,11,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R30o
R0(3,11,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,11,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R30o [I]
RR_C(3,11,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,11,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,11,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,11,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,11,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,11,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,12,1,1) 1 ! Internal tire shear-model option, L31i [I]
OPT_TIRE_COMB(3,12,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,12,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,12,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,12,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L31i [I]
FZ_REF(3,12,1,1) 30000 ; N ! Reference vertical force
IT(3,12,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L31i [I]
IT_XXZZ(3,12,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L31i [I]
M_TIRE(3,12,1,1)   91 ; kg ! Mass of tire L31i
MU_REF_X(3,12,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L31i
MU_REF_Y(3,12,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L31i
R0(3,12,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,12,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L31i [I]
RR_C(3,12,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,12,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,12,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,12,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,12,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,12,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,12,1,2) 1 ! Internal tire shear-model option, L31o [I]
OPT_TIRE_COMB(3,12,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,12,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,12,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,12,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L31o [I]
FZ_REF(3,12,1,2) 30000 ; N ! Reference vertical force
IT(3,12,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L31o [I]
IT_XXZZ(3,12,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L31o [I]
M_TIRE(3,12,1,2)   91 ; kg ! Mass of tire L31o
MU_REF_X(3,12,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L31o
MU_REF_Y(3,12,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L31o
R0(3,12,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,12,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L31o [I]
RR_C(3,12,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,12,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,12,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,12,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,12,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,12,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,12,2,1) 1 ! Internal tire shear-model option, R31i [I]
OPT_TIRE_COMB(3,12,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,12,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,12,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,12,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R31i [I]
FZ_REF(3,12,2,1) 30000 ; N ! Reference vertical force
IT(3,12,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R31i [I]
IT_XXZZ(3,12,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R31i [I]
M_TIRE(3,12,2,1)   91 ; kg ! Mass of tire R31i
MU_REF_X(3,12,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R31i
MU_REF_Y(3,12,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R31i
R0(3,12,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,12,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R31i [I]
RR_C(3,12,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,12,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,12,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,12,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,12,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,12,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,12,2,2) 1 ! Internal tire shear-model option, R31o [I]
OPT_TIRE_COMB(3,12,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,12,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,12,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,12,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R31o [I]
FZ_REF(3,12,2,2) 30000 ; N ! Reference vertical force
IT(3,12,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R31o [I]
IT_XXZZ(3,12,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R31o [I]
M_TIRE(3,12,2,2)   91 ; kg ! Mass of tire R31o
MU_REF_X(3,12,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R31o
MU_REF_Y(3,12,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R31o
R0(3,12,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,12,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R31o [I]
RR_C(3,12,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,12,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,12,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,12,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,12,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,12,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,13,1,1) 1 ! Internal tire shear-model option, L32i [I]
OPT_TIRE_COMB(3,13,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,13,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,13,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,13,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L32i [I]
FZ_REF(3,13,1,1) 30000 ; N ! Reference vertical force
IT(3,13,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L32i [I]
IT_XXZZ(3,13,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L32i [I]
M_TIRE(3,13,1,1)   91 ; kg ! Mass of tire L32i
MU_REF_X(3,13,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L32i
MU_REF_Y(3,13,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L32i
R0(3,13,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,13,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L32i [I]
RR_C(3,13,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,13,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,13,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,13,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,13,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,13,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,13,1,2) 1 ! Internal tire shear-model option, L32o [I]
OPT_TIRE_COMB(3,13,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,13,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,13,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,13,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L32o [I]
FZ_REF(3,13,1,2) 30000 ; N ! Reference vertical force
IT(3,13,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L32o [I]
IT_XXZZ(3,13,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L32o [I]
M_TIRE(3,13,1,2)   91 ; kg ! Mass of tire L32o
MU_REF_X(3,13,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L32o
MU_REF_Y(3,13,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L32o
R0(3,13,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,13,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L32o [I]
RR_C(3,13,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,13,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,13,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,13,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,13,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,13,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,13,2,1) 1 ! Internal tire shear-model option, R32i [I]
OPT_TIRE_COMB(3,13,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,13,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,13,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,13,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R32i [I]
FZ_REF(3,13,2,1) 30000 ; N ! Reference vertical force
IT(3,13,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R32i [I]
IT_XXZZ(3,13,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R32i [I]
M_TIRE(3,13,2,1)   91 ; kg ! Mass of tire R32i
MU_REF_X(3,13,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R32i
MU_REF_Y(3,13,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R32i
R0(3,13,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,13,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R32i [I]
RR_C(3,13,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,13,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,13,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,13,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,13,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,13,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,13,2,2) 1 ! Internal tire shear-model option, R32o [I]
OPT_TIRE_COMB(3,13,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,13,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,13,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,13,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R32o [I]
FZ_REF(3,13,2,2) 30000 ; N ! Reference vertical force
IT(3,13,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R32o [I]
IT_XXZZ(3,13,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R32o [I]
M_TIRE(3,13,2,2)   91 ; kg ! Mass of tire R32o
MU_REF_X(3,13,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R32o
MU_REF_Y(3,13,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R32o
R0(3,13,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,13,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R32o [I]
RR_C(3,13,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,13,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,13,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,13,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,13,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,13,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,14,1,1) 1 ! Internal tire shear-model option, L33i [I]
OPT_TIRE_COMB(3,14,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,14,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,14,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,14,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L33i [I]
FZ_REF(3,14,1,1) 30000 ; N ! Reference vertical force
IT(3,14,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L33i [I]
IT_XXZZ(3,14,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L33i [I]
M_TIRE(3,14,1,1)   91 ; kg ! Mass of tire L33i
MU_REF_X(3,14,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L33i
MU_REF_Y(3,14,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L33i
R0(3,14,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,14,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L33i [I]
RR_C(3,14,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,14,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,14,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,14,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,14,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,14,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,14,1,2) 1 ! Internal tire shear-model option, L33o [I]
OPT_TIRE_COMB(3,14,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,14,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,14,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,14,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L33o [I]
FZ_REF(3,14,1,2) 30000 ; N ! Reference vertical force
IT(3,14,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L33o [I]
IT_XXZZ(3,14,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L33o [I]
M_TIRE(3,14,1,2)   91 ; kg ! Mass of tire L33o
MU_REF_X(3,14,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L33o
MU_REF_Y(3,14,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L33o
R0(3,14,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,14,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L33o [I]
RR_C(3,14,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,14,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,14,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,14,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,14,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,14,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,14,2,1) 1 ! Internal tire shear-model option, R33i [I]
OPT_TIRE_COMB(3,14,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,14,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,14,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(3,14,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R33i [I]
FZ_REF(3,14,2,1) 30000 ; N ! Reference vertical force
IT(3,14,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R33i [I]
IT_XXZZ(3,14,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R33i [I]
M_TIRE(3,14,2,1)   91 ; kg ! Mass of tire R33i
MU_REF_X(3,14,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R33i
MU_REF_Y(3,14,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R33i
R0(3,14,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,14,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R33i [I]
RR_C(3,14,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,14,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,14,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,14,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,14,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,14,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(3,14,2,2) 1 ! Internal tire shear-model option, R33o [I]
OPT_TIRE_COMB(3,14,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(3,14,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(3,14,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(3,14,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R33o [I]
FZ_REF(3,14,2,2) 30000 ; N ! Reference vertical force
IT(3,14,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R33o [I]
IT_XXZZ(3,14,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R33o [I]
M_TIRE(3,14,2,2)   91 ; kg ! Mass of tire R33o
MU_REF_X(3,14,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R33o
MU_REF_Y(3,14,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R33o
R0(3,14,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(3,14,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R33o [I]
RR_C(3,14,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(3,14,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(3,14,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(3,14,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(3,14,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(3,14,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,1,1) 1 ! Internal tire shear-model option, L34i [I]
OPT_TIRE_COMB(4,1,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L34i [I]
FZ_REF(4,1,1,1) 30000 ; N ! Reference vertical force
IT(4,1,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L34i [I]
IT_XXZZ(4,1,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L34i [I]
M_TIRE(4,1,1,1)    91 ; kg ! Mass of tire L34i
MU_REF_X(4,1,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L34i
MU_REF_Y(4,1,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L34i
R0(4,1,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L34i [I]
RR_C(4,1,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,1,2) 1 ! Internal tire shear-model option, L34o [I]
OPT_TIRE_COMB(4,1,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L34o [I]
FZ_REF(4,1,1,2) 30000 ; N ! Reference vertical force
IT(4,1,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L34o [I]
IT_XXZZ(4,1,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L34o [I]
M_TIRE(4,1,1,2)    91 ; kg ! Mass of tire L34o
MU_REF_X(4,1,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L34o
MU_REF_Y(4,1,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L34o
R0(4,1,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L34o [I]
RR_C(4,1,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,2,1) 1 ! Internal tire shear-model option, R34i [I]
OPT_TIRE_COMB(4,1,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R34i [I]
FZ_REF(4,1,2,1) 30000 ; N ! Reference vertical force
IT(4,1,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R34i [I]
IT_XXZZ(4,1,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R34i [I]
M_TIRE(4,1,2,1)    91 ; kg ! Mass of tire R34i
MU_REF_X(4,1,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R34i
MU_REF_Y(4,1,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R34i
R0(4,1,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R34i [I]
RR_C(4,1,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,1,2,2) 1 ! Internal tire shear-model option, R34o [I]
OPT_TIRE_COMB(4,1,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,1,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,1,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,1,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R34o [I]
FZ_REF(4,1,2,2) 30000 ; N ! Reference vertical force
IT(4,1,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R34o [I]
IT_XXZZ(4,1,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R34o [I]
M_TIRE(4,1,2,2)    91 ; kg ! Mass of tire R34o
MU_REF_X(4,1,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R34o
MU_REF_Y(4,1,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R34o
R0(4,1,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,1,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R34o [I]
RR_C(4,1,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,1,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,1,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,1,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,1,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,1,1) 1 ! Internal tire shear-model option, L35i [I]
OPT_TIRE_COMB(4,2,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L35i [I]
FZ_REF(4,2,1,1) 30000 ; N ! Reference vertical force
IT(4,2,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L35i [I]
IT_XXZZ(4,2,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L35i [I]
M_TIRE(4,2,1,1)    91 ; kg ! Mass of tire L35i
MU_REF_X(4,2,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L35i
MU_REF_Y(4,2,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L35i
R0(4,2,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L35i [I]
RR_C(4,2,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,1,2) 1 ! Internal tire shear-model option, L35o [I]
OPT_TIRE_COMB(4,2,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L35o [I]
FZ_REF(4,2,1,2) 30000 ; N ! Reference vertical force
IT(4,2,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L35o [I]
IT_XXZZ(4,2,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L35o [I]
M_TIRE(4,2,1,2)    91 ; kg ! Mass of tire L35o
MU_REF_X(4,2,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L35o
MU_REF_Y(4,2,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L35o
R0(4,2,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L35o [I]
RR_C(4,2,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2,1) 1 ! Internal tire shear-model option, R35i [I]
OPT_TIRE_COMB(4,2,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R35i [I]
FZ_REF(4,2,2,1) 30000 ; N ! Reference vertical force
IT(4,2,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R35i [I]
IT_XXZZ(4,2,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R35i [I]
M_TIRE(4,2,2,1)    91 ; kg ! Mass of tire R35i
MU_REF_X(4,2,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R35i
MU_REF_Y(4,2,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R35i
R0(4,2,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R35i [I]
RR_C(4,2,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,2,2,2) 1 ! Internal tire shear-model option, R35o [I]
OPT_TIRE_COMB(4,2,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,2,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,2,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,2,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R35o [I]
FZ_REF(4,2,2,2) 30000 ; N ! Reference vertical force
IT(4,2,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R35o [I]
IT_XXZZ(4,2,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R35o [I]
M_TIRE(4,2,2,2)    91 ; kg ! Mass of tire R35o
MU_REF_X(4,2,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R35o
MU_REF_Y(4,2,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R35o
R0(4,2,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,2,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R35o [I]
RR_C(4,2,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,2,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,2,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,2,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,2,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,3,1,1) 1 ! Internal tire shear-model option, L36i [I]
OPT_TIRE_COMB(4,3,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,3,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,3,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,3,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L36i [I]
FZ_REF(4,3,1,1) 30000 ; N ! Reference vertical force
IT(4,3,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L36i [I]
IT_XXZZ(4,3,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L36i [I]
M_TIRE(4,3,1,1)    91 ; kg ! Mass of tire L36i
MU_REF_X(4,3,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L36i
MU_REF_Y(4,3,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L36i
R0(4,3,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,3,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L36i [I]
RR_C(4,3,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,3,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,3,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,3,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,3,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,3,1,2) 1 ! Internal tire shear-model option, L36o [I]
OPT_TIRE_COMB(4,3,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,3,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,3,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,3,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L36o [I]
FZ_REF(4,3,1,2) 30000 ; N ! Reference vertical force
IT(4,3,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L36o [I]
IT_XXZZ(4,3,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L36o [I]
M_TIRE(4,3,1,2)    91 ; kg ! Mass of tire L36o
MU_REF_X(4,3,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L36o
MU_REF_Y(4,3,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L36o
R0(4,3,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,3,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L36o [I]
RR_C(4,3,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,3,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,3,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,3,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,3,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,3,2,1) 1 ! Internal tire shear-model option, R36i [I]
OPT_TIRE_COMB(4,3,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,3,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,3,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,3,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R36i [I]
FZ_REF(4,3,2,1) 30000 ; N ! Reference vertical force
IT(4,3,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R36i [I]
IT_XXZZ(4,3,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R36i [I]
M_TIRE(4,3,2,1)    91 ; kg ! Mass of tire R36i
MU_REF_X(4,3,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R36i
MU_REF_Y(4,3,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R36i
R0(4,3,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,3,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R36i [I]
RR_C(4,3,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,3,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,3,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,3,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,3,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,3,2,2) 1 ! Internal tire shear-model option, R36o [I]
OPT_TIRE_COMB(4,3,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,3,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,3,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,3,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R36o [I]
FZ_REF(4,3,2,2) 30000 ; N ! Reference vertical force
IT(4,3,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R36o [I]
IT_XXZZ(4,3,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R36o [I]
M_TIRE(4,3,2,2)    91 ; kg ! Mass of tire R36o
MU_REF_X(4,3,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R36o
MU_REF_Y(4,3,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R36o
R0(4,3,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,3,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R36o [I]
RR_C(4,3,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,3,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,3,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,3,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,3,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,4,1,1) 1 ! Internal tire shear-model option, L37i [I]
OPT_TIRE_COMB(4,4,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,4,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,4,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,4,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L37i [I]
FZ_REF(4,4,1,1) 30000 ; N ! Reference vertical force
IT(4,4,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L37i [I]
IT_XXZZ(4,4,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L37i [I]
M_TIRE(4,4,1,1)    91 ; kg ! Mass of tire L37i
MU_REF_X(4,4,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L37i
MU_REF_Y(4,4,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L37i
R0(4,4,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,4,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L37i [I]
RR_C(4,4,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,4,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,4,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,4,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,4,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,4,1,2) 1 ! Internal tire shear-model option, L37o [I]
OPT_TIRE_COMB(4,4,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,4,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,4,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,4,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L37o [I]
FZ_REF(4,4,1,2) 30000 ; N ! Reference vertical force
IT(4,4,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L37o [I]
IT_XXZZ(4,4,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L37o [I]
M_TIRE(4,4,1,2)    91 ; kg ! Mass of tire L37o
MU_REF_X(4,4,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L37o
MU_REF_Y(4,4,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L37o
R0(4,4,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,4,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L37o [I]
RR_C(4,4,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,4,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,4,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,4,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,4,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,4,2,1) 1 ! Internal tire shear-model option, R37i [I]
OPT_TIRE_COMB(4,4,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,4,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,4,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,4,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R37i [I]
FZ_REF(4,4,2,1) 30000 ; N ! Reference vertical force
IT(4,4,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R37i [I]
IT_XXZZ(4,4,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R37i [I]
M_TIRE(4,4,2,1)    91 ; kg ! Mass of tire R37i
MU_REF_X(4,4,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R37i
MU_REF_Y(4,4,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R37i
R0(4,4,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,4,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R37i [I]
RR_C(4,4,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,4,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,4,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,4,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,4,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,4,2,2) 1 ! Internal tire shear-model option, R37o [I]
OPT_TIRE_COMB(4,4,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,4,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,4,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,4,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R37o [I]
FZ_REF(4,4,2,2) 30000 ; N ! Reference vertical force
IT(4,4,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R37o [I]
IT_XXZZ(4,4,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R37o [I]
M_TIRE(4,4,2,2)    91 ; kg ! Mass of tire R37o
MU_REF_X(4,4,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R37o
MU_REF_Y(4,4,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R37o
R0(4,4,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,4,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R37o [I]
RR_C(4,4,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,4,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,4,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,4,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,4,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,5,1,1) 1 ! Internal tire shear-model option, L38i [I]
OPT_TIRE_COMB(4,5,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,5,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,5,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,5,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L38i [I]
FZ_REF(4,5,1,1) 30000 ; N ! Reference vertical force
IT(4,5,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L38i [I]
IT_XXZZ(4,5,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L38i [I]
M_TIRE(4,5,1,1)    91 ; kg ! Mass of tire L38i
MU_REF_X(4,5,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L38i
MU_REF_Y(4,5,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L38i
R0(4,5,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,5,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L38i [I]
RR_C(4,5,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,5,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,5,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,5,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,5,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,5,1,2) 1 ! Internal tire shear-model option, L38o [I]
OPT_TIRE_COMB(4,5,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,5,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,5,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,5,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L38o [I]
FZ_REF(4,5,1,2) 30000 ; N ! Reference vertical force
IT(4,5,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L38o [I]
IT_XXZZ(4,5,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L38o [I]
M_TIRE(4,5,1,2)    91 ; kg ! Mass of tire L38o
MU_REF_X(4,5,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L38o
MU_REF_Y(4,5,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L38o
R0(4,5,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,5,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L38o [I]
RR_C(4,5,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,5,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,5,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,5,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,5,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,5,2,1) 1 ! Internal tire shear-model option, R38i [I]
OPT_TIRE_COMB(4,5,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,5,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,5,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,5,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R38i [I]
FZ_REF(4,5,2,1) 30000 ; N ! Reference vertical force
IT(4,5,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R38i [I]
IT_XXZZ(4,5,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R38i [I]
M_TIRE(4,5,2,1)    91 ; kg ! Mass of tire R38i
MU_REF_X(4,5,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R38i
MU_REF_Y(4,5,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R38i
R0(4,5,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,5,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R38i [I]
RR_C(4,5,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,5,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,5,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,5,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,5,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,5,2,2) 1 ! Internal tire shear-model option, R38o [I]
OPT_TIRE_COMB(4,5,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,5,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,5,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,5,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R38o [I]
FZ_REF(4,5,2,2) 30000 ; N ! Reference vertical force
IT(4,5,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R38o [I]
IT_XXZZ(4,5,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R38o [I]
M_TIRE(4,5,2,2)    91 ; kg ! Mass of tire R38o
MU_REF_X(4,5,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R38o
MU_REF_Y(4,5,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R38o
R0(4,5,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,5,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R38o [I]
RR_C(4,5,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,5,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,5,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,5,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,5,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,6,1,1) 1 ! Internal tire shear-model option, L39i [I]
OPT_TIRE_COMB(4,6,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,6,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,6,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,6,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L39i [I]
FZ_REF(4,6,1,1) 30000 ; N ! Reference vertical force
IT(4,6,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L39i [I]
IT_XXZZ(4,6,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L39i [I]
M_TIRE(4,6,1,1)    91 ; kg ! Mass of tire L39i
MU_REF_X(4,6,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L39i
MU_REF_Y(4,6,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L39i
R0(4,6,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,6,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L39i [I]
RR_C(4,6,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,6,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,6,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,6,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,6,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,6,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,6,1,2) 1 ! Internal tire shear-model option, L39o [I]
OPT_TIRE_COMB(4,6,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,6,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,6,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,6,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L39o [I]
FZ_REF(4,6,1,2) 30000 ; N ! Reference vertical force
IT(4,6,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L39o [I]
IT_XXZZ(4,6,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L39o [I]
M_TIRE(4,6,1,2)    91 ; kg ! Mass of tire L39o
MU_REF_X(4,6,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L39o
MU_REF_Y(4,6,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L39o
R0(4,6,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,6,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L39o [I]
RR_C(4,6,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,6,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,6,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,6,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,6,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,6,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,6,2,1) 1 ! Internal tire shear-model option, R39i [I]
OPT_TIRE_COMB(4,6,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,6,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,6,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,6,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R39i [I]
FZ_REF(4,6,2,1) 30000 ; N ! Reference vertical force
IT(4,6,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R39i [I]
IT_XXZZ(4,6,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R39i [I]
M_TIRE(4,6,2,1)    91 ; kg ! Mass of tire R39i
MU_REF_X(4,6,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R39i
MU_REF_Y(4,6,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R39i
R0(4,6,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,6,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R39i [I]
RR_C(4,6,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,6,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,6,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,6,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,6,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,6,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,6,2,2) 1 ! Internal tire shear-model option, R39o [I]
OPT_TIRE_COMB(4,6,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,6,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,6,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,6,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R39o [I]
FZ_REF(4,6,2,2) 30000 ; N ! Reference vertical force
IT(4,6,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R39o [I]
IT_XXZZ(4,6,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R39o [I]
M_TIRE(4,6,2,2)    91 ; kg ! Mass of tire R39o
MU_REF_X(4,6,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R39o
MU_REF_Y(4,6,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R39o
R0(4,6,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,6,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R39o [I]
RR_C(4,6,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,6,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,6,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,6,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,6,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,6,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,7,1,1) 1 ! Internal tire shear-model option, L40i [I]
OPT_TIRE_COMB(4,7,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,7,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,7,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,7,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L40i [I]
FZ_REF(4,7,1,1) 30000 ; N ! Reference vertical force
IT(4,7,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L40i [I]
IT_XXZZ(4,7,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L40i [I]
M_TIRE(4,7,1,1)    91 ; kg ! Mass of tire L40i
MU_REF_X(4,7,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L40i
MU_REF_Y(4,7,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L40i
R0(4,7,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,7,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L40i [I]
RR_C(4,7,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,7,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,7,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,7,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,7,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,7,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,7,1,2) 1 ! Internal tire shear-model option, L40o [I]
OPT_TIRE_COMB(4,7,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,7,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,7,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,7,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L40o [I]
FZ_REF(4,7,1,2) 30000 ; N ! Reference vertical force
IT(4,7,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L40o [I]
IT_XXZZ(4,7,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L40o [I]
M_TIRE(4,7,1,2)    91 ; kg ! Mass of tire L40o
MU_REF_X(4,7,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L40o
MU_REF_Y(4,7,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L40o
R0(4,7,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,7,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L40o [I]
RR_C(4,7,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,7,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,7,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,7,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,7,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,7,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,7,2,1) 1 ! Internal tire shear-model option, R40i [I]
OPT_TIRE_COMB(4,7,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,7,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,7,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,7,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R40i [I]
FZ_REF(4,7,2,1) 30000 ; N ! Reference vertical force
IT(4,7,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R40i [I]
IT_XXZZ(4,7,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R40i [I]
M_TIRE(4,7,2,1)    91 ; kg ! Mass of tire R40i
MU_REF_X(4,7,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R40i
MU_REF_Y(4,7,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R40i
R0(4,7,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,7,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R40i [I]
RR_C(4,7,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,7,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,7,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,7,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,7,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,7,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,7,2,2) 1 ! Internal tire shear-model option, R40o [I]
OPT_TIRE_COMB(4,7,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,7,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,7,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,7,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R40o [I]
FZ_REF(4,7,2,2) 30000 ; N ! Reference vertical force
IT(4,7,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R40o [I]
IT_XXZZ(4,7,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R40o [I]
M_TIRE(4,7,2,2)    91 ; kg ! Mass of tire R40o
MU_REF_X(4,7,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R40o
MU_REF_Y(4,7,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R40o
R0(4,7,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,7,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R40o [I]
RR_C(4,7,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,7,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,7,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,7,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,7,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,7,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,8,1,1) 1 ! Internal tire shear-model option, L41i [I]
OPT_TIRE_COMB(4,8,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,8,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,8,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,8,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L41i [I]
FZ_REF(4,8,1,1) 30000 ; N ! Reference vertical force
IT(4,8,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L41i [I]
IT_XXZZ(4,8,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L41i [I]
M_TIRE(4,8,1,1)    91 ; kg ! Mass of tire L41i
MU_REF_X(4,8,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L41i
MU_REF_Y(4,8,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L41i
R0(4,8,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,8,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L41i [I]
RR_C(4,8,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,8,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,8,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,8,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,8,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,8,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,8,1,2) 1 ! Internal tire shear-model option, L41o [I]
OPT_TIRE_COMB(4,8,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,8,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,8,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,8,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L41o [I]
FZ_REF(4,8,1,2) 30000 ; N ! Reference vertical force
IT(4,8,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L41o [I]
IT_XXZZ(4,8,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L41o [I]
M_TIRE(4,8,1,2)    91 ; kg ! Mass of tire L41o
MU_REF_X(4,8,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L41o
MU_REF_Y(4,8,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L41o
R0(4,8,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,8,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L41o [I]
RR_C(4,8,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,8,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,8,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,8,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,8,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,8,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,8,2,1) 1 ! Internal tire shear-model option, R41i [I]
OPT_TIRE_COMB(4,8,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,8,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,8,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,8,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R41i [I]
FZ_REF(4,8,2,1) 30000 ; N ! Reference vertical force
IT(4,8,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R41i [I]
IT_XXZZ(4,8,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R41i [I]
M_TIRE(4,8,2,1)    91 ; kg ! Mass of tire R41i
MU_REF_X(4,8,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R41i
MU_REF_Y(4,8,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R41i
R0(4,8,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,8,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R41i [I]
RR_C(4,8,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,8,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,8,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,8,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,8,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,8,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,8,2,2) 1 ! Internal tire shear-model option, R41o [I]
OPT_TIRE_COMB(4,8,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,8,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,8,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,8,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R41o [I]
FZ_REF(4,8,2,2) 30000 ; N ! Reference vertical force
IT(4,8,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R41o [I]
IT_XXZZ(4,8,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R41o [I]
M_TIRE(4,8,2,2)    91 ; kg ! Mass of tire R41o
MU_REF_X(4,8,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R41o
MU_REF_Y(4,8,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R41o
R0(4,8,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,8,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R41o [I]
RR_C(4,8,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,8,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,8,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,8,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,8,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,8,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,9,1,1) 1 ! Internal tire shear-model option, L42i [I]
OPT_TIRE_COMB(4,9,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,9,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,9,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,9,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L42i [I]
FZ_REF(4,9,1,1) 30000 ; N ! Reference vertical force
IT(4,9,1,1)       4.8 ; kg-m2 ! Spin inertia for tire L42i [I]
IT_XXZZ(4,9,1,1)    0 ; kg-m2 ! XX/ZZ inertia for tire L42i [I]
M_TIRE(4,9,1,1)    91 ; kg ! Mass of tire L42i
MU_REF_X(4,9,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L42i
MU_REF_Y(4,9,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L42i
R0(4,9,1,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,9,1,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L42i [I]
RR_C(4,9,1,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,9,1,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,9,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,9,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,9,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,9,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,9,1,2) 1 ! Internal tire shear-model option, L42o [I]
OPT_TIRE_COMB(4,9,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,9,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,9,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,9,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L42o [I]
FZ_REF(4,9,1,2) 30000 ; N ! Reference vertical force
IT(4,9,1,2)       4.8 ; kg-m2 ! Spin inertia for tire L42o [I]
IT_XXZZ(4,9,1,2)    0 ; kg-m2 ! XX/ZZ inertia for tire L42o [I]
M_TIRE(4,9,1,2)    91 ; kg ! Mass of tire L42o
MU_REF_X(4,9,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L42o
MU_REF_Y(4,9,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L42o
R0(4,9,1,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,9,1,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire L42o [I]
RR_C(4,9,1,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,9,1,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,9,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,9,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,9,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,9,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,9,2,1) 1 ! Internal tire shear-model option, R42i [I]
OPT_TIRE_COMB(4,9,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,9,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,9,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,9,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R42i [I]
FZ_REF(4,9,2,1) 30000 ; N ! Reference vertical force
IT(4,9,2,1)       4.8 ; kg-m2 ! Spin inertia for tire R42i [I]
IT_XXZZ(4,9,2,1)    0 ; kg-m2 ! XX/ZZ inertia for tire R42i [I]
M_TIRE(4,9,2,1)    91 ; kg ! Mass of tire R42i
MU_REF_X(4,9,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R42i
MU_REF_Y(4,9,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R42i
R0(4,9,2,1)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,9,2,1)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R42i [I]
RR_C(4,9,2,1)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,9,2,1)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,9,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,9,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,9,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,9,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,9,2,2) 1 ! Internal tire shear-model option, R42o [I]
OPT_TIRE_COMB(4,9,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,9,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,9,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,9,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R42o [I]
FZ_REF(4,9,2,2) 30000 ; N ! Reference vertical force
IT(4,9,2,2)       4.8 ; kg-m2 ! Spin inertia for tire R42o [I]
IT_XXZZ(4,9,2,2)    0 ; kg-m2 ! XX/ZZ inertia for tire R42o [I]
M_TIRE(4,9,2,2)    91 ; kg ! Mass of tire R42o
MU_REF_X(4,9,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R42o
MU_REF_Y(4,9,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R42o
R0(4,9,2,2)       520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,9,2,2)      510 ; mm ! Effective rolling radius (Vx/AVy), tire R42o [I]
RR_C(4,9,2,2)  0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,9,2,2)      1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,9,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,9,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,9,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,9,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,10,1,1) 1 ! Internal tire shear-model option, L43i [I]
OPT_TIRE_COMB(4,10,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,10,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,10,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,10,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L43i [I]
FZ_REF(4,10,1,1) 30000 ; N ! Reference vertical force
IT(4,10,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L43i [I]
IT_XXZZ(4,10,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L43i [I]
M_TIRE(4,10,1,1)   91 ; kg ! Mass of tire L43i
MU_REF_X(4,10,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L43i
MU_REF_Y(4,10,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L43i
R0(4,10,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,10,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L43i [I]
RR_C(4,10,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,10,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,10,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,10,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,10,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,10,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,10,1,2) 1 ! Internal tire shear-model option, L43o [I]
OPT_TIRE_COMB(4,10,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,10,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,10,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,10,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L43o [I]
FZ_REF(4,10,1,2) 30000 ; N ! Reference vertical force
IT(4,10,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L43o [I]
IT_XXZZ(4,10,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L43o [I]
M_TIRE(4,10,1,2)   91 ; kg ! Mass of tire L43o
MU_REF_X(4,10,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L43o
MU_REF_Y(4,10,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L43o
R0(4,10,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,10,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L43o [I]
RR_C(4,10,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,10,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,10,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,10,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,10,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,10,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,10,2,1) 1 ! Internal tire shear-model option, R43i [I]
OPT_TIRE_COMB(4,10,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,10,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,10,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,10,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R43i [I]
FZ_REF(4,10,2,1) 30000 ; N ! Reference vertical force
IT(4,10,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R43i [I]
IT_XXZZ(4,10,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R43i [I]
M_TIRE(4,10,2,1)   91 ; kg ! Mass of tire R43i
MU_REF_X(4,10,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R43i
MU_REF_Y(4,10,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R43i
R0(4,10,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,10,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R43i [I]
RR_C(4,10,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,10,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,10,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,10,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,10,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,10,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,10,2,2) 1 ! Internal tire shear-model option, R43o [I]
OPT_TIRE_COMB(4,10,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,10,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,10,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,10,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R43o [I]
FZ_REF(4,10,2,2) 30000 ; N ! Reference vertical force
IT(4,10,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R43o [I]
IT_XXZZ(4,10,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R43o [I]
M_TIRE(4,10,2,2)   91 ; kg ! Mass of tire R43o
MU_REF_X(4,10,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R43o
MU_REF_Y(4,10,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R43o
R0(4,10,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,10,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R43o [I]
RR_C(4,10,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,10,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,10,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,10,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,10,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,10,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,11,1,1) 1 ! Internal tire shear-model option, L44i [I]
OPT_TIRE_COMB(4,11,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,11,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,11,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,11,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L44i [I]
FZ_REF(4,11,1,1) 30000 ; N ! Reference vertical force
IT(4,11,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L44i [I]
IT_XXZZ(4,11,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L44i [I]
M_TIRE(4,11,1,1)   91 ; kg ! Mass of tire L44i
MU_REF_X(4,11,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L44i
MU_REF_Y(4,11,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L44i
R0(4,11,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,11,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L44i [I]
RR_C(4,11,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,11,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,11,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,11,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,11,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,11,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,11,1,2) 1 ! Internal tire shear-model option, L44o [I]
OPT_TIRE_COMB(4,11,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,11,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,11,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,11,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L44o [I]
FZ_REF(4,11,1,2) 30000 ; N ! Reference vertical force
IT(4,11,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L44o [I]
IT_XXZZ(4,11,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L44o [I]
M_TIRE(4,11,1,2)   91 ; kg ! Mass of tire L44o
MU_REF_X(4,11,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L44o
MU_REF_Y(4,11,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L44o
R0(4,11,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,11,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L44o [I]
RR_C(4,11,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,11,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,11,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,11,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,11,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,11,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,11,2,1) 1 ! Internal tire shear-model option, R44i [I]
OPT_TIRE_COMB(4,11,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,11,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,11,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,11,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R44i [I]
FZ_REF(4,11,2,1) 30000 ; N ! Reference vertical force
IT(4,11,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R44i [I]
IT_XXZZ(4,11,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R44i [I]
M_TIRE(4,11,2,1)   91 ; kg ! Mass of tire R44i
MU_REF_X(4,11,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R44i
MU_REF_Y(4,11,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R44i
R0(4,11,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,11,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R44i [I]
RR_C(4,11,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,11,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,11,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,11,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,11,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,11,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,11,2,2) 1 ! Internal tire shear-model option, R44o [I]
OPT_TIRE_COMB(4,11,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,11,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,11,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,11,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R44o [I]
FZ_REF(4,11,2,2) 30000 ; N ! Reference vertical force
IT(4,11,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R44o [I]
IT_XXZZ(4,11,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R44o [I]
M_TIRE(4,11,2,2)   91 ; kg ! Mass of tire R44o
MU_REF_X(4,11,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R44o
MU_REF_Y(4,11,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R44o
R0(4,11,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,11,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R44o [I]
RR_C(4,11,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,11,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,11,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,11,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,11,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,11,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,12,1,1) 1 ! Internal tire shear-model option, L45i [I]
OPT_TIRE_COMB(4,12,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,12,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,12,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,12,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L45i [I]
FZ_REF(4,12,1,1) 30000 ; N ! Reference vertical force
IT(4,12,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L45i [I]
IT_XXZZ(4,12,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L45i [I]
M_TIRE(4,12,1,1)   91 ; kg ! Mass of tire L45i
MU_REF_X(4,12,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L45i
MU_REF_Y(4,12,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L45i
R0(4,12,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,12,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L45i [I]
RR_C(4,12,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,12,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,12,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,12,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,12,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,12,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,12,1,2) 1 ! Internal tire shear-model option, L45o [I]
OPT_TIRE_COMB(4,12,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,12,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,12,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,12,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L45o [I]
FZ_REF(4,12,1,2) 30000 ; N ! Reference vertical force
IT(4,12,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L45o [I]
IT_XXZZ(4,12,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L45o [I]
M_TIRE(4,12,1,2)   91 ; kg ! Mass of tire L45o
MU_REF_X(4,12,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L45o
MU_REF_Y(4,12,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L45o
R0(4,12,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,12,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L45o [I]
RR_C(4,12,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,12,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,12,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,12,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,12,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,12,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,12,2,1) 1 ! Internal tire shear-model option, R45i [I]
OPT_TIRE_COMB(4,12,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,12,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,12,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,12,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R45i [I]
FZ_REF(4,12,2,1) 30000 ; N ! Reference vertical force
IT(4,12,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R45i [I]
IT_XXZZ(4,12,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R45i [I]
M_TIRE(4,12,2,1)   91 ; kg ! Mass of tire R45i
MU_REF_X(4,12,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R45i
MU_REF_Y(4,12,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R45i
R0(4,12,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,12,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R45i [I]
RR_C(4,12,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,12,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,12,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,12,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,12,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,12,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,12,2,2) 1 ! Internal tire shear-model option, R45o [I]
OPT_TIRE_COMB(4,12,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,12,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,12,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,12,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R45o [I]
FZ_REF(4,12,2,2) 30000 ; N ! Reference vertical force
IT(4,12,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R45o [I]
IT_XXZZ(4,12,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R45o [I]
M_TIRE(4,12,2,2)   91 ; kg ! Mass of tire R45o
MU_REF_X(4,12,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R45o
MU_REF_Y(4,12,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R45o
R0(4,12,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,12,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R45o [I]
RR_C(4,12,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,12,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,12,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,12,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,12,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,12,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,13,1,1) 1 ! Internal tire shear-model option, L46i [I]
OPT_TIRE_COMB(4,13,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,13,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,13,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,13,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L46i [I]
FZ_REF(4,13,1,1) 30000 ; N ! Reference vertical force
IT(4,13,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L46i [I]
IT_XXZZ(4,13,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L46i [I]
M_TIRE(4,13,1,1)   91 ; kg ! Mass of tire L46i
MU_REF_X(4,13,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L46i
MU_REF_Y(4,13,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L46i
R0(4,13,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,13,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L46i [I]
RR_C(4,13,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,13,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,13,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,13,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,13,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,13,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,13,1,2) 1 ! Internal tire shear-model option, L46o [I]
OPT_TIRE_COMB(4,13,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,13,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,13,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,13,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L46o [I]
FZ_REF(4,13,1,2) 30000 ; N ! Reference vertical force
IT(4,13,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L46o [I]
IT_XXZZ(4,13,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L46o [I]
M_TIRE(4,13,1,2)   91 ; kg ! Mass of tire L46o
MU_REF_X(4,13,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L46o
MU_REF_Y(4,13,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L46o
R0(4,13,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,13,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L46o [I]
RR_C(4,13,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,13,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,13,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,13,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,13,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,13,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,13,2,1) 1 ! Internal tire shear-model option, R46i [I]
OPT_TIRE_COMB(4,13,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,13,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,13,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,13,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R46i [I]
FZ_REF(4,13,2,1) 30000 ; N ! Reference vertical force
IT(4,13,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R46i [I]
IT_XXZZ(4,13,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R46i [I]
M_TIRE(4,13,2,1)   91 ; kg ! Mass of tire R46i
MU_REF_X(4,13,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R46i
MU_REF_Y(4,13,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R46i
R0(4,13,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,13,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R46i [I]
RR_C(4,13,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,13,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,13,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,13,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,13,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,13,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,13,2,2) 1 ! Internal tire shear-model option, R46o [I]
OPT_TIRE_COMB(4,13,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,13,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,13,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,13,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R46o [I]
FZ_REF(4,13,2,2) 30000 ; N ! Reference vertical force
IT(4,13,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R46o [I]
IT_XXZZ(4,13,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R46o [I]
M_TIRE(4,13,2,2)   91 ; kg ! Mass of tire R46o
MU_REF_X(4,13,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R46o
MU_REF_Y(4,13,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R46o
R0(4,13,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,13,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R46o [I]
RR_C(4,13,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,13,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,13,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,13,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,13,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,13,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,14,1,1) 1 ! Internal tire shear-model option, L47i [I]
OPT_TIRE_COMB(4,14,1,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,14,1,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,14,1,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,14,1,1) 1000000 ; N ! Maximum allowed vertical force, tire L47i [I]
FZ_REF(4,14,1,1) 30000 ; N ! Reference vertical force
IT(4,14,1,1)      4.8 ; kg-m2 ! Spin inertia for tire L47i [I]
IT_XXZZ(4,14,1,1)   0 ; kg-m2 ! XX/ZZ inertia for tire L47i [I]
M_TIRE(4,14,1,1)   91 ; kg ! Mass of tire L47i
MU_REF_X(4,14,1,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire L47i
MU_REF_Y(4,14,1,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire L47i
R0(4,14,1,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,14,1,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L47i [I]
RR_C(4,14,1,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,14,1,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,14,1,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,14,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,14,1,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,14,1,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,14,1,2) 1 ! Internal tire shear-model option, L47o [I]
OPT_TIRE_COMB(4,14,1,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,14,1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,14,1,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,14,1,2) 1000000 ; N ! Maximum allowed vertical force, tire L47o [I]
FZ_REF(4,14,1,2) 30000 ; N ! Reference vertical force
IT(4,14,1,2)      4.8 ; kg-m2 ! Spin inertia for tire L47o [I]
IT_XXZZ(4,14,1,2)   0 ; kg-m2 ! XX/ZZ inertia for tire L47o [I]
M_TIRE(4,14,1,2)   91 ; kg ! Mass of tire L47o
MU_REF_X(4,14,1,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire L47o
MU_REF_Y(4,14,1,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire L47o
R0(4,14,1,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,14,1,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire L47o [I]
RR_C(4,14,1,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,14,1,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,14,1,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,14,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,14,1,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,14,1,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,14,2,1) 1 ! Internal tire shear-model option, R47i [I]
OPT_TIRE_COMB(4,14,2,1) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,14,2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,14,2,1) 2 ! Options for handling lag in kappa
FZ_MAX(4,14,2,1) 1000000 ; N ! Maximum allowed vertical force, tire R47i [I]
FZ_REF(4,14,2,1) 30000 ; N ! Reference vertical force
IT(4,14,2,1)      4.8 ; kg-m2 ! Spin inertia for tire R47i [I]
IT_XXZZ(4,14,2,1)   0 ; kg-m2 ! XX/ZZ inertia for tire R47i [I]
M_TIRE(4,14,2,1)   91 ; kg ! Mass of tire R47i
MU_REF_X(4,14,2,1) 0.8 ; - ! Ground friction during meas. of Fx data, tire R47i
MU_REF_Y(4,14,2,1) 0.8 ; - ! Ground friction during meas. of Fy data, tire R47i
R0(4,14,2,1)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,14,2,1)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R47i [I]
RR_C(4,14,2,1) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,14,2,1)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,14,2,1) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,14,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,14,2,1) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,14,2,1) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(4,14,2,2) 1 ! Internal tire shear-model option, R47o [I]
OPT_TIRE_COMB(4,14,2,2) 0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(4,14,2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(4,14,2,2) 2 ! Options for handling lag in kappa
FZ_MAX(4,14,2,2) 1000000 ; N ! Maximum allowed vertical force, tire R47o [I]
FZ_REF(4,14,2,2) 30000 ; N ! Reference vertical force
IT(4,14,2,2)      4.8 ; kg-m2 ! Spin inertia for tire R47o [I]
IT_XXZZ(4,14,2,2)   0 ; kg-m2 ! XX/ZZ inertia for tire R47o [I]
M_TIRE(4,14,2,2)   91 ; kg ! Mass of tire R47o
MU_REF_X(4,14,2,2) 0.8 ; - ! Ground friction during meas. of Fx data, tire R47o
MU_REF_Y(4,14,2,2) 0.8 ; - ! Ground friction during meas. of Fy data, tire R47o
R0(4,14,2,2)      520 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(4,14,2,2)     510 ; mm ! Effective rolling radius (Vx/AVy), tire R47o [I]
RR_C(4,14,2,2) 0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(4,14,2,2)     1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(4,14,2,2) 2.56e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(4,14,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(4,14,2,2) 0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(4,14,2,2) 2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1,1)   1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,1)  1 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1,1)      0.3 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1,2)  1 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,1,2)      0.3 ; s ! Time constant for brake actuator R1
TLAG_BK(1,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(1,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,1)  1 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(1,2,1)      0.3 ; s ! Time constant for brake actuator L2
TLAG_BK(1,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(1,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2,2)  1 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(1,2,2)      0.3 ; s ! Time constant for brake actuator R2
TLAG_BK(1,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R2 [I]

OPT_BK_DYN(1,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,1) 0 ! [D] Brake L3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,1)  2 ; N-m ! Bearing/brake friction, wheel L3
TC_BK(1,3,1)      0.3 ; s ! Time constant for brake actuator L3
TLAG_BK(1,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L3 [I]

OPT_BK_DYN(1,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,3,2) 0 ! [D] Brake R3 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,3,2)  2 ; N-m ! Bearing/brake friction, wheel R3
TC_BK(1,3,2)      0.3 ; s ! Time constant for brake actuator R3
TLAG_BK(1,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R3 [I]

OPT_BK_DYN(1,4,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,4,1) 0 ! [D] Brake L4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,4,1)  2 ; N-m ! Bearing/brake friction, wheel L4
TC_BK(1,4,1)      0.3 ; s ! Time constant for brake actuator L4
TLAG_BK(1,4,1)   0.05 ; s ! Transport time delay for fluid to reach brake L4 [I]

OPT_BK_DYN(1,4,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,4,2) 0 ! [D] Brake R4 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,4,2)  2 ; N-m ! Bearing/brake friction, wheel R4
TC_BK(1,4,2)      0.3 ; s ! Time constant for brake actuator R4
TLAG_BK(1,4,2)   0.05 ; s ! Transport time delay for fluid to reach brake R4 [I]

OPT_BK_DYN(1,5,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,5,1) 0 ! [D] Brake L5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,5,1)  2 ; N-m ! Bearing/brake friction, wheel L5
TC_BK(1,5,1)      0.3 ; s ! Time constant for brake actuator L5
TLAG_BK(1,5,1)   0.05 ; s ! Transport time delay for fluid to reach brake L5 [I]

OPT_BK_DYN(1,5,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,5,2) 0 ! [D] Brake R5 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,5,2)  2 ; N-m ! Bearing/brake friction, wheel R5
TC_BK(1,5,2)      0.3 ; s ! Time constant for brake actuator R5
TLAG_BK(1,5,2)   0.05 ; s ! Transport time delay for fluid to reach brake R5 [I]

OPT_BK_DYN(2,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,1) 0 ! [D] Brake L6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,1)  2 ; N-m ! Bearing/brake friction, wheel L6
TC_BK(2,1,1)      0.3 ; s ! Time constant for brake actuator L6
TLAG_BK(2,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L6 [I]

OPT_BK_DYN(2,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1,2) 0 ! [D] Brake R6 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1,2)  2 ; N-m ! Bearing/brake friction, wheel R6
TC_BK(2,1,2)      0.3 ; s ! Time constant for brake actuator R6
TLAG_BK(2,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R6 [I]

OPT_BK_DYN(2,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,1) 0 ! [D] Brake L7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,1)  2 ; N-m ! Bearing/brake friction, wheel L7
TC_BK(2,2,1)      0.3 ; s ! Time constant for brake actuator L7
TLAG_BK(2,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L7 [I]

OPT_BK_DYN(2,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2,2) 0 ! [D] Brake R7 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2,2)  2 ; N-m ! Bearing/brake friction, wheel R7
TC_BK(2,2,2)      0.3 ; s ! Time constant for brake actuator R7
TLAG_BK(2,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R7 [I]

OPT_BK_DYN(2,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,3,1) 0 ! [D] Brake L8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,3,1)  2 ; N-m ! Bearing/brake friction, wheel L8
TC_BK(2,3,1)      0.3 ; s ! Time constant for brake actuator L8
TLAG_BK(2,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L8 [I]

OPT_BK_DYN(2,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,3,2) 0 ! [D] Brake R8 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,3,2)  2 ; N-m ! Bearing/brake friction, wheel R8
TC_BK(2,3,2)      0.3 ; s ! Time constant for brake actuator R8
TLAG_BK(2,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R8 [I]

OPT_BK_DYN(2,4,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,4,1) 0 ! [D] Brake L9 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,4,1)  2 ; N-m ! Bearing/brake friction, wheel L9
TC_BK(2,4,1)      0.3 ; s ! Time constant for brake actuator L9
TLAG_BK(2,4,1)   0.05 ; s ! Transport time delay for fluid to reach brake L9 [I]

OPT_BK_DYN(2,4,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,4,2) 0 ! [D] Brake R9 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,4,2)  2 ; N-m ! Bearing/brake friction, wheel R9
TC_BK(2,4,2)      0.3 ; s ! Time constant for brake actuator R9
TLAG_BK(2,4,2)   0.05 ; s ! Transport time delay for fluid to reach brake R9 [I]

OPT_BK_DYN(2,5,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,5,1) 0 ! [D] Brake L10 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,5,1)  2 ; N-m ! Bearing/brake friction, wheel L10
TC_BK(2,5,1)      0.3 ; s ! Time constant for brake actuator L10
TLAG_BK(2,5,1)   0.05 ; s ! Transport time delay for fluid to reach brake L10 [I]

OPT_BK_DYN(2,5,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,5,2) 0 ! [D] Brake R10 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,5,2)  2 ; N-m ! Bearing/brake friction, wheel R10
TC_BK(2,5,2)      0.3 ; s ! Time constant for brake actuator R10
TLAG_BK(2,5,2)   0.05 ; s ! Transport time delay for fluid to reach brake R10 [I]

OPT_BK_DYN(2,6,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,6,1) 0 ! [D] Brake L11 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,6,1)  2 ; N-m ! Bearing/brake friction, wheel L11
TC_BK(2,6,1)      0.3 ; s ! Time constant for brake actuator L11
TLAG_BK(2,6,1)   0.05 ; s ! Transport time delay for fluid to reach brake L11 [I]

OPT_BK_DYN(2,6,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,6,2) 0 ! [D] Brake R11 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,6,2)  2 ; N-m ! Bearing/brake friction, wheel R11
TC_BK(2,6,2)      0.3 ; s ! Time constant for brake actuator R11
TLAG_BK(2,6,2)   0.05 ; s ! Transport time delay for fluid to reach brake R11 [I]

OPT_BK_DYN(2,7,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,7,1) 0 ! [D] Brake L12 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,7,1)  2 ; N-m ! Bearing/brake friction, wheel L12
TC_BK(2,7,1)      0.3 ; s ! Time constant for brake actuator L12
TLAG_BK(2,7,1)   0.05 ; s ! Transport time delay for fluid to reach brake L12 [I]

OPT_BK_DYN(2,7,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,7,2) 0 ! [D] Brake R12 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,7,2)  2 ; N-m ! Bearing/brake friction, wheel R12
TC_BK(2,7,2)      0.3 ; s ! Time constant for brake actuator R12
TLAG_BK(2,7,2)   0.05 ; s ! Transport time delay for fluid to reach brake R12 [I]

OPT_BK_DYN(2,8,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,8,1) 0 ! [D] Brake L13 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,8,1)  2 ; N-m ! Bearing/brake friction, wheel L13
TC_BK(2,8,1)      0.3 ; s ! Time constant for brake actuator L13
TLAG_BK(2,8,1)   0.05 ; s ! Transport time delay for fluid to reach brake L13 [I]

OPT_BK_DYN(2,8,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,8,2) 0 ! [D] Brake R13 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,8,2)  2 ; N-m ! Bearing/brake friction, wheel R13
TC_BK(2,8,2)      0.3 ; s ! Time constant for brake actuator R13
TLAG_BK(2,8,2)   0.05 ; s ! Transport time delay for fluid to reach brake R13 [I]

OPT_BK_DYN(2,9,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,9,1) 0 ! [D] Brake L14 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,9,1)  2 ; N-m ! Bearing/brake friction, wheel L14
TC_BK(2,9,1)      0.3 ; s ! Time constant for brake actuator L14
TLAG_BK(2,9,1)   0.05 ; s ! Transport time delay for fluid to reach brake L14 [I]

OPT_BK_DYN(2,9,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,9,2) 0 ! [D] Brake R14 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,9,2)  2 ; N-m ! Bearing/brake friction, wheel R14
TC_BK(2,9,2)      0.3 ; s ! Time constant for brake actuator R14
TLAG_BK(2,9,2)   0.05 ; s ! Transport time delay for fluid to reach brake R14 [I]

OPT_BK_DYN(2,10,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,10,1) 0 ! [D] Brake L15 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,10,1) 2 ; N-m ! Bearing/brake friction, wheel L15
TC_BK(2,10,1)     0.3 ; s ! Time constant for brake actuator L15
TLAG_BK(2,10,1)  0.05 ; s ! Transport time delay for fluid to reach brake L15 [I]

OPT_BK_DYN(2,10,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,10,2) 0 ! [D] Brake R15 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,10,2) 2 ; N-m ! Bearing/brake friction, wheel R15
TC_BK(2,10,2)     0.3 ; s ! Time constant for brake actuator R15
TLAG_BK(2,10,2)  0.05 ; s ! Transport time delay for fluid to reach brake R15 [I]

OPT_BK_DYN(2,11,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,11,1) 0 ! [D] Brake L16 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,11,1) 2 ; N-m ! Bearing/brake friction, wheel L16
TC_BK(2,11,1)     0.3 ; s ! Time constant for brake actuator L16
TLAG_BK(2,11,1)  0.05 ; s ! Transport time delay for fluid to reach brake L16 [I]

OPT_BK_DYN(2,11,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,11,2) 0 ! [D] Brake R16 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,11,2) 2 ; N-m ! Bearing/brake friction, wheel R16
TC_BK(2,11,2)     0.3 ; s ! Time constant for brake actuator R16
TLAG_BK(2,11,2)  0.05 ; s ! Transport time delay for fluid to reach brake R16 [I]

OPT_BK_DYN(2,12,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,12,1) 0 ! [D] Brake L17 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,12,1) 2 ; N-m ! Bearing/brake friction, wheel L17
TC_BK(2,12,1)     0.3 ; s ! Time constant for brake actuator L17
TLAG_BK(2,12,1)  0.05 ; s ! Transport time delay for fluid to reach brake L17 [I]

OPT_BK_DYN(2,12,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,12,2) 0 ! [D] Brake R17 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,12,2) 2 ; N-m ! Bearing/brake friction, wheel R17
TC_BK(2,12,2)     0.3 ; s ! Time constant for brake actuator R17
TLAG_BK(2,12,2)  0.05 ; s ! Transport time delay for fluid to reach brake R17 [I]

OPT_BK_DYN(2,13,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,13,1) 0 ! [D] Brake L18 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,13,1) 2 ; N-m ! Bearing/brake friction, wheel L18
TC_BK(2,13,1)     0.3 ; s ! Time constant for brake actuator L18
TLAG_BK(2,13,1)  0.05 ; s ! Transport time delay for fluid to reach brake L18 [I]

OPT_BK_DYN(2,13,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,13,2) 0 ! [D] Brake R18 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,13,2) 2 ; N-m ! Bearing/brake friction, wheel R18
TC_BK(2,13,2)     0.3 ; s ! Time constant for brake actuator R18
TLAG_BK(2,13,2)  0.05 ; s ! Transport time delay for fluid to reach brake R18 [I]

OPT_BK_DYN(2,14,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,14,1) 0 ! [D] Brake L19 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,14,1) 2 ; N-m ! Bearing/brake friction, wheel L19
TC_BK(2,14,1)     0.3 ; s ! Time constant for brake actuator L19
TLAG_BK(2,14,1)  0.05 ; s ! Transport time delay for fluid to reach brake L19 [I]

OPT_BK_DYN(2,14,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,14,2) 0 ! [D] Brake R19 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,14,2) 2 ; N-m ! Bearing/brake friction, wheel R19
TC_BK(2,14,2)     0.3 ; s ! Time constant for brake actuator R19
TLAG_BK(2,14,2)  0.05 ; s ! Transport time delay for fluid to reach brake R19 [I]

OPT_BK_DYN(3,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,1) 0 ! [D] Brake L20 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,1)  2 ; N-m ! Bearing/brake friction, wheel L20
TC_BK(3,1,1)      0.3 ; s ! Time constant for brake actuator L20
TLAG_BK(3,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L20 [I]

OPT_BK_DYN(3,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,1,2) 0 ! [D] Brake R20 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,1,2)  2 ; N-m ! Bearing/brake friction, wheel R20
TC_BK(3,1,2)      0.3 ; s ! Time constant for brake actuator R20
TLAG_BK(3,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R20 [I]

OPT_BK_DYN(3,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,1) 0 ! [D] Brake L21 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,1)  2 ; N-m ! Bearing/brake friction, wheel L21
TC_BK(3,2,1)      0.3 ; s ! Time constant for brake actuator L21
TLAG_BK(3,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L21 [I]

OPT_BK_DYN(3,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,2,2) 0 ! [D] Brake R21 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,2,2)  2 ; N-m ! Bearing/brake friction, wheel R21
TC_BK(3,2,2)      0.3 ; s ! Time constant for brake actuator R21
TLAG_BK(3,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R21 [I]

OPT_BK_DYN(3,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,3,1) 0 ! [D] Brake L22 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,3,1)  2 ; N-m ! Bearing/brake friction, wheel L22
TC_BK(3,3,1)      0.3 ; s ! Time constant for brake actuator L22
TLAG_BK(3,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L22 [I]

OPT_BK_DYN(3,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,3,2) 0 ! [D] Brake R22 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,3,2)  2 ; N-m ! Bearing/brake friction, wheel R22
TC_BK(3,3,2)      0.3 ; s ! Time constant for brake actuator R22
TLAG_BK(3,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R22 [I]

OPT_BK_DYN(3,4,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,4,1) 0 ! [D] Brake L23 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,4,1)  2 ; N-m ! Bearing/brake friction, wheel L23
TC_BK(3,4,1)      0.3 ; s ! Time constant for brake actuator L23
TLAG_BK(3,4,1)   0.05 ; s ! Transport time delay for fluid to reach brake L23 [I]

OPT_BK_DYN(3,4,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,4,2) 0 ! [D] Brake R23 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,4,2)  2 ; N-m ! Bearing/brake friction, wheel R23
TC_BK(3,4,2)      0.3 ; s ! Time constant for brake actuator R23
TLAG_BK(3,4,2)   0.05 ; s ! Transport time delay for fluid to reach brake R23 [I]

OPT_BK_DYN(3,5,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,5,1) 0 ! [D] Brake L24 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,5,1)  2 ; N-m ! Bearing/brake friction, wheel L24
TC_BK(3,5,1)      0.3 ; s ! Time constant for brake actuator L24
TLAG_BK(3,5,1)   0.05 ; s ! Transport time delay for fluid to reach brake L24 [I]

OPT_BK_DYN(3,5,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,5,2) 0 ! [D] Brake R24 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,5,2)  2 ; N-m ! Bearing/brake friction, wheel R24
TC_BK(3,5,2)      0.3 ; s ! Time constant for brake actuator R24
TLAG_BK(3,5,2)   0.05 ; s ! Transport time delay for fluid to reach brake R24 [I]

OPT_BK_DYN(3,6,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,6,1) 0 ! [D] Brake L25 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,6,1)  2 ; N-m ! Bearing/brake friction, wheel L25
TC_BK(3,6,1)      0.3 ; s ! Time constant for brake actuator L25
TLAG_BK(3,6,1)   0.05 ; s ! Transport time delay for fluid to reach brake L25 [I]

OPT_BK_DYN(3,6,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,6,2) 0 ! [D] Brake R25 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,6,2)  2 ; N-m ! Bearing/brake friction, wheel R25
TC_BK(3,6,2)      0.3 ; s ! Time constant for brake actuator R25
TLAG_BK(3,6,2)   0.05 ; s ! Transport time delay for fluid to reach brake R25 [I]

OPT_BK_DYN(3,7,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,7,1) 0 ! [D] Brake L26 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,7,1)  2 ; N-m ! Bearing/brake friction, wheel L26
TC_BK(3,7,1)      0.3 ; s ! Time constant for brake actuator L26
TLAG_BK(3,7,1)   0.05 ; s ! Transport time delay for fluid to reach brake L26 [I]

OPT_BK_DYN(3,7,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,7,2) 0 ! [D] Brake R26 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,7,2)  2 ; N-m ! Bearing/brake friction, wheel R26
TC_BK(3,7,2)      0.3 ; s ! Time constant for brake actuator R26
TLAG_BK(3,7,2)   0.05 ; s ! Transport time delay for fluid to reach brake R26 [I]

OPT_BK_DYN(3,8,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,8,1) 0 ! [D] Brake L27 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,8,1)  2 ; N-m ! Bearing/brake friction, wheel L27
TC_BK(3,8,1)      0.3 ; s ! Time constant for brake actuator L27
TLAG_BK(3,8,1)   0.05 ; s ! Transport time delay for fluid to reach brake L27 [I]

OPT_BK_DYN(3,8,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,8,2) 0 ! [D] Brake R27 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,8,2)  2 ; N-m ! Bearing/brake friction, wheel R27
TC_BK(3,8,2)      0.3 ; s ! Time constant for brake actuator R27
TLAG_BK(3,8,2)   0.05 ; s ! Transport time delay for fluid to reach brake R27 [I]

OPT_BK_DYN(3,9,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,9,1) 0 ! [D] Brake L28 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,9,1)  2 ; N-m ! Bearing/brake friction, wheel L28
TC_BK(3,9,1)      0.3 ; s ! Time constant for brake actuator L28
TLAG_BK(3,9,1)   0.05 ; s ! Transport time delay for fluid to reach brake L28 [I]

OPT_BK_DYN(3,9,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,9,2) 0 ! [D] Brake R28 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,9,2)  2 ; N-m ! Bearing/brake friction, wheel R28
TC_BK(3,9,2)      0.3 ; s ! Time constant for brake actuator R28
TLAG_BK(3,9,2)   0.05 ; s ! Transport time delay for fluid to reach brake R28 [I]

OPT_BK_DYN(3,10,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,10,1) 0 ! [D] Brake L29 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,10,1) 2 ; N-m ! Bearing/brake friction, wheel L29
TC_BK(3,10,1)     0.3 ; s ! Time constant for brake actuator L29
TLAG_BK(3,10,1)  0.05 ; s ! Transport time delay for fluid to reach brake L29 [I]

OPT_BK_DYN(3,10,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,10,2) 0 ! [D] Brake R29 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,10,2) 2 ; N-m ! Bearing/brake friction, wheel R29
TC_BK(3,10,2)     0.3 ; s ! Time constant for brake actuator R29
TLAG_BK(3,10,2)  0.05 ; s ! Transport time delay for fluid to reach brake R29 [I]

OPT_BK_DYN(3,11,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,11,1) 0 ! [D] Brake L30 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,11,1) 2 ; N-m ! Bearing/brake friction, wheel L30
TC_BK(3,11,1)     0.3 ; s ! Time constant for brake actuator L30
TLAG_BK(3,11,1)  0.05 ; s ! Transport time delay for fluid to reach brake L30 [I]

OPT_BK_DYN(3,11,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,11,2) 0 ! [D] Brake R30 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,11,2) 2 ; N-m ! Bearing/brake friction, wheel R30
TC_BK(3,11,2)     0.3 ; s ! Time constant for brake actuator R30
TLAG_BK(3,11,2)  0.05 ; s ! Transport time delay for fluid to reach brake R30 [I]

OPT_BK_DYN(3,12,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,12,1) 0 ! [D] Brake L31 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,12,1) 2 ; N-m ! Bearing/brake friction, wheel L31
TC_BK(3,12,1)     0.3 ; s ! Time constant for brake actuator L31
TLAG_BK(3,12,1)  0.05 ; s ! Transport time delay for fluid to reach brake L31 [I]

OPT_BK_DYN(3,12,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,12,2) 0 ! [D] Brake R31 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,12,2) 2 ; N-m ! Bearing/brake friction, wheel R31
TC_BK(3,12,2)     0.3 ; s ! Time constant for brake actuator R31
TLAG_BK(3,12,2)  0.05 ; s ! Transport time delay for fluid to reach brake R31 [I]

OPT_BK_DYN(3,13,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,13,1) 0 ! [D] Brake L32 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,13,1) 2 ; N-m ! Bearing/brake friction, wheel L32
TC_BK(3,13,1)     0.3 ; s ! Time constant for brake actuator L32
TLAG_BK(3,13,1)  0.05 ; s ! Transport time delay for fluid to reach brake L32 [I]

OPT_BK_DYN(3,13,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,13,2) 0 ! [D] Brake R32 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,13,2) 2 ; N-m ! Bearing/brake friction, wheel R32
TC_BK(3,13,2)     0.3 ; s ! Time constant for brake actuator R32
TLAG_BK(3,13,2)  0.05 ; s ! Transport time delay for fluid to reach brake R32 [I]

OPT_BK_DYN(3,14,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,14,1) 0 ! [D] Brake L33 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,14,1) 2 ; N-m ! Bearing/brake friction, wheel L33
TC_BK(3,14,1)     0.3 ; s ! Time constant for brake actuator L33
TLAG_BK(3,14,1)  0.05 ; s ! Transport time delay for fluid to reach brake L33 [I]

OPT_BK_DYN(3,14,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(3,14,2) 0 ! [D] Brake R33 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(3,14,2) 2 ; N-m ! Bearing/brake friction, wheel R33
TC_BK(3,14,2)     0.3 ; s ! Time constant for brake actuator R33
TLAG_BK(3,14,2)  0.05 ; s ! Transport time delay for fluid to reach brake R33 [I]

OPT_BK_DYN(4,1,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,1) 0 ! [D] Brake L34 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,1)  2 ; N-m ! Bearing/brake friction, wheel L34
TC_BK(4,1,1)      0.3 ; s ! Time constant for brake actuator L34
TLAG_BK(4,1,1)   0.05 ; s ! Transport time delay for fluid to reach brake L34 [I]

OPT_BK_DYN(4,1,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,1,2) 0 ! [D] Brake R34 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,1,2)  2 ; N-m ! Bearing/brake friction, wheel R34
TC_BK(4,1,2)      0.3 ; s ! Time constant for brake actuator R34
TLAG_BK(4,1,2)   0.05 ; s ! Transport time delay for fluid to reach brake R34 [I]

OPT_BK_DYN(4,2,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,1) 0 ! [D] Brake L35 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,1)  2 ; N-m ! Bearing/brake friction, wheel L35
TC_BK(4,2,1)      0.3 ; s ! Time constant for brake actuator L35
TLAG_BK(4,2,1)   0.05 ; s ! Transport time delay for fluid to reach brake L35 [I]

OPT_BK_DYN(4,2,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,2,2) 0 ! [D] Brake R35 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,2,2)  2 ; N-m ! Bearing/brake friction, wheel R35
TC_BK(4,2,2)      0.3 ; s ! Time constant for brake actuator R35
TLAG_BK(4,2,2)   0.05 ; s ! Transport time delay for fluid to reach brake R35 [I]

OPT_BK_DYN(4,3,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,3,1) 0 ! [D] Brake L36 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,3,1)  2 ; N-m ! Bearing/brake friction, wheel L36
TC_BK(4,3,1)      0.3 ; s ! Time constant for brake actuator L36
TLAG_BK(4,3,1)   0.05 ; s ! Transport time delay for fluid to reach brake L36 [I]

OPT_BK_DYN(4,3,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,3,2) 0 ! [D] Brake R36 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,3,2)  2 ; N-m ! Bearing/brake friction, wheel R36
TC_BK(4,3,2)      0.3 ; s ! Time constant for brake actuator R36
TLAG_BK(4,3,2)   0.05 ; s ! Transport time delay for fluid to reach brake R36 [I]

OPT_BK_DYN(4,4,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,4,1) 0 ! [D] Brake L37 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,4,1)  2 ; N-m ! Bearing/brake friction, wheel L37
TC_BK(4,4,1)      0.3 ; s ! Time constant for brake actuator L37
TLAG_BK(4,4,1)   0.05 ; s ! Transport time delay for fluid to reach brake L37 [I]

OPT_BK_DYN(4,4,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,4,2) 0 ! [D] Brake R37 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,4,2)  2 ; N-m ! Bearing/brake friction, wheel R37
TC_BK(4,4,2)      0.3 ; s ! Time constant for brake actuator R37
TLAG_BK(4,4,2)   0.05 ; s ! Transport time delay for fluid to reach brake R37 [I]

OPT_BK_DYN(4,5,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,5,1) 0 ! [D] Brake L38 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,5,1)  2 ; N-m ! Bearing/brake friction, wheel L38
TC_BK(4,5,1)      0.3 ; s ! Time constant for brake actuator L38
TLAG_BK(4,5,1)   0.05 ; s ! Transport time delay for fluid to reach brake L38 [I]

OPT_BK_DYN(4,5,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,5,2) 0 ! [D] Brake R38 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,5,2)  2 ; N-m ! Bearing/brake friction, wheel R38
TC_BK(4,5,2)      0.3 ; s ! Time constant for brake actuator R38
TLAG_BK(4,5,2)   0.05 ; s ! Transport time delay for fluid to reach brake R38 [I]

OPT_BK_DYN(4,6,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,6,1) 0 ! [D] Brake L39 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,6,1)  2 ; N-m ! Bearing/brake friction, wheel L39
TC_BK(4,6,1)      0.3 ; s ! Time constant for brake actuator L39
TLAG_BK(4,6,1)   0.05 ; s ! Transport time delay for fluid to reach brake L39 [I]

OPT_BK_DYN(4,6,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,6,2) 0 ! [D] Brake R39 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,6,2)  2 ; N-m ! Bearing/brake friction, wheel R39
TC_BK(4,6,2)      0.3 ; s ! Time constant for brake actuator R39
TLAG_BK(4,6,2)   0.05 ; s ! Transport time delay for fluid to reach brake R39 [I]

OPT_BK_DYN(4,7,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,7,1) 0 ! [D] Brake L40 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,7,1)  2 ; N-m ! Bearing/brake friction, wheel L40
TC_BK(4,7,1)      0.3 ; s ! Time constant for brake actuator L40
TLAG_BK(4,7,1)   0.05 ; s ! Transport time delay for fluid to reach brake L40 [I]

OPT_BK_DYN(4,7,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,7,2) 0 ! [D] Brake R40 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,7,2)  2 ; N-m ! Bearing/brake friction, wheel R40
TC_BK(4,7,2)      0.3 ; s ! Time constant for brake actuator R40
TLAG_BK(4,7,2)   0.05 ; s ! Transport time delay for fluid to reach brake R40 [I]

OPT_BK_DYN(4,8,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,8,1) 0 ! [D] Brake L41 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,8,1)  2 ; N-m ! Bearing/brake friction, wheel L41
TC_BK(4,8,1)      0.3 ; s ! Time constant for brake actuator L41
TLAG_BK(4,8,1)   0.05 ; s ! Transport time delay for fluid to reach brake L41 [I]

OPT_BK_DYN(4,8,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,8,2) 0 ! [D] Brake R41 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,8,2)  2 ; N-m ! Bearing/brake friction, wheel R41
TC_BK(4,8,2)      0.3 ; s ! Time constant for brake actuator R41
TLAG_BK(4,8,2)   0.05 ; s ! Transport time delay for fluid to reach brake R41 [I]

OPT_BK_DYN(4,9,1)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,9,1) 0 ! [D] Brake L42 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,9,1)  2 ; N-m ! Bearing/brake friction, wheel L42
TC_BK(4,9,1)      0.3 ; s ! Time constant for brake actuator L42
TLAG_BK(4,9,1)   0.05 ; s ! Transport time delay for fluid to reach brake L42 [I]

OPT_BK_DYN(4,9,2)   1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,9,2) 0 ! [D] Brake R42 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,9,2)  2 ; N-m ! Bearing/brake friction, wheel R42
TC_BK(4,9,2)      0.3 ; s ! Time constant for brake actuator R42
TLAG_BK(4,9,2)   0.05 ; s ! Transport time delay for fluid to reach brake R42 [I]

OPT_BK_DYN(4,10,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,10,1) 0 ! [D] Brake L43 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,10,1) 2 ; N-m ! Bearing/brake friction, wheel L43
TC_BK(4,10,1)     0.3 ; s ! Time constant for brake actuator L43
TLAG_BK(4,10,1)  0.05 ; s ! Transport time delay for fluid to reach brake L43 [I]

OPT_BK_DYN(4,10,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,10,2) 0 ! [D] Brake R43 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,10,2) 2 ; N-m ! Bearing/brake friction, wheel R43
TC_BK(4,10,2)     0.3 ; s ! Time constant for brake actuator R43
TLAG_BK(4,10,2)  0.05 ; s ! Transport time delay for fluid to reach brake R43 [I]

OPT_BK_DYN(4,11,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,11,1) 0 ! [D] Brake L44 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,11,1) 2 ; N-m ! Bearing/brake friction, wheel L44
TC_BK(4,11,1)     0.3 ; s ! Time constant for brake actuator L44
TLAG_BK(4,11,1)  0.05 ; s ! Transport time delay for fluid to reach brake L44 [I]

OPT_BK_DYN(4,11,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,11,2) 0 ! [D] Brake R44 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,11,2) 2 ; N-m ! Bearing/brake friction, wheel R44
TC_BK(4,11,2)     0.3 ; s ! Time constant for brake actuator R44
TLAG_BK(4,11,2)  0.05 ; s ! Transport time delay for fluid to reach brake R44 [I]

OPT_BK_DYN(4,12,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,12,1) 0 ! [D] Brake L45 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,12,1) 2 ; N-m ! Bearing/brake friction, wheel L45
TC_BK(4,12,1)     0.3 ; s ! Time constant for brake actuator L45
TLAG_BK(4,12,1)  0.05 ; s ! Transport time delay for fluid to reach brake L45 [I]

OPT_BK_DYN(4,12,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,12,2) 0 ! [D] Brake R45 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,12,2) 2 ; N-m ! Bearing/brake friction, wheel R45
TC_BK(4,12,2)     0.3 ; s ! Time constant for brake actuator R45
TLAG_BK(4,12,2)  0.05 ; s ! Transport time delay for fluid to reach brake R45 [I]

OPT_BK_DYN(4,13,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,13,1) 0 ! [D] Brake L46 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,13,1) 2 ; N-m ! Bearing/brake friction, wheel L46
TC_BK(4,13,1)     0.3 ; s ! Time constant for brake actuator L46
TLAG_BK(4,13,1)  0.05 ; s ! Transport time delay for fluid to reach brake L46 [I]

OPT_BK_DYN(4,13,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,13,2) 0 ! [D] Brake R46 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,13,2) 2 ; N-m ! Bearing/brake friction, wheel R46
TC_BK(4,13,2)     0.3 ; s ! Time constant for brake actuator R46
TLAG_BK(4,13,2)  0.05 ; s ! Transport time delay for fluid to reach brake R46 [I]

OPT_BK_DYN(4,14,1)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,14,1) 0 ! [D] Brake L47 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,14,1) 2 ; N-m ! Bearing/brake friction, wheel L47
TC_BK(4,14,1)     0.3 ; s ! Time constant for brake actuator L47
TLAG_BK(4,14,1)  0.05 ; s ! Transport time delay for fluid to reach brake L47 [I]

OPT_BK_DYN(4,14,2)  1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(4,14,2) 0 ! [D] Brake R47 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(4,14,2) 2 ; N-m ! Bearing/brake friction, wheel R47
TC_BK(4,14,2)     0.3 ; s ! Time constant for brake actuator R47
TLAG_BK(4,14,2)  0.05 ; s ! Transport time delay for fluid to reach brake R47 [I]

!------------------------------------------------------------------------------------
! TANDEM AND TRIDEM SUSPENSIONS
!------------------------------------------------------------------------------------
TANDEM_NAME(1,1)    1 ! [D] Tandem in unit 1 that connects axles 1 & 2
CFZ_MY_TAND(1,1)    0 ; 1/m ! Coefficient: Load transfer to front axle of this
                      ! tandem per unit of total wheel-spin torque applied to the
                      ! four wheels of this tandem
R_TAND_TRAIL_STATIC(1,1) 0.5 ; - ! Ratio: fraction of static suspension load carried
                             ! by the trailing tandem axle when unloaded and
                             ! unhitched [I]
R_TANDEM(1,1)     0.5 ; - ! Ratio: fraction of dynamic suspension load shared by the
                      ! other axle of this tandem; 0 -> no sharing; 1/2 -> full
                      ! sharing [I]

TANDEM_NAME(1,2)    2 ! [D] Lead tandem in tridem on unit 1; connects axles 3 & 4
CFZ_MY_TAND(1,2)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TANDEM(1,2) 0.6666666667 ; - ! Ratio: fraction of dynamic suspension load shared
                           ! by the other axles of this tridem; 0 -> no sharing;
                           ! 2/3 -> full sharing [I]

TANDEM_NAME(1,3)    3 ! [D] Trailing tandem in tridem; connects axles 4 & 5
CFZ_MY_TAND(1,3)    0 ; 1/m ! Coefficient: Load transfer due to wheel-spin torque
R_TANDEM(1,3) 0.6666666667 ; - ! Fraction of dynamic load shared by the other axles
                           ! of this tridem [I]

TANDEM_NAME(2,1)    4 ! [D] Lead tandem in tridem on unit 2; connects axles 6 & 7
CFZ_MY_TAND(2,1)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,1)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(2,2)    5 ! [D] Trailing tandem in tridem; connects axles 7 & 8
CFZ_MY_TAND(2,2)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,2)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(2,3)    6 ! [D] Lead tandem in tridem on unit 2; connects axles 9 & 10
CFZ_MY_TAND(2,3)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,3)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(2,4)    7 ! [D] Trailing tandem in tridem; connects axles 10 & 11
CFZ_MY_TAND(2,4)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,4)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(2,5)    8 ! [D] Lead tandem in tridem on unit 2; connects axles 12 & 13
CFZ_MY_TAND(2,5)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,5)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(2,6)    9 ! [D] Trailing tandem in tridem; connects axles 13 & 14
CFZ_MY_TAND(2,6)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,6)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(2,7)   10 ! [D] Lead tandem in tridem on unit 2; connects axles 15 & 16
CFZ_MY_TAND(2,7)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,7)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(2,8)   11 ! [D] Trailing tandem in tridem; connects axles 16 & 17
CFZ_MY_TAND(2,8)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(2,8)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(2,9)   12 ! [D] Tandem in unit 2 that connects axles 18 & 19
CFZ_MY_TAND(2,9)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TAND_TRAIL_STATIC(2,9) 0.5 ; - ! [D] Ratio: fraction of static suspension load
                             ! carried by the trailing tandem axle when unloaded
                             ! and unhitched [I]
R_TANDEM(2,9)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

TANDEM_NAME(3,1)   13 ! [D] Lead tandem in tridem on unit 3; connects axles 20 & 21
CFZ_MY_TAND(3,1)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,1)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(3,2)   14 ! [D] Trailing tandem in tridem; connects axles 21 & 22
CFZ_MY_TAND(3,2)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,2)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(3,3)   15 ! [D] Lead tandem in tridem on unit 3; connects axles 23 & 24
CFZ_MY_TAND(3,3)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,3)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(3,4)   16 ! [D] Trailing tandem in tridem; connects axles 24 & 25
CFZ_MY_TAND(3,4)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,4)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(3,5)   17 ! [D] Lead tandem in tridem on unit 3; connects axles 26 & 27
CFZ_MY_TAND(3,5)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,5)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(3,6)   18 ! [D] Trailing tandem in tridem; connects axles 27 & 28
CFZ_MY_TAND(3,6)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,6)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(3,7)   19 ! [D] Lead tandem in tridem on unit 3; connects axles 29 & 30
CFZ_MY_TAND(3,7)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,7)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(3,8)   20 ! [D] Trailing tandem in tridem; connects axles 30 & 31
CFZ_MY_TAND(3,8)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(3,8)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(3,9)   21 ! [D] Tandem in unit 3 that connects axles 32 & 33
CFZ_MY_TAND(3,9)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TAND_TRAIL_STATIC(3,9) 0.5 ; - ! [D] Ratio: fraction of static suspension load
                             ! carried by the trailing tandem axle when unloaded
                             ! and unhitched [I]
R_TANDEM(3,9)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

TANDEM_NAME(4,1)   22 ! [D] Lead tandem in tridem on unit 4; connects axles 34 & 35
CFZ_MY_TAND(4,1)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,1)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(4,2)   23 ! [D] Trailing tandem in tridem; connects axles 35 & 36
CFZ_MY_TAND(4,2)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,2)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(4,3)   24 ! [D] Lead tandem in tridem on unit 4; connects axles 37 & 38
CFZ_MY_TAND(4,3)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,3)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(4,4)   25 ! [D] Trailing tandem in tridem; connects axles 38 & 39
CFZ_MY_TAND(4,4)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,4)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(4,5)   26 ! [D] Lead tandem in tridem on unit 4; connects axles 40 & 41
CFZ_MY_TAND(4,5)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,5)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(4,6)   27 ! [D] Trailing tandem in tridem; connects axles 41 & 42
CFZ_MY_TAND(4,6)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,6)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(4,7)   28 ! [D] Lead tandem in tridem on unit 4; connects axles 43 & 44
CFZ_MY_TAND(4,7)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,7)     0.5 ; - ! [D] Ratio: fraction of dynamic suspension load shared by
                      ! the other axles of this tridem; 0 -> no sharing; 2/3 ->
                      ! full sharing [I]

TANDEM_NAME(4,8)   29 ! [D] Trailing tandem in tridem; connects axles 44 & 45
CFZ_MY_TAND(4,8)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TANDEM(4,8)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axles
                      ! of this tridem [I]

TANDEM_NAME(4,9)   30 ! [D] Tandem in unit 4 that connects axles 46 & 47
CFZ_MY_TAND(4,9)    0 ; 1/m ! [D] Coefficient: Load transfer due to wheel-spin
                      ! torque
R_TAND_TRAIL_STATIC(4,9) 0.5 ; - ! [D] Ratio: fraction of static suspension load
                             ! carried by the trailing tandem axle when unloaded
                             ! and unhitched [I]
R_TANDEM(4,9)     0.5 ; - ! [D] Fraction of dynamic load shared by the other axle of
                      ! this tandem [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              4 ! Powertrain type: 0 -> Simple, 1 -> front-axle-drive, 2 ->
                      ! rear-axle-drive, 3 -> 2-axle- drive, 4 -> 3-axle-drive, 5
                      ! -> 4-axle-drive, 6 -> 5-axle-drive, 7->AVL Cruise
R_DRIVE_SC(1)       0 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(2)       0 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(3) 0.3333333333 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(4) 0.3333333333 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
R_DRIVE_SC(5) 0.3333333333 ; - ! Ratio: [axle drive torque]/[total drive torque] [I]
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1) 1 ! 1st drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(1)  0 ! Is the 1st drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(1) 0.8 ; N-m-s/deg ! Torsional damping for locked 1st drive axle
                        ! diff [I]
LOCKED_DIFF_K(1)   80 ; N-m/deg ! Torsional spring rate for locked 1st drive axle
                      ! diff [I]
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of 1st drive axle diff [I]
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of 1st drive axle diff [I]
R_GEAR_DIFF(1)   6.44 ; - ! Gear ratio of 1st drive axle diff [I]
IDS(1)          0.013 ; kg-m2 ! Spin inertia of 1st drive axle diff input shaft [I]
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 1st drive axle diff
                      ! [I]
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 1st drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control for 1st drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_TWIN_CLUTCH(1)  0 ! [D] Twin clutches on 1st drive axle diff? 0 -> no, 1 -> yes
                      ! [I]

OPT_DIFF_INTERNAL(4) 1 ! 3rd drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(4)  0 ! Is the 3rd drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(4) 0.8 ; N-m-s/deg ! Torsional damping for locked 3rd drive axle
                        ! diff [I]
LOCKED_DIFF_K(4)   80 ; N-m/deg ! Torsional spring rate for locked 3rd drive axle
                      ! diff [I]
R_EFF_F_DIFF(4)  0.99 ; - ! Forward efficiency of 3rd drive axle diff [I]
R_EFF_R_DIFF(4)  0.99 ; - ! Reverse efficiency of 3rd drive axle diff [I]
R_GEAR_DIFF(4)   6.44 ; - ! Gear ratio of 3rd drive axle diff [I]
IDS(4)          0.013 ; kg-m2 ! Spin inertia of 3rd drive axle diff input shaft [I]
IHS_L(4)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 3rd drive axle diff
                      ! [I]
IHS_R(4)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 3rd drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(4)  0 ! [D] Clutch control for 3rd drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

OPT_DIFF_INTERNAL(5) 1 ! 4th drive axle diff model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(5)  0 ! Is the 4th drive axle diff locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(5) 0.8 ; N-m-s/deg ! Torsional damping for locked 4th drive axle
                        ! diff [I]
LOCKED_DIFF_K(5)   80 ; N-m/deg ! Torsional spring rate for locked 4th drive axle
                      ! diff [I]
R_EFF_F_DIFF(5)  0.99 ; - ! Forward efficiency of 4th drive axle diff [I]
R_EFF_R_DIFF(5)  0.99 ; - ! Reverse efficiency of 4th drive axle diff [I]
R_GEAR_DIFF(5)   6.44 ; - ! Gear ratio of 4th drive axle diff [I]
IDS(5)          0.013 ; kg-m2 ! Spin inertia of 4th drive axle diff input shaft [I]
IHS_L(5)        0.009 ; kg-m2 ! Spin inertia of left half shaft, 4th drive axle diff
                      ! [I]
IHS_R(5)        0.009 ; kg-m2 ! Spin inertia of right half shaft, 4th drive axle
                      ! diff [I]
OPT_CLUTCH_DIFF(5)  0 ! [D] Clutch control for 4th drive axle diff: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

OPT_DIFF_INTERNAL(6) 1 ! Inter-axle diff for drive axles 3,4,5 model: 1 -> internal,
                       ! 0 -> external [I]
OPT_LOCKED_DIFF(6)  0 ! Is the inter-axle diff for drive axles 3,4,5 locked? 0 ->
                      ! no, 1 -> yes [I]
R_REAR_BIAS(6)    0.5 ; - ! Fraction: transfer case torque on the inter-axle diff
                      ! for drive axles 3,4,5 [I]
LOCKED_DIFF_DAMP(6) 0.8 ; N-m-s/deg ! Torsional damping for locked inter-axle diff
                        ! for drive axles 3,4,5 [I]
LOCKED_DIFF_K(6)   80 ; N-m/deg ! Torsional spring rate for locked inter-axle diff
                      ! for drive axles 3,4,5 [I]
R_EFF_F_DIFF(6)  0.99 ; - ! Forward efficiency of inter-axle diff for drive axles
                      ! 3,4,5 [I]
R_EFF_R_DIFF(6)  0.99 ; - ! Reverse efficiency of inter-axle diff for drive axles
                      ! 3,4,5 [I]
R_GEAR_DIFF(6)      1 ; - ! Gear ratio of inter-axle diff for drive axles 3,4,5 [I]
IDS(6)          0.015 ; kg-m2 ! Spin inertia of inter-axle diff for drive axles
                      ! 3,4,5 input shaft [I]
OPT_CLUTCH_DIFF(6)  0 ! [D] Clutch control for inter-axle diff for drive axles
                      ! 3,4,5: 0 -> table lookup or external, 1 -> Torsen
                      ! parameters, 2 -> yaw control [I]

OPT_DIFF_INTERNAL(7) 1 ! Master transfer case model: 1 -> internal, 0 -> external
                       ! [I]
OPT_LOCKED_DIFF(7)  0 ! Is the master transfer case locked? 0 -> no, 1 -> yes [I]
R_REAR_BIAS(7) 0.6666666667 ; - ! Fraction: transfer case torque on the master
                            ! transfer case [I]
LOCKED_DIFF_DAMP(7) 0.8 ; N-m-s/deg ! Torsional damping for locked master transfer
                        ! case [I]
LOCKED_DIFF_K(7)   80 ; N-m/deg ! Torsional spring rate for locked master transfer
                      ! case [I]
R_EFF_F_DIFF(7)  0.99 ; - ! Forward efficiency of master transfer case [I]
R_EFF_R_DIFF(7)  0.99 ; - ! Reverse efficiency of master transfer case [I]
R_GEAR_DIFF(7)      1 ; - ! Gear ratio of master transfer case [I]
IDS(7)              0 ; kg-m2 ! [D] Spin inertia of master transfer case input shaft
                      ! [I]
OPT_CLUTCH_DIFF(7)  0 ! [D] Clutch control for master transfer case: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE       800 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             2.75 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter

OPT_CLUTCH          0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              7 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT  0.1 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL       0.2 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE       0.2 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -4.8 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control

ITR(1)           0.15 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)     7.63 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration of up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration of down-shift to 1st-gear [I]

ITR(2)           0.15 ; kg-m2 ! 2nd-gear trans output shaft spin inertia
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)     3.51 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration of up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration of down-shift to 2nd-gear

ITR(3)            0.2 ; kg-m2 ! 3rd-gear trans output shaft spin inertia
R_EFF_TR_F(3)    0.92 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.92 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)     1.91 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration of up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration of down-shift to 3rd-gear

ITR(4)            0.2 ; kg-m2 ! 4th-gear trans output shaft spin inertia
R_EFF_TR_F(4)    0.92 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.92 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)     1.43 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration of up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration of down-shift to 4th-gear

ITR(5)            0.2 ; kg-m2 ! 5th-gear trans output shaft spin inertia
R_EFF_TR_F(5)    0.92 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.92 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)        1 ; - ! 5th-gear ratio of transmission
T_SHIFT_UP(5)      -1 ; - ! [D] Duration of up-shift from 5th-gear
T_SHIFT_DOWN(5)    -1 ; - ! [D] Duration of down-shift to 5th-gear

ITR(6)            0.2 ; kg-m2 ! 6th-gear trans output shaft spin inertia
R_EFF_TR_F(6)    0.92 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_R(6)    0.92 ; - ! 6th-gear reverse efficiency of transmission
R_GEAR_TR(6)     0.74 ; - ! 6th-gear ratio of transmission
T_SHIFT_UP(6)      -1 ; - ! [D] Duration of up-shift from 6th-gear
T_SHIFT_DOWN(6)    -1 ; - ! [D] Duration of down-shift to 6th-gear

ITR(7)            0.2 ; kg-m2 ! 7th-gear trans output shaft spin inertia
R_EFF_TR_F(7)    0.92 ; - ! 7th-gear forward efficiency of transmission
R_EFF_TR_R(7)    0.92 ; - ! 7th-gear reverse efficiency of transmission
R_GEAR_TR(7)     0.64 ; - ! 7th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight Path (East-West)
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 200 ; m ! Segment length
! S_SEGMENT_END(1,1) 200 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 200 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z, MU, and RR_SURF values for a road surface are
! provided with Configurable Functions MU_ROAD, ROAD_DZ, RR_SURF, and ROAD_ZS.
! Boundaries that control automatic switching from one road surface to another make
! use of the Configurable Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            1 ! Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID during initialization [I]

ROAD_ID(1)          1 ; Four Small Bumps, 0.3 m incr. elev.
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight Path (East-West)
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX limit, -1 -> stop if S > ROAD_SMAX, > 0 ->
                      ! switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN limit, -1 -> stop if S < ROAD_SMIN, > 0 ->
                      ! switch to road with this ID if S < ROAD_SMIN
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)       1 ; ROAD_DZ_ID for: Small Bumps Smoothed

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run

PATH_ID_DM          1 ! PATH_ID of the vehicle and DM reference path [I]
LTARG_ID_DM         1 ! LTARG_ID of LTARG dataset for DM (0 -> LTARG = 0)
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and LTARG_ID_DM
                      ! at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for DM
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for DM
VLOW_DM            10 ; km/h ! Minimum speed for preview dist = V*TPREV
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM ref. point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1,1)   2 ! ABS control option, unit 1, axle 1: 0 -> No ABS, 1-> Single
                      ! control channel for axle, 2 -> Independent control channels
                      ! for each wheel
ABS_SLIP_ON(1,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,2)   2 ! ABS control option, unit 1, axle 2
ABS_SLIP_ON(1,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,3)   2 ! ABS control option, unit 1, axle 3
ABS_SLIP_ON(1,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,4)   2 ! ABS control option, unit 1, axle 4
ABS_SLIP_ON(1,4)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,4) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,4)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(1,5)   2 ! ABS control option, unit 1, axle 5
ABS_SLIP_ON(1,5)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1,5) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1,5)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,1)   2 ! ABS control option, unit 2, axle 1
ABS_SLIP_ON(2,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,2)   2 ! ABS control option, unit 2, axle 2
ABS_SLIP_ON(2,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,3)   2 ! ABS control option, unit 2, axle 3
ABS_SLIP_ON(2,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,4)   2 ! ABS control option, unit 2, axle 4
ABS_SLIP_ON(2,4)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,4) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,4)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,5)   2 ! ABS control option, unit 2, axle 5
ABS_SLIP_ON(2,5)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,5) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,5)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,6)   2 ! ABS control option, unit 2, axle 6
ABS_SLIP_ON(2,6)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,6) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,6)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,7)   2 ! ABS control option, unit 2, axle 7
ABS_SLIP_ON(2,7)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,7) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,7)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,8)   2 ! ABS control option, unit 2, axle 8
ABS_SLIP_ON(2,8)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,8) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,8)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,9)   2 ! ABS control option, unit 2, axle 9
ABS_SLIP_ON(2,9)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,9) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,9)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,10)  2 ! ABS control option, unit 2, axle 10
ABS_SLIP_ON(2,10) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,10) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,10)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,11)  2 ! ABS control option, unit 2, axle 11
ABS_SLIP_ON(2,11) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,11) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,11)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,12)  2 ! ABS control option, unit 2, axle 12
ABS_SLIP_ON(2,12) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,12) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,12)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,13)  2 ! ABS control option, unit 2, axle 13
ABS_SLIP_ON(2,13) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,13) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,13)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2,14)  2 ! ABS control option, unit 2, axle 14
ABS_SLIP_ON(2,14) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2,14) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2,14)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,1)   2 ! ABS control option, unit 3, axle 1
ABS_SLIP_ON(3,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,2)   2 ! ABS control option, unit 3, axle 2
ABS_SLIP_ON(3,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,3)   2 ! ABS control option, unit 3, axle 3
ABS_SLIP_ON(3,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,4)   2 ! ABS control option, unit 3, axle 4
ABS_SLIP_ON(3,4)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,4) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,4)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,5)   2 ! ABS control option, unit 3, axle 5
ABS_SLIP_ON(3,5)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,5) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,5)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,6)   2 ! ABS control option, unit 3, axle 6
ABS_SLIP_ON(3,6)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,6) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,6)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,7)   2 ! ABS control option, unit 3, axle 7
ABS_SLIP_ON(3,7)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,7) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,7)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,8)   2 ! ABS control option, unit 3, axle 8
ABS_SLIP_ON(3,8)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,8) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,8)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,9)   2 ! ABS control option, unit 3, axle 9
ABS_SLIP_ON(3,9)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,9) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,9)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,10)  2 ! ABS control option, unit 3, axle 10
ABS_SLIP_ON(3,10) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,10) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,10)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,11)  2 ! ABS control option, unit 3, axle 11
ABS_SLIP_ON(3,11) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,11) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,11)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,12)  2 ! ABS control option, unit 3, axle 12
ABS_SLIP_ON(3,12) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,12) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,12)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,13)  2 ! ABS control option, unit 3, axle 13
ABS_SLIP_ON(3,13) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,13) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,13)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(3,14)  2 ! ABS control option, unit 3, axle 14
ABS_SLIP_ON(3,14) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(3,14) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(3,14)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,1)   2 ! ABS control option, unit 4, axle 1
ABS_SLIP_ON(4,1)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,1) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,1)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,2)   2 ! ABS control option, unit 4, axle 2
ABS_SLIP_ON(4,2)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,2) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,2)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,3)   2 ! ABS control option, unit 4, axle 3
ABS_SLIP_ON(4,3)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,3) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,3)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,4)   2 ! ABS control option, unit 4, axle 4
ABS_SLIP_ON(4,4)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,4) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,4)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,5)   2 ! ABS control option, unit 4, axle 5
ABS_SLIP_ON(4,5)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,5) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,5)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,6)   2 ! ABS control option, unit 4, axle 6
ABS_SLIP_ON(4,6)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,6) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,6)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,7)   2 ! ABS control option, unit 4, axle 7
ABS_SLIP_ON(4,7)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,7) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,7)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,8)   2 ! ABS control option, unit 4, axle 8
ABS_SLIP_ON(4,8)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,8) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,8)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,9)   2 ! ABS control option, unit 4, axle 9
ABS_SLIP_ON(4,9)  0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,9) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,9)       6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,10)  2 ! ABS control option, unit 4, axle 10
ABS_SLIP_ON(4,10) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,10) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,10)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,11)  2 ! ABS control option, unit 4, axle 11
ABS_SLIP_ON(4,11) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,11) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,11)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,12)  2 ! ABS control option, unit 4, axle 12
ABS_SLIP_ON(4,12) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,12) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,12)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,13)  2 ! ABS control option, unit 4, axle 13
ABS_SLIP_ON(4,13) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,13) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,13)      6 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(4,14)  2 ! ABS control option, unit 4, axle 14
ABS_SLIP_ON(4,14) 0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(4,14) 0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(4,14)      6 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 94 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

CC_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CC_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CC_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CC_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CC_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CC_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CC_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,4,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 4, left side
CC_FX_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,4,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,4,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 4, right side
CC_FX_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,4,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,5,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 5, left side
CC_FX_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,5,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,5,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 1, axle 5, right side
CC_FX_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,5,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CC_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CC_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CC_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CC_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 3, left side
CC_FX_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 3, right side
CC_FX_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,4,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 4, left side
CC_FX_OFFSET(2,4,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,4,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,4,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 4, right side
CC_FX_OFFSET(2,4,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,4,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,5,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 5, left side
CC_FX_OFFSET(2,5,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,5,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,5,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 5, right side
CC_FX_OFFSET(2,5,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,5,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,6,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 6, left side
CC_FX_OFFSET(2,6,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,6,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,6,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 6, right side
CC_FX_OFFSET(2,6,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,6,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,7,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 7, left side
CC_FX_OFFSET(2,7,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,7,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,7,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 7, right side
CC_FX_OFFSET(2,7,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,7,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,8,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 8, left side
CC_FX_OFFSET(2,8,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,8,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,8,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 8, right side
CC_FX_OFFSET(2,8,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,8,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,9,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 9, left side
CC_FX_OFFSET(2,9,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,9,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,9,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 2, axle 9, right side
CC_FX_OFFSET(2,9,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,9,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,10,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 10, left side
CC_FX_OFFSET(2,10,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,10,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,10,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 10, right side
CC_FX_OFFSET(2,10,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,10,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,11,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 11, left side
CC_FX_OFFSET(2,11,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,11,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,11,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 11, right side
CC_FX_OFFSET(2,11,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,11,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,12,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 12, left side
CC_FX_OFFSET(2,12,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,12,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,12,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 12, right side
CC_FX_OFFSET(2,12,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,12,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,13,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 13, left side
CC_FX_OFFSET(2,13,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,13,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,13,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 13, right side
CC_FX_OFFSET(2,13,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,13,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,14,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 14, left side
CC_FX_OFFSET(2,14,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,14,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,14,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 2, axle 14, right side
CC_FX_OFFSET(2,14,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,14,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CC_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CC_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CC_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CC_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 3, left side
CC_FX_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 3, right side
CC_FX_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,4,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 4, left side
CC_FX_OFFSET(3,4,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,4,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,4,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 4, right side
CC_FX_OFFSET(3,4,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,4,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,5,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 5, left side
CC_FX_OFFSET(3,5,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,5,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,5,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 5, right side
CC_FX_OFFSET(3,5,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,5,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,6,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 6, left side
CC_FX_OFFSET(3,6,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,6,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,6,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 6, right side
CC_FX_OFFSET(3,6,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,6,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,7,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 7, left side
CC_FX_OFFSET(3,7,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,7,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,7,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 7, right side
CC_FX_OFFSET(3,7,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,7,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,8,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 8, left side
CC_FX_OFFSET(3,8,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,8,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,8,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 8, right side
CC_FX_OFFSET(3,8,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,8,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,9,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 9, left side
CC_FX_OFFSET(3,9,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,9,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,9,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 3, axle 9, right side
CC_FX_OFFSET(3,9,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,9,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,10,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 10, left side
CC_FX_OFFSET(3,10,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,10,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,10,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 10, right side
CC_FX_OFFSET(3,10,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,10,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,11,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 11, left side
CC_FX_OFFSET(3,11,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,11,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,11,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 11, right side
CC_FX_OFFSET(3,11,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,11,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,12,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 12, left side
CC_FX_OFFSET(3,12,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,12,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,12,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 12, right side
CC_FX_OFFSET(3,12,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,12,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,13,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 13, left side
CC_FX_OFFSET(3,13,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,13,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,13,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 13, right side
CC_FX_OFFSET(3,13,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,13,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,14,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 14, left side
CC_FX_OFFSET(3,14,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,14,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(3,14,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 3, axle 14, right side
CC_FX_OFFSET(3,14,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(3,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(3,14,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CC_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CC_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CC_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CC_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,3,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 3, left side
CC_FX_OFFSET(4,3,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,3,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,3,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 3, right side
CC_FX_OFFSET(4,3,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,3,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,4,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 4, left side
CC_FX_OFFSET(4,4,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,4,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,4,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 4, right side
CC_FX_OFFSET(4,4,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,4,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,5,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 5, left side
CC_FX_OFFSET(4,5,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,5,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,5,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 5, right side
CC_FX_OFFSET(4,5,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,5,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,6,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 6, left side
CC_FX_OFFSET(4,6,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,6,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,6,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 6, right side
CC_FX_OFFSET(4,6,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,6,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,7,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 7, left side
CC_FX_OFFSET(4,7,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,7,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,7,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 7, right side
CC_FX_OFFSET(4,7,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,7,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,8,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 8, left side
CC_FX_OFFSET(4,8,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,8,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,8,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 8, right side
CC_FX_OFFSET(4,8,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,8,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,9,1) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 9, left side
CC_FX_OFFSET(4,9,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,9,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,9,2) 0 ! Coefficient: camber displacement per unit force
                           ! (deg/N), unit 4, axle 9, right side
CC_FX_OFFSET(4,9,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,9,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,10,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 10, left side
CC_FX_OFFSET(4,10,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,10,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,10,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 10, right side
CC_FX_OFFSET(4,10,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,10,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,11,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 11, left side
CC_FX_OFFSET(4,11,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,11,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,11,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 11, right side
CC_FX_OFFSET(4,11,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,11,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,12,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 12, left side
CC_FX_OFFSET(4,12,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,12,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,12,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 12, right side
CC_FX_OFFSET(4,12,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,12,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,13,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 13, left side
CC_FX_OFFSET(4,13,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,13,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,13,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 13, right side
CC_FX_OFFSET(4,13,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,13,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,14,1) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 14, left side
CC_FX_OFFSET(4,14,1) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,14,1) 1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(4,14,2) 0 ! Coefficient: camber displacement per unit force
                            ! (deg/N), unit 4, axle 14, right side
CC_FX_OFFSET(4,14,2) 0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(4,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(4,14,2) 1 ! Scale factor divided into (force - F_START_CC_FX)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 94 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, left side
CI_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 1, right side
CI_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, left side
CI_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 2, right side
CI_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, left side
CI_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 3, right side
CI_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,4,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 4, left side
CI_FY_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,4,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,4,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 4, right side
CI_FY_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,4,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,5,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 5, left side
CI_FY_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,5,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,5,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 1, axle 5, right side
CI_FY_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,5,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, left side
CI_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 1, right side
CI_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, left side
CI_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 2, right side
CI_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 3, left side
CI_FY_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 3, right side
CI_FY_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,4,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 4, left side
CI_FY_OFFSET(2,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,4,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,4,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 4, right side
CI_FY_OFFSET(2,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,4,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,5,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 5, left side
CI_FY_OFFSET(2,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,5,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,5,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 5, right side
CI_FY_OFFSET(2,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,5,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,6,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 6, left side
CI_FY_OFFSET(2,6,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,6,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,6,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 6, right side
CI_FY_OFFSET(2,6,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,6,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,7,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 7, left side
CI_FY_OFFSET(2,7,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,7,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,7,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 7, right side
CI_FY_OFFSET(2,7,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,7,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,8,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 8, left side
CI_FY_OFFSET(2,8,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,8,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,8,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 8, right side
CI_FY_OFFSET(2,8,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,8,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,9,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 9, left side
CI_FY_OFFSET(2,9,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,9,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,9,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 2, axle 9, right side
CI_FY_OFFSET(2,9,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,9,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,10,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 10, left side
CI_FY_OFFSET(2,10,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,10,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,10,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 10, right side
CI_FY_OFFSET(2,10,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,10,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,11,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 11, left side
CI_FY_OFFSET(2,11,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,11,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,11,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 11, right side
CI_FY_OFFSET(2,11,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,11,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,12,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 12, left side
CI_FY_OFFSET(2,12,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,12,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,12,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 12, right side
CI_FY_OFFSET(2,12,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,12,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,13,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 13, left side
CI_FY_OFFSET(2,13,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,13,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,13,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 13, right side
CI_FY_OFFSET(2,13,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,13,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,14,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 14, left side
CI_FY_OFFSET(2,14,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,14,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,14,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 2, axle 14, right side
CI_FY_OFFSET(2,14,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(2,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,14,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, left side
CI_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 1, right side
CI_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, left side
CI_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 2, right side
CI_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 3, left side
CI_FY_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 3, right side
CI_FY_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,4,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 4, left side
CI_FY_OFFSET(3,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,4,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,4,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 4, right side
CI_FY_OFFSET(3,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,4,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,5,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 5, left side
CI_FY_OFFSET(3,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,5,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,5,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 5, right side
CI_FY_OFFSET(3,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,5,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,6,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 6, left side
CI_FY_OFFSET(3,6,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,6,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,6,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 6, right side
CI_FY_OFFSET(3,6,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,6,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,7,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 7, left side
CI_FY_OFFSET(3,7,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,7,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,7,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 7, right side
CI_FY_OFFSET(3,7,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,7,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,8,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 8, left side
CI_FY_OFFSET(3,8,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,8,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,8,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 8, right side
CI_FY_OFFSET(3,8,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,8,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,9,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 9, left side
CI_FY_OFFSET(3,9,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,9,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,9,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 3, axle 9, right side
CI_FY_OFFSET(3,9,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(3,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,9,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,10,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 10, left side
CI_FY_OFFSET(3,10,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,10,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,10,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 10, right side
CI_FY_OFFSET(3,10,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,10,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,11,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 11, left side
CI_FY_OFFSET(3,11,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,11,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,11,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 11, right side
CI_FY_OFFSET(3,11,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,11,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,12,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 12, left side
CI_FY_OFFSET(3,12,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,12,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,12,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 12, right side
CI_FY_OFFSET(3,12,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,12,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,13,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 13, left side
CI_FY_OFFSET(3,13,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,13,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,13,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 13, right side
CI_FY_OFFSET(3,13,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,13,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,14,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 14, left side
CI_FY_OFFSET(3,14,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,14,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(3,14,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 3, axle 14, right side
CI_FY_OFFSET(3,14,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(3,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(3,14,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, left side
CI_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 1, right side
CI_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, left side
CI_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 2, right side
CI_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,3,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 3, left side
CI_FY_OFFSET(4,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,3,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,3,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 3, right side
CI_FY_OFFSET(4,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,3,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,4,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 4, left side
CI_FY_OFFSET(4,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,4,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,4,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 4, right side
CI_FY_OFFSET(4,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,4,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,5,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 5, left side
CI_FY_OFFSET(4,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,5,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,5,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 5, right side
CI_FY_OFFSET(4,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,5,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,6,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 6, left side
CI_FY_OFFSET(4,6,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,6,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,6,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 6, right side
CI_FY_OFFSET(4,6,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,6,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,7,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 7, left side
CI_FY_OFFSET(4,7,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,7,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,7,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 7, right side
CI_FY_OFFSET(4,7,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,7,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,8,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 8, left side
CI_FY_OFFSET(4,8,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,8,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,8,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 8, right side
CI_FY_OFFSET(4,8,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,8,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,9,1) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 9, left side
CI_FY_OFFSET(4,9,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,9,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,9,2) 0 ! Coefficient: inclination displacement per unit force
                           ! (deg/N), unit 4, axle 9, right side
CI_FY_OFFSET(4,9,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(4,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,9,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,10,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 10, left side
CI_FY_OFFSET(4,10,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,10,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,10,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 10, right side
CI_FY_OFFSET(4,10,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,10,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,11,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 11, left side
CI_FY_OFFSET(4,11,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,11,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,11,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 11, right side
CI_FY_OFFSET(4,11,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,11,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,12,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 12, left side
CI_FY_OFFSET(4,12,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,12,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,12,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 12, right side
CI_FY_OFFSET(4,12,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,12,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,13,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 13, left side
CI_FY_OFFSET(4,13,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,13,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,13,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 13, right side
CI_FY_OFFSET(4,13,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,13,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,14,1) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 14, left side
CI_FY_OFFSET(4,14,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,14,1) 1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(4,14,2) 0 ! Coefficient: inclination displacement per unit force
                            ! (deg/N), unit 4, axle 14, right side
CI_FY_OFFSET(4,14,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
F_START_CI_FY(4,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(4,14,2) 1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 94 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CI_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CI_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CI_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CI_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CI_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CI_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,4,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, left side
CI_MZ_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,4,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,4,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, right side
CI_MZ_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,4,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,5,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, left side
CI_MZ_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,5,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,5,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, right side
CI_MZ_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,5,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CI_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CI_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CI_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CI_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, left side
CI_MZ_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, right side
CI_MZ_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,4,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 4, left side
CI_MZ_OFFSET(2,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,4,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,4,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 4, right side
CI_MZ_OFFSET(2,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,4,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,5,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 5, left side
CI_MZ_OFFSET(2,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,5,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,5,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 5, right side
CI_MZ_OFFSET(2,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,5,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,6,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 6, left side
CI_MZ_OFFSET(2,6,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,6,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,6,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,6,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 6, right side
CI_MZ_OFFSET(2,6,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,6,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,6,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,7,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 7, left side
CI_MZ_OFFSET(2,7,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,7,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,7,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,7,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 7, right side
CI_MZ_OFFSET(2,7,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,7,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,7,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,8,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 8, left side
CI_MZ_OFFSET(2,8,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,8,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,8,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,8,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 8, right side
CI_MZ_OFFSET(2,8,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,8,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,8,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,9,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 9, left side
CI_MZ_OFFSET(2,9,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,9,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,9,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,9,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 2, axle 9, right side
CI_MZ_OFFSET(2,9,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,9,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,9,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,10,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 10, left side
CI_MZ_OFFSET(2,10,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,10,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,10,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,10,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 10, right side
CI_MZ_OFFSET(2,10,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,10,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,10,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,11,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 11, left side
CI_MZ_OFFSET(2,11,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,11,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,11,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,11,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 11, right side
CI_MZ_OFFSET(2,11,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,11,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,11,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,12,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 12, left side
CI_MZ_OFFSET(2,12,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,12,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,12,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,12,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 12, right side
CI_MZ_OFFSET(2,12,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,12,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,12,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,13,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 13, left side
CI_MZ_OFFSET(2,13,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,13,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,13,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,13,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 13, right side
CI_MZ_OFFSET(2,13,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,13,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,13,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,14,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 14, left side
CI_MZ_OFFSET(2,14,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,14,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,14,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,14,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 2, axle 14, right side
CI_MZ_OFFSET(2,14,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(2,14,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,14,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CI_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CI_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CI_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CI_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, left side
CI_MZ_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, right side
CI_MZ_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,4,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 4, left side
CI_MZ_OFFSET(3,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,4,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,4,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 4, right side
CI_MZ_OFFSET(3,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,4,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,5,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 5, left side
CI_MZ_OFFSET(3,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,5,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,5,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 5, right side
CI_MZ_OFFSET(3,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,5,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,6,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 6, left side
CI_MZ_OFFSET(3,6,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,6,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,6,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,6,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 6, right side
CI_MZ_OFFSET(3,6,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,6,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,6,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,7,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 7, left side
CI_MZ_OFFSET(3,7,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,7,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,7,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,7,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 7, right side
CI_MZ_OFFSET(3,7,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,7,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,7,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,8,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 8, left side
CI_MZ_OFFSET(3,8,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,8,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,8,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,8,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 8, right side
CI_MZ_OFFSET(3,8,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,8,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,8,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,9,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 9, left side
CI_MZ_OFFSET(3,9,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,9,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,9,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,9,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 3, axle 9, right side
CI_MZ_OFFSET(3,9,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(3,9,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,9,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,10,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 10, left side
CI_MZ_OFFSET(3,10,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,10,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,10,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,10,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 10, right side
CI_MZ_OFFSET(3,10,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,10,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,10,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,11,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 11, left side
CI_MZ_OFFSET(3,11,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,11,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,11,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,11,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 11, right side
CI_MZ_OFFSET(3,11,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,11,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,11,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,12,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 12, left side
CI_MZ_OFFSET(3,12,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,12,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,12,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,12,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 12, right side
CI_MZ_OFFSET(3,12,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,12,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,12,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,13,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 13, left side
CI_MZ_OFFSET(3,13,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,13,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,13,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,13,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 13, right side
CI_MZ_OFFSET(3,13,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,13,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,13,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,14,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 14, left side
CI_MZ_OFFSET(3,14,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,14,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,14,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(3,14,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 3, axle 14, right side
CI_MZ_OFFSET(3,14,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(3,14,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(3,14,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CI_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CI_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CI_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CI_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,3,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 3, left side
CI_MZ_OFFSET(4,3,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,3,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,3,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 3, right side
CI_MZ_OFFSET(4,3,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,3,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,4,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 4, left side
CI_MZ_OFFSET(4,4,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,4,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,4,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 4, right side
CI_MZ_OFFSET(4,4,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,4,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,5,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 5, left side
CI_MZ_OFFSET(4,5,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,5,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,5,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 5, right side
CI_MZ_OFFSET(4,5,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,5,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,6,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 6, left side
CI_MZ_OFFSET(4,6,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,6,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,6,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,6,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 6, right side
CI_MZ_OFFSET(4,6,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,6,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,6,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,7,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 7, left side
CI_MZ_OFFSET(4,7,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,7,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,7,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,7,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 7, right side
CI_MZ_OFFSET(4,7,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,7,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,7,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,8,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 8, left side
CI_MZ_OFFSET(4,8,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,8,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,8,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,8,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 8, right side
CI_MZ_OFFSET(4,8,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,8,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,8,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,9,1) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 9, left side
CI_MZ_OFFSET(4,9,1) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,9,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,9,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,9,2) 0 ! Coefficient: inclination displacement per unit moment
                           ! (deg/N-m), unit 4, axle 9, right side
CI_MZ_OFFSET(4,9,2) 0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(4,9,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,9,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,10,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 10, left side
CI_MZ_OFFSET(4,10,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,10,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,10,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,10,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 10, right side
CI_MZ_OFFSET(4,10,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,10,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,10,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,11,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 11, left side
CI_MZ_OFFSET(4,11,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,11,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,11,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,11,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 11, right side
CI_MZ_OFFSET(4,11,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,11,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,11,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,12,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 12, left side
CI_MZ_OFFSET(4,12,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,12,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,12,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,12,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 12, right side
CI_MZ_OFFSET(4,12,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,12,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,12,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,13,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 13, left side
CI_MZ_OFFSET(4,13,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,13,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,13,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,13,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 13, right side
CI_MZ_OFFSET(4,13,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,13,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,13,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,14,1) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 14, left side
CI_MZ_OFFSET(4,14,1) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,14,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,14,1) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(4,14,2) 0 ! Coefficient: inclination displacement per unit moment
                            ! (deg/N-m), unit 4, axle 14, right side
CI_MZ_OFFSET(4,14,2) 0 ; deg ! Offset added (after gain) to get inclination
                       ! displacement
M_START_CI_MZ(4,14,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(4,14,2) 1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 9 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, 1st
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(4) 1 ; - ! [D] Constant normalized clutch input, 3rd
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(4) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(4) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(5) 1 ; - ! [D] Constant normalized clutch input, 4th
                                  ! drive axle diff
CLUTCH_CONTROL_DIFF_GAIN(5) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(5) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(6) 1 ; - ! [D] Constant normalized clutch input,
                                  ! inter-axle diff for drive axles 3,4,5
CLUTCH_CONTROL_DIFF_GAIN(6) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(6) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(7) 1 ; - ! [D] Constant normalized clutch input, master
                                  ! transfer case
CLUTCH_CONTROL_DIFF_GAIN(7) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(7) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 9 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, 1st drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(4) 0 ; N-m ! [D] Constant available torque, 3rd drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(5) 0 ; N-m ! [D] Constant available torque, 4th drive
                                 ! axle diff
CLUTCH_TORQUE_DIFF_OFFSET(5) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(6) 0 ; N-m ! [D] Constant available torque, inter-axle
                                 ! diff for drive axles 3,4,5
CLUTCH_TORQUE_DIFF_OFFSET(6) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(7) 0 ; N-m ! [D] Constant available torque, master
                                 ! transfer case
CLUTCH_TORQUE_DIFF_OFFSET(7) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 94 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_DAMP_COEFFICIENT(1,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, left side
CMP_DAMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 1, right side
CMP_DAMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, left side
CMP_DAMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 2, right side
CMP_DAMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, left side
CMP_DAMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 3, right side
CMP_DAMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,4,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 4, left side
CMP_DAMP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,4,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 4, right side
CMP_DAMP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,5,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 5, left side
CMP_DAMP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,5,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 1, axle 5, right side
CMP_DAMP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, left side
CMP_DAMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 1, right side
CMP_DAMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, left side
CMP_DAMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 2, right side
CMP_DAMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 3, left side
CMP_DAMP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 3, right side
CMP_DAMP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,4,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 4, left side
CMP_DAMP_GAIN(2,4,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,4,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,4,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,4,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 4, right side
CMP_DAMP_GAIN(2,4,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,4,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,4,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,5,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 5, left side
CMP_DAMP_GAIN(2,5,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,5,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,5,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,5,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 5, right side
CMP_DAMP_GAIN(2,5,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,5,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,5,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,6,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 6, left side
CMP_DAMP_GAIN(2,6,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,6,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,6,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,6,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 6, right side
CMP_DAMP_GAIN(2,6,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,6,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,6,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,7,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 7, left side
CMP_DAMP_GAIN(2,7,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,7,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,7,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,7,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 7, right side
CMP_DAMP_GAIN(2,7,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,7,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,7,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,8,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 8, left side
CMP_DAMP_GAIN(2,8,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,8,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,8,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,8,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 8, right side
CMP_DAMP_GAIN(2,8,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,8,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,8,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,9,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 9, left side
CMP_DAMP_GAIN(2,9,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,9,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,9,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,9,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 2, axle 9, right side
CMP_DAMP_GAIN(2,9,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(2,9,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,9,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,10,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 10, left side
CMP_DAMP_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,10,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,10,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,10,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 10, right side
CMP_DAMP_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,10,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,10,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,11,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 11, left side
CMP_DAMP_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,11,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,11,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,11,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 11, right side
CMP_DAMP_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,11,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,11,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,12,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 12, left side
CMP_DAMP_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,12,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,12,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,12,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 12, right side
CMP_DAMP_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,12,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,12,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,13,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 13, left side
CMP_DAMP_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,13,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,13,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,13,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 13, right side
CMP_DAMP_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,13,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,13,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,14,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 14, left side
CMP_DAMP_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,14,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,14,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,14,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 2, axle 14, right side
CMP_DAMP_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(2,14,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,14,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, left side
CMP_DAMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 1, right side
CMP_DAMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, left side
CMP_DAMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 2, right side
CMP_DAMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 3, left side
CMP_DAMP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 3, right side
CMP_DAMP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,4,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 4, left side
CMP_DAMP_GAIN(3,4,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,4,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,4,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,4,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 4, right side
CMP_DAMP_GAIN(3,4,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,4,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,4,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,5,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 5, left side
CMP_DAMP_GAIN(3,5,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,5,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,5,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,5,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 5, right side
CMP_DAMP_GAIN(3,5,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,5,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,5,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,6,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 6, left side
CMP_DAMP_GAIN(3,6,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,6,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,6,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,6,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 6, right side
CMP_DAMP_GAIN(3,6,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,6,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,6,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,7,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 7, left side
CMP_DAMP_GAIN(3,7,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,7,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,7,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,7,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 7, right side
CMP_DAMP_GAIN(3,7,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,7,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,7,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,8,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 8, left side
CMP_DAMP_GAIN(3,8,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,8,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,8,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,8,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 8, right side
CMP_DAMP_GAIN(3,8,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,8,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,8,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,9,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 9, left side
CMP_DAMP_GAIN(3,9,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,9,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,9,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,9,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 3, axle 9, right side
CMP_DAMP_GAIN(3,9,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(3,9,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,9,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,10,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 10, left side
CMP_DAMP_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,10,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,10,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,10,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 10, right side
CMP_DAMP_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,10,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,10,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,11,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 11, left side
CMP_DAMP_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,11,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,11,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,11,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 11, right side
CMP_DAMP_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,11,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,11,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,12,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 12, left side
CMP_DAMP_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,12,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,12,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,12,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 12, right side
CMP_DAMP_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,12,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,12,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,13,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 13, left side
CMP_DAMP_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,13,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,13,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,13,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 13, right side
CMP_DAMP_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,13,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,13,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,14,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 14, left side
CMP_DAMP_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,14,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,14,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(3,14,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 3, axle 14, right side
CMP_DAMP_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(3,14,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(3,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(3,14,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, left side
CMP_DAMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,1,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 1, right side
CMP_DAMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, left side
CMP_DAMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,2,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 2, right side
CMP_DAMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,3,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 3, left side
CMP_DAMP_GAIN(4,3,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,3,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,3,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,3,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 3, right side
CMP_DAMP_GAIN(4,3,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,3,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,3,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,4,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 4, left side
CMP_DAMP_GAIN(4,4,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,4,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,4,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,4,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 4, right side
CMP_DAMP_GAIN(4,4,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,4,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,4,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,5,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 5, left side
CMP_DAMP_GAIN(4,5,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,5,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,5,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,5,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 5, right side
CMP_DAMP_GAIN(4,5,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,5,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,5,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,6,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 6, left side
CMP_DAMP_GAIN(4,6,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,6,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,6,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,6,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 6, right side
CMP_DAMP_GAIN(4,6,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,6,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,6,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,7,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 7, left side
CMP_DAMP_GAIN(4,7,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,7,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,7,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,7,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 7, right side
CMP_DAMP_GAIN(4,7,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,7,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,7,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,8,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 8, left side
CMP_DAMP_GAIN(4,8,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,8,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,8,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,8,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 8, right side
CMP_DAMP_GAIN(4,8,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,8,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,8,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,9,1) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 9, left side
CMP_DAMP_GAIN(4,9,1) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,9,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,9,1) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,9,2) 1 ! Coefficient: damper compression per unit jounce at
                              ! wheel (mm/mm), unit 4, axle 9, right side
CMP_DAMP_GAIN(4,9,2) 1 ! Gain multiplied with calculated value to get damper
                       ! compression
CMP_DAMP_OFFSET(4,9,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,9,2) 1 ! Scale factor divided into (jounce at wheel -
                            ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,10,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 10, left side
CMP_DAMP_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,10,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,10,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,10,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 10, right side
CMP_DAMP_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,10,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,10,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,11,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 11, left side
CMP_DAMP_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,11,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,11,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,11,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 11, right side
CMP_DAMP_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,11,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,11,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,12,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 12, left side
CMP_DAMP_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,12,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,12,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,12,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 12, right side
CMP_DAMP_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,12,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,12,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,13,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 13, left side
CMP_DAMP_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,13,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,13,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,13,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 13, right side
CMP_DAMP_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,13,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,13,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,14,1) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 14, left side
CMP_DAMP_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,14,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,14,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(4,14,2) 1 ! Coefficient: damper compression per unit jounce at
                               ! wheel (mm/mm), unit 4, axle 14, right side
CMP_DAMP_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get damper
                        ! compression
CMP_DAMP_OFFSET(4,14,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(4,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(4,14,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 94 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, left side
CMP_JSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 1, right side
CMP_JSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, left side
CMP_JSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 2, right side
CMP_JSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, left side
CMP_JSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 3, right side
CMP_JSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,4,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 4, left side
CMP_JSTOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,4,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 4, right side
CMP_JSTOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,5,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 5, left side
CMP_JSTOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,5,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 1, axle 5, right side
CMP_JSTOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, left side
CMP_JSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 1, right side
CMP_JSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, left side
CMP_JSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 2, right side
CMP_JSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 3, left side
CMP_JSTOP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 3, right side
CMP_JSTOP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,4,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 4, left side
CMP_JSTOP_GAIN(2,4,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,4,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,4,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 4, right side
CMP_JSTOP_GAIN(2,4,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,4,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,5,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 5, left side
CMP_JSTOP_GAIN(2,5,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,5,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,5,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 5, right side
CMP_JSTOP_GAIN(2,5,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,5,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,6,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 6, left side
CMP_JSTOP_GAIN(2,6,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,6,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,6,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,6,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 6, right side
CMP_JSTOP_GAIN(2,6,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,6,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,6,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,7,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 7, left side
CMP_JSTOP_GAIN(2,7,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,7,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,7,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,7,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 7, right side
CMP_JSTOP_GAIN(2,7,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,7,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,7,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,8,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 8, left side
CMP_JSTOP_GAIN(2,8,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,8,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,8,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,8,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 8, right side
CMP_JSTOP_GAIN(2,8,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,8,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,8,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,9,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 9, left side
CMP_JSTOP_GAIN(2,9,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,9,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,9,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,9,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 2, axle 9, right side
CMP_JSTOP_GAIN(2,9,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(2,9,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(2,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,9,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,10,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 10, left
                                ! side
CMP_JSTOP_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,10,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,10,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,10,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 10, right
                                ! side
CMP_JSTOP_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,10,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,10,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,11,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 11, left
                                ! side
CMP_JSTOP_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,11,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,11,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,11,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 11, right
                                ! side
CMP_JSTOP_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,11,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,11,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,12,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 12, left
                                ! side
CMP_JSTOP_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,12,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,12,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,12,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 12, right
                                ! side
CMP_JSTOP_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,12,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,12,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,13,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 13, left
                                ! side
CMP_JSTOP_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,13,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,13,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,13,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 13, right
                                ! side
CMP_JSTOP_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,13,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,13,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,14,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 14, left
                                ! side
CMP_JSTOP_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,14,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,14,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,14,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 14, right
                                ! side
CMP_JSTOP_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(2,14,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(2,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,14,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, left side
CMP_JSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 1, right side
CMP_JSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, left side
CMP_JSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 2, right side
CMP_JSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 3, left side
CMP_JSTOP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 3, right side
CMP_JSTOP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,4,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 4, left side
CMP_JSTOP_GAIN(3,4,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,4,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,4,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 4, right side
CMP_JSTOP_GAIN(3,4,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,4,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,5,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 5, left side
CMP_JSTOP_GAIN(3,5,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,5,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,5,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 5, right side
CMP_JSTOP_GAIN(3,5,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,5,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,6,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 6, left side
CMP_JSTOP_GAIN(3,6,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,6,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,6,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,6,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 6, right side
CMP_JSTOP_GAIN(3,6,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,6,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,6,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,7,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 7, left side
CMP_JSTOP_GAIN(3,7,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,7,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,7,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,7,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 7, right side
CMP_JSTOP_GAIN(3,7,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,7,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,7,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,8,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 8, left side
CMP_JSTOP_GAIN(3,8,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,8,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,8,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,8,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 8, right side
CMP_JSTOP_GAIN(3,8,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,8,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,8,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,9,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 9, left side
CMP_JSTOP_GAIN(3,9,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,9,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,9,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,9,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 3, axle 9, right side
CMP_JSTOP_GAIN(3,9,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(3,9,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(3,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,9,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,10,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 10, left
                                ! side
CMP_JSTOP_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,10,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,10,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,10,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 10, right
                                ! side
CMP_JSTOP_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,10,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,10,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,11,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 11, left
                                ! side
CMP_JSTOP_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,11,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,11,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,11,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 11, right
                                ! side
CMP_JSTOP_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,11,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,11,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,12,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 12, left
                                ! side
CMP_JSTOP_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,12,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,12,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,12,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 12, right
                                ! side
CMP_JSTOP_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,12,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,12,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,13,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 13, left
                                ! side
CMP_JSTOP_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,13,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,13,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,13,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 13, right
                                ! side
CMP_JSTOP_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,13,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,13,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,14,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 14, left
                                ! side
CMP_JSTOP_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,14,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,14,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(3,14,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 14, right
                                ! side
CMP_JSTOP_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(3,14,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(3,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(3,14,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, left side
CMP_JSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 1, right side
CMP_JSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, left side
CMP_JSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 2, right side
CMP_JSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,3,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 3, left side
CMP_JSTOP_GAIN(4,3,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,3,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,3,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 3, right side
CMP_JSTOP_GAIN(4,3,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,3,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,4,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 4, left side
CMP_JSTOP_GAIN(4,4,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,4,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,4,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 4, right side
CMP_JSTOP_GAIN(4,4,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,4,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,5,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 5, left side
CMP_JSTOP_GAIN(4,5,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,5,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,5,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 5, right side
CMP_JSTOP_GAIN(4,5,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,5,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,6,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 6, left side
CMP_JSTOP_GAIN(4,6,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,6,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,6,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,6,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 6, right side
CMP_JSTOP_GAIN(4,6,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,6,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,6,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,7,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 7, left side
CMP_JSTOP_GAIN(4,7,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,7,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,7,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,7,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 7, right side
CMP_JSTOP_GAIN(4,7,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,7,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,7,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,8,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 8, left side
CMP_JSTOP_GAIN(4,8,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,8,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,8,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,8,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 8, right side
CMP_JSTOP_GAIN(4,8,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,8,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,8,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,9,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 9, left side
CMP_JSTOP_GAIN(4,9,1) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,9,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,9,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,9,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                               ! at wheel (mm/mm), unit 4, axle 9, right side
CMP_JSTOP_GAIN(4,9,2) 1 ! Gain multiplied with calculated value to get jounce stop
                        ! deflection
CMP_JSTOP_OFFSET(4,9,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                          ! deflection
JNC_START_CMP_JSTOP(4,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,9,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,10,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 10, left
                                ! side
CMP_JSTOP_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,10,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,10,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,10,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 10, right
                                ! side
CMP_JSTOP_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,10,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,10,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,11,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 11, left
                                ! side
CMP_JSTOP_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,11,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,11,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,11,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 11, right
                                ! side
CMP_JSTOP_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,11,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,11,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,12,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 12, left
                                ! side
CMP_JSTOP_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,12,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,12,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,12,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 12, right
                                ! side
CMP_JSTOP_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,12,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,12,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,13,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 13, left
                                ! side
CMP_JSTOP_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,13,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,13,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,13,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 13, right
                                ! side
CMP_JSTOP_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,13,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,13,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,14,1) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 14, left
                                ! side
CMP_JSTOP_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,14,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,14,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(4,14,2) 1 ! Coefficient: jounce stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 14, right
                                ! side
CMP_JSTOP_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get jounce stop
                         ! deflection
CMP_JSTOP_OFFSET(4,14,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                           ! deflection
JNC_START_CMP_JSTOP(4,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(4,14,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 94 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, left side
CMP_RSTOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 1, right
                               ! side
CMP_RSTOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, left side
CMP_RSTOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 2, right
                               ! side
CMP_RSTOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, left side
CMP_RSTOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 3, right
                               ! side
CMP_RSTOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,4,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 4, left side
CMP_RSTOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,4,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 4, right
                               ! side
CMP_RSTOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,5,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 5, left side
CMP_RSTOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,5,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 1, axle 5, right
                               ! side
CMP_RSTOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, left side
CMP_RSTOP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 1, right
                               ! side
CMP_RSTOP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, left side
CMP_RSTOP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 2, right
                               ! side
CMP_RSTOP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 3, left side
CMP_RSTOP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 3, right
                               ! side
CMP_RSTOP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,4,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 4, left side
CMP_RSTOP_GAIN(2,4,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,4,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,4,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 4, right
                               ! side
CMP_RSTOP_GAIN(2,4,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,4,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,5,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 5, left side
CMP_RSTOP_GAIN(2,5,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,5,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,5,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 5, right
                               ! side
CMP_RSTOP_GAIN(2,5,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,5,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,6,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 6, left side
CMP_RSTOP_GAIN(2,6,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,6,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,6,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,6,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 6, right
                               ! side
CMP_RSTOP_GAIN(2,6,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,6,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,6,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,7,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 7, left side
CMP_RSTOP_GAIN(2,7,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,7,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,7,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,7,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 7, right
                               ! side
CMP_RSTOP_GAIN(2,7,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,7,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,7,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,8,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 8, left side
CMP_RSTOP_GAIN(2,8,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,8,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,8,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,8,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 8, right
                               ! side
CMP_RSTOP_GAIN(2,8,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,8,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,8,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,9,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 9, left side
CMP_RSTOP_GAIN(2,9,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,9,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,9,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,9,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 2, axle 9, right
                               ! side
CMP_RSTOP_GAIN(2,9,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(2,9,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(2,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,9,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,10,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 10, left
                                ! side
CMP_RSTOP_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,10,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,10,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,10,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 10, right
                                ! side
CMP_RSTOP_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,10,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,10,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,11,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 11, left
                                ! side
CMP_RSTOP_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,11,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,11,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,11,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 11, right
                                ! side
CMP_RSTOP_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,11,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,11,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,12,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 12, left
                                ! side
CMP_RSTOP_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,12,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,12,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,12,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 12, right
                                ! side
CMP_RSTOP_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,12,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,12,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,13,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 13, left
                                ! side
CMP_RSTOP_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,13,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,13,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,13,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 13, right
                                ! side
CMP_RSTOP_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,13,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,13,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,14,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 14, left
                                ! side
CMP_RSTOP_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,14,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,14,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,14,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 2, axle 14, right
                                ! side
CMP_RSTOP_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(2,14,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(2,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,14,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, left side
CMP_RSTOP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 1, right
                               ! side
CMP_RSTOP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, left side
CMP_RSTOP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 2, right
                               ! side
CMP_RSTOP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 3, left side
CMP_RSTOP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 3, right
                               ! side
CMP_RSTOP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,4,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 4, left side
CMP_RSTOP_GAIN(3,4,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,4,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,4,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 4, right
                               ! side
CMP_RSTOP_GAIN(3,4,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,4,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,5,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 5, left side
CMP_RSTOP_GAIN(3,5,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,5,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,5,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 5, right
                               ! side
CMP_RSTOP_GAIN(3,5,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,5,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,6,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 6, left side
CMP_RSTOP_GAIN(3,6,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,6,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,6,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,6,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 6, right
                               ! side
CMP_RSTOP_GAIN(3,6,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,6,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,6,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,7,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 7, left side
CMP_RSTOP_GAIN(3,7,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,7,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,7,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,7,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 7, right
                               ! side
CMP_RSTOP_GAIN(3,7,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,7,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,7,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,8,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 8, left side
CMP_RSTOP_GAIN(3,8,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,8,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,8,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,8,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 8, right
                               ! side
CMP_RSTOP_GAIN(3,8,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,8,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,8,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,9,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 9, left side
CMP_RSTOP_GAIN(3,9,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,9,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,9,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,9,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 3, axle 9, right
                               ! side
CMP_RSTOP_GAIN(3,9,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(3,9,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(3,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,9,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,10,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 10, left
                                ! side
CMP_RSTOP_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,10,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,10,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,10,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 10, right
                                ! side
CMP_RSTOP_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,10,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,10,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,11,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 11, left
                                ! side
CMP_RSTOP_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,11,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,11,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,11,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 11, right
                                ! side
CMP_RSTOP_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,11,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,11,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,12,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 12, left
                                ! side
CMP_RSTOP_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,12,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,12,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,12,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 12, right
                                ! side
CMP_RSTOP_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,12,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,12,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,13,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 13, left
                                ! side
CMP_RSTOP_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,13,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,13,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,13,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 13, right
                                ! side
CMP_RSTOP_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,13,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,13,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,14,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 14, left
                                ! side
CMP_RSTOP_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,14,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,14,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(3,14,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 3, axle 14, right
                                ! side
CMP_RSTOP_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(3,14,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(3,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(3,14,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, left side
CMP_RSTOP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,1,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 1, right
                               ! side
CMP_RSTOP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, left side
CMP_RSTOP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,2,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 2, right
                               ! side
CMP_RSTOP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,3,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 3, left side
CMP_RSTOP_GAIN(4,3,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,3,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,3,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,3,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 3, right
                               ! side
CMP_RSTOP_GAIN(4,3,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,3,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,3,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,4,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 4, left side
CMP_RSTOP_GAIN(4,4,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,4,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,4,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,4,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 4, right
                               ! side
CMP_RSTOP_GAIN(4,4,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,4,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,4,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,5,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 5, left side
CMP_RSTOP_GAIN(4,5,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,5,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,5,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,5,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 5, right
                               ! side
CMP_RSTOP_GAIN(4,5,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,5,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,5,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,6,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 6, left side
CMP_RSTOP_GAIN(4,6,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,6,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,6,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,6,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 6, right
                               ! side
CMP_RSTOP_GAIN(4,6,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,6,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,6,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,7,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 7, left side
CMP_RSTOP_GAIN(4,7,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,7,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,7,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,7,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 7, right
                               ! side
CMP_RSTOP_GAIN(4,7,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,7,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,7,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,8,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 8, left side
CMP_RSTOP_GAIN(4,8,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,8,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,8,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,8,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 8, right
                               ! side
CMP_RSTOP_GAIN(4,8,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,8,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,8,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,9,1) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 9, left side
CMP_RSTOP_GAIN(4,9,1) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,9,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,9,1) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,9,2) 1 ! Coefficient: rebound stop deflection per unit
                               ! jounce at wheel (mm/mm), unit 4, axle 9, right
                               ! side
CMP_RSTOP_GAIN(4,9,2) 1 ! Gain multiplied with calculated value to get rebound stop
                        ! deflection
CMP_RSTOP_OFFSET(4,9,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                          ! deflection
JNC_START_CMP_RSTOP(4,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,9,2) 1 ! Scale factor divided into (jounce at wheel -
                             ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,10,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 10, left
                                ! side
CMP_RSTOP_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,10,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,10,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,10,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 10, right
                                ! side
CMP_RSTOP_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,10,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,10,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,11,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 11, left
                                ! side
CMP_RSTOP_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,11,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,11,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,11,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 11, right
                                ! side
CMP_RSTOP_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,11,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,11,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,12,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 12, left
                                ! side
CMP_RSTOP_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,12,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,12,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,12,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 12, right
                                ! side
CMP_RSTOP_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,12,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,12,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,13,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 13, left
                                ! side
CMP_RSTOP_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,13,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,13,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,13,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 13, right
                                ! side
CMP_RSTOP_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,13,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,13,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,14,1) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 14, left
                                ! side
CMP_RSTOP_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,14,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,14,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(4,14,2) 1 ! Coefficient: rebound stop deflection per unit
                                ! jounce at wheel (mm/mm), unit 4, axle 14, right
                                ! side
CMP_RSTOP_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get rebound stop
                         ! deflection
CMP_RSTOP_OFFSET(4,14,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                           ! deflection
JNC_START_CMP_RSTOP(4,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(4,14,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 94 datasets; if indices shown below are not used, e.g., (1,1,2), the current values
! of the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when
! reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,4,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 4, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,4,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,4,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,4,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 4, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,4,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,4,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,5,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 5, left
                                  ! side
CMP_SPR_SEAT_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,5,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,5,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,5,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 1, axle 5, right
                                  ! side
CMP_SPR_SEAT_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(1,5,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(1,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,5,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,4,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 4, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,4,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,4,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,4,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,4,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 4, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,4,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,4,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,4,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,5,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 5, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,5,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,5,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,5,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,5,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 5, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,5,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,5,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,5,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,6,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 6, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,6,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,6,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,6,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,6,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 6, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,6,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,6,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,6,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,7,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 7, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,7,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,7,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,7,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,7,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 7, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,7,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,7,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,7,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,8,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 8, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,8,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,8,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,8,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,8,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 8, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,8,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,8,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,8,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,9,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 9, left
                                  ! side
CMP_SPR_SEAT_GAIN(2,9,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,9,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,9,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,9,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 2, axle 9, right
                                  ! side
CMP_SPR_SEAT_GAIN(2,9,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,9,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(2,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,9,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,10,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 10,
                                   ! left side
CMP_SPR_SEAT_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,10,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,10,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,10,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 10,
                                   ! right side
CMP_SPR_SEAT_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,10,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,10,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,11,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 11,
                                   ! left side
CMP_SPR_SEAT_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,11,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,11,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,11,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 11,
                                   ! right side
CMP_SPR_SEAT_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,11,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,11,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,12,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 12,
                                   ! left side
CMP_SPR_SEAT_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,12,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,12,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,12,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 12,
                                   ! right side
CMP_SPR_SEAT_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,12,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,12,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,13,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 13,
                                   ! left side
CMP_SPR_SEAT_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,13,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,13,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,13,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 13,
                                   ! right side
CMP_SPR_SEAT_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,13,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,13,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,14,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 14,
                                   ! left side
CMP_SPR_SEAT_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,14,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,14,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,14,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 2, axle 14,
                                   ! right side
CMP_SPR_SEAT_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(2,14,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(2,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,14,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,4,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 4, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,4,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,4,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,4,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,4,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 4, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,4,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,4,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,4,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,5,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 5, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,5,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,5,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,5,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,5,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 5, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,5,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,5,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,5,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,6,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 6, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,6,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,6,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,6,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,6,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 6, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,6,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,6,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,6,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,7,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 7, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,7,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,7,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,7,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,7,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 7, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,7,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,7,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,7,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,8,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 8, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,8,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,8,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,8,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,8,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 8, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,8,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,8,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,8,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,9,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 9, left
                                  ! side
CMP_SPR_SEAT_GAIN(3,9,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,9,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,9,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,9,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 3, axle 9, right
                                  ! side
CMP_SPR_SEAT_GAIN(3,9,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,9,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(3,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,9,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,10,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 10,
                                   ! left side
CMP_SPR_SEAT_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,10,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,10,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,10,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 10,
                                   ! right side
CMP_SPR_SEAT_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,10,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,10,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,11,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 11,
                                   ! left side
CMP_SPR_SEAT_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,11,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,11,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,11,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 11,
                                   ! right side
CMP_SPR_SEAT_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,11,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,11,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,12,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 12,
                                   ! left side
CMP_SPR_SEAT_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,12,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,12,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,12,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 12,
                                   ! right side
CMP_SPR_SEAT_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,12,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,12,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,13,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 13,
                                   ! left side
CMP_SPR_SEAT_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,13,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,13,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,13,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 13,
                                   ! right side
CMP_SPR_SEAT_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,13,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,13,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,14,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 14,
                                   ! left side
CMP_SPR_SEAT_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,14,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,14,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(3,14,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 3, axle 14,
                                   ! right side
CMP_SPR_SEAT_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(3,14,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(3,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(3,14,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,1,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 1, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,1,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,1,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,2,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 2, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,2,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,2,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,3,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 3, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,3,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,3,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,3,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,3,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,3,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 3, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,3,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,3,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,3,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,3,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,4,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 4, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,4,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,4,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,4,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,4,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,4,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 4, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,4,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,4,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,4,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,4,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,5,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 5, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,5,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,5,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,5,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,5,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,5,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 5, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,5,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,5,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,5,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,5,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,6,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 6, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,6,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,6,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,6,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,6,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,6,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 6, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,6,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,6,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,6,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,6,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,7,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 7, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,7,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,7,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,7,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,7,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,7,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 7, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,7,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,7,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,7,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,7,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,8,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 8, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,8,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,8,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,8,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,8,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,8,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 8, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,8,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,8,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,8,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,8,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,9,1) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 9, left
                                  ! side
CMP_SPR_SEAT_GAIN(4,9,1) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,9,1) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,9,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,9,1) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,9,2) 1 ! Coefficient: lower spring seat movement per unit
                                  ! jounce at wheel (mm/mm), unit 4, axle 9, right
                                  ! side
CMP_SPR_SEAT_GAIN(4,9,2) 1 ! Gain multiplied with calculated value to get lower
                           ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,9,2) 0 ; mm ! Offset added (after gain) to get lower spring
                             ! seat movement
JNC_START_CMP_SPR_SEAT(4,9,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,9,2) 1 ! Scale factor divided into (jounce at wheel -
                                ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,10,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 10,
                                   ! left side
CMP_SPR_SEAT_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,10,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,10,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,10,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,10,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 10,
                                   ! right side
CMP_SPR_SEAT_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,10,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,10,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,10,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,11,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 11,
                                   ! left side
CMP_SPR_SEAT_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,11,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,11,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,11,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,11,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 11,
                                   ! right side
CMP_SPR_SEAT_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,11,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,11,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,11,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,12,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 12,
                                   ! left side
CMP_SPR_SEAT_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,12,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,12,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,12,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,12,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 12,
                                   ! right side
CMP_SPR_SEAT_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,12,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,12,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,12,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,13,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 13,
                                   ! left side
CMP_SPR_SEAT_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,13,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,13,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,13,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,13,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 13,
                                   ! right side
CMP_SPR_SEAT_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,13,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,13,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,13,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,14,1) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 14,
                                   ! left side
CMP_SPR_SEAT_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,14,1) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,14,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,14,1) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(4,14,2) 1 ! Coefficient: lower spring seat movement per
                                   ! unit jounce at wheel (mm/mm), unit 4, axle 14,
                                   ! right side
CMP_SPR_SEAT_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get lower
                            ! spring seat movement
CMP_SPR_SEAT_OFFSET(4,14,2) 0 ; mm ! Offset added (after gain) to get lower spring
                              ! seat movement
JNC_START_CMP_SPR_SEAT(4,14,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(4,14,2) 1 ! Scale factor divided into (jounce at wheel -
                                 ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 94 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CS_FY_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CS_FY_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CS_FY_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CS_FY_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CS_FY_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CS_FY_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,4,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 4, left side
CS_FY_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,4,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,4,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 4, right side
CS_FY_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,4,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,5,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 5, left side
CS_FY_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,5,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,5,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 1, axle 5, right side
CS_FY_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,5,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CS_FY_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CS_FY_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CS_FY_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CS_FY_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 3, left side
CS_FY_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 3, right side
CS_FY_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,4,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 4, left side
CS_FY_OFFSET(2,4,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,4,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,4,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 4, right side
CS_FY_OFFSET(2,4,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,4,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,5,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 5, left side
CS_FY_OFFSET(2,5,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,5,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,5,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 5, right side
CS_FY_OFFSET(2,5,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,5,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,6,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 6, left side
CS_FY_OFFSET(2,6,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,6,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,6,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 6, right side
CS_FY_OFFSET(2,6,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,6,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,7,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 7, left side
CS_FY_OFFSET(2,7,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,7,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,7,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 7, right side
CS_FY_OFFSET(2,7,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,7,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,8,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 8, left side
CS_FY_OFFSET(2,8,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,8,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,8,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 8, right side
CS_FY_OFFSET(2,8,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,8,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,9,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 9, left side
CS_FY_OFFSET(2,9,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,9,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,9,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 2, axle 9, right side
CS_FY_OFFSET(2,9,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,9,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,10,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 10, left side
CS_FY_OFFSET(2,10,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,10,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,10,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 10, right side
CS_FY_OFFSET(2,10,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,10,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,11,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 11, left side
CS_FY_OFFSET(2,11,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,11,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,11,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 11, right side
CS_FY_OFFSET(2,11,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,11,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,12,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 12, left side
CS_FY_OFFSET(2,12,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,12,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,12,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 12, right side
CS_FY_OFFSET(2,12,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,12,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,13,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 13, left side
CS_FY_OFFSET(2,13,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,13,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,13,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 13, right side
CS_FY_OFFSET(2,13,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,13,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,14,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 14, left side
CS_FY_OFFSET(2,14,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,14,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,14,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 2, axle 14, right side
CS_FY_OFFSET(2,14,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,14,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CS_FY_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CS_FY_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CS_FY_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CS_FY_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 3, left side
CS_FY_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 3, right side
CS_FY_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,4,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 4, left side
CS_FY_OFFSET(3,4,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,4,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,4,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 4, right side
CS_FY_OFFSET(3,4,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,4,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,5,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 5, left side
CS_FY_OFFSET(3,5,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,5,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,5,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 5, right side
CS_FY_OFFSET(3,5,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,5,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,6,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 6, left side
CS_FY_OFFSET(3,6,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,6,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,6,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 6, right side
CS_FY_OFFSET(3,6,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,6,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,7,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 7, left side
CS_FY_OFFSET(3,7,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,7,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,7,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 7, right side
CS_FY_OFFSET(3,7,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,7,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,8,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 8, left side
CS_FY_OFFSET(3,8,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,8,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,8,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 8, right side
CS_FY_OFFSET(3,8,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,8,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,9,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 9, left side
CS_FY_OFFSET(3,9,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,9,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,9,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 3, axle 9, right side
CS_FY_OFFSET(3,9,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,9,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,10,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 10, left side
CS_FY_OFFSET(3,10,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,10,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,10,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 10, right side
CS_FY_OFFSET(3,10,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,10,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,11,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 11, left side
CS_FY_OFFSET(3,11,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,11,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,11,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 11, right side
CS_FY_OFFSET(3,11,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,11,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,12,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 12, left side
CS_FY_OFFSET(3,12,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,12,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,12,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 12, right side
CS_FY_OFFSET(3,12,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,12,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,13,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 13, left side
CS_FY_OFFSET(3,13,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,13,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,13,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 13, right side
CS_FY_OFFSET(3,13,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,13,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,14,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 14, left side
CS_FY_OFFSET(3,14,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,14,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(3,14,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 3, axle 14, right side
CS_FY_OFFSET(3,14,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(3,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(3,14,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 1, left side
CS_FY_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,1,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 1, right side
CS_FY_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,1,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CS_FY_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CS_FY_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,2,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,3,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 3, left side
CS_FY_OFFSET(4,3,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,3,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,3,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 3, right side
CS_FY_OFFSET(4,3,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,3,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,4,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 4, left side
CS_FY_OFFSET(4,4,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,4,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,4,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 4, right side
CS_FY_OFFSET(4,4,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,4,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,5,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 5, left side
CS_FY_OFFSET(4,5,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,5,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,5,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 5, right side
CS_FY_OFFSET(4,5,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,5,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,6,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 6, left side
CS_FY_OFFSET(4,6,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,6,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,6,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 6, right side
CS_FY_OFFSET(4,6,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,6,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,7,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 7, left side
CS_FY_OFFSET(4,7,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,7,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,7,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 7, right side
CS_FY_OFFSET(4,7,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,7,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,8,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 8, left side
CS_FY_OFFSET(4,8,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,8,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,8,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 8, right side
CS_FY_OFFSET(4,8,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,8,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,9,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 9, left side
CS_FY_OFFSET(4,9,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,9,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,9,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                           ! unit 4, axle 9, right side
CS_FY_OFFSET(4,9,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,9,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,10,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 10, left side
CS_FY_OFFSET(4,10,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,10,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,10,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 10, right side
CS_FY_OFFSET(4,10,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,10,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,11,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 11, left side
CS_FY_OFFSET(4,11,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,11,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,11,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 11, right side
CS_FY_OFFSET(4,11,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,11,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,12,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 12, left side
CS_FY_OFFSET(4,12,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,12,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,12,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 12, right side
CS_FY_OFFSET(4,12,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,12,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,13,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 13, left side
CS_FY_OFFSET(4,13,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,13,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,13,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 13, right side
CS_FY_OFFSET(4,13,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,13,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,14,1) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 14, left side
CS_FY_OFFSET(4,14,1) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,14,1) 1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(4,14,2) 0 ! Coefficient: Steer displacement per unit force
                            ! (deg/N), unit 4, axle 14, right side
CS_FY_OFFSET(4,14,2) 0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(4,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(4,14,2) 1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 94 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, left side
CS_MZ_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 1, right side
CS_MZ_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, left side
CS_MZ_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 2, right side
CS_MZ_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, left side
CS_MZ_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 3, right side
CS_MZ_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,4,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, left side
CS_MZ_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,4,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,4,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 4, right side
CS_MZ_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,4,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,5,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, left side
CS_MZ_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,5,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,5,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 1, axle 5, right side
CS_MZ_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,5,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, left side
CS_MZ_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 1, right side
CS_MZ_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, left side
CS_MZ_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 2, right side
CS_MZ_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, left side
CS_MZ_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 3, right side
CS_MZ_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,4,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 4, left side
CS_MZ_OFFSET(2,4,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,4,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,4,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 4, right side
CS_MZ_OFFSET(2,4,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,4,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,5,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 5, left side
CS_MZ_OFFSET(2,5,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,5,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,5,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 5, right side
CS_MZ_OFFSET(2,5,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,5,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,6,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 6, left side
CS_MZ_OFFSET(2,6,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,6,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,6,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,6,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 6, right side
CS_MZ_OFFSET(2,6,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,6,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,6,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,7,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 7, left side
CS_MZ_OFFSET(2,7,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,7,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,7,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,7,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 7, right side
CS_MZ_OFFSET(2,7,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,7,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,7,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,8,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 8, left side
CS_MZ_OFFSET(2,8,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,8,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,8,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,8,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 8, right side
CS_MZ_OFFSET(2,8,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,8,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,8,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,9,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 9, left side
CS_MZ_OFFSET(2,9,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,9,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,9,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,9,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 2, axle 9, right side
CS_MZ_OFFSET(2,9,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,9,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,9,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,10,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 10, left side
CS_MZ_OFFSET(2,10,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,10,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,10,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,10,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 10, right side
CS_MZ_OFFSET(2,10,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,10,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,10,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,11,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 11, left side
CS_MZ_OFFSET(2,11,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,11,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,11,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,11,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 11, right side
CS_MZ_OFFSET(2,11,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,11,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,11,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,12,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 12, left side
CS_MZ_OFFSET(2,12,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,12,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,12,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,12,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 12, right side
CS_MZ_OFFSET(2,12,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,12,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,12,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,13,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 13, left side
CS_MZ_OFFSET(2,13,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,13,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,13,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,13,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 13, right side
CS_MZ_OFFSET(2,13,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,13,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,13,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,14,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 14, left side
CS_MZ_OFFSET(2,14,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,14,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,14,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,14,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 2, axle 14, right side
CS_MZ_OFFSET(2,14,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,14,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,14,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, left side
CS_MZ_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 1, right side
CS_MZ_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, left side
CS_MZ_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 2, right side
CS_MZ_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, left side
CS_MZ_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 3, right side
CS_MZ_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,4,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 4, left side
CS_MZ_OFFSET(3,4,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,4,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,4,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 4, right side
CS_MZ_OFFSET(3,4,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,4,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,5,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 5, left side
CS_MZ_OFFSET(3,5,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,5,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,5,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 5, right side
CS_MZ_OFFSET(3,5,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,5,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,6,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 6, left side
CS_MZ_OFFSET(3,6,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,6,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,6,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,6,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 6, right side
CS_MZ_OFFSET(3,6,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,6,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,6,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,7,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 7, left side
CS_MZ_OFFSET(3,7,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,7,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,7,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,7,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 7, right side
CS_MZ_OFFSET(3,7,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,7,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,7,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,8,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 8, left side
CS_MZ_OFFSET(3,8,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,8,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,8,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,8,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 8, right side
CS_MZ_OFFSET(3,8,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,8,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,8,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,9,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 9, left side
CS_MZ_OFFSET(3,9,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,9,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,9,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,9,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 3, axle 9, right side
CS_MZ_OFFSET(3,9,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,9,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,9,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,10,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 10, left side
CS_MZ_OFFSET(3,10,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,10,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,10,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,10,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 10, right side
CS_MZ_OFFSET(3,10,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,10,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,10,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,11,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 11, left side
CS_MZ_OFFSET(3,11,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,11,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,11,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,11,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 11, right side
CS_MZ_OFFSET(3,11,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,11,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,11,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,12,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 12, left side
CS_MZ_OFFSET(3,12,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,12,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,12,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,12,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 12, right side
CS_MZ_OFFSET(3,12,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,12,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,12,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,13,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 13, left side
CS_MZ_OFFSET(3,13,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,13,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,13,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,13,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 13, right side
CS_MZ_OFFSET(3,13,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,13,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,13,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,14,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 14, left side
CS_MZ_OFFSET(3,14,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,14,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,14,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(3,14,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 3, axle 14, right side
CS_MZ_OFFSET(3,14,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(3,14,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(3,14,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, left side
CS_MZ_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,1,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 1, right side
CS_MZ_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,1,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,1,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, left side
CS_MZ_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,2,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 2, right side
CS_MZ_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,2,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,2,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,3,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 3, left side
CS_MZ_OFFSET(4,3,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,3,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,3,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,3,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 3, right side
CS_MZ_OFFSET(4,3,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,3,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,3,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,4,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 4, left side
CS_MZ_OFFSET(4,4,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,4,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,4,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,4,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 4, right side
CS_MZ_OFFSET(4,4,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,4,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,4,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,5,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 5, left side
CS_MZ_OFFSET(4,5,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,5,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,5,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,5,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 5, right side
CS_MZ_OFFSET(4,5,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,5,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,5,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,6,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 6, left side
CS_MZ_OFFSET(4,6,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,6,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,6,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,6,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 6, right side
CS_MZ_OFFSET(4,6,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,6,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,6,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,7,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 7, left side
CS_MZ_OFFSET(4,7,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,7,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,7,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,7,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 7, right side
CS_MZ_OFFSET(4,7,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,7,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,7,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,8,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 8, left side
CS_MZ_OFFSET(4,8,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,8,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,8,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,8,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 8, right side
CS_MZ_OFFSET(4,8,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,8,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,8,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,9,1) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 9, left side
CS_MZ_OFFSET(4,9,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,9,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,9,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,9,2) 0 ! Coefficient: steer displacement per unit moment
                           ! (deg/N-m), unit 4, axle 9, right side
CS_MZ_OFFSET(4,9,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,9,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,9,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,10,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 10, left side
CS_MZ_OFFSET(4,10,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,10,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,10,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,10,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 10, right side
CS_MZ_OFFSET(4,10,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,10,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,10,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,11,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 11, left side
CS_MZ_OFFSET(4,11,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,11,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,11,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,11,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 11, right side
CS_MZ_OFFSET(4,11,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,11,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,11,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,12,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 12, left side
CS_MZ_OFFSET(4,12,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,12,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,12,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,12,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 12, right side
CS_MZ_OFFSET(4,12,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,12,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,12,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,13,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 13, left side
CS_MZ_OFFSET(4,13,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,13,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,13,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,13,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 13, right side
CS_MZ_OFFSET(4,13,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,13,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,13,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,14,1) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 14, left side
CS_MZ_OFFSET(4,14,1) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,14,1) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,14,1) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(4,14,2) 0 ! Coefficient: steer displacement per unit moment
                            ! (deg/N-m), unit 4, axle 14, right side
CS_MZ_OFFSET(4,14,2) 0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(4,14,2) 0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(4,14,2) 1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 94 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, left side
CT_FX_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 1, right side
CT_FX_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, left side
CT_FX_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 2, right side
CT_FX_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, left side
CT_FX_OFFSET(1,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 3, right side
CT_FX_OFFSET(1,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,4,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 4, left side
CT_FX_OFFSET(1,4,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,4,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,4,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 4, right side
CT_FX_OFFSET(1,4,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,4,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,5,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 5, left side
CT_FX_OFFSET(1,5,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,5,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,5,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 1, axle 5, right side
CT_FX_OFFSET(1,5,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,5,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, left side
CT_FX_OFFSET(2,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 1, right side
CT_FX_OFFSET(2,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, left side
CT_FX_OFFSET(2,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 2, right side
CT_FX_OFFSET(2,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 3, left side
CT_FX_OFFSET(2,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 3, right side
CT_FX_OFFSET(2,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,4,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 4, left side
CT_FX_OFFSET(2,4,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,4,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,4,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 4, right side
CT_FX_OFFSET(2,4,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,4,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,5,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 5, left side
CT_FX_OFFSET(2,5,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,5,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,5,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 5, right side
CT_FX_OFFSET(2,5,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,5,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,6,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 6, left side
CT_FX_OFFSET(2,6,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,6,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,6,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 6, right side
CT_FX_OFFSET(2,6,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,6,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,7,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 7, left side
CT_FX_OFFSET(2,7,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,7,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,7,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 7, right side
CT_FX_OFFSET(2,7,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,7,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,8,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 8, left side
CT_FX_OFFSET(2,8,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,8,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,8,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 8, right side
CT_FX_OFFSET(2,8,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,8,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,9,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 9, left side
CT_FX_OFFSET(2,9,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,9,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,9,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 2, axle 9, right side
CT_FX_OFFSET(2,9,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,9,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,10,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 10, left side
CT_FX_OFFSET(2,10,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,10,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,10,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 10, right side
CT_FX_OFFSET(2,10,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,10,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,11,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 11, left side
CT_FX_OFFSET(2,11,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,11,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,11,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 11, right side
CT_FX_OFFSET(2,11,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,11,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,12,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 12, left side
CT_FX_OFFSET(2,12,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,12,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,12,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 12, right side
CT_FX_OFFSET(2,12,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,12,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,13,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 13, left side
CT_FX_OFFSET(2,13,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,13,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,13,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 13, right side
CT_FX_OFFSET(2,13,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,13,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,14,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 14, left side
CT_FX_OFFSET(2,14,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,14,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,14,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 2, axle 14, right side
CT_FX_OFFSET(2,14,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,14,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, left side
CT_FX_OFFSET(3,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 1, right side
CT_FX_OFFSET(3,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, left side
CT_FX_OFFSET(3,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 2, right side
CT_FX_OFFSET(3,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 3, left side
CT_FX_OFFSET(3,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 3, right side
CT_FX_OFFSET(3,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,4,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 4, left side
CT_FX_OFFSET(3,4,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,4,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,4,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 4, right side
CT_FX_OFFSET(3,4,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,4,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,5,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 5, left side
CT_FX_OFFSET(3,5,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,5,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,5,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 5, right side
CT_FX_OFFSET(3,5,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,5,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,6,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 6, left side
CT_FX_OFFSET(3,6,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,6,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,6,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 6, right side
CT_FX_OFFSET(3,6,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,6,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,7,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 7, left side
CT_FX_OFFSET(3,7,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,7,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,7,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 7, right side
CT_FX_OFFSET(3,7,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,7,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,8,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 8, left side
CT_FX_OFFSET(3,8,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,8,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,8,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 8, right side
CT_FX_OFFSET(3,8,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,8,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,9,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 9, left side
CT_FX_OFFSET(3,9,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,9,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,9,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 3, axle 9, right side
CT_FX_OFFSET(3,9,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,9,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,10,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 10, left side
CT_FX_OFFSET(3,10,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,10,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,10,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 10, right side
CT_FX_OFFSET(3,10,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,10,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,11,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 11, left side
CT_FX_OFFSET(3,11,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,11,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,11,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 11, right side
CT_FX_OFFSET(3,11,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,11,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,12,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 12, left side
CT_FX_OFFSET(3,12,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,12,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,12,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 12, right side
CT_FX_OFFSET(3,12,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,12,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,13,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 13, left side
CT_FX_OFFSET(3,13,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,13,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,13,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 13, right side
CT_FX_OFFSET(3,13,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,13,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,14,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 14, left side
CT_FX_OFFSET(3,14,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,14,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(3,14,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 3, axle 14, right side
CT_FX_OFFSET(3,14,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(3,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(3,14,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 1, left side
CT_FX_OFFSET(4,1,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 1, right side
CT_FX_OFFSET(4,1,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,1,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,1,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, left side
CT_FX_OFFSET(4,2,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 2, right side
CT_FX_OFFSET(4,2,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,2,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,2,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,3,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 3, left side
CT_FX_OFFSET(4,3,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,3,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,3,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,3,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 3, right side
CT_FX_OFFSET(4,3,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,3,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,3,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,4,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 4, left side
CT_FX_OFFSET(4,4,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,4,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,4,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,4,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 4, right side
CT_FX_OFFSET(4,4,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,4,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,4,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,5,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 5, left side
CT_FX_OFFSET(4,5,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,5,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,5,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,5,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 5, right side
CT_FX_OFFSET(4,5,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,5,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,5,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,6,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 6, left side
CT_FX_OFFSET(4,6,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,6,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,6,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,6,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 6, right side
CT_FX_OFFSET(4,6,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,6,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,6,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,7,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 7, left side
CT_FX_OFFSET(4,7,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,7,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,7,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,7,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 7, right side
CT_FX_OFFSET(4,7,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,7,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,7,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,8,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 8, left side
CT_FX_OFFSET(4,8,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,8,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,8,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,8,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 8, right side
CT_FX_OFFSET(4,8,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,8,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,8,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,9,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 9, left side
CT_FX_OFFSET(4,9,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,9,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,9,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,9,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                           ! unit 4, axle 9, right side
CT_FX_OFFSET(4,9,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,9,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,9,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,10,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 10, left side
CT_FX_OFFSET(4,10,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,10,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,10,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,10,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 10, right side
CT_FX_OFFSET(4,10,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,10,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,10,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,11,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 11, left side
CT_FX_OFFSET(4,11,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,11,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,11,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,11,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 11, right side
CT_FX_OFFSET(4,11,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,11,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,11,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,12,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 12, left side
CT_FX_OFFSET(4,12,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,12,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,12,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,12,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 12, right side
CT_FX_OFFSET(4,12,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,12,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,12,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,13,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 13, left side
CT_FX_OFFSET(4,13,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,13,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,13,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,13,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 13, right side
CT_FX_OFFSET(4,13,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,13,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,13,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,14,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 14, left side
CT_FX_OFFSET(4,14,1) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,14,1) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,14,1) 1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(4,14,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                            ! unit 4, axle 14, right side
CT_FX_OFFSET(4,14,2) 0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(4,14,2) 0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(4,14,2) 1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 47 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IUNIT and
! IAXLE are used to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 1
C_LAT_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 2
C_LAT_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 3
C_LAT_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,4) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 4
C_LAT_AXLE_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,4) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(1,5) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 1, axle 5
C_LAT_AXLE_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(1,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(1,5) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 1
C_LAT_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 2
C_LAT_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 3
C_LAT_AXLE_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,4) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 4
C_LAT_AXLE_OFFSET(2,4) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,4) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,5) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 5
C_LAT_AXLE_OFFSET(2,5) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,5) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,6) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 6
C_LAT_AXLE_OFFSET(2,6) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,6) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,6) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,7) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 7
C_LAT_AXLE_OFFSET(2,7) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,7) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,7) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,8) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 8
C_LAT_AXLE_OFFSET(2,8) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,8) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,8) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,9) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 2, axle 9
C_LAT_AXLE_OFFSET(2,9) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(2,9) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,9) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,10) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 2, axle 10
C_LAT_AXLE_OFFSET(2,10) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(2,10) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,10) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,11) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 2, axle 11
C_LAT_AXLE_OFFSET(2,11) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(2,11) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,11) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,12) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 2, axle 12
C_LAT_AXLE_OFFSET(2,12) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(2,12) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,12) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,13) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 2, axle 13
C_LAT_AXLE_OFFSET(2,13) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(2,13) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,13) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(2,14) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 2, axle 14
C_LAT_AXLE_OFFSET(2,14) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(2,14) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2,14) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 1
C_LAT_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 2
C_LAT_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 3
C_LAT_AXLE_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,4) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 4
C_LAT_AXLE_OFFSET(3,4) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,4) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,5) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 5
C_LAT_AXLE_OFFSET(3,5) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,5) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,6) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 6
C_LAT_AXLE_OFFSET(3,6) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,6) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,6) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,7) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 7
C_LAT_AXLE_OFFSET(3,7) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,7) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,7) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,8) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 8
C_LAT_AXLE_OFFSET(3,8) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,8) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,8) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,9) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 3, axle 9
C_LAT_AXLE_OFFSET(3,9) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(3,9) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,9) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,10) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 3, axle 10
C_LAT_AXLE_OFFSET(3,10) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(3,10) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,10) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,11) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 3, axle 11
C_LAT_AXLE_OFFSET(3,11) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(3,11) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,11) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,12) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 3, axle 12
C_LAT_AXLE_OFFSET(3,12) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(3,12) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,12) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,13) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 3, axle 13
C_LAT_AXLE_OFFSET(3,13) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(3,13) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,13) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(3,14) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 3, axle 14
C_LAT_AXLE_OFFSET(3,14) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(3,14) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(3,14) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,1) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 1
C_LAT_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,1) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 2
C_LAT_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,3) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 3
C_LAT_AXLE_OFFSET(4,3) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,3) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,4) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 4
C_LAT_AXLE_OFFSET(4,4) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,4) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,5) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 5
C_LAT_AXLE_OFFSET(4,5) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,5) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,6) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 6
C_LAT_AXLE_OFFSET(4,6) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,6) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,6) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,7) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 7
C_LAT_AXLE_OFFSET(4,7) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,7) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,7) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,8) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 8
C_LAT_AXLE_OFFSET(4,8) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,8) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,8) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,9) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                              ! (mm/N), unit 4, axle 9
C_LAT_AXLE_OFFSET(4,9) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                         ! displacement
F_START_C_LAT_AXLE(4,9) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,9) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,10) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 4, axle 10
C_LAT_AXLE_OFFSET(4,10) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(4,10) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,10) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,11) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 4, axle 11
C_LAT_AXLE_OFFSET(4,11) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(4,11) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,11) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,12) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 4, axle 12
C_LAT_AXLE_OFFSET(4,12) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(4,12) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,12) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,13) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 4, axle 13
C_LAT_AXLE_OFFSET(4,13) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(4,13) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,13) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

C_LAT_AXLE_COEFFICIENT(4,14) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                               ! (mm/N), unit 4, axle 14
C_LAT_AXLE_OFFSET(4,14) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                          ! displacement
F_START_C_LAT_AXLE(4,14) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(4,14) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 47
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(1,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 1
C_LONG_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 2
C_LONG_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 3
C_LONG_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,4) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 4
C_LONG_AXLE_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,4) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(1,5) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 1, axle 5
C_LONG_AXLE_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(1,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(1,5) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 1
C_LONG_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 2
C_LONG_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 3
C_LONG_AXLE_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,4) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 4
C_LONG_AXLE_OFFSET(2,4) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,4) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,5) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 5
C_LONG_AXLE_OFFSET(2,5) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,5) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,6) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 6
C_LONG_AXLE_OFFSET(2,6) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,6) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,6) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,7) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 7
C_LONG_AXLE_OFFSET(2,7) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,7) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,7) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,8) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 8
C_LONG_AXLE_OFFSET(2,8) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,8) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,8) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,9) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 2, axle 9
C_LONG_AXLE_OFFSET(2,9) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(2,9) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,9) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,10) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 2, axle 10
C_LONG_AXLE_OFFSET(2,10) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(2,10) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,10) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,11) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 2, axle 11
C_LONG_AXLE_OFFSET(2,11) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(2,11) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,11) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,12) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 2, axle 12
C_LONG_AXLE_OFFSET(2,12) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(2,12) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,12) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,13) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 2, axle 13
C_LONG_AXLE_OFFSET(2,13) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(2,13) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,13) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(2,14) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 2, axle 14
C_LONG_AXLE_OFFSET(2,14) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(2,14) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2,14) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 1
C_LONG_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 2
C_LONG_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 3
C_LONG_AXLE_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,4) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 4
C_LONG_AXLE_OFFSET(3,4) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,4) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,5) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 5
C_LONG_AXLE_OFFSET(3,5) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,5) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,6) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 6
C_LONG_AXLE_OFFSET(3,6) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,6) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,6) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,7) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 7
C_LONG_AXLE_OFFSET(3,7) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,7) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,7) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,8) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 8
C_LONG_AXLE_OFFSET(3,8) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,8) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,8) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,9) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 3, axle 9
C_LONG_AXLE_OFFSET(3,9) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(3,9) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,9) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,10) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 3, axle 10
C_LONG_AXLE_OFFSET(3,10) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(3,10) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,10) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,11) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 3, axle 11
C_LONG_AXLE_OFFSET(3,11) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(3,11) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,11) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,12) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 3, axle 12
C_LONG_AXLE_OFFSET(3,12) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(3,12) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,12) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,13) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 3, axle 13
C_LONG_AXLE_OFFSET(3,13) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(3,13) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,13) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(3,14) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 3, axle 14
C_LONG_AXLE_OFFSET(3,14) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(3,14) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(3,14) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,1) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 1
C_LONG_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,1) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,2) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 2
C_LONG_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,3) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 3
C_LONG_AXLE_OFFSET(4,3) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,3) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,3) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,4) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 4
C_LONG_AXLE_OFFSET(4,4) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,4) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,4) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,5) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 5
C_LONG_AXLE_OFFSET(4,5) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,5) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,5) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,6) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 6
C_LONG_AXLE_OFFSET(4,6) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,6) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,6) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,7) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 7
C_LONG_AXLE_OFFSET(4,7) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,7) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,7) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,8) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 8
C_LONG_AXLE_OFFSET(4,8) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,8) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,8) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,9) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                               ! force (mm/N), unit 4, axle 9
C_LONG_AXLE_OFFSET(4,9) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                          ! displacement
F_START_C_LONG_AXLE(4,9) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,9) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,10) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 4, axle 10
C_LONG_AXLE_OFFSET(4,10) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(4,10) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,10) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,11) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 4, axle 11
C_LONG_AXLE_OFFSET(4,11) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(4,11) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,11) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,12) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 4, axle 12
C_LONG_AXLE_OFFSET(4,12) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(4,12) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,12) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,13) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 4, axle 13
C_LONG_AXLE_OFFSET(4,13) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(4,13) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,13) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

C_LONG_AXLE_COEFFICIENT(4,14) 0 ! Coefficient: C_LONG_AXLE displacement per unit
                                ! force (mm/N), unit 4, axle 14
C_LONG_AXLE_OFFSET(4,14) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                           ! displacement
F_START_C_LONG_AXLE(4,14) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(4,14) 1 ! Scale factor divided into (force -
                            ! F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 205
 0.2, 205
 0.8, 223
 1, 223
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 377
 0.2, 377
 0.8, 485
 1, 485
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 503
 0.2, 503
 0.8, 891
 1, 891
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 720
 0.75, 720
 0.9, 1050
 1, 1050
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 973
 0.75, 973
 0.9, 1400
 1, 1400
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 1125
 0.75, 1125
 0.9, 2000
 1, 2000
ENDTABLE
DOWNSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(6) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 94 datasets;
! if indices shown below are not used, e.g., (1,1,2), the current values of the
! indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading data.

FD_COEFFICIENT(1,1,1) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, left side
FD_GAIN(1,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,1,2) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 1, right side
FD_GAIN(1,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,1) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, left side
FD_GAIN(1,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,2,2) 10 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 2, right side
FD_GAIN(1,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,1) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, left side
FD_GAIN(1,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,3,2) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 3, right side
FD_GAIN(1,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,4,1) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 4, left side
FD_GAIN(1,4,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,4,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,4,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,4,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,4,2) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 4, right side
FD_GAIN(1,4,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,4,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,4,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,4,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,5,1) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 5, left side
FD_GAIN(1,5,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,5,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,5,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,5,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(1,5,2) 50 ! Coefficient: damper force per unit compression speed
                         ! (N/[mm/s]), unit 1, axle 5, right side
FD_GAIN(1,5,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,5,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,5,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,5,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 1, left side
FD_GAIN(2,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,1,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 1, right side
FD_GAIN(2,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 2, left side
FD_GAIN(2,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,2,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 2, right side
FD_GAIN(2,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,3,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 3, left side
FD_GAIN(2,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,3,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 3, right side
FD_GAIN(2,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,4,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 4, left side
FD_GAIN(2,4,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,4,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,4,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,4,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,4,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 4, right side
FD_GAIN(2,4,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,4,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,4,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,4,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,5,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 5, left side
FD_GAIN(2,5,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,5,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,5,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,5,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,5,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 5, right side
FD_GAIN(2,5,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,5,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,5,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,5,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,6,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 6, left side
FD_GAIN(2,6,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,6,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,6,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,6,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,6,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 6, right side
FD_GAIN(2,6,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,6,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,6,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,6,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,7,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 7, left side
FD_GAIN(2,7,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,7,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,7,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,7,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,7,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 7, right side
FD_GAIN(2,7,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,7,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,7,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,7,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,8,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 8, left side
FD_GAIN(2,8,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,8,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,8,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,8,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,8,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 8, right side
FD_GAIN(2,8,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,8,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,8,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,8,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,9,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 9, left side
FD_GAIN(2,9,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,9,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,9,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,9,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,9,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 2, axle 9, right side
FD_GAIN(2,9,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,9,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,9,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,9,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(2,10,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 10, left side
FD_GAIN(2,10,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,10,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,10,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,10,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,10,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 10, right side
FD_GAIN(2,10,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,10,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,10,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,10,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,11,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 11, left side
FD_GAIN(2,11,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,11,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,11,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,11,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,11,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 11, right side
FD_GAIN(2,11,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,11,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,11,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,11,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,12,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 12, left side
FD_GAIN(2,12,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,12,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,12,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,12,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,12,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 12, right side
FD_GAIN(2,12,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,12,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,12,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,12,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,13,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 13, left side
FD_GAIN(2,13,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,13,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,13,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,13,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,13,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 13, right side
FD_GAIN(2,13,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,13,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,13,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,13,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,14,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 14, left side
FD_GAIN(2,14,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,14,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,14,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,14,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(2,14,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 2, axle 14, right side
FD_GAIN(2,14,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,14,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,14,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,14,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,1,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 1, left side
FD_GAIN(3,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,1,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 1, right side
FD_GAIN(3,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,2,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 2, left side
FD_GAIN(3,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,2,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 2, right side
FD_GAIN(3,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,3,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 3, left side
FD_GAIN(3,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,3,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 3, right side
FD_GAIN(3,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,4,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 4, left side
FD_GAIN(3,4,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,4,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,4,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,4,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,4,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 4, right side
FD_GAIN(3,4,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,4,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,4,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,4,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,5,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 5, left side
FD_GAIN(3,5,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,5,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,5,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,5,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,5,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 5, right side
FD_GAIN(3,5,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,5,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,5,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,5,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,6,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 6, left side
FD_GAIN(3,6,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,6,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,6,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,6,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,6,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 6, right side
FD_GAIN(3,6,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,6,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,6,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,6,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,7,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 7, left side
FD_GAIN(3,7,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,7,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,7,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,7,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,7,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 7, right side
FD_GAIN(3,7,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,7,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,7,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,7,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,8,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 8, left side
FD_GAIN(3,8,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,8,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,8,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,8,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,8,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 8, right side
FD_GAIN(3,8,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,8,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,8,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,8,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,9,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 9, left side
FD_GAIN(3,9,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,9,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,9,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,9,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,9,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 3, axle 9, right side
FD_GAIN(3,9,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,9,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,9,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,9,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(3,10,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 10, left side
FD_GAIN(3,10,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,10,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,10,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,10,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,10,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 10, right side
FD_GAIN(3,10,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,10,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,10,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,10,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,11,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 11, left side
FD_GAIN(3,11,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,11,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,11,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,11,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,11,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 11, right side
FD_GAIN(3,11,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,11,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,11,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,11,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,12,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 12, left side
FD_GAIN(3,12,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,12,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,12,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,12,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,12,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 12, right side
FD_GAIN(3,12,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,12,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,12,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,12,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,13,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 13, left side
FD_GAIN(3,13,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,13,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,13,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,13,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,13,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 13, right side
FD_GAIN(3,13,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,13,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,13,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,13,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,14,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 14, left side
FD_GAIN(3,14,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,14,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,14,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,14,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(3,14,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 3, axle 14, right side
FD_GAIN(3,14,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(3,14,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(3,14,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(3,14,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,1,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 1, left side
FD_GAIN(4,1,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,1,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 1, right side
FD_GAIN(4,1,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,1,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,1,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,2,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 2, left side
FD_GAIN(4,2,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,2,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 2, right side
FD_GAIN(4,2,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,2,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,2,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,3,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 3, left side
FD_GAIN(4,3,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,3,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,3,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,3,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,3,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 3, right side
FD_GAIN(4,3,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,3,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,3,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,3,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,4,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 4, left side
FD_GAIN(4,4,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,4,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,4,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,4,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,4,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 4, right side
FD_GAIN(4,4,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,4,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,4,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,4,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,5,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 5, left side
FD_GAIN(4,5,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,5,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,5,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,5,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,5,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 5, right side
FD_GAIN(4,5,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,5,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,5,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,5,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,6,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 6, left side
FD_GAIN(4,6,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,6,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,6,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,6,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,6,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 6, right side
FD_GAIN(4,6,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,6,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,6,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,6,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,7,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 7, left side
FD_GAIN(4,7,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,7,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,7,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,7,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,7,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 7, right side
FD_GAIN(4,7,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,7,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,7,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,7,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,8,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 8, left side
FD_GAIN(4,8,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,8,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,8,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,8,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,8,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 8, right side
FD_GAIN(4,8,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,8,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,8,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,8,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,9,1) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 9, left side
FD_GAIN(4,9,1)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,9,1)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,9,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,9,1) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,9,2) 2.5 ! Coefficient: damper force per unit compression speed
                          ! (N/[mm/s]), unit 4, axle 9, right side
FD_GAIN(4,9,2)      1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,9,2)    0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,9,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,9,2) 1 ! Scale factor divided into (compression speed -
                        ! CMP_R_START_FD)

FD_COEFFICIENT(4,10,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 10, left side
FD_GAIN(4,10,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,10,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,10,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,10,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,10,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 10, right side
FD_GAIN(4,10,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,10,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,10,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,10,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,11,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 11, left side
FD_GAIN(4,11,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,11,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,11,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,11,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,11,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 11, right side
FD_GAIN(4,11,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,11,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,11,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,11,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,12,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 12, left side
FD_GAIN(4,12,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,12,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,12,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,12,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,12,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 12, right side
FD_GAIN(4,12,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,12,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,12,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,12,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,13,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 13, left side
FD_GAIN(4,13,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,13,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,13,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,13,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,13,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 13, right side
FD_GAIN(4,13,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,13,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,13,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,13,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,14,1) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 14, left side
FD_GAIN(4,14,1)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,14,1)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,14,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,14,1) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

FD_COEFFICIENT(4,14,2) 2.5 ! Coefficient: damper force per unit compression speed
                           ! (N/[mm/s]), unit 4, axle 14, right side
FD_GAIN(4,14,2)     1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(4,14,2)   0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(4,14,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(4,14,2) 1 ! Scale factor divided into (compression speed -
                         ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 94 datasets; if indices shown below are not used,
! e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are used
! to identify the dataset when reading data.

FS_COMP_COEFFICIENT(1,1,1) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, left side
FS_COMP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, left side

FS_COMP_COEFFICIENT(1,1,2) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 1, right side
FS_COMP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 1, right side

FS_COMP_COEFFICIENT(1,2,1) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, left side
FS_COMP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,1) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, left side

FS_COMP_COEFFICIENT(1,2,2) 200 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 2, right side
FS_COMP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2,2) 2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 2, right side

FS_COMP_COEFFICIENT(1,3,1) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, left side
FS_COMP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, left side

FS_COMP_COEFFICIENT(1,3,2) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 3, right side
FS_COMP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,3,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 3, right side

FS_COMP_COEFFICIENT(1,4,1) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 4, left side
FS_COMP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,4,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,4,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,4,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,4,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 4, left side

FS_COMP_COEFFICIENT(1,4,2) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 4, right side
FS_COMP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,4,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,4,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,4,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,4,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 4, right side

FS_COMP_COEFFICIENT(1,5,1) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 5, left side
FS_COMP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,5,1) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,5,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,5,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,5,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 5, left side

FS_COMP_COEFFICIENT(1,5,2) 900 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 1, axle 5, right side
FS_COMP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,5,2) 5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,5,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,5,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,5,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 1, axle 5, right side

FS_COMP_COEFFICIENT(2,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, left side
FS_COMP_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, left side

FS_COMP_COEFFICIENT(2,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 1, right side
FS_COMP_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 1, right side

FS_COMP_COEFFICIENT(2,2,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, left side
FS_COMP_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, left side

FS_COMP_COEFFICIENT(2,2,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 2, right side
FS_COMP_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 2, right side

FS_COMP_COEFFICIENT(2,3,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 3, left side
FS_COMP_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,3,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 3, left side

FS_COMP_COEFFICIENT(2,3,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 3, right side
FS_COMP_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,3,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 3, right side

FS_COMP_COEFFICIENT(2,4,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 4, left side
FS_COMP_GAIN(2,4,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,4,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,4,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,4,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,4,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 4, left side

FS_COMP_COEFFICIENT(2,4,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 4, right side
FS_COMP_GAIN(2,4,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,4,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,4,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,4,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,4,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 4, right side

FS_COMP_COEFFICIENT(2,5,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 5, left side
FS_COMP_GAIN(2,5,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,5,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,5,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,5,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,5,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 5, left side

FS_COMP_COEFFICIENT(2,5,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 5, right side
FS_COMP_GAIN(2,5,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,5,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,5,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,5,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,5,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 5, right side

FS_COMP_COEFFICIENT(2,6,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 6, left side
FS_COMP_GAIN(2,6,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,6,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,6,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,6,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,6,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,6,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 6, left side

FS_COMP_COEFFICIENT(2,6,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 6, right side
FS_COMP_GAIN(2,6,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,6,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,6,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,6,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,6,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,6,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 6, right side

FS_COMP_COEFFICIENT(2,7,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 7, left side
FS_COMP_GAIN(2,7,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,7,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,7,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,7,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,7,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,7,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 7, left side

FS_COMP_COEFFICIENT(2,7,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 7, right side
FS_COMP_GAIN(2,7,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,7,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,7,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,7,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,7,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,7,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 7, right side

FS_COMP_COEFFICIENT(2,8,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 8, left side
FS_COMP_GAIN(2,8,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,8,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,8,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,8,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,8,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,8,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 8, left side

FS_COMP_COEFFICIENT(2,8,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 8, right side
FS_COMP_GAIN(2,8,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,8,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,8,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,8,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,8,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,8,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 8, right side

FS_COMP_COEFFICIENT(2,9,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 9, left side
FS_COMP_GAIN(2,9,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,9,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,9,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,9,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,9,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,9,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 9, left side

FS_COMP_COEFFICIENT(2,9,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 9, right side
FS_COMP_GAIN(2,9,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,9,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,9,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,9,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,9,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,9,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 9, right side

FS_COMP_COEFFICIENT(2,10,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 10, left side
FS_COMP_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,10,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,10,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,10,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,10,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,10,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 10, left
                                   ! side

FS_COMP_COEFFICIENT(2,10,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 10, right side
FS_COMP_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,10,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,10,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,10,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,10,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,10,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 10, right
                                   ! side

FS_COMP_COEFFICIENT(2,11,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 11, left side
FS_COMP_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,11,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,11,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,11,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,11,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,11,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 11, left
                                   ! side

FS_COMP_COEFFICIENT(2,11,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 11, right side
FS_COMP_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,11,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,11,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,11,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,11,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,11,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 11, right
                                   ! side

FS_COMP_COEFFICIENT(2,12,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 12, left side
FS_COMP_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,12,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,12,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,12,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,12,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,12,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 12, left
                                   ! side

FS_COMP_COEFFICIENT(2,12,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 12, right side
FS_COMP_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,12,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,12,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,12,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,12,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,12,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 12, right
                                   ! side

FS_COMP_COEFFICIENT(2,13,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 13, left side
FS_COMP_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,13,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,13,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,13,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,13,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,13,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 13, left
                                   ! side

FS_COMP_COEFFICIENT(2,13,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 13, right side
FS_COMP_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,13,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,13,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,13,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,13,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,13,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 13, right
                                   ! side

FS_COMP_COEFFICIENT(2,14,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 14, left side
FS_COMP_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,14,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,14,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,14,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,14,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,14,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 14, left
                                   ! side

FS_COMP_COEFFICIENT(2,14,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 2, axle 14, right side
FS_COMP_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,14,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,14,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,14,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,14,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,14,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 2, axle 14, right
                                   ! side

FS_COMP_COEFFICIENT(3,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, left side
FS_COMP_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, left side

FS_COMP_COEFFICIENT(3,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 1, right side
FS_COMP_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 1, right side

FS_COMP_COEFFICIENT(3,2,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 2, left side
FS_COMP_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, left side

FS_COMP_COEFFICIENT(3,2,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 2, right side
FS_COMP_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 2, right side

FS_COMP_COEFFICIENT(3,3,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 3, left side
FS_COMP_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,3,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 3, left side

FS_COMP_COEFFICIENT(3,3,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 3, right side
FS_COMP_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,3,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 3, right side

FS_COMP_COEFFICIENT(3,4,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 4, left side
FS_COMP_GAIN(3,4,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,4,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,4,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,4,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,4,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 4, left side

FS_COMP_COEFFICIENT(3,4,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 4, right side
FS_COMP_GAIN(3,4,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,4,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,4,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,4,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,4,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 4, right side

FS_COMP_COEFFICIENT(3,5,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 5, left side
FS_COMP_GAIN(3,5,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,5,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,5,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,5,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,5,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 5, left side

FS_COMP_COEFFICIENT(3,5,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 5, right side
FS_COMP_GAIN(3,5,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,5,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,5,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,5,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,5,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 5, right side

FS_COMP_COEFFICIENT(3,6,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 6, left side
FS_COMP_GAIN(3,6,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,6,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,6,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,6,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,6,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,6,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 6, left side

FS_COMP_COEFFICIENT(3,6,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 6, right side
FS_COMP_GAIN(3,6,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,6,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,6,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,6,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,6,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,6,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 6, right side

FS_COMP_COEFFICIENT(3,7,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 7, left side
FS_COMP_GAIN(3,7,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,7,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,7,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,7,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,7,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,7,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 7, left side

FS_COMP_COEFFICIENT(3,7,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 7, right side
FS_COMP_GAIN(3,7,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,7,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,7,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,7,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,7,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,7,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 7, right side

FS_COMP_COEFFICIENT(3,8,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 8, left side
FS_COMP_GAIN(3,8,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,8,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,8,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,8,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,8,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,8,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 8, left side

FS_COMP_COEFFICIENT(3,8,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 8, right side
FS_COMP_GAIN(3,8,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,8,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,8,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,8,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,8,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,8,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 8, right side

FS_COMP_COEFFICIENT(3,9,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 9, left side
FS_COMP_GAIN(3,9,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,9,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,9,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,9,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,9,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,9,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 9, left side

FS_COMP_COEFFICIENT(3,9,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 9, right side
FS_COMP_GAIN(3,9,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,9,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,9,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,9,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,9,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,9,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 9, right side

FS_COMP_COEFFICIENT(3,10,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 10, left side
FS_COMP_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,10,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,10,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,10,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,10,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,10,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 10, left
                                   ! side

FS_COMP_COEFFICIENT(3,10,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 10, right side
FS_COMP_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,10,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,10,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,10,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,10,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,10,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 10, right
                                   ! side

FS_COMP_COEFFICIENT(3,11,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 11, left side
FS_COMP_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,11,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,11,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,11,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,11,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,11,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 11, left
                                   ! side

FS_COMP_COEFFICIENT(3,11,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 11, right side
FS_COMP_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,11,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,11,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,11,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,11,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,11,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 11, right
                                   ! side

FS_COMP_COEFFICIENT(3,12,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 12, left side
FS_COMP_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,12,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,12,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,12,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,12,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,12,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 12, left
                                   ! side

FS_COMP_COEFFICIENT(3,12,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 12, right side
FS_COMP_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,12,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,12,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,12,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,12,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,12,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 12, right
                                   ! side

FS_COMP_COEFFICIENT(3,13,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 13, left side
FS_COMP_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,13,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,13,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,13,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,13,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,13,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 13, left
                                   ! side

FS_COMP_COEFFICIENT(3,13,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 13, right side
FS_COMP_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,13,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,13,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,13,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,13,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,13,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 13, right
                                   ! side

FS_COMP_COEFFICIENT(3,14,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 14, left side
FS_COMP_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,14,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,14,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,14,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,14,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,14,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 14, left
                                   ! side

FS_COMP_COEFFICIENT(3,14,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 3, axle 14, right side
FS_COMP_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(3,14,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(3,14,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(3,14,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(3,14,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(3,14,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 3, axle 14, right
                                   ! side

FS_COMP_COEFFICIENT(4,1,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 1, left side
FS_COMP_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, left side

FS_COMP_COEFFICIENT(4,1,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 1, right side
FS_COMP_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,1,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 1, right side

FS_COMP_COEFFICIENT(4,2,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 2, left side
FS_COMP_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, left side

FS_COMP_COEFFICIENT(4,2,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 2, right side
FS_COMP_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,2,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 2, right side

FS_COMP_COEFFICIENT(4,3,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 3, left side
FS_COMP_GAIN(4,3,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,3,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,3,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,3,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,3,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 3, left side

FS_COMP_COEFFICIENT(4,3,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 3, right side
FS_COMP_GAIN(4,3,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,3,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,3,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,3,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,3,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 3, right side

FS_COMP_COEFFICIENT(4,4,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 4, left side
FS_COMP_GAIN(4,4,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,4,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,4,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,4,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,4,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 4, left side

FS_COMP_COEFFICIENT(4,4,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 4, right side
FS_COMP_GAIN(4,4,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,4,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,4,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,4,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,4,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 4, right side

FS_COMP_COEFFICIENT(4,5,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 5, left side
FS_COMP_GAIN(4,5,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,5,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,5,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,5,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,5,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 5, left side

FS_COMP_COEFFICIENT(4,5,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 5, right side
FS_COMP_GAIN(4,5,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,5,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,5,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,5,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,5,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 5, right side

FS_COMP_COEFFICIENT(4,6,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 6, left side
FS_COMP_GAIN(4,6,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,6,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,6,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,6,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,6,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,6,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 6, left side

FS_COMP_COEFFICIENT(4,6,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 6, right side
FS_COMP_GAIN(4,6,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,6,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,6,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,6,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,6,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,6,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 6, right side

FS_COMP_COEFFICIENT(4,7,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 7, left side
FS_COMP_GAIN(4,7,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,7,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,7,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,7,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,7,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,7,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 7, left side

FS_COMP_COEFFICIENT(4,7,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 7, right side
FS_COMP_GAIN(4,7,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,7,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,7,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,7,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,7,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,7,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 7, right side

FS_COMP_COEFFICIENT(4,8,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 8, left side
FS_COMP_GAIN(4,8,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,8,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,8,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,8,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,8,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,8,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 8, left side

FS_COMP_COEFFICIENT(4,8,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 8, right side
FS_COMP_GAIN(4,8,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,8,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,8,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,8,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,8,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,8,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 8, right side

FS_COMP_COEFFICIENT(4,9,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 9, left side
FS_COMP_GAIN(4,9,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,9,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,9,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,9,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,9,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,9,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 9, left side

FS_COMP_COEFFICIENT(4,9,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 9, right side
FS_COMP_GAIN(4,9,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,9,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,9,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,9,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,9,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,9,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 9, right side

FS_COMP_COEFFICIENT(4,10,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 10, left side
FS_COMP_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,10,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,10,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,10,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,10,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,10,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 10, left
                                   ! side

FS_COMP_COEFFICIENT(4,10,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 10, right side
FS_COMP_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,10,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,10,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,10,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,10,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,10,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 10, right
                                   ! side

FS_COMP_COEFFICIENT(4,11,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 11, left side
FS_COMP_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,11,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,11,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,11,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,11,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,11,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 11, left
                                   ! side

FS_COMP_COEFFICIENT(4,11,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 11, right side
FS_COMP_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,11,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,11,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,11,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,11,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,11,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 11, right
                                   ! side

FS_COMP_COEFFICIENT(4,12,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 12, left side
FS_COMP_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,12,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,12,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,12,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,12,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,12,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 12, left
                                   ! side

FS_COMP_COEFFICIENT(4,12,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 12, right side
FS_COMP_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,12,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,12,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,12,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,12,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,12,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 12, right
                                   ! side

FS_COMP_COEFFICIENT(4,13,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 13, left side
FS_COMP_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,13,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,13,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,13,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,13,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,13,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 13, left
                                   ! side

FS_COMP_COEFFICIENT(4,13,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 13, right side
FS_COMP_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,13,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,13,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,13,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,13,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,13,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 13, right
                                   ! side

FS_COMP_COEFFICIENT(4,14,1) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 14, left side
FS_COMP_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,14,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,14,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,14,1) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,14,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,14,1) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 14, left
                                   ! side

FS_COMP_COEFFICIENT(4,14,2) 250 ! Coefficient: spring force per unit spring
                                ! compression (N/mm), unit 4, axle 14, right side
FS_COMP_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(4,14,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(4,14,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(4,14,2) 1 ! Scale factor divided into (spring compression -
                            ! CMP_START_FS_COMP)
FS_COMP_COMBINE(4,14,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(4,14,2) 1 ; - ! [D] Constant spring force component due to
                                   ! static spring force, unit 4, axle 14, right
                                   ! side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 94 datasets; if indices shown below are not used, e.g., (1,1,2), the
! current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

FS_EXT_COEFFICIENT(1,1,1) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, left side
FS_EXT_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, left side

FS_EXT_COEFFICIENT(1,1,2) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 1, right side
FS_EXT_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 1, right side

FS_EXT_COEFFICIENT(1,2,1) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, left side
FS_EXT_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,1) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, left side

FS_EXT_COEFFICIENT(1,2,2) 200 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 2, right side
FS_EXT_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2,2) -2000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 2, right side

FS_EXT_COEFFICIENT(1,3,1) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, left side
FS_EXT_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, left side

FS_EXT_COEFFICIENT(1,3,2) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 3, right side
FS_EXT_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,3,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 3, right side

FS_EXT_COEFFICIENT(1,4,1) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 4, left side
FS_EXT_GAIN(1,4,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,4,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,4,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,4,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,4,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 4, left side

FS_EXT_COEFFICIENT(1,4,2) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 4, right side
FS_EXT_GAIN(1,4,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,4,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,4,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,4,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,4,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 4, right side

FS_EXT_COEFFICIENT(1,5,1) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 5, left side
FS_EXT_GAIN(1,5,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,5,1) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,5,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,5,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,5,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 5, left side

FS_EXT_COEFFICIENT(1,5,2) 900 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 1, axle 5, right side
FS_EXT_GAIN(1,5,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,5,2) -5000 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,5,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,5,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,5,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 1, axle 5, right side

FS_EXT_COEFFICIENT(2,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, left side
FS_EXT_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, left side

FS_EXT_COEFFICIENT(2,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 1, right side
FS_EXT_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 1, right side

FS_EXT_COEFFICIENT(2,2,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, left side
FS_EXT_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, left side

FS_EXT_COEFFICIENT(2,2,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 2, right side
FS_EXT_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 2, right side

FS_EXT_COEFFICIENT(2,3,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 3, left side
FS_EXT_GAIN(2,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,3,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 3, left side

FS_EXT_COEFFICIENT(2,3,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 3, right side
FS_EXT_GAIN(2,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,3,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 3, right side

FS_EXT_COEFFICIENT(2,4,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 4, left side
FS_EXT_GAIN(2,4,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,4,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,4,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,4,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,4,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 4, left side

FS_EXT_COEFFICIENT(2,4,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 4, right side
FS_EXT_GAIN(2,4,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,4,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,4,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,4,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,4,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 4, right side

FS_EXT_COEFFICIENT(2,5,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 5, left side
FS_EXT_GAIN(2,5,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,5,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,5,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,5,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,5,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 5, left side

FS_EXT_COEFFICIENT(2,5,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 5, right side
FS_EXT_GAIN(2,5,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,5,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,5,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,5,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,5,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 5, right side

FS_EXT_COEFFICIENT(2,6,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 6, left side
FS_EXT_GAIN(2,6,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,6,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,6,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,6,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,6,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,6,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 6, left side

FS_EXT_COEFFICIENT(2,6,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 6, right side
FS_EXT_GAIN(2,6,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,6,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,6,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,6,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,6,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,6,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 6, right side

FS_EXT_COEFFICIENT(2,7,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 7, left side
FS_EXT_GAIN(2,7,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,7,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,7,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,7,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,7,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,7,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 7, left side

FS_EXT_COEFFICIENT(2,7,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 7, right side
FS_EXT_GAIN(2,7,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,7,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,7,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,7,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,7,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,7,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 7, right side

FS_EXT_COEFFICIENT(2,8,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 8, left side
FS_EXT_GAIN(2,8,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,8,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,8,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,8,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,8,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,8,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 8, left side

FS_EXT_COEFFICIENT(2,8,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 8, right side
FS_EXT_GAIN(2,8,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,8,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,8,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,8,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,8,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,8,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 8, right side

FS_EXT_COEFFICIENT(2,9,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 9, left side
FS_EXT_GAIN(2,9,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,9,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,9,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,9,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,9,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,9,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 9, left side

FS_EXT_COEFFICIENT(2,9,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 2, axle 9, right side
FS_EXT_GAIN(2,9,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,9,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,9,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,9,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,9,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,9,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 2, axle 9, right side

FS_EXT_COEFFICIENT(2,10,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 10, left side
FS_EXT_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,10,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,10,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,10,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,10,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,10,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 10, left side

FS_EXT_COEFFICIENT(2,10,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 10, right side
FS_EXT_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,10,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,10,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,10,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,10,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,10,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 10, right
                                  ! side

FS_EXT_COEFFICIENT(2,11,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 11, left side
FS_EXT_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,11,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,11,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,11,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,11,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,11,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 11, left side

FS_EXT_COEFFICIENT(2,11,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 11, right side
FS_EXT_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,11,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,11,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,11,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,11,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,11,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 11, right
                                  ! side

FS_EXT_COEFFICIENT(2,12,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 12, left side
FS_EXT_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,12,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,12,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,12,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,12,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,12,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 12, left side

FS_EXT_COEFFICIENT(2,12,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 12, right side
FS_EXT_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,12,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,12,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,12,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,12,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,12,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 12, right
                                  ! side

FS_EXT_COEFFICIENT(2,13,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 13, left side
FS_EXT_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,13,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,13,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,13,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,13,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,13,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 13, left side

FS_EXT_COEFFICIENT(2,13,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 13, right side
FS_EXT_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,13,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,13,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,13,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,13,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,13,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 13, right
                                  ! side

FS_EXT_COEFFICIENT(2,14,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 14, left side
FS_EXT_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,14,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,14,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,14,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,14,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,14,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 14, left side

FS_EXT_COEFFICIENT(2,14,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 2, axle 14, right side
FS_EXT_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,14,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,14,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,14,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,14,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,14,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 2, axle 14, right
                                  ! side

FS_EXT_COEFFICIENT(3,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, left side
FS_EXT_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, left side

FS_EXT_COEFFICIENT(3,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 1, right side
FS_EXT_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 1, right side

FS_EXT_COEFFICIENT(3,2,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, left side
FS_EXT_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, left side

FS_EXT_COEFFICIENT(3,2,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 2, right side
FS_EXT_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 2, right side

FS_EXT_COEFFICIENT(3,3,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 3, left side
FS_EXT_GAIN(3,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,3,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 3, left side

FS_EXT_COEFFICIENT(3,3,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 3, right side
FS_EXT_GAIN(3,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,3,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 3, right side

FS_EXT_COEFFICIENT(3,4,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 4, left side
FS_EXT_GAIN(3,4,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,4,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,4,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,4,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,4,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 4, left side

FS_EXT_COEFFICIENT(3,4,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 4, right side
FS_EXT_GAIN(3,4,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,4,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,4,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,4,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,4,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 4, right side

FS_EXT_COEFFICIENT(3,5,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 5, left side
FS_EXT_GAIN(3,5,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,5,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,5,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,5,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,5,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 5, left side

FS_EXT_COEFFICIENT(3,5,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 5, right side
FS_EXT_GAIN(3,5,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,5,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,5,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,5,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,5,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 5, right side

FS_EXT_COEFFICIENT(3,6,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 6, left side
FS_EXT_GAIN(3,6,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,6,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,6,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,6,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,6,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,6,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 6, left side

FS_EXT_COEFFICIENT(3,6,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 6, right side
FS_EXT_GAIN(3,6,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,6,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,6,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,6,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,6,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,6,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 6, right side

FS_EXT_COEFFICIENT(3,7,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 7, left side
FS_EXT_GAIN(3,7,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,7,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,7,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,7,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,7,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,7,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 7, left side

FS_EXT_COEFFICIENT(3,7,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 7, right side
FS_EXT_GAIN(3,7,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,7,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,7,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,7,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,7,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,7,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 7, right side

FS_EXT_COEFFICIENT(3,8,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 8, left side
FS_EXT_GAIN(3,8,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,8,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,8,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,8,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,8,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,8,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 8, left side

FS_EXT_COEFFICIENT(3,8,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 8, right side
FS_EXT_GAIN(3,8,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,8,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,8,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,8,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,8,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,8,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 8, right side

FS_EXT_COEFFICIENT(3,9,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 9, left side
FS_EXT_GAIN(3,9,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,9,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,9,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,9,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,9,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,9,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 9, left side

FS_EXT_COEFFICIENT(3,9,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 3, axle 9, right side
FS_EXT_GAIN(3,9,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,9,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,9,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,9,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,9,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,9,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 3, axle 9, right side

FS_EXT_COEFFICIENT(3,10,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 10, left side
FS_EXT_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,10,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,10,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,10,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,10,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,10,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 10, left side

FS_EXT_COEFFICIENT(3,10,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 10, right side
FS_EXT_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,10,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,10,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,10,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,10,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,10,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 10, right
                                  ! side

FS_EXT_COEFFICIENT(3,11,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 11, left side
FS_EXT_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,11,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,11,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,11,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,11,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,11,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 11, left side

FS_EXT_COEFFICIENT(3,11,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 11, right side
FS_EXT_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,11,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,11,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,11,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,11,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,11,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 11, right
                                  ! side

FS_EXT_COEFFICIENT(3,12,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 12, left side
FS_EXT_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,12,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,12,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,12,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,12,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,12,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 12, left side

FS_EXT_COEFFICIENT(3,12,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 12, right side
FS_EXT_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,12,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,12,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,12,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,12,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,12,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 12, right
                                  ! side

FS_EXT_COEFFICIENT(3,13,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 13, left side
FS_EXT_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,13,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,13,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,13,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,13,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,13,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 13, left side

FS_EXT_COEFFICIENT(3,13,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 13, right side
FS_EXT_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,13,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,13,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,13,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,13,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,13,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 13, right
                                  ! side

FS_EXT_COEFFICIENT(3,14,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 14, left side
FS_EXT_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,14,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,14,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,14,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,14,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,14,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 14, left side

FS_EXT_COEFFICIENT(3,14,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 3, axle 14, right side
FS_EXT_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(3,14,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(3,14,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(3,14,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(3,14,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(3,14,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 3, axle 14, right
                                  ! side

FS_EXT_COEFFICIENT(4,1,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, left side
FS_EXT_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, left side

FS_EXT_COEFFICIENT(4,1,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 1, right side
FS_EXT_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,1,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,1,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 1, right side

FS_EXT_COEFFICIENT(4,2,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 2, left side
FS_EXT_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, left side

FS_EXT_COEFFICIENT(4,2,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 2, right side
FS_EXT_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,2,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,2,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 2, right side

FS_EXT_COEFFICIENT(4,3,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 3, left side
FS_EXT_GAIN(4,3,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,3,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,3,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,3,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,3,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,3,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 3, left side

FS_EXT_COEFFICIENT(4,3,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 3, right side
FS_EXT_GAIN(4,3,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,3,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,3,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,3,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,3,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,3,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 3, right side

FS_EXT_COEFFICIENT(4,4,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 4, left side
FS_EXT_GAIN(4,4,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,4,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,4,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,4,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,4,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,4,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 4, left side

FS_EXT_COEFFICIENT(4,4,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 4, right side
FS_EXT_GAIN(4,4,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,4,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,4,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,4,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,4,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,4,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 4, right side

FS_EXT_COEFFICIENT(4,5,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 5, left side
FS_EXT_GAIN(4,5,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,5,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,5,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,5,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,5,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,5,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 5, left side

FS_EXT_COEFFICIENT(4,5,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 5, right side
FS_EXT_GAIN(4,5,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,5,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,5,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,5,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,5,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,5,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 5, right side

FS_EXT_COEFFICIENT(4,6,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 6, left side
FS_EXT_GAIN(4,6,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,6,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,6,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,6,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,6,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,6,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 6, left side

FS_EXT_COEFFICIENT(4,6,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 6, right side
FS_EXT_GAIN(4,6,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,6,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,6,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,6,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,6,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,6,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 6, right side

FS_EXT_COEFFICIENT(4,7,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 7, left side
FS_EXT_GAIN(4,7,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,7,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,7,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,7,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,7,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,7,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 7, left side

FS_EXT_COEFFICIENT(4,7,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 7, right side
FS_EXT_GAIN(4,7,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,7,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,7,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,7,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,7,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,7,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 7, right side

FS_EXT_COEFFICIENT(4,8,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 8, left side
FS_EXT_GAIN(4,8,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,8,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,8,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,8,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,8,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,8,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 8, left side

FS_EXT_COEFFICIENT(4,8,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 8, right side
FS_EXT_GAIN(4,8,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,8,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,8,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,8,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,8,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,8,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 8, right side

FS_EXT_COEFFICIENT(4,9,1) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 9, left side
FS_EXT_GAIN(4,9,1)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,9,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,9,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,9,1) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,9,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,9,1) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 9, left side

FS_EXT_COEFFICIENT(4,9,2) 250 ! Coefficient: spring force per unit spring
                              ! compression (N/mm), unit 4, axle 9, right side
FS_EXT_GAIN(4,9,2)  1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,9,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,9,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,9,2) 1 ! Scale factor divided into (spring compression -
                          ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,9,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,9,2) 1 ; - ! [D] Constant spring force component due to
                                 ! static spring force, unit 4, axle 9, right side

FS_EXT_COEFFICIENT(4,10,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 10, left side
FS_EXT_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,10,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,10,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,10,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,10,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,10,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 10, left side

FS_EXT_COEFFICIENT(4,10,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 10, right side
FS_EXT_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,10,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,10,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,10,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,10,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,10,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 10, right
                                  ! side

FS_EXT_COEFFICIENT(4,11,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 11, left side
FS_EXT_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,11,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,11,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,11,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,11,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,11,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 11, left side

FS_EXT_COEFFICIENT(4,11,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 11, right side
FS_EXT_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,11,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,11,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,11,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,11,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,11,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 11, right
                                  ! side

FS_EXT_COEFFICIENT(4,12,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 12, left side
FS_EXT_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,12,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,12,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,12,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,12,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,12,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 12, left side

FS_EXT_COEFFICIENT(4,12,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 12, right side
FS_EXT_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,12,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,12,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,12,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,12,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,12,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 12, right
                                  ! side

FS_EXT_COEFFICIENT(4,13,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 13, left side
FS_EXT_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,13,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,13,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,13,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,13,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,13,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 13, left side

FS_EXT_COEFFICIENT(4,13,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 13, right side
FS_EXT_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,13,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,13,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,13,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,13,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,13,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 13, right
                                  ! side

FS_EXT_COEFFICIENT(4,14,1) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 14, left side
FS_EXT_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,14,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,14,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,14,1) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,14,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,14,1) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 14, left side

FS_EXT_COEFFICIENT(4,14,2) 250 ! Coefficient: spring force per unit spring
                               ! compression (N/mm), unit 4, axle 14, right side
FS_EXT_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(4,14,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(4,14,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(4,14,2) 1 ! Scale factor divided into (spring compression -
                           ! CMP_START_FS_EXT)
FS_EXT_COMBINE(4,14,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(4,14,2) 1 ; - ! [D] Constant spring force component due to
                                  ! static spring force, unit 4, axle 14, right
                                  ! side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -20, 0.64
 -15, 0.65
 -10, 0.64
 -5, 0.59
 0, 0.56
 5, 0.59
 10, 0.64
 15, 0.65
 20, 0.64
ENDTABLE
FX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FX_AERO)

FX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFX

FX_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFX

FX_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFX

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 188 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,1,1) 2D_FROM_ZERO ! unit 1, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,1,2) 2D_FROM_ZERO ! unit 1, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,2,1) 2D_FROM_ZERO ! unit 1, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,4,2,2) 2D_FROM_ZERO ! unit 1, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,4,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,4,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,4,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,1,1) 2D_FROM_ZERO ! unit 1, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,1,2) 2D_FROM_ZERO ! unit 1, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,2,1) 2D_FROM_ZERO ! unit 1, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,5,2,2) 2D_FROM_ZERO ! unit 1, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,5,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,5,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,5,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,1,1) 2D_FROM_ZERO ! unit 2, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,1,2) 2D_FROM_ZERO ! unit 2, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,2,1) 2D_FROM_ZERO ! unit 2, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,3,2,2) 2D_FROM_ZERO ! unit 2, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,4,1,1) 2D_FROM_ZERO ! unit 2, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,4,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,4,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,4,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,4,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,4,1,2) 2D_FROM_ZERO ! unit 2, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,4,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,4,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,4,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,4,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,4,2,1) 2D_FROM_ZERO ! unit 2, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,4,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,4,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,4,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,4,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,4,2,2) 2D_FROM_ZERO ! unit 2, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,4,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,4,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,4,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,4,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,5,1,1) 2D_FROM_ZERO ! unit 2, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,5,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,5,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,5,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,5,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,5,1,2) 2D_FROM_ZERO ! unit 2, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,5,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,5,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,5,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,5,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,5,2,1) 2D_FROM_ZERO ! unit 2, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,5,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,5,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,5,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,5,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,5,2,2) 2D_FROM_ZERO ! unit 2, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,5,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,5,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,5,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,5,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,6,1,1) 2D_FROM_ZERO ! unit 2, axle 6, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,6,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,6,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,6,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,6,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,6,1,2) 2D_FROM_ZERO ! unit 2, axle 6, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,6,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,6,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,6,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,6,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,6,2,1) 2D_FROM_ZERO ! unit 2, axle 6, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,6,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,6,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,6,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,6,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,6,2,2) 2D_FROM_ZERO ! unit 2, axle 6, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,6,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,6,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,6,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,6,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,7,1,1) 2D_FROM_ZERO ! unit 2, axle 7, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,7,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,7,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,7,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,7,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,7,1,2) 2D_FROM_ZERO ! unit 2, axle 7, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,7,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,7,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,7,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,7,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,7,2,1) 2D_FROM_ZERO ! unit 2, axle 7, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,7,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,7,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,7,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,7,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,7,2,2) 2D_FROM_ZERO ! unit 2, axle 7, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,7,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,7,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,7,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,7,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,8,1,1) 2D_FROM_ZERO ! unit 2, axle 8, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,8,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,8,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,8,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,8,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,8,1,2) 2D_FROM_ZERO ! unit 2, axle 8, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,8,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,8,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,8,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,8,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,8,2,1) 2D_FROM_ZERO ! unit 2, axle 8, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,8,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,8,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,8,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,8,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,8,2,2) 2D_FROM_ZERO ! unit 2, axle 8, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,8,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,8,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,8,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,8,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,9,1,1) 2D_FROM_ZERO ! unit 2, axle 9, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,9,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,9,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,9,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,9,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,9,1,2) 2D_FROM_ZERO ! unit 2, axle 9, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,9,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,9,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,9,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,9,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,9,2,1) 2D_FROM_ZERO ! unit 2, axle 9, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,9,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,9,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,9,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,9,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,9,2,2) 2D_FROM_ZERO ! unit 2, axle 9, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,9,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,9,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,9,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,9,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,10,1,1) 2D_FROM_ZERO ! unit 2, axle 10, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,10,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,10,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,10,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,10,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,10,1,2) 2D_FROM_ZERO ! unit 2, axle 10, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,10,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,10,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,10,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,10,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,10,2,1) 2D_FROM_ZERO ! unit 2, axle 10, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,10,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,10,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,10,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,10,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,10,2,2) 2D_FROM_ZERO ! unit 2, axle 10, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,10,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,10,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,10,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,10,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,11,1,1) 2D_FROM_ZERO ! unit 2, axle 11, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,11,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,11,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,11,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,11,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,11,1,2) 2D_FROM_ZERO ! unit 2, axle 11, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,11,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,11,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,11,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,11,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,11,2,1) 2D_FROM_ZERO ! unit 2, axle 11, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,11,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,11,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,11,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,11,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,11,2,2) 2D_FROM_ZERO ! unit 2, axle 11, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,11,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,11,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,11,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,11,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,12,1,1) 2D_FROM_ZERO ! unit 2, axle 12, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,12,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,12,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,12,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,12,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,12,1,2) 2D_FROM_ZERO ! unit 2, axle 12, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,12,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,12,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,12,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,12,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,12,2,1) 2D_FROM_ZERO ! unit 2, axle 12, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,12,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,12,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,12,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,12,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,12,2,2) 2D_FROM_ZERO ! unit 2, axle 12, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,12,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,12,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,12,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,12,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,13,1,1) 2D_FROM_ZERO ! unit 2, axle 13, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,13,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,13,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,13,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,13,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,13,1,2) 2D_FROM_ZERO ! unit 2, axle 13, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,13,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,13,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,13,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,13,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,13,2,1) 2D_FROM_ZERO ! unit 2, axle 13, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,13,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,13,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,13,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,13,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,13,2,2) 2D_FROM_ZERO ! unit 2, axle 13, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,13,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,13,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,13,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,13,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,14,1,1) 2D_FROM_ZERO ! unit 2, axle 14, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,14,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,14,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,14,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,14,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,14,1,2) 2D_FROM_ZERO ! unit 2, axle 14, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,14,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,14,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,14,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,14,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,14,2,1) 2D_FROM_ZERO ! unit 2, axle 14, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,14,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,14,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,14,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,14,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,14,2,2) 2D_FROM_ZERO ! unit 2, axle 14, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(2,14,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,14,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,14,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,14,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,1,2) 2D_FROM_ZERO ! unit 3, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,1,2,2) 2D_FROM_ZERO ! unit 3, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,1,1) 2D_FROM_ZERO ! unit 3, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,1,2) 2D_FROM_ZERO ! unit 3, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,2,1) 2D_FROM_ZERO ! unit 3, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,3,2,2) 2D_FROM_ZERO ! unit 3, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,4,1,1) 2D_FROM_ZERO ! unit 3, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,4,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,4,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,4,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,4,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,4,1,2) 2D_FROM_ZERO ! unit 3, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,4,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,4,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,4,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,4,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,4,2,1) 2D_FROM_ZERO ! unit 3, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,4,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,4,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,4,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,4,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,4,2,2) 2D_FROM_ZERO ! unit 3, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,4,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,4,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,4,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,4,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,5,1,1) 2D_FROM_ZERO ! unit 3, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,5,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,5,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,5,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,5,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,5,1,2) 2D_FROM_ZERO ! unit 3, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,5,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,5,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,5,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,5,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,5,2,1) 2D_FROM_ZERO ! unit 3, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,5,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,5,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,5,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,5,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,5,2,2) 2D_FROM_ZERO ! unit 3, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,5,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,5,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,5,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,5,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,6,1,1) 2D_FROM_ZERO ! unit 3, axle 6, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,6,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,6,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,6,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,6,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,6,1,2) 2D_FROM_ZERO ! unit 3, axle 6, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,6,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,6,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,6,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,6,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,6,2,1) 2D_FROM_ZERO ! unit 3, axle 6, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,6,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,6,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,6,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,6,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,6,2,2) 2D_FROM_ZERO ! unit 3, axle 6, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,6,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,6,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,6,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,6,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,7,1,1) 2D_FROM_ZERO ! unit 3, axle 7, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,7,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,7,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,7,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,7,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,7,1,2) 2D_FROM_ZERO ! unit 3, axle 7, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,7,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,7,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,7,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,7,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,7,2,1) 2D_FROM_ZERO ! unit 3, axle 7, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,7,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,7,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,7,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,7,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,7,2,2) 2D_FROM_ZERO ! unit 3, axle 7, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,7,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,7,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,7,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,7,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,8,1,1) 2D_FROM_ZERO ! unit 3, axle 8, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,8,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,8,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,8,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,8,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,8,1,2) 2D_FROM_ZERO ! unit 3, axle 8, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,8,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,8,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,8,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,8,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,8,2,1) 2D_FROM_ZERO ! unit 3, axle 8, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,8,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,8,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,8,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,8,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,8,2,2) 2D_FROM_ZERO ! unit 3, axle 8, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,8,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,8,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,8,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,8,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,9,1,1) 2D_FROM_ZERO ! unit 3, axle 9, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,9,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,9,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,9,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,9,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,9,1,2) 2D_FROM_ZERO ! unit 3, axle 9, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,9,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,9,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,9,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,9,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,9,2,1) 2D_FROM_ZERO ! unit 3, axle 9, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,9,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,9,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,9,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,9,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,9,2,2) 2D_FROM_ZERO ! unit 3, axle 9, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,9,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,9,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,9,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,9,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,10,1,1) 2D_FROM_ZERO ! unit 3, axle 10, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,10,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,10,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,10,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,10,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,10,1,2) 2D_FROM_ZERO ! unit 3, axle 10, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,10,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,10,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,10,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,10,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,10,2,1) 2D_FROM_ZERO ! unit 3, axle 10, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,10,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,10,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,10,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,10,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,10,2,2) 2D_FROM_ZERO ! unit 3, axle 10, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,10,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,10,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,10,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,10,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,11,1,1) 2D_FROM_ZERO ! unit 3, axle 11, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,11,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,11,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,11,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,11,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,11,1,2) 2D_FROM_ZERO ! unit 3, axle 11, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,11,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,11,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,11,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,11,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,11,2,1) 2D_FROM_ZERO ! unit 3, axle 11, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,11,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,11,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,11,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,11,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,11,2,2) 2D_FROM_ZERO ! unit 3, axle 11, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,11,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,11,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,11,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,11,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,12,1,1) 2D_FROM_ZERO ! unit 3, axle 12, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,12,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,12,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,12,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,12,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,12,1,2) 2D_FROM_ZERO ! unit 3, axle 12, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,12,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,12,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,12,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,12,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,12,2,1) 2D_FROM_ZERO ! unit 3, axle 12, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,12,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,12,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,12,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,12,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,12,2,2) 2D_FROM_ZERO ! unit 3, axle 12, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,12,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,12,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,12,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,12,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,13,1,1) 2D_FROM_ZERO ! unit 3, axle 13, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,13,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,13,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,13,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,13,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,13,1,2) 2D_FROM_ZERO ! unit 3, axle 13, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,13,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,13,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,13,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,13,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,13,2,1) 2D_FROM_ZERO ! unit 3, axle 13, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,13,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,13,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,13,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,13,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,13,2,2) 2D_FROM_ZERO ! unit 3, axle 13, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,13,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,13,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,13,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,13,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,14,1,1) 2D_FROM_ZERO ! unit 3, axle 14, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,14,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,14,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,14,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,14,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,14,1,2) 2D_FROM_ZERO ! unit 3, axle 14, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,14,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,14,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,14,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,14,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,14,2,1) 2D_FROM_ZERO ! unit 3, axle 14, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,14,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,14,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,14,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,14,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(3,14,2,2) 2D_FROM_ZERO ! unit 3, axle 14, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(3,14,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(3,14,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(3,14,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(3,14,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(3,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(3,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,1,2) 2D_FROM_ZERO ! unit 4, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,1,2,2) 2D_FROM_ZERO ! unit 4, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,1,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,1,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,1,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,2,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,2,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,3,1,1) 2D_FROM_ZERO ! unit 4, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,3,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,3,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,3,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,3,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,3,1,2) 2D_FROM_ZERO ! unit 4, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,3,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,3,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,3,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,3,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,3,2,1) 2D_FROM_ZERO ! unit 4, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,3,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,3,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,3,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,3,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,3,2,2) 2D_FROM_ZERO ! unit 4, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,3,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,3,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,3,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,3,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,4,1,1) 2D_FROM_ZERO ! unit 4, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,4,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,4,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,4,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,4,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,4,1,2) 2D_FROM_ZERO ! unit 4, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,4,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,4,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,4,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,4,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,4,2,1) 2D_FROM_ZERO ! unit 4, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,4,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,4,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,4,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,4,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,4,2,2) 2D_FROM_ZERO ! unit 4, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,4,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,4,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,4,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,4,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,5,1,1) 2D_FROM_ZERO ! unit 4, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,5,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,5,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,5,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,5,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,5,1,2) 2D_FROM_ZERO ! unit 4, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,5,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,5,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,5,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,5,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,5,2,1) 2D_FROM_ZERO ! unit 4, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,5,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,5,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,5,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,5,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,5,2,2) 2D_FROM_ZERO ! unit 4, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,5,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,5,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,5,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,5,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,6,1,1) 2D_FROM_ZERO ! unit 4, axle 6, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,6,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,6,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,6,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,6,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,6,1,2) 2D_FROM_ZERO ! unit 4, axle 6, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,6,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,6,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,6,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,6,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,6,2,1) 2D_FROM_ZERO ! unit 4, axle 6, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,6,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,6,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,6,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,6,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,6,2,2) 2D_FROM_ZERO ! unit 4, axle 6, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,6,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,6,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,6,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,6,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,7,1,1) 2D_FROM_ZERO ! unit 4, axle 7, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,7,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,7,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,7,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,7,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,7,1,2) 2D_FROM_ZERO ! unit 4, axle 7, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,7,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,7,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,7,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,7,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,7,2,1) 2D_FROM_ZERO ! unit 4, axle 7, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,7,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,7,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,7,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,7,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,7,2,2) 2D_FROM_ZERO ! unit 4, axle 7, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,7,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,7,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,7,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,7,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,8,1,1) 2D_FROM_ZERO ! unit 4, axle 8, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,8,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,8,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,8,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,8,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,8,1,2) 2D_FROM_ZERO ! unit 4, axle 8, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,8,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,8,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,8,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,8,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,8,2,1) 2D_FROM_ZERO ! unit 4, axle 8, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,8,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,8,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,8,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,8,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,8,2,2) 2D_FROM_ZERO ! unit 4, axle 8, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,8,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,8,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,8,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,8,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,9,1,1) 2D_FROM_ZERO ! unit 4, axle 9, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,9,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,9,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,9,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,9,1,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,9,1,2) 2D_FROM_ZERO ! unit 4, axle 9, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,9,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,9,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,9,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,9,1,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,9,2,1) 2D_FROM_ZERO ! unit 4, axle 9, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,9,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,9,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,9,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,9,2,1) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,9,2,2) 2D_FROM_ZERO ! unit 4, axle 9, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,9,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,9,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,9,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,9,2,2) 1 ! Scale factor divided into (Kappa -
                               ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,10,1,1) 2D_FROM_ZERO ! unit 4, axle 10, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,10,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,10,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,10,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,10,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,10,1,2) 2D_FROM_ZERO ! unit 4, axle 10, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,10,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,10,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,10,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,10,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,10,2,1) 2D_FROM_ZERO ! unit 4, axle 10, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,10,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,10,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,10,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,10,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,10,2,2) 2D_FROM_ZERO ! unit 4, axle 10, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,10,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,10,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,10,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,10,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,11,1,1) 2D_FROM_ZERO ! unit 4, axle 11, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,11,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,11,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,11,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,11,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,11,1,2) 2D_FROM_ZERO ! unit 4, axle 11, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,11,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,11,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,11,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,11,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,11,2,1) 2D_FROM_ZERO ! unit 4, axle 11, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,11,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,11,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,11,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,11,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,11,2,2) 2D_FROM_ZERO ! unit 4, axle 11, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,11,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,11,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,11,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,11,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,12,1,1) 2D_FROM_ZERO ! unit 4, axle 12, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,12,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,12,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,12,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,12,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,12,1,2) 2D_FROM_ZERO ! unit 4, axle 12, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,12,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,12,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,12,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,12,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,12,2,1) 2D_FROM_ZERO ! unit 4, axle 12, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,12,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,12,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,12,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,12,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,12,2,2) 2D_FROM_ZERO ! unit 4, axle 12, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,12,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,12,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,12,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,12,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,13,1,1) 2D_FROM_ZERO ! unit 4, axle 13, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,13,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,13,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,13,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,13,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,13,1,2) 2D_FROM_ZERO ! unit 4, axle 13, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,13,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,13,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,13,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,13,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,13,2,1) 2D_FROM_ZERO ! unit 4, axle 13, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,13,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,13,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,13,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,13,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,13,2,2) 2D_FROM_ZERO ! unit 4, axle 13, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,13,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,13,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,13,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,13,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,14,1,1) 2D_FROM_ZERO ! unit 4, axle 14, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,14,1,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,14,1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,14,1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,14,1,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,14,1,2) 2D_FROM_ZERO ! unit 4, axle 14, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,14,1,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,14,1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,14,1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,14,1,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,14,2,1) 2D_FROM_ZERO ! unit 4, axle 14, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,14,2,1) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,14,2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,14,2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,14,2,1) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Kappa (-) followed by 5 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(4,14,2,2) 2D_FROM_ZERO ! unit 4, axle 14, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 0.025, 2276.6, 4390.6, 8130.8, 11220.5, 13822.4
 0.05, 4076.6, 7862, 14559.3, 20091.9, 24750.8
 0.075, 5263.6, 10151.1, 18798.4, 25941.8, 31957.3
 0.1, 5959.3, 11492.9, 21283.1, 29370.7, 36181.3
 0.125, 6334.2, 12216, 22622.2, 31218.7, 38457.8
 0.15, 6516.3, 12567.1, 23272.5, 32116, 39563.2
 0.175, 6585, 12699.7, 23517.9, 32454.7, 39980.4
 0.2, 6587, 12703.5, 23525, 32464.4, 39992.4
 0.225, 6549.3, 12630.8, 23390.5, 32278.8, 39763.8
 0.25, 6488, 12512.6, 23171.5, 31976.6, 39391.5
 0.3, 6329.4, 12206.7, 22605, 31194.9, 38428.5
 0.35, 6152.5, 11865.5, 21973.2, 30323, 37354.5
 0.4, 5974.2, 11521.7, 21336.4, 29444.2, 36271.9
 0.45, 5801.7, 11188.9, 20720.2, 28593.9, 35224.4
 0.5, 5637.9, 10873.1, 20135.4, 27786.9, 34230.2
 0.55, 5484, 10576.3, 19585.7, 27028.3, 33295.7
 0.6, 5340, 10298.6, 19071.5, 26318.7, 32421.6
 0.65, 5205.7, 10039.5, 18591.7, 25656.5, 31605.8
 0.7, 5080.4, 9797.8, 18144.1, 25038.9, 30845
 0.75, 4963.5, 9572.4, 17726.8, 24462.9, 30135.5
 0.8, 4854.4, 9362.1, 17337.2, 23925.4, 29473.3
 0.85, 4752.5, 9165.6, 16973.3, 23423.1, 28854.6
 0.9, 4657.2, 8981.7, 16632.8, 22953.3, 28275.8
 0.95, 4567.9, 8809.5, 16314, 22513.3, 27733.7
 1, 4567.9, 8809.5, 16314, 22513.3, 27733.7
ENDTABLE
FX_TIRE_GAIN(4,14,2,2) 1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(4,14,2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(4,14,2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(4,14,2,2) 1 ! Scale factor divided into (Kappa -
                                ! KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(4,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(4,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -2.05
 0, 0
 25, 2.05
ENDTABLE
FY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FY_AERO)

FY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFY

FY_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFY

FY_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFY

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 188 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,1,1) 2D_FROM_ZERO ! unit 1, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,1,2) 2D_FROM_ZERO ! unit 1, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,2,1) 2D_FROM_ZERO ! unit 1, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,4,2,2) 2D_FROM_ZERO ! unit 1, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,4,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,1,1) 2D_FROM_ZERO ! unit 1, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,1,2) 2D_FROM_ZERO ! unit 1, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,2,1) 2D_FROM_ZERO ! unit 1, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,5,2,2) 2D_FROM_ZERO ! unit 1, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,5,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,1,1) 2D_FROM_ZERO ! unit 2, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,1,2) 2D_FROM_ZERO ! unit 2, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,2,1) 2D_FROM_ZERO ! unit 2, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,3,2,2) 2D_FROM_ZERO ! unit 2, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,4,1,1) 2D_FROM_ZERO ! unit 2, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,4,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,4,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,4,1,2) 2D_FROM_ZERO ! unit 2, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,4,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,4,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,4,2,1) 2D_FROM_ZERO ! unit 2, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,4,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,4,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,4,2,2) 2D_FROM_ZERO ! unit 2, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,4,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,4,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,5,1,1) 2D_FROM_ZERO ! unit 2, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,5,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,5,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,5,1,2) 2D_FROM_ZERO ! unit 2, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,5,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,5,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,5,2,1) 2D_FROM_ZERO ! unit 2, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,5,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,5,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,5,2,2) 2D_FROM_ZERO ! unit 2, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,5,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,5,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,6,1,1) 2D_FROM_ZERO ! unit 2, axle 6, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,6,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,6,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,6,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,6,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,6,1,2) 2D_FROM_ZERO ! unit 2, axle 6, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,6,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,6,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,6,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,6,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,6,2,1) 2D_FROM_ZERO ! unit 2, axle 6, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,6,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,6,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,6,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,6,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,6,2,2) 2D_FROM_ZERO ! unit 2, axle 6, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,6,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,6,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,6,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,6,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,7,1,1) 2D_FROM_ZERO ! unit 2, axle 7, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,7,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,7,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,7,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,7,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,7,1,2) 2D_FROM_ZERO ! unit 2, axle 7, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,7,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,7,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,7,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,7,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,7,2,1) 2D_FROM_ZERO ! unit 2, axle 7, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,7,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,7,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,7,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,7,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,7,2,2) 2D_FROM_ZERO ! unit 2, axle 7, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,7,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,7,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,7,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,7,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,8,1,1) 2D_FROM_ZERO ! unit 2, axle 8, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,8,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,8,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,8,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,8,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,8,1,2) 2D_FROM_ZERO ! unit 2, axle 8, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,8,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,8,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,8,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,8,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,8,2,1) 2D_FROM_ZERO ! unit 2, axle 8, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,8,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,8,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,8,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,8,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,8,2,2) 2D_FROM_ZERO ! unit 2, axle 8, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,8,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,8,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,8,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,8,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,9,1,1) 2D_FROM_ZERO ! unit 2, axle 9, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,9,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,9,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,9,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,9,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,9,1,2) 2D_FROM_ZERO ! unit 2, axle 9, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,9,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,9,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,9,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,9,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,9,2,1) 2D_FROM_ZERO ! unit 2, axle 9, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,9,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,9,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,9,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,9,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,9,2,2) 2D_FROM_ZERO ! unit 2, axle 9, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,9,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,9,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,9,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,9,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,10,1,1) 2D_FROM_ZERO ! unit 2, axle 10, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,10,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,10,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,10,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,10,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,10,1,2) 2D_FROM_ZERO ! unit 2, axle 10, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,10,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,10,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,10,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,10,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,10,2,1) 2D_FROM_ZERO ! unit 2, axle 10, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,10,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,10,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,10,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,10,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,10,2,2) 2D_FROM_ZERO ! unit 2, axle 10, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,10,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,10,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,10,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,10,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,11,1,1) 2D_FROM_ZERO ! unit 2, axle 11, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,11,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,11,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,11,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,11,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,11,1,2) 2D_FROM_ZERO ! unit 2, axle 11, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,11,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,11,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,11,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,11,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,11,2,1) 2D_FROM_ZERO ! unit 2, axle 11, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,11,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,11,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,11,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,11,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,11,2,2) 2D_FROM_ZERO ! unit 2, axle 11, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,11,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,11,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,11,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,11,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,12,1,1) 2D_FROM_ZERO ! unit 2, axle 12, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,12,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,12,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,12,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,12,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,12,1,2) 2D_FROM_ZERO ! unit 2, axle 12, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,12,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,12,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,12,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,12,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,12,2,1) 2D_FROM_ZERO ! unit 2, axle 12, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,12,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,12,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,12,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,12,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,12,2,2) 2D_FROM_ZERO ! unit 2, axle 12, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,12,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,12,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,12,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,12,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,13,1,1) 2D_FROM_ZERO ! unit 2, axle 13, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,13,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,13,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,13,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,13,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,13,1,2) 2D_FROM_ZERO ! unit 2, axle 13, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,13,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,13,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,13,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,13,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,13,2,1) 2D_FROM_ZERO ! unit 2, axle 13, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,13,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,13,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,13,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,13,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,13,2,2) 2D_FROM_ZERO ! unit 2, axle 13, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,13,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,13,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,13,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,13,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,14,1,1) 2D_FROM_ZERO ! unit 2, axle 14, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,14,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,14,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,14,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,14,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,14,1,2) 2D_FROM_ZERO ! unit 2, axle 14, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,14,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,14,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,14,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,14,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,14,2,1) 2D_FROM_ZERO ! unit 2, axle 14, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,14,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,14,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,14,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,14,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,14,2,2) 2D_FROM_ZERO ! unit 2, axle 14, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(2,14,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,14,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,14,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,14,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,1,2) 2D_FROM_ZERO ! unit 3, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,1,2,2) 2D_FROM_ZERO ! unit 3, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,1,1) 2D_FROM_ZERO ! unit 3, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,1,2) 2D_FROM_ZERO ! unit 3, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,2,1) 2D_FROM_ZERO ! unit 3, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,3,2,2) 2D_FROM_ZERO ! unit 3, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,4,1,1) 2D_FROM_ZERO ! unit 3, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,4,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,4,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,4,1,2) 2D_FROM_ZERO ! unit 3, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,4,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,4,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,4,2,1) 2D_FROM_ZERO ! unit 3, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,4,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,4,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,4,2,2) 2D_FROM_ZERO ! unit 3, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,4,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,4,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,5,1,1) 2D_FROM_ZERO ! unit 3, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,5,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,5,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,5,1,2) 2D_FROM_ZERO ! unit 3, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,5,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,5,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,5,2,1) 2D_FROM_ZERO ! unit 3, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,5,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,5,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,5,2,2) 2D_FROM_ZERO ! unit 3, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,5,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,5,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,6,1,1) 2D_FROM_ZERO ! unit 3, axle 6, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,6,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,6,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,6,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,6,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,6,1,2) 2D_FROM_ZERO ! unit 3, axle 6, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,6,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,6,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,6,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,6,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,6,2,1) 2D_FROM_ZERO ! unit 3, axle 6, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,6,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,6,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,6,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,6,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,6,2,2) 2D_FROM_ZERO ! unit 3, axle 6, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,6,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,6,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,6,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,6,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,7,1,1) 2D_FROM_ZERO ! unit 3, axle 7, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,7,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,7,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,7,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,7,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,7,1,2) 2D_FROM_ZERO ! unit 3, axle 7, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,7,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,7,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,7,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,7,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,7,2,1) 2D_FROM_ZERO ! unit 3, axle 7, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,7,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,7,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,7,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,7,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,7,2,2) 2D_FROM_ZERO ! unit 3, axle 7, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,7,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,7,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,7,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,7,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,8,1,1) 2D_FROM_ZERO ! unit 3, axle 8, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,8,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,8,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,8,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,8,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,8,1,2) 2D_FROM_ZERO ! unit 3, axle 8, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,8,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,8,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,8,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,8,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,8,2,1) 2D_FROM_ZERO ! unit 3, axle 8, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,8,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,8,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,8,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,8,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,8,2,2) 2D_FROM_ZERO ! unit 3, axle 8, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,8,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,8,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,8,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,8,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,9,1,1) 2D_FROM_ZERO ! unit 3, axle 9, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,9,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,9,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,9,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,9,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,9,1,2) 2D_FROM_ZERO ! unit 3, axle 9, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,9,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,9,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,9,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,9,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,9,2,1) 2D_FROM_ZERO ! unit 3, axle 9, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,9,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,9,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,9,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,9,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,9,2,2) 2D_FROM_ZERO ! unit 3, axle 9, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,9,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,9,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,9,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,9,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,10,1,1) 2D_FROM_ZERO ! unit 3, axle 10, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,10,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,10,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,10,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,10,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,10,1,2) 2D_FROM_ZERO ! unit 3, axle 10, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,10,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,10,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,10,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,10,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,10,2,1) 2D_FROM_ZERO ! unit 3, axle 10, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,10,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,10,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,10,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,10,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,10,2,2) 2D_FROM_ZERO ! unit 3, axle 10, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,10,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,10,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,10,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,10,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,11,1,1) 2D_FROM_ZERO ! unit 3, axle 11, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,11,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,11,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,11,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,11,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,11,1,2) 2D_FROM_ZERO ! unit 3, axle 11, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,11,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,11,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,11,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,11,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,11,2,1) 2D_FROM_ZERO ! unit 3, axle 11, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,11,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,11,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,11,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,11,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,11,2,2) 2D_FROM_ZERO ! unit 3, axle 11, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,11,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,11,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,11,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,11,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,12,1,1) 2D_FROM_ZERO ! unit 3, axle 12, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,12,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,12,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,12,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,12,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,12,1,2) 2D_FROM_ZERO ! unit 3, axle 12, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,12,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,12,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,12,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,12,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,12,2,1) 2D_FROM_ZERO ! unit 3, axle 12, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,12,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,12,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,12,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,12,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,12,2,2) 2D_FROM_ZERO ! unit 3, axle 12, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,12,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,12,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,12,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,12,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,13,1,1) 2D_FROM_ZERO ! unit 3, axle 13, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,13,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,13,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,13,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,13,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,13,1,2) 2D_FROM_ZERO ! unit 3, axle 13, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,13,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,13,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,13,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,13,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,13,2,1) 2D_FROM_ZERO ! unit 3, axle 13, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,13,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,13,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,13,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,13,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,13,2,2) 2D_FROM_ZERO ! unit 3, axle 13, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,13,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,13,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,13,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,13,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,14,1,1) 2D_FROM_ZERO ! unit 3, axle 14, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,14,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,14,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,14,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,14,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,14,1,2) 2D_FROM_ZERO ! unit 3, axle 14, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,14,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,14,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,14,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,14,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,14,2,1) 2D_FROM_ZERO ! unit 3, axle 14, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,14,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,14,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,14,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,14,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(3,14,2,2) 2D_FROM_ZERO ! unit 3, axle 14, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(3,14,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(3,14,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(3,14,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(3,14,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(3,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(3,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,1,2) 2D_FROM_ZERO ! unit 4, axle 1, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,1,2,2) 2D_FROM_ZERO ! unit 4, axle 1, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,1,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,3,1,1) 2D_FROM_ZERO ! unit 4, axle 3, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,3,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,3,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,3,1,2) 2D_FROM_ZERO ! unit 4, axle 3, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,3,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,3,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,3,2,1) 2D_FROM_ZERO ! unit 4, axle 3, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,3,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,3,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,3,2,2) 2D_FROM_ZERO ! unit 4, axle 3, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,3,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,3,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,4,1,1) 2D_FROM_ZERO ! unit 4, axle 4, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,4,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,4,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,4,1,2) 2D_FROM_ZERO ! unit 4, axle 4, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,4,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,4,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,4,2,1) 2D_FROM_ZERO ! unit 4, axle 4, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,4,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,4,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,4,2,2) 2D_FROM_ZERO ! unit 4, axle 4, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,4,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,4,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,5,1,1) 2D_FROM_ZERO ! unit 4, axle 5, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,5,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,5,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,5,1,2) 2D_FROM_ZERO ! unit 4, axle 5, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,5,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,5,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,5,2,1) 2D_FROM_ZERO ! unit 4, axle 5, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,5,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,5,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,5,2,2) 2D_FROM_ZERO ! unit 4, axle 5, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,5,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,5,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,6,1,1) 2D_FROM_ZERO ! unit 4, axle 6, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,6,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,6,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,6,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,6,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,6,1,2) 2D_FROM_ZERO ! unit 4, axle 6, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,6,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,6,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,6,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,6,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,6,2,1) 2D_FROM_ZERO ! unit 4, axle 6, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,6,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,6,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,6,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,6,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,6,2,2) 2D_FROM_ZERO ! unit 4, axle 6, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,6,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,6,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,6,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,6,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,7,1,1) 2D_FROM_ZERO ! unit 4, axle 7, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,7,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,7,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,7,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,7,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,7,1,2) 2D_FROM_ZERO ! unit 4, axle 7, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,7,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,7,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,7,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,7,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,7,2,1) 2D_FROM_ZERO ! unit 4, axle 7, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,7,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,7,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,7,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,7,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,7,2,2) 2D_FROM_ZERO ! unit 4, axle 7, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,7,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,7,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,7,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,7,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,8,1,1) 2D_FROM_ZERO ! unit 4, axle 8, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,8,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,8,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,8,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,8,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,8,1,2) 2D_FROM_ZERO ! unit 4, axle 8, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,8,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,8,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,8,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,8,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,8,2,1) 2D_FROM_ZERO ! unit 4, axle 8, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,8,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,8,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,8,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,8,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,8,2,2) 2D_FROM_ZERO ! unit 4, axle 8, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,8,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,8,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,8,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,8,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,9,1,1) 2D_FROM_ZERO ! unit 4, axle 9, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,9,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,9,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,9,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,9,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,9,1,2) 2D_FROM_ZERO ! unit 4, axle 9, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,9,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,9,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,9,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,9,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,9,2,1) 2D_FROM_ZERO ! unit 4, axle 9, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,9,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,9,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,9,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,9,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,9,2,2) 2D_FROM_ZERO ! unit 4, axle 9, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,9,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,9,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,9,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,9,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,10,1,1) 2D_FROM_ZERO ! unit 4, axle 10, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,10,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,10,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,10,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,10,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,10,1,2) 2D_FROM_ZERO ! unit 4, axle 10, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,10,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,10,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,10,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,10,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,10,2,1) 2D_FROM_ZERO ! unit 4, axle 10, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,10,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,10,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,10,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,10,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,10,2,2) 2D_FROM_ZERO ! unit 4, axle 10, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,10,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,10,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,10,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,10,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,11,1,1) 2D_FROM_ZERO ! unit 4, axle 11, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,11,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,11,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,11,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,11,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,11,1,2) 2D_FROM_ZERO ! unit 4, axle 11, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,11,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,11,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,11,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,11,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,11,2,1) 2D_FROM_ZERO ! unit 4, axle 11, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,11,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,11,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,11,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,11,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,11,2,2) 2D_FROM_ZERO ! unit 4, axle 11, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,11,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,11,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,11,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,11,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,12,1,1) 2D_FROM_ZERO ! unit 4, axle 12, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,12,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,12,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,12,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,12,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,12,1,2) 2D_FROM_ZERO ! unit 4, axle 12, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,12,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,12,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,12,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,12,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,12,2,1) 2D_FROM_ZERO ! unit 4, axle 12, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,12,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,12,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,12,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,12,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,12,2,2) 2D_FROM_ZERO ! unit 4, axle 12, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,12,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,12,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,12,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,12,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,13,1,1) 2D_FROM_ZERO ! unit 4, axle 13, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,13,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,13,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,13,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,13,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,13,1,2) 2D_FROM_ZERO ! unit 4, axle 13, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,13,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,13,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,13,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,13,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,13,2,1) 2D_FROM_ZERO ! unit 4, axle 13, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,13,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,13,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,13,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,13,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,13,2,2) 2D_FROM_ZERO ! unit 4, axle 13, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,13,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,13,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,13,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,13,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,14,1,1) 2D_FROM_ZERO ! unit 4, axle 14, left, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,14,1,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,14,1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,14,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,14,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,14,1,2) 2D_FROM_ZERO ! unit 4, axle 14, left, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,14,1,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,14,1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,14,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,14,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,14,2,1) 2D_FROM_ZERO ! unit 4, axle 14, right, inner
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,14,2,1) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,14,2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,14,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,14,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(4,14,2,2) 2D_FROM_ZERO ! unit 4, axle 14, right, outer
 0, 7357.5, 14715, 29430, 44145, 58860
 1, 1253.8, 2418, 4477.9, 6179.4, 7612.3
 2, 2438.4, 4702.7, 8708.7, 12018.1, 14804.9
 4, 4389.6, 8465.7, 15677.2, 21634.5, 26651.2
 6, 5646, 10888.8, 20164.4, 27826.9, 34279.5
 8, 6298.9, 12147.8, 22496, 31044.4, 38243.1
 10, 6553.7, 12639.3, 23406, 32300.3, 39790.2
 12, 6586.8, 12703.1, 23524.3, 32463.5, 39991.2
 15, 6451.2, 12441.6, 23040.1, 31795.3, 39168.1
 20, 6103.2, 11770.4, 21797.1, 30080, 37055.1
 25, 5784.6, 11156, 20659.2, 28509.7, 35120.6
 30, 5528.4, 10661.9, 19744.3, 27247.1, 33565.3
 35, 5325.9, 10271.4, 19021, 26249, 32335.8
 40, 5164.3, 9959.8, 18444.1, 25452.8, 31355
 45, 5033.5, 9707.5, 17976.8, 24808, 30560.6
 50, 4925.9, 9499.9, 17592.4, 24277.5, 29907
 60, 4759.9, 9179.8, 16999.7, 23459.5, 28899.4
 70, 4638.4, 8945.5, 16565.8, 22860.8, 28161.9
 80, 4545.9, 8767.1, 16235.4, 22404.9, 27600.2
 89, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
 90, 4479.8, 8639.6, 15999.2, 22078.9, 27198.6
ENDTABLE
FY_TIRE_GAIN(4,14,2,2) 1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(4,14,2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(4,14,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(4,14,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(4,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(4,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.85
 -20, 0.55
 -15, 0.3
 -10, 0.05
 -5, -0.12
 0, -0.15
 5, -0.12
 10, 0.05
 15, 0.3
 20, 0.55
 25, 0.85
ENDTABLE
FZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_FZ_AERO)

FZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CFZ

FZ_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CFZ

FZ_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CFZ

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 188 datasets; if
! indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

FZ_TIRE_COEFFICIENT(1,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, left, inner
FZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 1, right, inner
FZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, left, inner
FZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 2, right, inner
FZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, left, inner
FZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, left, outer
FZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, right, inner
FZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,3,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 3, right, outer
FZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, left, inner
FZ_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, left, outer
FZ_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, right, inner
FZ_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,4,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 4, right, outer
FZ_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,4,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,4,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,4,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, left, inner
FZ_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, left, outer
FZ_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, right, inner
FZ_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,5,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 1, axle 5, right, outer
FZ_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(1,5,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,5,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,5,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, inner
FZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, left, outer
FZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, inner
FZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 1, right, outer
FZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, inner
FZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, left, outer
FZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, inner
FZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 2, right, outer
FZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, left, inner
FZ_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, left, outer
FZ_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, right, inner
FZ_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,3,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 3, right, outer
FZ_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,4,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 4, left, inner
FZ_TIRE_GAIN(2,4,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,4,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,4,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,4,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,4,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 4, left, outer
FZ_TIRE_GAIN(2,4,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,4,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,4,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,4,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,4,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 4, right, inner
FZ_TIRE_GAIN(2,4,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,4,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,4,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,4,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,4,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 4, right, outer
FZ_TIRE_GAIN(2,4,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,4,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,4,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,4,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,5,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 5, left, inner
FZ_TIRE_GAIN(2,5,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,5,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,5,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,5,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,5,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 5, left, outer
FZ_TIRE_GAIN(2,5,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,5,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,5,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,5,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,5,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 5, right, inner
FZ_TIRE_GAIN(2,5,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,5,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,5,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,5,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,5,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 5, right, outer
FZ_TIRE_GAIN(2,5,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,5,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,5,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,5,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,6,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 6, left, inner
FZ_TIRE_GAIN(2,6,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,6,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,6,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,6,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,6,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 6, left, outer
FZ_TIRE_GAIN(2,6,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,6,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,6,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,6,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,6,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 6, right, inner
FZ_TIRE_GAIN(2,6,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,6,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,6,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,6,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,6,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 6, right, outer
FZ_TIRE_GAIN(2,6,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,6,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,6,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,6,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,7,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 7, left, inner
FZ_TIRE_GAIN(2,7,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,7,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,7,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,7,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,7,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 7, left, outer
FZ_TIRE_GAIN(2,7,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,7,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,7,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,7,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,7,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 7, right, inner
FZ_TIRE_GAIN(2,7,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,7,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,7,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,7,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,7,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 7, right, outer
FZ_TIRE_GAIN(2,7,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,7,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,7,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,7,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,8,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 8, left, inner
FZ_TIRE_GAIN(2,8,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,8,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,8,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,8,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,8,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 8, left, outer
FZ_TIRE_GAIN(2,8,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,8,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,8,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,8,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,8,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 8, right, inner
FZ_TIRE_GAIN(2,8,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,8,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,8,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,8,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,8,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 8, right, outer
FZ_TIRE_GAIN(2,8,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,8,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,8,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,8,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,9,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 9, left, inner
FZ_TIRE_GAIN(2,9,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,9,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,9,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,9,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,9,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 9, left, outer
FZ_TIRE_GAIN(2,9,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,9,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,9,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,9,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,9,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 9, right, inner
FZ_TIRE_GAIN(2,9,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,9,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,9,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,9,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,9,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 2, axle 9, right, outer
FZ_TIRE_GAIN(2,9,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(2,9,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,9,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,9,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,10,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 10, left,
                                  ! inner
FZ_TIRE_GAIN(2,10,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,10,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,10,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,10,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,10,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 10, left,
                                  ! outer
FZ_TIRE_GAIN(2,10,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,10,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,10,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,10,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,10,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 10, right,
                                  ! inner
FZ_TIRE_GAIN(2,10,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,10,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,10,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,10,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,10,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 10, right,
                                  ! outer
FZ_TIRE_GAIN(2,10,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,10,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,10,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,10,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,11,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 11, left,
                                  ! inner
FZ_TIRE_GAIN(2,11,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,11,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,11,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,11,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,11,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 11, left,
                                  ! outer
FZ_TIRE_GAIN(2,11,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,11,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,11,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,11,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,11,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 11, right,
                                  ! inner
FZ_TIRE_GAIN(2,11,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,11,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,11,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,11,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,11,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 11, right,
                                  ! outer
FZ_TIRE_GAIN(2,11,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,11,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,11,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,11,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,12,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 12, left,
                                  ! inner
FZ_TIRE_GAIN(2,12,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,12,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,12,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,12,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,12,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 12, left,
                                  ! outer
FZ_TIRE_GAIN(2,12,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,12,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,12,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,12,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,12,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 12, right,
                                  ! inner
FZ_TIRE_GAIN(2,12,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,12,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,12,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,12,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,12,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 12, right,
                                  ! outer
FZ_TIRE_GAIN(2,12,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,12,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,12,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,12,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,13,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 13, left,
                                  ! inner
FZ_TIRE_GAIN(2,13,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,13,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,13,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,13,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,13,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 13, left,
                                  ! outer
FZ_TIRE_GAIN(2,13,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,13,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,13,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,13,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,13,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 13, right,
                                  ! inner
FZ_TIRE_GAIN(2,13,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,13,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,13,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,13,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,13,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 13, right,
                                  ! outer
FZ_TIRE_GAIN(2,13,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,13,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,13,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,13,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,14,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 14, left,
                                  ! inner
FZ_TIRE_GAIN(2,14,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,14,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,14,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,14,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,14,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 14, left,
                                  ! outer
FZ_TIRE_GAIN(2,14,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,14,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,14,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,14,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,14,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 14, right,
                                  ! inner
FZ_TIRE_GAIN(2,14,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,14,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,14,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,14,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,14,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 2, axle 14, right,
                                  ! outer
FZ_TIRE_GAIN(2,14,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(2,14,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,14,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,14,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, left, inner
FZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, left, outer
FZ_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, right, inner
FZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 1, right, outer
FZ_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, left, inner
FZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, left, outer
FZ_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, right, inner
FZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 2, right, outer
FZ_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 3, left, inner
FZ_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 3, left, outer
FZ_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 3, right, inner
FZ_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,3,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 3, right, outer
FZ_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,4,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 4, left, inner
FZ_TIRE_GAIN(3,4,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,4,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,4,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,4,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,4,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 4, left, outer
FZ_TIRE_GAIN(3,4,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,4,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,4,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,4,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,4,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 4, right, inner
FZ_TIRE_GAIN(3,4,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,4,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,4,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,4,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,4,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 4, right, outer
FZ_TIRE_GAIN(3,4,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,4,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,4,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,4,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,5,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 5, left, inner
FZ_TIRE_GAIN(3,5,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,5,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,5,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,5,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,5,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 5, left, outer
FZ_TIRE_GAIN(3,5,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,5,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,5,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,5,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,5,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 5, right, inner
FZ_TIRE_GAIN(3,5,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,5,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,5,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,5,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,5,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 5, right, outer
FZ_TIRE_GAIN(3,5,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,5,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,5,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,5,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,6,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 6, left, inner
FZ_TIRE_GAIN(3,6,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,6,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,6,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,6,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,6,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 6, left, outer
FZ_TIRE_GAIN(3,6,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,6,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,6,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,6,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,6,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 6, right, inner
FZ_TIRE_GAIN(3,6,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,6,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,6,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,6,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,6,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 6, right, outer
FZ_TIRE_GAIN(3,6,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,6,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,6,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,6,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,7,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 7, left, inner
FZ_TIRE_GAIN(3,7,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,7,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,7,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,7,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,7,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 7, left, outer
FZ_TIRE_GAIN(3,7,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,7,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,7,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,7,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,7,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 7, right, inner
FZ_TIRE_GAIN(3,7,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,7,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,7,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,7,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,7,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 7, right, outer
FZ_TIRE_GAIN(3,7,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,7,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,7,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,7,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,8,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 8, left, inner
FZ_TIRE_GAIN(3,8,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,8,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,8,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,8,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,8,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 8, left, outer
FZ_TIRE_GAIN(3,8,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,8,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,8,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,8,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,8,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 8, right, inner
FZ_TIRE_GAIN(3,8,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,8,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,8,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,8,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,8,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 8, right, outer
FZ_TIRE_GAIN(3,8,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,8,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,8,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,8,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,9,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 9, left, inner
FZ_TIRE_GAIN(3,9,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,9,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,9,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,9,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,9,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 9, left, outer
FZ_TIRE_GAIN(3,9,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,9,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,9,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,9,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,9,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 9, right, inner
FZ_TIRE_GAIN(3,9,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,9,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,9,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,9,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,9,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 3, axle 9, right, outer
FZ_TIRE_GAIN(3,9,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(3,9,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,9,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,9,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,10,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 10, left,
                                  ! inner
FZ_TIRE_GAIN(3,10,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,10,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,10,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,10,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,10,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 10, left,
                                  ! outer
FZ_TIRE_GAIN(3,10,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,10,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,10,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,10,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,10,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 10, right,
                                  ! inner
FZ_TIRE_GAIN(3,10,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,10,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,10,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,10,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,10,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 10, right,
                                  ! outer
FZ_TIRE_GAIN(3,10,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,10,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,10,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,10,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,11,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 11, left,
                                  ! inner
FZ_TIRE_GAIN(3,11,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,11,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,11,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,11,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,11,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 11, left,
                                  ! outer
FZ_TIRE_GAIN(3,11,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,11,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,11,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,11,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,11,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 11, right,
                                  ! inner
FZ_TIRE_GAIN(3,11,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,11,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,11,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,11,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,11,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 11, right,
                                  ! outer
FZ_TIRE_GAIN(3,11,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,11,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,11,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,11,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,12,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 12, left,
                                  ! inner
FZ_TIRE_GAIN(3,12,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,12,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,12,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,12,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,12,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 12, left,
                                  ! outer
FZ_TIRE_GAIN(3,12,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,12,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,12,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,12,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,12,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 12, right,
                                  ! inner
FZ_TIRE_GAIN(3,12,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,12,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,12,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,12,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,12,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 12, right,
                                  ! outer
FZ_TIRE_GAIN(3,12,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,12,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,12,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,12,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,13,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 13, left,
                                  ! inner
FZ_TIRE_GAIN(3,13,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,13,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,13,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,13,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,13,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 13, left,
                                  ! outer
FZ_TIRE_GAIN(3,13,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,13,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,13,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,13,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,13,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 13, right,
                                  ! inner
FZ_TIRE_GAIN(3,13,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,13,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,13,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,13,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,13,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 13, right,
                                  ! outer
FZ_TIRE_GAIN(3,13,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,13,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,13,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,13,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,14,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 14, left,
                                  ! inner
FZ_TIRE_GAIN(3,14,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,14,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,14,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,14,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,14,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 14, left,
                                  ! outer
FZ_TIRE_GAIN(3,14,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,14,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,14,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,14,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,14,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 14, right,
                                  ! inner
FZ_TIRE_GAIN(3,14,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,14,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,14,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,14,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(3,14,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 3, axle 14, right,
                                  ! outer
FZ_TIRE_GAIN(3,14,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(3,14,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(3,14,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(3,14,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, left, inner
FZ_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, left, outer
FZ_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, right, inner
FZ_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,1,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 1, right, outer
FZ_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,1,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,1,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,1,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, left, inner
FZ_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, left, outer
FZ_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, right, inner
FZ_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,2,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 2, right, outer
FZ_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,2,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,2,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,3,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 3, left, inner
FZ_TIRE_GAIN(4,3,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,3,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,3,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,3,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,3,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 3, left, outer
FZ_TIRE_GAIN(4,3,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,3,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,3,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,3,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,3,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 3, right, inner
FZ_TIRE_GAIN(4,3,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,3,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,3,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,3,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,3,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 3, right, outer
FZ_TIRE_GAIN(4,3,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,3,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,3,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,3,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,4,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 4, left, inner
FZ_TIRE_GAIN(4,4,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,4,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,4,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,4,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,4,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 4, left, outer
FZ_TIRE_GAIN(4,4,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,4,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,4,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,4,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,4,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 4, right, inner
FZ_TIRE_GAIN(4,4,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,4,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,4,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,4,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,4,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 4, right, outer
FZ_TIRE_GAIN(4,4,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,4,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,4,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,4,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,5,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 5, left, inner
FZ_TIRE_GAIN(4,5,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,5,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,5,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,5,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,5,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 5, left, outer
FZ_TIRE_GAIN(4,5,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,5,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,5,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,5,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,5,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 5, right, inner
FZ_TIRE_GAIN(4,5,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,5,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,5,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,5,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,5,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 5, right, outer
FZ_TIRE_GAIN(4,5,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,5,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,5,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,5,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,6,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 6, left, inner
FZ_TIRE_GAIN(4,6,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,6,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,6,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,6,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,6,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 6, left, outer
FZ_TIRE_GAIN(4,6,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,6,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,6,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,6,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,6,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 6, right, inner
FZ_TIRE_GAIN(4,6,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,6,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,6,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,6,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,6,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 6, right, outer
FZ_TIRE_GAIN(4,6,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,6,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,6,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,6,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,7,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 7, left, inner
FZ_TIRE_GAIN(4,7,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,7,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,7,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,7,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,7,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 7, left, outer
FZ_TIRE_GAIN(4,7,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,7,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,7,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,7,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,7,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 7, right, inner
FZ_TIRE_GAIN(4,7,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,7,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,7,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,7,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,7,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 7, right, outer
FZ_TIRE_GAIN(4,7,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,7,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,7,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,7,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,8,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 8, left, inner
FZ_TIRE_GAIN(4,8,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,8,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,8,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,8,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,8,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 8, left, outer
FZ_TIRE_GAIN(4,8,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,8,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,8,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,8,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,8,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 8, right, inner
FZ_TIRE_GAIN(4,8,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,8,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,8,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,8,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,8,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 8, right, outer
FZ_TIRE_GAIN(4,8,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,8,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,8,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,8,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,9,1,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 9, left, inner
FZ_TIRE_GAIN(4,9,1,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,9,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,9,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,9,1,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,9,1,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 9, left, outer
FZ_TIRE_GAIN(4,9,1,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,9,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,9,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,9,1,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,9,2,1) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 9, right, inner
FZ_TIRE_GAIN(4,9,2,1) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,9,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,9,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,9,2,1) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,9,2,2) 980 ! Coefficient: vertical force per unit tire
                                 ! compression (N/mm), unit 4, axle 9, right, outer
FZ_TIRE_GAIN(4,9,2,2) 1 ! Gain multiplied with calculated value to get vertical
                        ! force
FZ_TIRE_OFFSET(4,9,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,9,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,9,2,2) 1 ! Scale factor divided into (tire compression -
                             ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,10,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 10, left,
                                  ! inner
FZ_TIRE_GAIN(4,10,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,10,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,10,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,10,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,10,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 10, left,
                                  ! outer
FZ_TIRE_GAIN(4,10,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,10,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,10,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,10,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,10,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 10, right,
                                  ! inner
FZ_TIRE_GAIN(4,10,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,10,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,10,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,10,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,10,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 10, right,
                                  ! outer
FZ_TIRE_GAIN(4,10,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,10,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,10,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,10,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,11,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 11, left,
                                  ! inner
FZ_TIRE_GAIN(4,11,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,11,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,11,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,11,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,11,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 11, left,
                                  ! outer
FZ_TIRE_GAIN(4,11,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,11,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,11,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,11,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,11,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 11, right,
                                  ! inner
FZ_TIRE_GAIN(4,11,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,11,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,11,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,11,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,11,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 11, right,
                                  ! outer
FZ_TIRE_GAIN(4,11,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,11,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,11,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,11,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,12,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 12, left,
                                  ! inner
FZ_TIRE_GAIN(4,12,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,12,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,12,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,12,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,12,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 12, left,
                                  ! outer
FZ_TIRE_GAIN(4,12,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,12,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,12,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,12,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,12,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 12, right,
                                  ! inner
FZ_TIRE_GAIN(4,12,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,12,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,12,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,12,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,12,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 12, right,
                                  ! outer
FZ_TIRE_GAIN(4,12,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,12,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,12,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,12,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,13,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 13, left,
                                  ! inner
FZ_TIRE_GAIN(4,13,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,13,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,13,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,13,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,13,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 13, left,
                                  ! outer
FZ_TIRE_GAIN(4,13,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,13,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,13,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,13,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,13,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 13, right,
                                  ! inner
FZ_TIRE_GAIN(4,13,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,13,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,13,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,13,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,13,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 13, right,
                                  ! outer
FZ_TIRE_GAIN(4,13,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,13,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,13,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,13,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,14,1,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 14, left,
                                  ! inner
FZ_TIRE_GAIN(4,14,1,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,14,1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,14,1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,14,1,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,14,1,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 14, left,
                                  ! outer
FZ_TIRE_GAIN(4,14,1,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,14,1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,14,1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,14,1,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,14,2,1) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 14, right,
                                  ! inner
FZ_TIRE_GAIN(4,14,2,1) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,14,2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,14,2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,14,2,1) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(4,14,2,2) 980 ! Coefficient: vertical force per unit tire
                                  ! compression (N/mm), unit 4, axle 14, right,
                                  ! outer
FZ_TIRE_GAIN(4,14,2,2) 1 ! Gain multiplied with calculated value to get vertical
                         ! force
FZ_TIRE_OFFSET(4,14,2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(4,14,2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(4,14,2,2) 1 ! Scale factor divided into (tire compression -
                              ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 94 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 50, 0
 60, 0
 61, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,4,1) LINEAR ! unit 1, axle 4, left side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,4,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,4,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,4,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,4,2) LINEAR ! unit 1, axle 4, right side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,4,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,4,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,4,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,5,1) LINEAR ! unit 1, axle 5, left side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,5,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,5,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,5,1) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,5,2) LINEAR ! unit 1, axle 5, right side
 50, 0
 150, 0
 151, 7000
ENDTABLE
F_JNC_STOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,5,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,5,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! jounce stop
CMP_SCALE_F_JNC_STOP(1,5,2) 1 ! Scale factor divided into (suspension travel at
                              ! jounce stop - CMP_START_F_JNC_STOP)

F_JNC_STOP_CONSTANT(2,1,1) 0 ; N ! [D] Constant force, unit 2, axle 1, left side
F_JNC_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,1,2) 0 ; N ! [D] Constant force, unit 2, axle 1, right side
F_JNC_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,2,1) 0 ; N ! [D] Constant force, unit 2, axle 2, left side
F_JNC_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,2,2) 0 ; N ! [D] Constant force, unit 2, axle 2, right side
F_JNC_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,3,1) 0 ; N ! [D] Constant force, unit 2, axle 3, left side
F_JNC_STOP_OFFSET(2,3,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,3,2) 0 ; N ! [D] Constant force, unit 2, axle 3, right side
F_JNC_STOP_OFFSET(2,3,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,4,1) 0 ; N ! [D] Constant force, unit 2, axle 4, left side
F_JNC_STOP_OFFSET(2,4,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,4,2) 0 ; N ! [D] Constant force, unit 2, axle 4, right side
F_JNC_STOP_OFFSET(2,4,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,5,1) 0 ; N ! [D] Constant force, unit 2, axle 5, left side
F_JNC_STOP_OFFSET(2,5,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,5,2) 0 ; N ! [D] Constant force, unit 2, axle 5, right side
F_JNC_STOP_OFFSET(2,5,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,6,1) 0 ; N ! [D] Constant force, unit 2, axle 6, left side
F_JNC_STOP_OFFSET(2,6,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,6,2) 0 ; N ! [D] Constant force, unit 2, axle 6, right side
F_JNC_STOP_OFFSET(2,6,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,7,1) 0 ; N ! [D] Constant force, unit 2, axle 7, left side
F_JNC_STOP_OFFSET(2,7,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,7,2) 0 ; N ! [D] Constant force, unit 2, axle 7, right side
F_JNC_STOP_OFFSET(2,7,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,8,1) 0 ; N ! [D] Constant force, unit 2, axle 8, left side
F_JNC_STOP_OFFSET(2,8,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,8,2) 0 ; N ! [D] Constant force, unit 2, axle 8, right side
F_JNC_STOP_OFFSET(2,8,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,9,1) 0 ; N ! [D] Constant force, unit 2, axle 9, left side
F_JNC_STOP_OFFSET(2,9,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,9,2) 0 ; N ! [D] Constant force, unit 2, axle 9, right side
F_JNC_STOP_OFFSET(2,9,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,10,1) 0 ; N ! [D] Constant force, unit 2, axle 10, left side
F_JNC_STOP_OFFSET(2,10,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,10,2) 0 ; N ! [D] Constant force, unit 2, axle 10, right side
F_JNC_STOP_OFFSET(2,10,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,11,1) 0 ; N ! [D] Constant force, unit 2, axle 11, left side
F_JNC_STOP_OFFSET(2,11,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,11,2) 0 ; N ! [D] Constant force, unit 2, axle 11, right side
F_JNC_STOP_OFFSET(2,11,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,12,1) 0 ; N ! [D] Constant force, unit 2, axle 12, left side
F_JNC_STOP_OFFSET(2,12,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,12,2) 0 ; N ! [D] Constant force, unit 2, axle 12, right side
F_JNC_STOP_OFFSET(2,12,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,13,1) 0 ; N ! [D] Constant force, unit 2, axle 13, left side
F_JNC_STOP_OFFSET(2,13,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,13,2) 0 ; N ! [D] Constant force, unit 2, axle 13, right side
F_JNC_STOP_OFFSET(2,13,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,14,1) 0 ; N ! [D] Constant force, unit 2, axle 14, left side
F_JNC_STOP_OFFSET(2,14,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,14,2) 0 ; N ! [D] Constant force, unit 2, axle 14, right side
F_JNC_STOP_OFFSET(2,14,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,1,1) 0 ; N ! [D] Constant force, unit 3, axle 1, left side
F_JNC_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,1,2) 0 ; N ! [D] Constant force, unit 3, axle 1, right side
F_JNC_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,2,1) 0 ; N ! [D] Constant force, unit 3, axle 2, left side
F_JNC_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,2,2) 0 ; N ! [D] Constant force, unit 3, axle 2, right side
F_JNC_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,3,1) 0 ; N ! [D] Constant force, unit 3, axle 3, left side
F_JNC_STOP_OFFSET(3,3,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,3,2) 0 ; N ! [D] Constant force, unit 3, axle 3, right side
F_JNC_STOP_OFFSET(3,3,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,4,1) 0 ; N ! [D] Constant force, unit 3, axle 4, left side
F_JNC_STOP_OFFSET(3,4,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,4,2) 0 ; N ! [D] Constant force, unit 3, axle 4, right side
F_JNC_STOP_OFFSET(3,4,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,5,1) 0 ; N ! [D] Constant force, unit 3, axle 5, left side
F_JNC_STOP_OFFSET(3,5,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,5,2) 0 ; N ! [D] Constant force, unit 3, axle 5, right side
F_JNC_STOP_OFFSET(3,5,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,6,1) 0 ; N ! [D] Constant force, unit 3, axle 6, left side
F_JNC_STOP_OFFSET(3,6,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,6,2) 0 ; N ! [D] Constant force, unit 3, axle 6, right side
F_JNC_STOP_OFFSET(3,6,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,7,1) 0 ; N ! [D] Constant force, unit 3, axle 7, left side
F_JNC_STOP_OFFSET(3,7,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,7,2) 0 ; N ! [D] Constant force, unit 3, axle 7, right side
F_JNC_STOP_OFFSET(3,7,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,8,1) 0 ; N ! [D] Constant force, unit 3, axle 8, left side
F_JNC_STOP_OFFSET(3,8,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,8,2) 0 ; N ! [D] Constant force, unit 3, axle 8, right side
F_JNC_STOP_OFFSET(3,8,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,9,1) 0 ; N ! [D] Constant force, unit 3, axle 9, left side
F_JNC_STOP_OFFSET(3,9,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,9,2) 0 ; N ! [D] Constant force, unit 3, axle 9, right side
F_JNC_STOP_OFFSET(3,9,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,10,1) 0 ; N ! [D] Constant force, unit 3, axle 10, left side
F_JNC_STOP_OFFSET(3,10,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,10,2) 0 ; N ! [D] Constant force, unit 3, axle 10, right side
F_JNC_STOP_OFFSET(3,10,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,11,1) 0 ; N ! [D] Constant force, unit 3, axle 11, left side
F_JNC_STOP_OFFSET(3,11,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,11,2) 0 ; N ! [D] Constant force, unit 3, axle 11, right side
F_JNC_STOP_OFFSET(3,11,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,12,1) 0 ; N ! [D] Constant force, unit 3, axle 12, left side
F_JNC_STOP_OFFSET(3,12,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,12,2) 0 ; N ! [D] Constant force, unit 3, axle 12, right side
F_JNC_STOP_OFFSET(3,12,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,13,1) 0 ; N ! [D] Constant force, unit 3, axle 13, left side
F_JNC_STOP_OFFSET(3,13,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,13,2) 0 ; N ! [D] Constant force, unit 3, axle 13, right side
F_JNC_STOP_OFFSET(3,13,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,14,1) 0 ; N ! [D] Constant force, unit 3, axle 14, left side
F_JNC_STOP_OFFSET(3,14,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(3,14,2) 0 ; N ! [D] Constant force, unit 3, axle 14, right side
F_JNC_STOP_OFFSET(3,14,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,1,1) 0 ; N ! [D] Constant force, unit 4, axle 1, left side
F_JNC_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,1,2) 0 ; N ! [D] Constant force, unit 4, axle 1, right side
F_JNC_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,2,1) 0 ; N ! [D] Constant force, unit 4, axle 2, left side
F_JNC_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,2,2) 0 ; N ! [D] Constant force, unit 4, axle 2, right side
F_JNC_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,3,1) 0 ; N ! [D] Constant force, unit 4, axle 3, left side
F_JNC_STOP_OFFSET(4,3,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,3,2) 0 ; N ! [D] Constant force, unit 4, axle 3, right side
F_JNC_STOP_OFFSET(4,3,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,4,1) 0 ; N ! [D] Constant force, unit 4, axle 4, left side
F_JNC_STOP_OFFSET(4,4,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,4,2) 0 ; N ! [D] Constant force, unit 4, axle 4, right side
F_JNC_STOP_OFFSET(4,4,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,5,1) 0 ; N ! [D] Constant force, unit 4, axle 5, left side
F_JNC_STOP_OFFSET(4,5,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,5,2) 0 ; N ! [D] Constant force, unit 4, axle 5, right side
F_JNC_STOP_OFFSET(4,5,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,6,1) 0 ; N ! [D] Constant force, unit 4, axle 6, left side
F_JNC_STOP_OFFSET(4,6,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,6,2) 0 ; N ! [D] Constant force, unit 4, axle 6, right side
F_JNC_STOP_OFFSET(4,6,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,7,1) 0 ; N ! [D] Constant force, unit 4, axle 7, left side
F_JNC_STOP_OFFSET(4,7,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,7,2) 0 ; N ! [D] Constant force, unit 4, axle 7, right side
F_JNC_STOP_OFFSET(4,7,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,8,1) 0 ; N ! [D] Constant force, unit 4, axle 8, left side
F_JNC_STOP_OFFSET(4,8,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,8,2) 0 ; N ! [D] Constant force, unit 4, axle 8, right side
F_JNC_STOP_OFFSET(4,8,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,9,1) 0 ; N ! [D] Constant force, unit 4, axle 9, left side
F_JNC_STOP_OFFSET(4,9,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,9,2) 0 ; N ! [D] Constant force, unit 4, axle 9, right side
F_JNC_STOP_OFFSET(4,9,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,10,1) 0 ; N ! [D] Constant force, unit 4, axle 10, left side
F_JNC_STOP_OFFSET(4,10,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,10,2) 0 ; N ! [D] Constant force, unit 4, axle 10, right side
F_JNC_STOP_OFFSET(4,10,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,11,1) 0 ; N ! [D] Constant force, unit 4, axle 11, left side
F_JNC_STOP_OFFSET(4,11,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,11,2) 0 ; N ! [D] Constant force, unit 4, axle 11, right side
F_JNC_STOP_OFFSET(4,11,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,12,1) 0 ; N ! [D] Constant force, unit 4, axle 12, left side
F_JNC_STOP_OFFSET(4,12,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,12,2) 0 ; N ! [D] Constant force, unit 4, axle 12, right side
F_JNC_STOP_OFFSET(4,12,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,13,1) 0 ; N ! [D] Constant force, unit 4, axle 13, left side
F_JNC_STOP_OFFSET(4,13,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,13,2) 0 ; N ! [D] Constant force, unit 4, axle 13, right side
F_JNC_STOP_OFFSET(4,13,2) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,14,1) 0 ; N ! [D] Constant force, unit 4, axle 14, left side
F_JNC_STOP_OFFSET(4,14,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(4,14,2) 0 ; N ! [D] Constant force, unit 4, axle 14, right side
F_JNC_STOP_OFFSET(4,14,2) 0 ; N ! Offset added (after gain) to get force

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 94 datasets; if indices shown below are not
! used, e.g., (1,1,2), the current values of the indices IUNIT, IAXLE, and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,1) LINEAR ! unit 1, axle 1, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1,2) LINEAR ! unit 1, axle 1, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,1,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,1) LINEAR ! unit 1, axle 2, left side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2,2) LINEAR ! unit 1, axle 2, right side
 -61, -7000
 -60, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,2,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,1) LINEAR ! unit 1, axle 3, left side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,3,2) LINEAR ! unit 1, axle 3, right side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,3,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,3,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,3,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,4,1) LINEAR ! unit 1, axle 4, left side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,4,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,4,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,4,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,4,2) LINEAR ! unit 1, axle 4, right side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,4,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,4,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,4,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,5,1) LINEAR ! unit 1, axle 5, left side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,5,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,5,1) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,5,1) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,5,2) LINEAR ! unit 1, axle 5, right side
 -151, -7000
 -150, 0
 -50, 0
ENDTABLE
F_REB_STOP_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,5,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,5,2) 0 ; mm ! Offset subtracted from suspension travel at
                              ! rebound stop
CMP_SCALE_F_REB_STOP(1,5,2) 1 ! Scale factor divided into (suspension travel at
                              ! rebound stop - CMP_START_F_REB_STOP)

F_REB_STOP_CONSTANT(2,1,1) 0 ; N ! [D] Constant force, unit 2, axle 1, left side
F_REB_STOP_OFFSET(2,1,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,1,2) 0 ; N ! [D] Constant force, unit 2, axle 1, right side
F_REB_STOP_OFFSET(2,1,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,2,1) 0 ; N ! [D] Constant force, unit 2, axle 2, left side
F_REB_STOP_OFFSET(2,2,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,2,2) 0 ; N ! [D] Constant force, unit 2, axle 2, right side
F_REB_STOP_OFFSET(2,2,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,3,1) 0 ; N ! [D] Constant force, unit 2, axle 3, left side
F_REB_STOP_OFFSET(2,3,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,3,2) 0 ; N ! [D] Constant force, unit 2, axle 3, right side
F_REB_STOP_OFFSET(2,3,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,4,1) 0 ; N ! [D] Constant force, unit 2, axle 4, left side
F_REB_STOP_OFFSET(2,4,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,4,2) 0 ; N ! [D] Constant force, unit 2, axle 4, right side
F_REB_STOP_OFFSET(2,4,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,5,1) 0 ; N ! [D] Constant force, unit 2, axle 5, left side
F_REB_STOP_OFFSET(2,5,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,5,2) 0 ; N ! [D] Constant force, unit 2, axle 5, right side
F_REB_STOP_OFFSET(2,5,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,6,1) 0 ; N ! [D] Constant force, unit 2, axle 6, left side
F_REB_STOP_OFFSET(2,6,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,6,2) 0 ; N ! [D] Constant force, unit 2, axle 6, right side
F_REB_STOP_OFFSET(2,6,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,7,1) 0 ; N ! [D] Constant force, unit 2, axle 7, left side
F_REB_STOP_OFFSET(2,7,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,7,2) 0 ; N ! [D] Constant force, unit 2, axle 7, right side
F_REB_STOP_OFFSET(2,7,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,8,1) 0 ; N ! [D] Constant force, unit 2, axle 8, left side
F_REB_STOP_OFFSET(2,8,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,8,2) 0 ; N ! [D] Constant force, unit 2, axle 8, right side
F_REB_STOP_OFFSET(2,8,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,9,1) 0 ; N ! [D] Constant force, unit 2, axle 9, left side
F_REB_STOP_OFFSET(2,9,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,9,2) 0 ; N ! [D] Constant force, unit 2, axle 9, right side
F_REB_STOP_OFFSET(2,9,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,10,1) 0 ; N ! [D] Constant force, unit 2, axle 10, left side
F_REB_STOP_OFFSET(2,10,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,10,2) 0 ; N ! [D] Constant force, unit 2, axle 10, right side
F_REB_STOP_OFFSET(2,10,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,11,1) 0 ; N ! [D] Constant force, unit 2, axle 11, left side
F_REB_STOP_OFFSET(2,11,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,11,2) 0 ; N ! [D] Constant force, unit 2, axle 11, right side
F_REB_STOP_OFFSET(2,11,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,12,1) 0 ; N ! [D] Constant force, unit 2, axle 12, left side
F_REB_STOP_OFFSET(2,12,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,12,2) 0 ; N ! [D] Constant force, unit 2, axle 12, right side
F_REB_STOP_OFFSET(2,12,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,13,1) 0 ; N ! [D] Constant force, unit 2, axle 13, left side
F_REB_STOP_OFFSET(2,13,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,13,2) 0 ; N ! [D] Constant force, unit 2, axle 13, right side
F_REB_STOP_OFFSET(2,13,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,14,1) 0 ; N ! [D] Constant force, unit 2, axle 14, left side
F_REB_STOP_OFFSET(2,14,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,14,2) 0 ; N ! [D] Constant force, unit 2, axle 14, right side
F_REB_STOP_OFFSET(2,14,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,1,1) 0 ; N ! [D] Constant force, unit 3, axle 1, left side
F_REB_STOP_OFFSET(3,1,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,1,2) 0 ; N ! [D] Constant force, unit 3, axle 1, right side
F_REB_STOP_OFFSET(3,1,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,2,1) 0 ; N ! [D] Constant force, unit 3, axle 2, left side
F_REB_STOP_OFFSET(3,2,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,2,2) 0 ; N ! [D] Constant force, unit 3, axle 2, right side
F_REB_STOP_OFFSET(3,2,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,3,1) 0 ; N ! [D] Constant force, unit 3, axle 3, left side
F_REB_STOP_OFFSET(3,3,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,3,2) 0 ; N ! [D] Constant force, unit 3, axle 3, right side
F_REB_STOP_OFFSET(3,3,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,4,1) 0 ; N ! [D] Constant force, unit 3, axle 4, left side
F_REB_STOP_OFFSET(3,4,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,4,2) 0 ; N ! [D] Constant force, unit 3, axle 4, right side
F_REB_STOP_OFFSET(3,4,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,5,1) 0 ; N ! [D] Constant force, unit 3, axle 5, left side
F_REB_STOP_OFFSET(3,5,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,5,2) 0 ; N ! [D] Constant force, unit 3, axle 5, right side
F_REB_STOP_OFFSET(3,5,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,6,1) 0 ; N ! [D] Constant force, unit 3, axle 6, left side
F_REB_STOP_OFFSET(3,6,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,6,2) 0 ; N ! [D] Constant force, unit 3, axle 6, right side
F_REB_STOP_OFFSET(3,6,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,7,1) 0 ; N ! [D] Constant force, unit 3, axle 7, left side
F_REB_STOP_OFFSET(3,7,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,7,2) 0 ; N ! [D] Constant force, unit 3, axle 7, right side
F_REB_STOP_OFFSET(3,7,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,8,1) 0 ; N ! [D] Constant force, unit 3, axle 8, left side
F_REB_STOP_OFFSET(3,8,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,8,2) 0 ; N ! [D] Constant force, unit 3, axle 8, right side
F_REB_STOP_OFFSET(3,8,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,9,1) 0 ; N ! [D] Constant force, unit 3, axle 9, left side
F_REB_STOP_OFFSET(3,9,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,9,2) 0 ; N ! [D] Constant force, unit 3, axle 9, right side
F_REB_STOP_OFFSET(3,9,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,10,1) 0 ; N ! [D] Constant force, unit 3, axle 10, left side
F_REB_STOP_OFFSET(3,10,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,10,2) 0 ; N ! [D] Constant force, unit 3, axle 10, right side
F_REB_STOP_OFFSET(3,10,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,11,1) 0 ; N ! [D] Constant force, unit 3, axle 11, left side
F_REB_STOP_OFFSET(3,11,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,11,2) 0 ; N ! [D] Constant force, unit 3, axle 11, right side
F_REB_STOP_OFFSET(3,11,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,12,1) 0 ; N ! [D] Constant force, unit 3, axle 12, left side
F_REB_STOP_OFFSET(3,12,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,12,2) 0 ; N ! [D] Constant force, unit 3, axle 12, right side
F_REB_STOP_OFFSET(3,12,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,13,1) 0 ; N ! [D] Constant force, unit 3, axle 13, left side
F_REB_STOP_OFFSET(3,13,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,13,2) 0 ; N ! [D] Constant force, unit 3, axle 13, right side
F_REB_STOP_OFFSET(3,13,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,14,1) 0 ; N ! [D] Constant force, unit 3, axle 14, left side
F_REB_STOP_OFFSET(3,14,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(3,14,2) 0 ; N ! [D] Constant force, unit 3, axle 14, right side
F_REB_STOP_OFFSET(3,14,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,1,1) 0 ; N ! [D] Constant force, unit 4, axle 1, left side
F_REB_STOP_OFFSET(4,1,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,1,2) 0 ; N ! [D] Constant force, unit 4, axle 1, right side
F_REB_STOP_OFFSET(4,1,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,2,1) 0 ; N ! [D] Constant force, unit 4, axle 2, left side
F_REB_STOP_OFFSET(4,2,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,2,2) 0 ; N ! [D] Constant force, unit 4, axle 2, right side
F_REB_STOP_OFFSET(4,2,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,3,1) 0 ; N ! [D] Constant force, unit 4, axle 3, left side
F_REB_STOP_OFFSET(4,3,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,3,2) 0 ; N ! [D] Constant force, unit 4, axle 3, right side
F_REB_STOP_OFFSET(4,3,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,4,1) 0 ; N ! [D] Constant force, unit 4, axle 4, left side
F_REB_STOP_OFFSET(4,4,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,4,2) 0 ; N ! [D] Constant force, unit 4, axle 4, right side
F_REB_STOP_OFFSET(4,4,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,5,1) 0 ; N ! [D] Constant force, unit 4, axle 5, left side
F_REB_STOP_OFFSET(4,5,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,5,2) 0 ; N ! [D] Constant force, unit 4, axle 5, right side
F_REB_STOP_OFFSET(4,5,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,6,1) 0 ; N ! [D] Constant force, unit 4, axle 6, left side
F_REB_STOP_OFFSET(4,6,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,6,2) 0 ; N ! [D] Constant force, unit 4, axle 6, right side
F_REB_STOP_OFFSET(4,6,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,7,1) 0 ; N ! [D] Constant force, unit 4, axle 7, left side
F_REB_STOP_OFFSET(4,7,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,7,2) 0 ; N ! [D] Constant force, unit 4, axle 7, right side
F_REB_STOP_OFFSET(4,7,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,8,1) 0 ; N ! [D] Constant force, unit 4, axle 8, left side
F_REB_STOP_OFFSET(4,8,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,8,2) 0 ; N ! [D] Constant force, unit 4, axle 8, right side
F_REB_STOP_OFFSET(4,8,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,9,1) 0 ; N ! [D] Constant force, unit 4, axle 9, left side
F_REB_STOP_OFFSET(4,9,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,9,2) 0 ; N ! [D] Constant force, unit 4, axle 9, right side
F_REB_STOP_OFFSET(4,9,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,10,1) 0 ; N ! [D] Constant force, unit 4, axle 10, left side
F_REB_STOP_OFFSET(4,10,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,10,2) 0 ; N ! [D] Constant force, unit 4, axle 10, right side
F_REB_STOP_OFFSET(4,10,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,11,1) 0 ; N ! [D] Constant force, unit 4, axle 11, left side
F_REB_STOP_OFFSET(4,11,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,11,2) 0 ; N ! [D] Constant force, unit 4, axle 11, right side
F_REB_STOP_OFFSET(4,11,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,12,1) 0 ; N ! [D] Constant force, unit 4, axle 12, left side
F_REB_STOP_OFFSET(4,12,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,12,2) 0 ; N ! [D] Constant force, unit 4, axle 12, right side
F_REB_STOP_OFFSET(4,12,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,13,1) 0 ; N ! [D] Constant force, unit 4, axle 13, left side
F_REB_STOP_OFFSET(4,13,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,13,2) 0 ; N ! [D] Constant force, unit 4, axle 13, right side
F_REB_STOP_OFFSET(4,13,2) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,14,1) 0 ; N ! [D] Constant force, unit 4, axle 14, left side
F_REB_STOP_OFFSET(4,14,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(4,14,2) 0 ; N ! [D] Constant force, unit 4, axle 14, right side
F_REB_STOP_OFFSET(4,14,2) 0 ; N ! Offset added (after gain) to get force

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 47
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IUNIT and IAXLE are used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1,1) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 1
GEAR_ROT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get pitman arm angle

GEAR_ROT_COEFFICIENT(1,2) 0.04 ! Coefficient: pitman arm angle per unit steering
                               ! gear input angle (deg/deg), unit 1, axle 2
GEAR_ROT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 6 ; - ! Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.039191836
 0.1, 0.038803796
 0.2, 0.038423364
 0.3, 0.0380501
 0.4, 0.037680508
 0.5, 0.037289108
 0.6, 0.036749864
 0.7, 0.035593236
 0.8, 0.032392264
 0.9, 0.023418796
 0.95, 0.01436186
 0.99, 0.003409864
 1, 0
 1.01, -0.003409864
 1.05, -0.01436186
 1.1, -0.023418796
 1.2, -0.032392264
 1.3, -0.035593236
 1.4, -0.036749864
 1.5, -0.037289108
 1.6, -0.037680508
 1.7, -0.0380501
 1.8, -0.038423364
 1.9, -0.039191836
 2, -0.039191836
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                      ! converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 188 datasets; if indices shown
! below are not used, e.g., (1,1,1,2), the current values of the indices IUNIT,
! IAXLE, ISIDE, and ITIRE are used to identify the dataset when reading data.

KGAMMA_COEFFICIENT(1,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, left, inner
KGAMMA_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 1, right, inner
KGAMMA_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, left, inner
KGAMMA_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 2, right, inner
KGAMMA_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, inner
KGAMMA_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, left, outer
KGAMMA_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, inner
KGAMMA_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 3, right, outer
KGAMMA_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, left, inner
KGAMMA_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, left, outer
KGAMMA_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, right, inner
KGAMMA_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,4,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 4, right, outer
KGAMMA_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,4,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,4,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, left, inner
KGAMMA_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, left, outer
KGAMMA_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, right, inner
KGAMMA_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(1,5,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 1, axle 5, right, outer
KGAMMA_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,5,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,5,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, inner
KGAMMA_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, left, outer
KGAMMA_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, inner
KGAMMA_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 1, right, outer
KGAMMA_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, inner
KGAMMA_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, left, outer
KGAMMA_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, inner
KGAMMA_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 2, right, outer
KGAMMA_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, left, inner
KGAMMA_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, left, outer
KGAMMA_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, right, inner
KGAMMA_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 3, right, outer
KGAMMA_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,4,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 4, left, inner
KGAMMA_GAIN(2,4,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,4,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,4,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,4,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 4, left, outer
KGAMMA_GAIN(2,4,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,4,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,4,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,4,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 4, right, inner
KGAMMA_GAIN(2,4,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,4,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,4,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,4,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 4, right, outer
KGAMMA_GAIN(2,4,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,4,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,4,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,5,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 5, left, inner
KGAMMA_GAIN(2,5,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,5,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,5,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,5,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 5, left, outer
KGAMMA_GAIN(2,5,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,5,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,5,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,5,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 5, right, inner
KGAMMA_GAIN(2,5,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,5,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,5,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,5,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 5, right, outer
KGAMMA_GAIN(2,5,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,5,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,5,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,6,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 6, left, inner
KGAMMA_GAIN(2,6,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,6,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,6,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,6,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 6, left, outer
KGAMMA_GAIN(2,6,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,6,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,6,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,6,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 6, right, inner
KGAMMA_GAIN(2,6,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,6,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,6,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,6,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 6, right, outer
KGAMMA_GAIN(2,6,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,6,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,6,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,7,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 7, left, inner
KGAMMA_GAIN(2,7,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,7,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,7,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,7,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 7, left, outer
KGAMMA_GAIN(2,7,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,7,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,7,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,7,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 7, right, inner
KGAMMA_GAIN(2,7,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,7,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,7,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,7,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 7, right, outer
KGAMMA_GAIN(2,7,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,7,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,7,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,8,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 8, left, inner
KGAMMA_GAIN(2,8,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,8,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,8,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,8,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 8, left, outer
KGAMMA_GAIN(2,8,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,8,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,8,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,8,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 8, right, inner
KGAMMA_GAIN(2,8,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,8,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,8,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,8,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 8, right, outer
KGAMMA_GAIN(2,8,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,8,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,8,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,9,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 9, left, inner
KGAMMA_GAIN(2,9,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,9,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,9,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,9,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 9, left, outer
KGAMMA_GAIN(2,9,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,9,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,9,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,9,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 9, right, inner
KGAMMA_GAIN(2,9,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,9,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,9,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,9,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 2, axle 9, right, outer
KGAMMA_GAIN(2,9,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,9,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,9,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,10,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 10, left, inner
KGAMMA_GAIN(2,10,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,10,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,10,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,10,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 10, left, outer
KGAMMA_GAIN(2,10,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,10,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,10,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,10,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 10, right, inner
KGAMMA_GAIN(2,10,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,10,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,10,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,10,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 10, right, outer
KGAMMA_GAIN(2,10,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,10,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,10,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,11,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 11, left, inner
KGAMMA_GAIN(2,11,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,11,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,11,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,11,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 11, left, outer
KGAMMA_GAIN(2,11,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,11,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,11,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,11,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 11, right, inner
KGAMMA_GAIN(2,11,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,11,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,11,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,11,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 11, right, outer
KGAMMA_GAIN(2,11,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,11,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,11,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,12,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 12, left, inner
KGAMMA_GAIN(2,12,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,12,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,12,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,12,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 12, left, outer
KGAMMA_GAIN(2,12,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,12,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,12,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,12,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 12, right, inner
KGAMMA_GAIN(2,12,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,12,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,12,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,12,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 12, right, outer
KGAMMA_GAIN(2,12,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,12,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,12,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,13,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 13, left, inner
KGAMMA_GAIN(2,13,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,13,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,13,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,13,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 13, left, outer
KGAMMA_GAIN(2,13,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,13,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,13,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,13,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 13, right, inner
KGAMMA_GAIN(2,13,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,13,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,13,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,13,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 13, right, outer
KGAMMA_GAIN(2,13,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,13,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,13,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,14,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 14, left, inner
KGAMMA_GAIN(2,14,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,14,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,14,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,14,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 14, left, outer
KGAMMA_GAIN(2,14,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,14,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,14,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,14,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 14, right, inner
KGAMMA_GAIN(2,14,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,14,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,14,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(2,14,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 2, axle 14, right, outer
KGAMMA_GAIN(2,14,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,14,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,14,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, left, inner
KGAMMA_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, left, outer
KGAMMA_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, right, inner
KGAMMA_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 1, right, outer
KGAMMA_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, left, inner
KGAMMA_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, left, outer
KGAMMA_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, right, inner
KGAMMA_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 2, right, outer
KGAMMA_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, left, inner
KGAMMA_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, left, outer
KGAMMA_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, right, inner
KGAMMA_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 3, right, outer
KGAMMA_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,4,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 4, left, inner
KGAMMA_GAIN(3,4,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,4,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,4,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,4,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 4, left, outer
KGAMMA_GAIN(3,4,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,4,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,4,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,4,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 4, right, inner
KGAMMA_GAIN(3,4,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,4,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,4,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,4,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 4, right, outer
KGAMMA_GAIN(3,4,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,4,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,4,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,5,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 5, left, inner
KGAMMA_GAIN(3,5,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,5,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,5,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,5,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 5, left, outer
KGAMMA_GAIN(3,5,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,5,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,5,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,5,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 5, right, inner
KGAMMA_GAIN(3,5,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,5,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,5,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,5,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 5, right, outer
KGAMMA_GAIN(3,5,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,5,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,5,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,6,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 6, left, inner
KGAMMA_GAIN(3,6,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,6,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,6,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,6,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 6, left, outer
KGAMMA_GAIN(3,6,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,6,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,6,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,6,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 6, right, inner
KGAMMA_GAIN(3,6,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,6,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,6,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,6,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 6, right, outer
KGAMMA_GAIN(3,6,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,6,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,6,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,7,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 7, left, inner
KGAMMA_GAIN(3,7,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,7,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,7,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,7,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 7, left, outer
KGAMMA_GAIN(3,7,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,7,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,7,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,7,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 7, right, inner
KGAMMA_GAIN(3,7,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,7,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,7,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,7,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 7, right, outer
KGAMMA_GAIN(3,7,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,7,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,7,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,8,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 8, left, inner
KGAMMA_GAIN(3,8,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,8,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,8,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,8,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 8, left, outer
KGAMMA_GAIN(3,8,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,8,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,8,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,8,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 8, right, inner
KGAMMA_GAIN(3,8,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,8,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,8,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,8,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 8, right, outer
KGAMMA_GAIN(3,8,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,8,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,8,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,9,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 9, left, inner
KGAMMA_GAIN(3,9,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,9,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,9,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,9,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 9, left, outer
KGAMMA_GAIN(3,9,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,9,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,9,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,9,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 9, right, inner
KGAMMA_GAIN(3,9,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,9,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,9,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,9,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 3, axle 9, right, outer
KGAMMA_GAIN(3,9,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,9,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,9,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,10,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 10, left, inner
KGAMMA_GAIN(3,10,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,10,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,10,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,10,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 10, left, outer
KGAMMA_GAIN(3,10,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,10,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,10,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,10,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 10, right, inner
KGAMMA_GAIN(3,10,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,10,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,10,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,10,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 10, right, outer
KGAMMA_GAIN(3,10,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,10,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,10,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,11,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 11, left, inner
KGAMMA_GAIN(3,11,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,11,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,11,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,11,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 11, left, outer
KGAMMA_GAIN(3,11,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,11,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,11,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,11,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 11, right, inner
KGAMMA_GAIN(3,11,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,11,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,11,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,11,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 11, right, outer
KGAMMA_GAIN(3,11,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,11,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,11,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,12,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 12, left, inner
KGAMMA_GAIN(3,12,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,12,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,12,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,12,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 12, left, outer
KGAMMA_GAIN(3,12,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,12,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,12,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,12,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 12, right, inner
KGAMMA_GAIN(3,12,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,12,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,12,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,12,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 12, right, outer
KGAMMA_GAIN(3,12,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,12,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,12,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,13,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 13, left, inner
KGAMMA_GAIN(3,13,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,13,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,13,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,13,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 13, left, outer
KGAMMA_GAIN(3,13,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,13,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,13,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,13,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 13, right, inner
KGAMMA_GAIN(3,13,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,13,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,13,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,13,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 13, right, outer
KGAMMA_GAIN(3,13,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,13,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,13,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,14,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 14, left, inner
KGAMMA_GAIN(3,14,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,14,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,14,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,14,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 14, left, outer
KGAMMA_GAIN(3,14,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,14,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,14,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,14,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 14, right, inner
KGAMMA_GAIN(3,14,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,14,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,14,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(3,14,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 3, axle 14, right, outer
KGAMMA_GAIN(3,14,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(3,14,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(3,14,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, left, inner
KGAMMA_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, left, outer
KGAMMA_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, right, inner
KGAMMA_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,1,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 1, right, outer
KGAMMA_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,1,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,1,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, left, inner
KGAMMA_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, left, outer
KGAMMA_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, right, inner
KGAMMA_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,2,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 2, right, outer
KGAMMA_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,2,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,2,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,3,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 3, left, inner
KGAMMA_GAIN(4,3,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,3,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,3,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,3,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 3, left, outer
KGAMMA_GAIN(4,3,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,3,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,3,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,3,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 3, right, inner
KGAMMA_GAIN(4,3,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,3,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,3,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,3,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 3, right, outer
KGAMMA_GAIN(4,3,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,3,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,3,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,4,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 4, left, inner
KGAMMA_GAIN(4,4,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,4,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,4,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,4,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 4, left, outer
KGAMMA_GAIN(4,4,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,4,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,4,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,4,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 4, right, inner
KGAMMA_GAIN(4,4,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,4,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,4,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,4,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 4, right, outer
KGAMMA_GAIN(4,4,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,4,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,4,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,5,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 5, left, inner
KGAMMA_GAIN(4,5,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,5,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,5,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,5,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 5, left, outer
KGAMMA_GAIN(4,5,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,5,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,5,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,5,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 5, right, inner
KGAMMA_GAIN(4,5,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,5,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,5,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,5,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 5, right, outer
KGAMMA_GAIN(4,5,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,5,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,5,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,6,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 6, left, inner
KGAMMA_GAIN(4,6,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,6,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,6,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,6,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 6, left, outer
KGAMMA_GAIN(4,6,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,6,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,6,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,6,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 6, right, inner
KGAMMA_GAIN(4,6,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,6,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,6,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,6,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 6, right, outer
KGAMMA_GAIN(4,6,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,6,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,6,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,7,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 7, left, inner
KGAMMA_GAIN(4,7,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,7,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,7,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,7,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 7, left, outer
KGAMMA_GAIN(4,7,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,7,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,7,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,7,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 7, right, inner
KGAMMA_GAIN(4,7,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,7,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,7,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,7,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 7, right, outer
KGAMMA_GAIN(4,7,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,7,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,7,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,8,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 8, left, inner
KGAMMA_GAIN(4,8,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,8,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,8,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,8,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 8, left, outer
KGAMMA_GAIN(4,8,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,8,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,8,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,8,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 8, right, inner
KGAMMA_GAIN(4,8,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,8,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,8,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,8,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 8, right, outer
KGAMMA_GAIN(4,8,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,8,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,8,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,9,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 9, left, inner
KGAMMA_GAIN(4,9,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,9,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,9,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,9,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 9, left, outer
KGAMMA_GAIN(4,9,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,9,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,9,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,9,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 9, right, inner
KGAMMA_GAIN(4,9,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,9,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,9,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,9,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                  ! load (N/deg/N), unit 4, axle 9, right, outer
KGAMMA_GAIN(4,9,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,9,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,9,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,10,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 10, left, inner
KGAMMA_GAIN(4,10,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,10,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,10,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,10,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 10, left, outer
KGAMMA_GAIN(4,10,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,10,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,10,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,10,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 10, right, inner
KGAMMA_GAIN(4,10,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,10,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,10,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,10,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 10, right, outer
KGAMMA_GAIN(4,10,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,10,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,10,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,11,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 11, left, inner
KGAMMA_GAIN(4,11,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,11,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,11,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,11,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 11, left, outer
KGAMMA_GAIN(4,11,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,11,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,11,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,11,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 11, right, inner
KGAMMA_GAIN(4,11,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,11,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,11,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,11,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 11, right, outer
KGAMMA_GAIN(4,11,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,11,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,11,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,12,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 12, left, inner
KGAMMA_GAIN(4,12,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,12,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,12,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,12,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 12, left, outer
KGAMMA_GAIN(4,12,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,12,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,12,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,12,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 12, right, inner
KGAMMA_GAIN(4,12,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,12,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,12,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,12,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 12, right, outer
KGAMMA_GAIN(4,12,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,12,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,12,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,13,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 13, left, inner
KGAMMA_GAIN(4,13,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,13,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,13,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,13,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 13, left, outer
KGAMMA_GAIN(4,13,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,13,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,13,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,13,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 13, right, inner
KGAMMA_GAIN(4,13,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,13,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,13,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,13,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 13, right, outer
KGAMMA_GAIN(4,13,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,13,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,13,2,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,14,1,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 14, left, inner
KGAMMA_GAIN(4,14,1,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,14,1,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,14,1,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,14,1,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 14, left, outer
KGAMMA_GAIN(4,14,1,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,14,1,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,14,1,2) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,14,2,1) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 14, right, inner
KGAMMA_GAIN(4,14,2,1) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,14,2,1) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,14,2,1) 1 ! Scale factor divided into dynamic tire load

KGAMMA_COEFFICIENT(4,14,2,2) -0.01 ! Coefficient: dFy/dGamma per unit dynamic tire
                                   ! load (N/deg/N), unit 4, axle 14, right, outer
KGAMMA_GAIN(4,14,2,2) 1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(4,14,2,2) 0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(4,14,2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 1.65m Right, 0.75s Single Preview
LTARG_CONSTANT(1) -1.65 ; m ! Constant lateral offset
LTARG_GAIN(1)       1 ! Gain multiplied with calculated value to get lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 188
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_X_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! left, inner
L_CONTACT_X_OFFSET(1,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! left, outer
L_CONTACT_X_OFFSET(1,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! right, inner
L_CONTACT_X_OFFSET(1,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,4,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 4,
                                ! right, outer
L_CONTACT_X_OFFSET(1,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,1,1) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! left, inner
L_CONTACT_X_OFFSET(1,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,1,2) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! left, outer
L_CONTACT_X_OFFSET(1,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,2,1) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! right, inner
L_CONTACT_X_OFFSET(1,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(1,5,2,2) 0 ; mm ! Constant tire contact length, unit 1, axle 5,
                                ! right, outer
L_CONTACT_X_OFFSET(1,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(2,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(2,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(2,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,3,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(2,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,4,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 4,
                                ! left, inner
L_CONTACT_X_OFFSET(2,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,4,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 4,
                                ! left, outer
L_CONTACT_X_OFFSET(2,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,4,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 4,
                                ! right, inner
L_CONTACT_X_OFFSET(2,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,4,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 4,
                                ! right, outer
L_CONTACT_X_OFFSET(2,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,5,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 5,
                                ! left, inner
L_CONTACT_X_OFFSET(2,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,5,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 5,
                                ! left, outer
L_CONTACT_X_OFFSET(2,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,5,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 5,
                                ! right, inner
L_CONTACT_X_OFFSET(2,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,5,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 5,
                                ! right, outer
L_CONTACT_X_OFFSET(2,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,6,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 6,
                                ! left, inner
L_CONTACT_X_OFFSET(2,6,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,6,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 6,
                                ! left, outer
L_CONTACT_X_OFFSET(2,6,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,6,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 6,
                                ! right, inner
L_CONTACT_X_OFFSET(2,6,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,6,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 6,
                                ! right, outer
L_CONTACT_X_OFFSET(2,6,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,7,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 7,
                                ! left, inner
L_CONTACT_X_OFFSET(2,7,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,7,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 7,
                                ! left, outer
L_CONTACT_X_OFFSET(2,7,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,7,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 7,
                                ! right, inner
L_CONTACT_X_OFFSET(2,7,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,7,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 7,
                                ! right, outer
L_CONTACT_X_OFFSET(2,7,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,8,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 8,
                                ! left, inner
L_CONTACT_X_OFFSET(2,8,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,8,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 8,
                                ! left, outer
L_CONTACT_X_OFFSET(2,8,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,8,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 8,
                                ! right, inner
L_CONTACT_X_OFFSET(2,8,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,8,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 8,
                                ! right, outer
L_CONTACT_X_OFFSET(2,8,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,9,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle 9,
                                ! left, inner
L_CONTACT_X_OFFSET(2,9,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,9,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle 9,
                                ! left, outer
L_CONTACT_X_OFFSET(2,9,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,9,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle 9,
                                ! right, inner
L_CONTACT_X_OFFSET(2,9,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,9,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle 9,
                                ! right, outer
L_CONTACT_X_OFFSET(2,9,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(2,10,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 10, left, inner
L_CONTACT_X_OFFSET(2,10,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,10,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 10, left, outer
L_CONTACT_X_OFFSET(2,10,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,10,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 10, right, inner
L_CONTACT_X_OFFSET(2,10,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,10,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 10, right, outer
L_CONTACT_X_OFFSET(2,10,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,11,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 11, left, inner
L_CONTACT_X_OFFSET(2,11,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,11,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 11, left, outer
L_CONTACT_X_OFFSET(2,11,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,11,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 11, right, inner
L_CONTACT_X_OFFSET(2,11,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,11,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 11, right, outer
L_CONTACT_X_OFFSET(2,11,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,12,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 12, left, inner
L_CONTACT_X_OFFSET(2,12,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,12,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 12, left, outer
L_CONTACT_X_OFFSET(2,12,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,12,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 12, right, inner
L_CONTACT_X_OFFSET(2,12,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,12,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 12, right, outer
L_CONTACT_X_OFFSET(2,12,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,13,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 13, left, inner
L_CONTACT_X_OFFSET(2,13,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,13,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 13, left, outer
L_CONTACT_X_OFFSET(2,13,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,13,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 13, right, inner
L_CONTACT_X_OFFSET(2,13,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,13,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 13, right, outer
L_CONTACT_X_OFFSET(2,13,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,14,1,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 14, left, inner
L_CONTACT_X_OFFSET(2,14,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,14,1,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 14, left, outer
L_CONTACT_X_OFFSET(2,14,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,14,2,1) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 14, right, inner
L_CONTACT_X_OFFSET(2,14,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(2,14,2,2) 0 ; mm ! Constant tire contact length, unit 2, axle
                                 ! 14, right, outer
L_CONTACT_X_OFFSET(2,14,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,1,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(3,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,1,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(3,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(3,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,2,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(3,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(3,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(3,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(3,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,3,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(3,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,4,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 4,
                                ! left, inner
L_CONTACT_X_OFFSET(3,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,4,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 4,
                                ! left, outer
L_CONTACT_X_OFFSET(3,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,4,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 4,
                                ! right, inner
L_CONTACT_X_OFFSET(3,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,4,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 4,
                                ! right, outer
L_CONTACT_X_OFFSET(3,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,5,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 5,
                                ! left, inner
L_CONTACT_X_OFFSET(3,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,5,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 5,
                                ! left, outer
L_CONTACT_X_OFFSET(3,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,5,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 5,
                                ! right, inner
L_CONTACT_X_OFFSET(3,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,5,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 5,
                                ! right, outer
L_CONTACT_X_OFFSET(3,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,6,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 6,
                                ! left, inner
L_CONTACT_X_OFFSET(3,6,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,6,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 6,
                                ! left, outer
L_CONTACT_X_OFFSET(3,6,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,6,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 6,
                                ! right, inner
L_CONTACT_X_OFFSET(3,6,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,6,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 6,
                                ! right, outer
L_CONTACT_X_OFFSET(3,6,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,7,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 7,
                                ! left, inner
L_CONTACT_X_OFFSET(3,7,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,7,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 7,
                                ! left, outer
L_CONTACT_X_OFFSET(3,7,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,7,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 7,
                                ! right, inner
L_CONTACT_X_OFFSET(3,7,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,7,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 7,
                                ! right, outer
L_CONTACT_X_OFFSET(3,7,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,8,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 8,
                                ! left, inner
L_CONTACT_X_OFFSET(3,8,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,8,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 8,
                                ! left, outer
L_CONTACT_X_OFFSET(3,8,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,8,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 8,
                                ! right, inner
L_CONTACT_X_OFFSET(3,8,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,8,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 8,
                                ! right, outer
L_CONTACT_X_OFFSET(3,8,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,9,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle 9,
                                ! left, inner
L_CONTACT_X_OFFSET(3,9,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,9,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle 9,
                                ! left, outer
L_CONTACT_X_OFFSET(3,9,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,9,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle 9,
                                ! right, inner
L_CONTACT_X_OFFSET(3,9,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,9,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle 9,
                                ! right, outer
L_CONTACT_X_OFFSET(3,9,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(3,10,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 10, left, inner
L_CONTACT_X_OFFSET(3,10,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,10,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 10, left, outer
L_CONTACT_X_OFFSET(3,10,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,10,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 10, right, inner
L_CONTACT_X_OFFSET(3,10,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,10,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 10, right, outer
L_CONTACT_X_OFFSET(3,10,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,11,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 11, left, inner
L_CONTACT_X_OFFSET(3,11,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,11,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 11, left, outer
L_CONTACT_X_OFFSET(3,11,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,11,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 11, right, inner
L_CONTACT_X_OFFSET(3,11,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,11,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 11, right, outer
L_CONTACT_X_OFFSET(3,11,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,12,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 12, left, inner
L_CONTACT_X_OFFSET(3,12,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,12,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 12, left, outer
L_CONTACT_X_OFFSET(3,12,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,12,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 12, right, inner
L_CONTACT_X_OFFSET(3,12,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,12,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 12, right, outer
L_CONTACT_X_OFFSET(3,12,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,13,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 13, left, inner
L_CONTACT_X_OFFSET(3,13,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,13,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 13, left, outer
L_CONTACT_X_OFFSET(3,13,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,13,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 13, right, inner
L_CONTACT_X_OFFSET(3,13,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,13,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 13, right, outer
L_CONTACT_X_OFFSET(3,13,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,14,1,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 14, left, inner
L_CONTACT_X_OFFSET(3,14,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,14,1,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 14, left, outer
L_CONTACT_X_OFFSET(3,14,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,14,2,1) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 14, right, inner
L_CONTACT_X_OFFSET(3,14,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(3,14,2,2) 0 ; mm ! Constant tire contact length, unit 3, axle
                                 ! 14, right, outer
L_CONTACT_X_OFFSET(3,14,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,1,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! left, inner
L_CONTACT_X_OFFSET(4,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! left, outer
L_CONTACT_X_OFFSET(4,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! right, inner
L_CONTACT_X_OFFSET(4,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,1,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 1,
                                ! right, outer
L_CONTACT_X_OFFSET(4,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! left, inner
L_CONTACT_X_OFFSET(4,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! left, outer
L_CONTACT_X_OFFSET(4,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! right, inner
L_CONTACT_X_OFFSET(4,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,2,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 2,
                                ! right, outer
L_CONTACT_X_OFFSET(4,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,3,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 3,
                                ! left, inner
L_CONTACT_X_OFFSET(4,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,3,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 3,
                                ! left, outer
L_CONTACT_X_OFFSET(4,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,3,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 3,
                                ! right, inner
L_CONTACT_X_OFFSET(4,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,3,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 3,
                                ! right, outer
L_CONTACT_X_OFFSET(4,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,4,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 4,
                                ! left, inner
L_CONTACT_X_OFFSET(4,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,4,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 4,
                                ! left, outer
L_CONTACT_X_OFFSET(4,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,4,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 4,
                                ! right, inner
L_CONTACT_X_OFFSET(4,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,4,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 4,
                                ! right, outer
L_CONTACT_X_OFFSET(4,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,5,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 5,
                                ! left, inner
L_CONTACT_X_OFFSET(4,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,5,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 5,
                                ! left, outer
L_CONTACT_X_OFFSET(4,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,5,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 5,
                                ! right, inner
L_CONTACT_X_OFFSET(4,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,5,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 5,
                                ! right, outer
L_CONTACT_X_OFFSET(4,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,6,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 6,
                                ! left, inner
L_CONTACT_X_OFFSET(4,6,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,6,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 6,
                                ! left, outer
L_CONTACT_X_OFFSET(4,6,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,6,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 6,
                                ! right, inner
L_CONTACT_X_OFFSET(4,6,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,6,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 6,
                                ! right, outer
L_CONTACT_X_OFFSET(4,6,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,7,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 7,
                                ! left, inner
L_CONTACT_X_OFFSET(4,7,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,7,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 7,
                                ! left, outer
L_CONTACT_X_OFFSET(4,7,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,7,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 7,
                                ! right, inner
L_CONTACT_X_OFFSET(4,7,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,7,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 7,
                                ! right, outer
L_CONTACT_X_OFFSET(4,7,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,8,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 8,
                                ! left, inner
L_CONTACT_X_OFFSET(4,8,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,8,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 8,
                                ! left, outer
L_CONTACT_X_OFFSET(4,8,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,8,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 8,
                                ! right, inner
L_CONTACT_X_OFFSET(4,8,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,8,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 8,
                                ! right, outer
L_CONTACT_X_OFFSET(4,8,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,9,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle 9,
                                ! left, inner
L_CONTACT_X_OFFSET(4,9,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,9,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle 9,
                                ! left, outer
L_CONTACT_X_OFFSET(4,9,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,9,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle 9,
                                ! right, inner
L_CONTACT_X_OFFSET(4,9,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,9,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle 9,
                                ! right, outer
L_CONTACT_X_OFFSET(4,9,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! length

L_CONTACT_X_CONSTANT(4,10,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 10, left, inner
L_CONTACT_X_OFFSET(4,10,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,10,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 10, left, outer
L_CONTACT_X_OFFSET(4,10,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,10,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 10, right, inner
L_CONTACT_X_OFFSET(4,10,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,10,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 10, right, outer
L_CONTACT_X_OFFSET(4,10,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,11,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 11, left, inner
L_CONTACT_X_OFFSET(4,11,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,11,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 11, left, outer
L_CONTACT_X_OFFSET(4,11,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,11,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 11, right, inner
L_CONTACT_X_OFFSET(4,11,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,11,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 11, right, outer
L_CONTACT_X_OFFSET(4,11,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,12,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 12, left, inner
L_CONTACT_X_OFFSET(4,12,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,12,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 12, left, outer
L_CONTACT_X_OFFSET(4,12,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,12,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 12, right, inner
L_CONTACT_X_OFFSET(4,12,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,12,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 12, right, outer
L_CONTACT_X_OFFSET(4,12,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,13,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 13, left, inner
L_CONTACT_X_OFFSET(4,13,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,13,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 13, left, outer
L_CONTACT_X_OFFSET(4,13,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,13,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 13, right, inner
L_CONTACT_X_OFFSET(4,13,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,13,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 13, right, outer
L_CONTACT_X_OFFSET(4,13,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,14,1,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 14, left, inner
L_CONTACT_X_OFFSET(4,14,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,14,1,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 14, left, outer
L_CONTACT_X_OFFSET(4,14,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,14,2,1) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 14, right, inner
L_CONTACT_X_OFFSET(4,14,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

L_CONTACT_X_CONSTANT(4,14,2,2) 0 ; mm ! Constant tire contact length, unit 4, axle
                                 ! 14, right, outer
L_CONTACT_X_OFFSET(4,14,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 188
! datasets; if indices shown below are not used, e.g., (1,1,1,2), the current values
! of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.

L_CONTACT_Y_CONSTANT(1,1,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,1,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,2,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,3,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,4,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 4,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,1,1) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! left, inner
L_CONTACT_Y_OFFSET(1,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,1,2) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! left, outer
L_CONTACT_Y_OFFSET(1,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,2,1) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! right, inner
L_CONTACT_Y_OFFSET(1,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(1,5,2,2) 0 ; mm ! Constant tire contact width, unit 1, axle 5,
                                ! right, outer
L_CONTACT_Y_OFFSET(1,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,1,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,2,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,3,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,4,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 4,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,4,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 4,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,4,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 4,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,4,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 4,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,5,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 5,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,5,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 5,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,5,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 5,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,5,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 5,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,6,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 6,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,6,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,6,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 6,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,6,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,6,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 6,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,6,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,6,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 6,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,6,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,7,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 7,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,7,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,7,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 7,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,7,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,7,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 7,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,7,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,7,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 7,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,7,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,8,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 8,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,8,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,8,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 8,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,8,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,8,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 8,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,8,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,8,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 8,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,8,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,9,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle 9,
                                ! left, inner
L_CONTACT_Y_OFFSET(2,9,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,9,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle 9,
                                ! left, outer
L_CONTACT_Y_OFFSET(2,9,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,9,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle 9,
                                ! right, inner
L_CONTACT_Y_OFFSET(2,9,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,9,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle 9,
                                ! right, outer
L_CONTACT_Y_OFFSET(2,9,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(2,10,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 10, left, inner
L_CONTACT_Y_OFFSET(2,10,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,10,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 10, left, outer
L_CONTACT_Y_OFFSET(2,10,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,10,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 10, right, inner
L_CONTACT_Y_OFFSET(2,10,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,10,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 10, right, outer
L_CONTACT_Y_OFFSET(2,10,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,11,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 11, left, inner
L_CONTACT_Y_OFFSET(2,11,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,11,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 11, left, outer
L_CONTACT_Y_OFFSET(2,11,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,11,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 11, right, inner
L_CONTACT_Y_OFFSET(2,11,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,11,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 11, right, outer
L_CONTACT_Y_OFFSET(2,11,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,12,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 12, left, inner
L_CONTACT_Y_OFFSET(2,12,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,12,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 12, left, outer
L_CONTACT_Y_OFFSET(2,12,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,12,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 12, right, inner
L_CONTACT_Y_OFFSET(2,12,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,12,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 12, right, outer
L_CONTACT_Y_OFFSET(2,12,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,13,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 13, left, inner
L_CONTACT_Y_OFFSET(2,13,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,13,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 13, left, outer
L_CONTACT_Y_OFFSET(2,13,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,13,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 13, right, inner
L_CONTACT_Y_OFFSET(2,13,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,13,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 13, right, outer
L_CONTACT_Y_OFFSET(2,13,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,14,1,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 14, left, inner
L_CONTACT_Y_OFFSET(2,14,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,14,1,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 14, left, outer
L_CONTACT_Y_OFFSET(2,14,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,14,2,1) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 14, right, inner
L_CONTACT_Y_OFFSET(2,14,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(2,14,2,2) 0 ; mm ! Constant tire contact width, unit 2, axle
                                 ! 14, right, outer
L_CONTACT_Y_OFFSET(2,14,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,1,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,1,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,2,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,3,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,4,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 4,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,4,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 4,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,4,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 4,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,4,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 4,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,5,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 5,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,5,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 5,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,5,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 5,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,5,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 5,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,6,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 6,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,6,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,6,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 6,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,6,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,6,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 6,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,6,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,6,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 6,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,6,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,7,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 7,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,7,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,7,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 7,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,7,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,7,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 7,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,7,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,7,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 7,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,7,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,8,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 8,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,8,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,8,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 8,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,8,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,8,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 8,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,8,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,8,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 8,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,8,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,9,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle 9,
                                ! left, inner
L_CONTACT_Y_OFFSET(3,9,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,9,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle 9,
                                ! left, outer
L_CONTACT_Y_OFFSET(3,9,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,9,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle 9,
                                ! right, inner
L_CONTACT_Y_OFFSET(3,9,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,9,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle 9,
                                ! right, outer
L_CONTACT_Y_OFFSET(3,9,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(3,10,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 10, left, inner
L_CONTACT_Y_OFFSET(3,10,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,10,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 10, left, outer
L_CONTACT_Y_OFFSET(3,10,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,10,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 10, right, inner
L_CONTACT_Y_OFFSET(3,10,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,10,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 10, right, outer
L_CONTACT_Y_OFFSET(3,10,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,11,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 11, left, inner
L_CONTACT_Y_OFFSET(3,11,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,11,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 11, left, outer
L_CONTACT_Y_OFFSET(3,11,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,11,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 11, right, inner
L_CONTACT_Y_OFFSET(3,11,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,11,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 11, right, outer
L_CONTACT_Y_OFFSET(3,11,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,12,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 12, left, inner
L_CONTACT_Y_OFFSET(3,12,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,12,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 12, left, outer
L_CONTACT_Y_OFFSET(3,12,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,12,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 12, right, inner
L_CONTACT_Y_OFFSET(3,12,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,12,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 12, right, outer
L_CONTACT_Y_OFFSET(3,12,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,13,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 13, left, inner
L_CONTACT_Y_OFFSET(3,13,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,13,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 13, left, outer
L_CONTACT_Y_OFFSET(3,13,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,13,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 13, right, inner
L_CONTACT_Y_OFFSET(3,13,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,13,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 13, right, outer
L_CONTACT_Y_OFFSET(3,13,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,14,1,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 14, left, inner
L_CONTACT_Y_OFFSET(3,14,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,14,1,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 14, left, outer
L_CONTACT_Y_OFFSET(3,14,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,14,2,1) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 14, right, inner
L_CONTACT_Y_OFFSET(3,14,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(3,14,2,2) 0 ; mm ! Constant tire contact width, unit 3, axle
                                 ! 14, right, outer
L_CONTACT_Y_OFFSET(3,14,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,1,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,1,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,1,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,1,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,1,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 1,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,1,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,2,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,2,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,2,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,2,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 2,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,2,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,3,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 3,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,3,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,3,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 3,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,3,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,3,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 3,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,3,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,3,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 3,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,3,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,4,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 4,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,4,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,4,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 4,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,4,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,4,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 4,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,4,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,4,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 4,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,4,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,5,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 5,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,5,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,5,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 5,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,5,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,5,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 5,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,5,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,5,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 5,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,5,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,6,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 6,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,6,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,6,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 6,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,6,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,6,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 6,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,6,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,6,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 6,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,6,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,7,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 7,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,7,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,7,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 7,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,7,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,7,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 7,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,7,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,7,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 7,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,7,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,8,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 8,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,8,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,8,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 8,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,8,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,8,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 8,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,8,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,8,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 8,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,8,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,9,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle 9,
                                ! left, inner
L_CONTACT_Y_OFFSET(4,9,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,9,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle 9,
                                ! left, outer
L_CONTACT_Y_OFFSET(4,9,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,9,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle 9,
                                ! right, inner
L_CONTACT_Y_OFFSET(4,9,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,9,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle 9,
                                ! right, outer
L_CONTACT_Y_OFFSET(4,9,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                              ! width

L_CONTACT_Y_CONSTANT(4,10,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 10, left, inner
L_CONTACT_Y_OFFSET(4,10,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,10,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 10, left, outer
L_CONTACT_Y_OFFSET(4,10,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,10,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 10, right, inner
L_CONTACT_Y_OFFSET(4,10,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,10,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 10, right, outer
L_CONTACT_Y_OFFSET(4,10,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,11,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 11, left, inner
L_CONTACT_Y_OFFSET(4,11,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,11,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 11, left, outer
L_CONTACT_Y_OFFSET(4,11,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,11,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 11, right, inner
L_CONTACT_Y_OFFSET(4,11,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,11,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 11, right, outer
L_CONTACT_Y_OFFSET(4,11,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,12,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 12, left, inner
L_CONTACT_Y_OFFSET(4,12,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,12,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 12, left, outer
L_CONTACT_Y_OFFSET(4,12,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,12,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 12, right, inner
L_CONTACT_Y_OFFSET(4,12,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,12,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 12, right, outer
L_CONTACT_Y_OFFSET(4,12,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,13,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 13, left, inner
L_CONTACT_Y_OFFSET(4,13,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,13,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 13, left, outer
L_CONTACT_Y_OFFSET(4,13,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,13,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 13, right, inner
L_CONTACT_Y_OFFSET(4,13,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,13,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 13, right, outer
L_CONTACT_Y_OFFSET(4,13,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,14,1,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 14, left, inner
L_CONTACT_Y_OFFSET(4,14,1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,14,1,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 14, left, outer
L_CONTACT_Y_OFFSET(4,14,1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,14,2,1) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 14, right, inner
L_CONTACT_Y_OFFSET(4,14,2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

L_CONTACT_Y_CONSTANT(4,14,2,2) 0 ; mm ! Constant tire contact width, unit 4, axle
                                 ! 14, right, outer
L_CONTACT_Y_OFFSET(4,14,2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                               ! width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_X from the calculation can be adjusted with
! L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the calculation can be
! adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_X. This configurable function supports 188 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_X_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,1,1) LINEAR ! unit 1, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1,2,1) LINEAR ! unit 1, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,1,1) LINEAR ! unit 1, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2,2,1) LINEAR ! unit 1, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,1) LINEAR ! unit 1, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,1,2) LINEAR ! unit 1, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,1) LINEAR ! unit 1, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,3,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,3,2,2) LINEAR ! unit 1, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,1,1) SPLINE_FLAT ! unit 1, axle 4, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,1,1) LINEAR ! unit 1, axle 4, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,1,2) SPLINE_FLAT ! unit 1, axle 4, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,1,2) LINEAR ! unit 1, axle 4, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,2,1) SPLINE_FLAT ! unit 1, axle 4, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,2,1) LINEAR ! unit 1, axle 4, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,4,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,4,2,2) SPLINE_FLAT ! unit 1, axle 4, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,4,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,4,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,4,2,2) LINEAR ! unit 1, axle 4, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,1,1) SPLINE_FLAT ! unit 1, axle 5, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,1,1) LINEAR ! unit 1, axle 5, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,1,2) SPLINE_FLAT ! unit 1, axle 5, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,1,2) LINEAR ! unit 1, axle 5, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,2,1) SPLINE_FLAT ! unit 1, axle 5, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,2,1) LINEAR ! unit 1, axle 5, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,5,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,5,2,2) SPLINE_FLAT ! unit 1, axle 5, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,5,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(1,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,5,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,5,2,2) LINEAR ! unit 1, axle 5, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,1) LINEAR ! unit 2, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,1,2) LINEAR ! unit 2, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,1) LINEAR ! unit 2, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1,2,2) LINEAR ! unit 2, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,1) LINEAR ! unit 2, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,1,2) LINEAR ! unit 2, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,1) LINEAR ! unit 2, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2,2,2) LINEAR ! unit 2, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,1,1) SPLINE_FLAT ! unit 2, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,1,1) LINEAR ! unit 2, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,1,2) SPLINE_FLAT ! unit 2, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,1,2) LINEAR ! unit 2, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,2,1) SPLINE_FLAT ! unit 2, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,2,1) LINEAR ! unit 2, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,3,2,2) SPLINE_FLAT ! unit 2, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,3,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,3,2,2) LINEAR ! unit 2, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,4,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,4,1,1) SPLINE_FLAT ! unit 2, axle 4, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,4,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,4,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,4,1,1) LINEAR ! unit 2, axle 4, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,4,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,4,1,2) SPLINE_FLAT ! unit 2, axle 4, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,4,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,4,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,4,1,2) LINEAR ! unit 2, axle 4, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,4,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,4,2,1) SPLINE_FLAT ! unit 2, axle 4, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,4,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,4,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,4,2,1) LINEAR ! unit 2, axle 4, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,4,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,4,2,2) SPLINE_FLAT ! unit 2, axle 4, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,4,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,4,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,4,2,2) LINEAR ! unit 2, axle 4, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,5,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,5,1,1) SPLINE_FLAT ! unit 2, axle 5, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,5,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,5,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,5,1,1) LINEAR ! unit 2, axle 5, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,5,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,5,1,2) SPLINE_FLAT ! unit 2, axle 5, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,5,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,5,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,5,1,2) LINEAR ! unit 2, axle 5, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,5,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,5,2,1) SPLINE_FLAT ! unit 2, axle 5, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,5,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,5,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,5,2,1) LINEAR ! unit 2, axle 5, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,5,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,5,2,2) SPLINE_FLAT ! unit 2, axle 5, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,5,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,5,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,5,2,2) LINEAR ! unit 2, axle 5, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,6,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,6,1,1) SPLINE_FLAT ! unit 2, axle 6, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,6,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,6,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,6,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,6,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,6,1,1) LINEAR ! unit 2, axle 6, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,6,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,6,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,6,1,2) SPLINE_FLAT ! unit 2, axle 6, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,6,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,6,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,6,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,6,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,6,1,2) LINEAR ! unit 2, axle 6, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,6,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,6,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,6,2,1) SPLINE_FLAT ! unit 2, axle 6, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,6,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,6,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,6,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,6,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,6,2,1) LINEAR ! unit 2, axle 6, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,6,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,6,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,6,2,2) SPLINE_FLAT ! unit 2, axle 6, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,6,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,6,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,6,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,6,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,6,2,2) LINEAR ! unit 2, axle 6, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,6,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,7,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,7,1,1) SPLINE_FLAT ! unit 2, axle 7, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,7,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,7,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,7,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,7,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,7,1,1) LINEAR ! unit 2, axle 7, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,7,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,7,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,7,1,2) SPLINE_FLAT ! unit 2, axle 7, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,7,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,7,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,7,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,7,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,7,1,2) LINEAR ! unit 2, axle 7, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,7,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,7,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,7,2,1) SPLINE_FLAT ! unit 2, axle 7, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,7,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,7,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,7,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,7,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,7,2,1) LINEAR ! unit 2, axle 7, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,7,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,7,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,7,2,2) SPLINE_FLAT ! unit 2, axle 7, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,7,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,7,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,7,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,7,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,7,2,2) LINEAR ! unit 2, axle 7, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,7,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,8,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,8,1,1) SPLINE_FLAT ! unit 2, axle 8, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,8,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,8,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,8,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,8,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,8,1,1) LINEAR ! unit 2, axle 8, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,8,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,8,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,8,1,2) SPLINE_FLAT ! unit 2, axle 8, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,8,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,8,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,8,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,8,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,8,1,2) LINEAR ! unit 2, axle 8, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,8,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,8,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,8,2,1) SPLINE_FLAT ! unit 2, axle 8, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,8,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,8,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,8,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,8,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,8,2,1) LINEAR ! unit 2, axle 8, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,8,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,8,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,8,2,2) SPLINE_FLAT ! unit 2, axle 8, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,8,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,8,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,8,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,8,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,8,2,2) LINEAR ! unit 2, axle 8, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,8,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,9,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,9,1,1) SPLINE_FLAT ! unit 2, axle 9, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,9,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,9,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,9,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,9,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,9,1,1) LINEAR ! unit 2, axle 9, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,9,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,9,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,9,1,2) SPLINE_FLAT ! unit 2, axle 9, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,9,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,9,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,9,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,9,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,9,1,2) LINEAR ! unit 2, axle 9, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,9,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,9,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,9,2,1) SPLINE_FLAT ! unit 2, axle 9, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,9,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,9,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,9,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,9,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,9,2,1) LINEAR ! unit 2, axle 9, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,9,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,9,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,9,2,2) SPLINE_FLAT ! unit 2, axle 9, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,9,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(2,9,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,9,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,9,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,9,2,2) LINEAR ! unit 2, axle 9, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,9,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,10,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,10,1,1) SPLINE_FLAT ! unit 2, axle 10, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,10,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,10,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,10,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,10,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,10,1,1) LINEAR ! unit 2, axle 10, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,10,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,10,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,10,1,2) SPLINE_FLAT ! unit 2, axle 10, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,10,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,10,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,10,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,10,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,10,1,2) LINEAR ! unit 2, axle 10, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,10,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,10,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,10,2,1) SPLINE_FLAT ! unit 2, axle 10, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,10,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,10,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,10,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,10,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,10,2,1) LINEAR ! unit 2, axle 10, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,10,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,10,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,10,2,2) SPLINE_FLAT ! unit 2, axle 10, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,10,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,10,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,10,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,10,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,10,2,2) LINEAR ! unit 2, axle 10, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,10,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,11,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,11,1,1) SPLINE_FLAT ! unit 2, axle 11, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,11,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,11,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,11,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,11,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,11,1,1) LINEAR ! unit 2, axle 11, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,11,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,11,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,11,1,2) SPLINE_FLAT ! unit 2, axle 11, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,11,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,11,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,11,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,11,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,11,1,2) LINEAR ! unit 2, axle 11, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,11,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,11,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,11,2,1) SPLINE_FLAT ! unit 2, axle 11, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,11,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,11,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,11,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,11,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,11,2,1) LINEAR ! unit 2, axle 11, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,11,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,11,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,11,2,2) SPLINE_FLAT ! unit 2, axle 11, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,11,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,11,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,11,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,11,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,11,2,2) LINEAR ! unit 2, axle 11, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,11,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,12,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,12,1,1) SPLINE_FLAT ! unit 2, axle 12, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,12,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,12,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,12,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,12,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,12,1,1) LINEAR ! unit 2, axle 12, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,12,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,12,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,12,1,2) SPLINE_FLAT ! unit 2, axle 12, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,12,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,12,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,12,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,12,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,12,1,2) LINEAR ! unit 2, axle 12, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,12,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,12,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,12,2,1) SPLINE_FLAT ! unit 2, axle 12, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,12,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,12,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,12,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,12,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,12,2,1) LINEAR ! unit 2, axle 12, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,12,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,12,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,12,2,2) SPLINE_FLAT ! unit 2, axle 12, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,12,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,12,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,12,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,12,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,12,2,2) LINEAR ! unit 2, axle 12, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,12,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,13,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,13,1,1) SPLINE_FLAT ! unit 2, axle 13, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,13,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,13,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,13,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,13,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,13,1,1) LINEAR ! unit 2, axle 13, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,13,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,13,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,13,1,2) SPLINE_FLAT ! unit 2, axle 13, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,13,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,13,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,13,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,13,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,13,1,2) LINEAR ! unit 2, axle 13, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,13,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,13,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,13,2,1) SPLINE_FLAT ! unit 2, axle 13, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,13,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,13,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,13,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,13,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,13,2,1) LINEAR ! unit 2, axle 13, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,13,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,13,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,13,2,2) SPLINE_FLAT ! unit 2, axle 13, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,13,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,13,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,13,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,13,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,13,2,2) LINEAR ! unit 2, axle 13, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,13,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,14,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,14,1,1) SPLINE_FLAT ! unit 2, axle 14, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,14,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,14,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,14,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,14,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,14,1,1) LINEAR ! unit 2, axle 14, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,14,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,14,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,14,1,2) SPLINE_FLAT ! unit 2, axle 14, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,14,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,14,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,14,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,14,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,14,1,2) LINEAR ! unit 2, axle 14, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,14,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,14,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,14,2,1) SPLINE_FLAT ! unit 2, axle 14, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,14,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,14,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,14,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,14,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,14,2,1) LINEAR ! unit 2, axle 14, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,14,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,14,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,14,2,2) SPLINE_FLAT ! unit 2, axle 14, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,14,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(2,14,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,14,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,14,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,14,2,2) LINEAR ! unit 2, axle 14, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,14,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1,1) LINEAR ! unit 3, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,1,2) SPLINE_FLAT ! unit 3, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,1,2) LINEAR ! unit 3, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2,1) LINEAR ! unit 3, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,1,2,2) SPLINE_FLAT ! unit 3, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,1,2,2) LINEAR ! unit 3, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,1) LINEAR ! unit 3, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,1,2) SPLINE_FLAT ! unit 3, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,1,2) LINEAR ! unit 3, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,1) LINEAR ! unit 3, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,2,2,2) SPLINE_FLAT ! unit 3, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,2,2,2) LINEAR ! unit 3, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,1,1) SPLINE_FLAT ! unit 3, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,1,1) LINEAR ! unit 3, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,1,2) SPLINE_FLAT ! unit 3, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,1,2) LINEAR ! unit 3, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,2,1) SPLINE_FLAT ! unit 3, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,2,1) LINEAR ! unit 3, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,3,2,2) SPLINE_FLAT ! unit 3, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,3,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,3,2,2) LINEAR ! unit 3, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,4,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,4,1,1) SPLINE_FLAT ! unit 3, axle 4, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,4,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,4,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,4,1,1) LINEAR ! unit 3, axle 4, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,4,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,4,1,2) SPLINE_FLAT ! unit 3, axle 4, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,4,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,4,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,4,1,2) LINEAR ! unit 3, axle 4, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,4,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,4,2,1) SPLINE_FLAT ! unit 3, axle 4, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,4,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,4,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,4,2,1) LINEAR ! unit 3, axle 4, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,4,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,4,2,2) SPLINE_FLAT ! unit 3, axle 4, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,4,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,4,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,4,2,2) LINEAR ! unit 3, axle 4, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,5,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,5,1,1) SPLINE_FLAT ! unit 3, axle 5, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,5,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,5,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,5,1,1) LINEAR ! unit 3, axle 5, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,5,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,5,1,2) SPLINE_FLAT ! unit 3, axle 5, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,5,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,5,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,5,1,2) LINEAR ! unit 3, axle 5, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,5,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,5,2,1) SPLINE_FLAT ! unit 3, axle 5, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,5,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,5,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,5,2,1) LINEAR ! unit 3, axle 5, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,5,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,5,2,2) SPLINE_FLAT ! unit 3, axle 5, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,5,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,5,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,5,2,2) LINEAR ! unit 3, axle 5, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,6,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,6,1,1) SPLINE_FLAT ! unit 3, axle 6, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,6,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,6,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,6,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,6,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,6,1,1) LINEAR ! unit 3, axle 6, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,6,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,6,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,6,1,2) SPLINE_FLAT ! unit 3, axle 6, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,6,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,6,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,6,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,6,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,6,1,2) LINEAR ! unit 3, axle 6, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,6,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,6,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,6,2,1) SPLINE_FLAT ! unit 3, axle 6, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,6,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,6,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,6,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,6,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,6,2,1) LINEAR ! unit 3, axle 6, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,6,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,6,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,6,2,2) SPLINE_FLAT ! unit 3, axle 6, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,6,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,6,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,6,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,6,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,6,2,2) LINEAR ! unit 3, axle 6, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,6,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,7,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,7,1,1) SPLINE_FLAT ! unit 3, axle 7, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,7,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,7,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,7,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,7,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,7,1,1) LINEAR ! unit 3, axle 7, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,7,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,7,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,7,1,2) SPLINE_FLAT ! unit 3, axle 7, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,7,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,7,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,7,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,7,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,7,1,2) LINEAR ! unit 3, axle 7, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,7,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,7,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,7,2,1) SPLINE_FLAT ! unit 3, axle 7, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,7,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,7,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,7,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,7,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,7,2,1) LINEAR ! unit 3, axle 7, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,7,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,7,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,7,2,2) SPLINE_FLAT ! unit 3, axle 7, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,7,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,7,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,7,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,7,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,7,2,2) LINEAR ! unit 3, axle 7, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,7,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,8,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,8,1,1) SPLINE_FLAT ! unit 3, axle 8, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,8,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,8,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,8,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,8,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,8,1,1) LINEAR ! unit 3, axle 8, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,8,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,8,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,8,1,2) SPLINE_FLAT ! unit 3, axle 8, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,8,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,8,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,8,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,8,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,8,1,2) LINEAR ! unit 3, axle 8, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,8,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,8,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,8,2,1) SPLINE_FLAT ! unit 3, axle 8, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,8,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,8,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,8,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,8,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,8,2,1) LINEAR ! unit 3, axle 8, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,8,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,8,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,8,2,2) SPLINE_FLAT ! unit 3, axle 8, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,8,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,8,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,8,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,8,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,8,2,2) LINEAR ! unit 3, axle 8, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,8,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,9,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,9,1,1) SPLINE_FLAT ! unit 3, axle 9, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,9,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,9,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,9,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,9,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,9,1,1) LINEAR ! unit 3, axle 9, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,9,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,9,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,9,1,2) SPLINE_FLAT ! unit 3, axle 9, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,9,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,9,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,9,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,9,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,9,1,2) LINEAR ! unit 3, axle 9, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,9,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,9,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,9,2,1) SPLINE_FLAT ! unit 3, axle 9, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,9,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,9,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,9,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,9,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,9,2,1) LINEAR ! unit 3, axle 9, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,9,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,9,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,9,2,2) SPLINE_FLAT ! unit 3, axle 9, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,9,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(3,9,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,9,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,9,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,9,2,2) LINEAR ! unit 3, axle 9, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,9,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,10,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,10,1,1) SPLINE_FLAT ! unit 3, axle 10, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,10,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,10,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,10,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,10,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,10,1,1) LINEAR ! unit 3, axle 10, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,10,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,10,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,10,1,2) SPLINE_FLAT ! unit 3, axle 10, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,10,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,10,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,10,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,10,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,10,1,2) LINEAR ! unit 3, axle 10, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,10,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,10,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,10,2,1) SPLINE_FLAT ! unit 3, axle 10, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,10,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,10,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,10,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,10,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,10,2,1) LINEAR ! unit 3, axle 10, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,10,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,10,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,10,2,2) SPLINE_FLAT ! unit 3, axle 10, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,10,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,10,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,10,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,10,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,10,2,2) LINEAR ! unit 3, axle 10, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,10,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,11,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,11,1,1) SPLINE_FLAT ! unit 3, axle 11, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,11,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,11,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,11,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,11,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,11,1,1) LINEAR ! unit 3, axle 11, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,11,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,11,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,11,1,2) SPLINE_FLAT ! unit 3, axle 11, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,11,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,11,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,11,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,11,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,11,1,2) LINEAR ! unit 3, axle 11, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,11,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,11,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,11,2,1) SPLINE_FLAT ! unit 3, axle 11, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,11,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,11,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,11,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,11,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,11,2,1) LINEAR ! unit 3, axle 11, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,11,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,11,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,11,2,2) SPLINE_FLAT ! unit 3, axle 11, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,11,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,11,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,11,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,11,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,11,2,2) LINEAR ! unit 3, axle 11, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,11,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,12,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,12,1,1) SPLINE_FLAT ! unit 3, axle 12, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,12,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,12,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,12,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,12,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,12,1,1) LINEAR ! unit 3, axle 12, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,12,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,12,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,12,1,2) SPLINE_FLAT ! unit 3, axle 12, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,12,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,12,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,12,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,12,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,12,1,2) LINEAR ! unit 3, axle 12, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,12,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,12,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,12,2,1) SPLINE_FLAT ! unit 3, axle 12, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,12,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,12,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,12,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,12,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,12,2,1) LINEAR ! unit 3, axle 12, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,12,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,12,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,12,2,2) SPLINE_FLAT ! unit 3, axle 12, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,12,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,12,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,12,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,12,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,12,2,2) LINEAR ! unit 3, axle 12, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,12,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,13,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,13,1,1) SPLINE_FLAT ! unit 3, axle 13, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,13,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,13,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,13,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,13,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,13,1,1) LINEAR ! unit 3, axle 13, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,13,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,13,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,13,1,2) SPLINE_FLAT ! unit 3, axle 13, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,13,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,13,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,13,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,13,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,13,1,2) LINEAR ! unit 3, axle 13, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,13,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,13,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,13,2,1) SPLINE_FLAT ! unit 3, axle 13, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,13,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,13,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,13,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,13,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,13,2,1) LINEAR ! unit 3, axle 13, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,13,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,13,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,13,2,2) SPLINE_FLAT ! unit 3, axle 13, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,13,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,13,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,13,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,13,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,13,2,2) LINEAR ! unit 3, axle 13, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,13,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,14,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,14,1,1) SPLINE_FLAT ! unit 3, axle 14, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,14,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,14,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,14,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,14,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,14,1,1) LINEAR ! unit 3, axle 14, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,14,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,14,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,14,1,2) SPLINE_FLAT ! unit 3, axle 14, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,14,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,14,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,14,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,14,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,14,1,2) LINEAR ! unit 3, axle 14, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,14,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,14,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,14,2,1) SPLINE_FLAT ! unit 3, axle 14, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,14,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,14,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,14,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,14,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,14,2,1) LINEAR ! unit 3, axle 14, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,14,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(3,14,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(3,14,2,2) SPLINE_FLAT ! unit 3, axle 14, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(3,14,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(3,14,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(3,14,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(3,14,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(3,14,2,2) LINEAR ! unit 3, axle 14, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(3,14,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,1,1) SPLINE_FLAT ! unit 4, axle 1, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,1,1) LINEAR ! unit 4, axle 1, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,1,2) SPLINE_FLAT ! unit 4, axle 1, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,1,2) LINEAR ! unit 4, axle 1, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,2,1) SPLINE_FLAT ! unit 4, axle 1, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,2,1) LINEAR ! unit 4, axle 1, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,1,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,1,2,2) SPLINE_FLAT ! unit 4, axle 1, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,1,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,1,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,1,2,2) LINEAR ! unit 4, axle 1, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,1,1) SPLINE_FLAT ! unit 4, axle 2, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,1,1) LINEAR ! unit 4, axle 2, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,1,2) SPLINE_FLAT ! unit 4, axle 2, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,1,2) LINEAR ! unit 4, axle 2, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,2,1) SPLINE_FLAT ! unit 4, axle 2, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,2,1) LINEAR ! unit 4, axle 2, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,2,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,2,2,2) SPLINE_FLAT ! unit 4, axle 2, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,2,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,2,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,2,2,2) LINEAR ! unit 4, axle 2, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,3,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,3,1,1) SPLINE_FLAT ! unit 4, axle 3, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,3,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,3,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,3,1,1) LINEAR ! unit 4, axle 3, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,3,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,3,1,2) SPLINE_FLAT ! unit 4, axle 3, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,3,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,3,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,3,1,2) LINEAR ! unit 4, axle 3, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,3,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,3,2,1) SPLINE_FLAT ! unit 4, axle 3, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,3,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,3,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,3,2,1) LINEAR ! unit 4, axle 3, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,3,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,3,2,2) SPLINE_FLAT ! unit 4, axle 3, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,3,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,3,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,3,2,2) LINEAR ! unit 4, axle 3, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,4,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,4,1,1) SPLINE_FLAT ! unit 4, axle 4, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,4,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,4,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,4,1,1) LINEAR ! unit 4, axle 4, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,4,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,4,1,2) SPLINE_FLAT ! unit 4, axle 4, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,4,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,4,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,4,1,2) LINEAR ! unit 4, axle 4, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,4,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,4,2,1) SPLINE_FLAT ! unit 4, axle 4, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,4,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,4,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,4,2,1) LINEAR ! unit 4, axle 4, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,4,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,4,2,2) SPLINE_FLAT ! unit 4, axle 4, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,4,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,4,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,4,2,2) LINEAR ! unit 4, axle 4, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,5,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,5,1,1) SPLINE_FLAT ! unit 4, axle 5, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,5,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,5,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,5,1,1) LINEAR ! unit 4, axle 5, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,5,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,5,1,2) SPLINE_FLAT ! unit 4, axle 5, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,5,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,5,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,5,1,2) LINEAR ! unit 4, axle 5, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,5,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,5,2,1) SPLINE_FLAT ! unit 4, axle 5, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,5,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,5,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,5,2,1) LINEAR ! unit 4, axle 5, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,5,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,5,2,2) SPLINE_FLAT ! unit 4, axle 5, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,5,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,5,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,5,2,2) LINEAR ! unit 4, axle 5, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,6,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,6,1,1) SPLINE_FLAT ! unit 4, axle 6, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,6,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,6,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,6,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,6,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,6,1,1) LINEAR ! unit 4, axle 6, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,6,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,6,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,6,1,2) SPLINE_FLAT ! unit 4, axle 6, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,6,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,6,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,6,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,6,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,6,1,2) LINEAR ! unit 4, axle 6, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,6,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,6,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,6,2,1) SPLINE_FLAT ! unit 4, axle 6, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,6,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,6,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,6,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,6,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,6,2,1) LINEAR ! unit 4, axle 6, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,6,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,6,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,6,2,2) SPLINE_FLAT ! unit 4, axle 6, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,6,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,6,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,6,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,6,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,6,2,2) LINEAR ! unit 4, axle 6, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,6,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,7,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,7,1,1) SPLINE_FLAT ! unit 4, axle 7, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,7,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,7,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,7,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,7,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,7,1,1) LINEAR ! unit 4, axle 7, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,7,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,7,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,7,1,2) SPLINE_FLAT ! unit 4, axle 7, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,7,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,7,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,7,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,7,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,7,1,2) LINEAR ! unit 4, axle 7, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,7,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,7,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,7,2,1) SPLINE_FLAT ! unit 4, axle 7, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,7,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,7,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,7,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,7,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,7,2,1) LINEAR ! unit 4, axle 7, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,7,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,7,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,7,2,2) SPLINE_FLAT ! unit 4, axle 7, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,7,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,7,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,7,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,7,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,7,2,2) LINEAR ! unit 4, axle 7, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,7,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,8,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,8,1,1) SPLINE_FLAT ! unit 4, axle 8, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,8,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,8,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,8,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,8,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,8,1,1) LINEAR ! unit 4, axle 8, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,8,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,8,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,8,1,2) SPLINE_FLAT ! unit 4, axle 8, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,8,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,8,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,8,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,8,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,8,1,2) LINEAR ! unit 4, axle 8, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,8,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,8,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,8,2,1) SPLINE_FLAT ! unit 4, axle 8, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,8,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,8,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,8,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,8,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,8,2,1) LINEAR ! unit 4, axle 8, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,8,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,8,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,8,2,2) SPLINE_FLAT ! unit 4, axle 8, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,8,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,8,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,8,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,8,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,8,2,2) LINEAR ! unit 4, axle 8, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,8,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,9,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,9,1,1) SPLINE_FLAT ! unit 4, axle 9, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,9,1,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,9,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,9,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,9,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,9,1,1) LINEAR ! unit 4, axle 9, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,9,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,9,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,9,1,2) SPLINE_FLAT ! unit 4, axle 9, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,9,1,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,9,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,9,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,9,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,9,1,2) LINEAR ! unit 4, axle 9, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,9,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,9,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,9,2,1) SPLINE_FLAT ! unit 4, axle 9, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,9,2,1) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,9,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,9,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,9,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,9,2,1) LINEAR ! unit 4, axle 9, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,9,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,9,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,9,2,2) SPLINE_FLAT ! unit 4, axle 9, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,9,2,2) 0.102 ! Gain multiplied with calculated value to get
                              ! L_Relax_X
L_RELAX_X_OFFSET(4,9,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,9,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,9,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,9,2,2) LINEAR ! unit 4, axle 9, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,9,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,10,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,10,1,1) SPLINE_FLAT ! unit 4, axle 10, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,10,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,10,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,10,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,10,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,10,1,1) LINEAR ! unit 4, axle 10, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,10,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,10,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,10,1,2) SPLINE_FLAT ! unit 4, axle 10, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,10,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,10,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,10,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,10,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,10,1,2) LINEAR ! unit 4, axle 10, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,10,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,10,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,10,2,1) SPLINE_FLAT ! unit 4, axle 10, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,10,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,10,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,10,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,10,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,10,2,1) LINEAR ! unit 4, axle 10, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,10,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,10,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,10,2,2) SPLINE_FLAT ! unit 4, axle 10, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,10,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,10,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,10,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,10,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,10,2,2) LINEAR ! unit 4, axle 10, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,10,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,11,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,11,1,1) SPLINE_FLAT ! unit 4, axle 11, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,11,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,11,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,11,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,11,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,11,1,1) LINEAR ! unit 4, axle 11, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,11,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,11,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,11,1,2) SPLINE_FLAT ! unit 4, axle 11, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,11,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,11,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,11,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,11,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,11,1,2) LINEAR ! unit 4, axle 11, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,11,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,11,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,11,2,1) SPLINE_FLAT ! unit 4, axle 11, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,11,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,11,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,11,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,11,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,11,2,1) LINEAR ! unit 4, axle 11, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,11,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,11,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,11,2,2) SPLINE_FLAT ! unit 4, axle 11, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,11,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,11,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,11,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,11,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,11,2,2) LINEAR ! unit 4, axle 11, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,11,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,12,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,12,1,1) SPLINE_FLAT ! unit 4, axle 12, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,12,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,12,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,12,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,12,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,12,1,1) LINEAR ! unit 4, axle 12, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,12,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,12,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,12,1,2) SPLINE_FLAT ! unit 4, axle 12, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,12,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,12,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,12,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,12,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,12,1,2) LINEAR ! unit 4, axle 12, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,12,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,12,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,12,2,1) SPLINE_FLAT ! unit 4, axle 12, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,12,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,12,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,12,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,12,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,12,2,1) LINEAR ! unit 4, axle 12, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,12,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,12,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,12,2,2) SPLINE_FLAT ! unit 4, axle 12, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,12,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,12,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,12,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,12,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,12,2,2) LINEAR ! unit 4, axle 12, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,12,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,13,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,13,1,1) SPLINE_FLAT ! unit 4, axle 13, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,13,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,13,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,13,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,13,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,13,1,1) LINEAR ! unit 4, axle 13, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,13,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,13,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,13,1,2) SPLINE_FLAT ! unit 4, axle 13, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,13,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,13,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,13,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,13,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,13,1,2) LINEAR ! unit 4, axle 13, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,13,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,13,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,13,2,1) SPLINE_FLAT ! unit 4, axle 13, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,13,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,13,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,13,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,13,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,13,2,1) LINEAR ! unit 4, axle 13, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,13,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,13,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,13,2,2) SPLINE_FLAT ! unit 4, axle 13, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,13,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,13,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,13,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,13,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,13,2,2) LINEAR ! unit 4, axle 13, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,13,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,14,1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,14,1,1) SPLINE_FLAT ! unit 4, axle 14, left, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,14,1,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,14,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,14,1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,14,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,14,1,1) LINEAR ! unit 4, axle 14, left, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,14,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,14,1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,14,1,2) SPLINE_FLAT ! unit 4, axle 14, left, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,14,1,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,14,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,14,1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,14,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,14,1,2) LINEAR ! unit 4, axle 14, left, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,14,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,14,2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,14,2,1) SPLINE_FLAT ! unit 4, axle 14, right, inner
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,14,2,1) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,14,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,14,2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,14,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,14,2,1) LINEAR ! unit 4, axle 14, right, inner
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,14,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(4,14,2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(4,14,2,2) SPLINE_FLAT ! unit 4, axle 14, right, outer
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(4,14,2,2) 0.102 ! Gain multiplied with calculated value to get
                               ! L_Relax_X
L_RELAX_X_OFFSET(4,14,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(4,14,2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(4,14,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(4,14,2,2) LINEAR ! unit 4, axle 14, right, outer
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(4,14,2,2) 30000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT or TABLE). Alternatively, a custom equation
! can be defined at runtime. L_Relax_Y from the calculation can be adjusted with
! L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the calculation can be
! adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the calculation can be
! adjusted with FZ_SCALE_L_RELAX_Y. This configurable function supports 188 datasets;
! if indices shown below are not used, e.g., (1,1,1,2), the current values of the
! indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify the dataset when
! reading data.
SET_UNITS L_RELAX_Y_CARPET(1,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,1,1) SPLINE_FLAT ! unit 1, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,1,1) SPLINE ! unit 1, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1,2,1) SPLINE_FLAT ! unit 1, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1,2,1) SPLINE ! unit 1, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,1,1) SPLINE_FLAT ! unit 1, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,1,1) SPLINE ! unit 1, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2,2,1) SPLINE_FLAT ! unit 1, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2,2,1) SPLINE ! unit 1, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,1) SPLINE_FLAT ! unit 1, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,1) SPLINE ! unit 1, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,1,2) SPLINE_FLAT ! unit 1, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,1,2) SPLINE ! unit 1, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,1) SPLINE_FLAT ! unit 1, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,1) SPLINE ! unit 1, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,3,2,2) SPLINE_FLAT ! unit 1, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,3,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,3,2,2) SPLINE ! unit 1, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,1,1) SPLINE_FLAT ! unit 1, axle 4, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,1,1) SPLINE ! unit 1, axle 4, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,1,2) SPLINE_FLAT ! unit 1, axle 4, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,1,2) SPLINE ! unit 1, axle 4, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,2,1) SPLINE_FLAT ! unit 1, axle 4, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,2,1) SPLINE ! unit 1, axle 4, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,4,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,4,2,2) SPLINE_FLAT ! unit 1, axle 4, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,4,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,4,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,4,2,2) SPLINE ! unit 1, axle 4, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,1,1) SPLINE_FLAT ! unit 1, axle 5, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,1,1) SPLINE ! unit 1, axle 5, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,1,2) SPLINE_FLAT ! unit 1, axle 5, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,1,2) SPLINE ! unit 1, axle 5, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,2,1) SPLINE_FLAT ! unit 1, axle 5, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,2,1) SPLINE ! unit 1, axle 5, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,5,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,5,2,2) SPLINE_FLAT ! unit 1, axle 5, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,5,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(1,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,5,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,5,2,2) SPLINE ! unit 1, axle 5, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,1) SPLINE_FLAT ! unit 2, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,1) SPLINE ! unit 2, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,1,2) SPLINE_FLAT ! unit 2, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,1,2) SPLINE ! unit 2, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,1) SPLINE_FLAT ! unit 2, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,1) SPLINE ! unit 2, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1,2,2) SPLINE_FLAT ! unit 2, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1,2,2) SPLINE ! unit 2, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,1) SPLINE_FLAT ! unit 2, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,1) SPLINE ! unit 2, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,1,2) SPLINE_FLAT ! unit 2, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,1,2) SPLINE ! unit 2, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,1) SPLINE_FLAT ! unit 2, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,1) SPLINE ! unit 2, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2,2,2) SPLINE_FLAT ! unit 2, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2,2,2) SPLINE ! unit 2, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,1,1) SPLINE_FLAT ! unit 2, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,1,1) SPLINE ! unit 2, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,1,2) SPLINE_FLAT ! unit 2, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,1,2) SPLINE ! unit 2, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,2,1) SPLINE_FLAT ! unit 2, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,2,1) SPLINE ! unit 2, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,3,2,2) SPLINE_FLAT ! unit 2, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,3,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,3,2,2) SPLINE ! unit 2, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,4,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,4,1,1) SPLINE_FLAT ! unit 2, axle 4, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,4,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,4,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,4,1,1) SPLINE ! unit 2, axle 4, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,4,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,4,1,2) SPLINE_FLAT ! unit 2, axle 4, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,4,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,4,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,4,1,2) SPLINE ! unit 2, axle 4, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,4,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,4,2,1) SPLINE_FLAT ! unit 2, axle 4, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,4,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,4,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,4,2,1) SPLINE ! unit 2, axle 4, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,4,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,4,2,2) SPLINE_FLAT ! unit 2, axle 4, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,4,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,4,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,4,2,2) SPLINE ! unit 2, axle 4, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,5,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,5,1,1) SPLINE_FLAT ! unit 2, axle 5, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,5,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,5,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,5,1,1) SPLINE ! unit 2, axle 5, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,5,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,5,1,2) SPLINE_FLAT ! unit 2, axle 5, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,5,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,5,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,5,1,2) SPLINE ! unit 2, axle 5, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,5,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,5,2,1) SPLINE_FLAT ! unit 2, axle 5, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,5,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,5,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,5,2,1) SPLINE ! unit 2, axle 5, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,5,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,5,2,2) SPLINE_FLAT ! unit 2, axle 5, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,5,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,5,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,5,2,2) SPLINE ! unit 2, axle 5, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,6,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,6,1,1) SPLINE_FLAT ! unit 2, axle 6, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,6,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,6,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,6,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,6,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,6,1,1) SPLINE ! unit 2, axle 6, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,6,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,6,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,6,1,2) SPLINE_FLAT ! unit 2, axle 6, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,6,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,6,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,6,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,6,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,6,1,2) SPLINE ! unit 2, axle 6, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,6,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,6,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,6,2,1) SPLINE_FLAT ! unit 2, axle 6, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,6,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,6,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,6,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,6,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,6,2,1) SPLINE ! unit 2, axle 6, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,6,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,6,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,6,2,2) SPLINE_FLAT ! unit 2, axle 6, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,6,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,6,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,6,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,6,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,6,2,2) SPLINE ! unit 2, axle 6, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,6,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,7,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,7,1,1) SPLINE_FLAT ! unit 2, axle 7, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,7,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,7,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,7,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,7,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,7,1,1) SPLINE ! unit 2, axle 7, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,7,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,7,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,7,1,2) SPLINE_FLAT ! unit 2, axle 7, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,7,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,7,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,7,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,7,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,7,1,2) SPLINE ! unit 2, axle 7, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,7,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,7,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,7,2,1) SPLINE_FLAT ! unit 2, axle 7, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,7,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,7,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,7,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,7,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,7,2,1) SPLINE ! unit 2, axle 7, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,7,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,7,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,7,2,2) SPLINE_FLAT ! unit 2, axle 7, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,7,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,7,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,7,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,7,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,7,2,2) SPLINE ! unit 2, axle 7, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,7,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,8,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,8,1,1) SPLINE_FLAT ! unit 2, axle 8, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,8,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,8,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,8,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,8,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,8,1,1) SPLINE ! unit 2, axle 8, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,8,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,8,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,8,1,2) SPLINE_FLAT ! unit 2, axle 8, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,8,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,8,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,8,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,8,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,8,1,2) SPLINE ! unit 2, axle 8, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,8,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,8,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,8,2,1) SPLINE_FLAT ! unit 2, axle 8, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,8,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,8,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,8,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,8,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,8,2,1) SPLINE ! unit 2, axle 8, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,8,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,8,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,8,2,2) SPLINE_FLAT ! unit 2, axle 8, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,8,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,8,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,8,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,8,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,8,2,2) SPLINE ! unit 2, axle 8, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,8,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,9,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,9,1,1) SPLINE_FLAT ! unit 2, axle 9, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,9,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,9,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,9,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,9,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,9,1,1) SPLINE ! unit 2, axle 9, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,9,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,9,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,9,1,2) SPLINE_FLAT ! unit 2, axle 9, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,9,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,9,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,9,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,9,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,9,1,2) SPLINE ! unit 2, axle 9, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,9,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,9,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,9,2,1) SPLINE_FLAT ! unit 2, axle 9, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,9,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,9,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,9,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,9,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,9,2,1) SPLINE ! unit 2, axle 9, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,9,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,9,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,9,2,2) SPLINE_FLAT ! unit 2, axle 9, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,9,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(2,9,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,9,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,9,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,9,2,2) SPLINE ! unit 2, axle 9, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,9,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,10,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,10,1,1) SPLINE_FLAT ! unit 2, axle 10, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,10,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,10,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,10,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,10,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,10,1,1) SPLINE ! unit 2, axle 10, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,10,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,10,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,10,1,2) SPLINE_FLAT ! unit 2, axle 10, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,10,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,10,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,10,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,10,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,10,1,2) SPLINE ! unit 2, axle 10, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,10,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,10,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,10,2,1) SPLINE_FLAT ! unit 2, axle 10, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,10,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,10,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,10,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,10,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,10,2,1) SPLINE ! unit 2, axle 10, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,10,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,10,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,10,2,2) SPLINE_FLAT ! unit 2, axle 10, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,10,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,10,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,10,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,10,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,10,2,2) SPLINE ! unit 2, axle 10, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,10,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,11,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,11,1,1) SPLINE_FLAT ! unit 2, axle 11, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,11,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,11,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,11,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,11,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,11,1,1) SPLINE ! unit 2, axle 11, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,11,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,11,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,11,1,2) SPLINE_FLAT ! unit 2, axle 11, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,11,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,11,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,11,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,11,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,11,1,2) SPLINE ! unit 2, axle 11, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,11,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,11,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,11,2,1) SPLINE_FLAT ! unit 2, axle 11, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,11,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,11,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,11,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,11,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,11,2,1) SPLINE ! unit 2, axle 11, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,11,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,11,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,11,2,2) SPLINE_FLAT ! unit 2, axle 11, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,11,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,11,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,11,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,11,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,11,2,2) SPLINE ! unit 2, axle 11, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,11,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,12,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,12,1,1) SPLINE_FLAT ! unit 2, axle 12, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,12,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,12,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,12,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,12,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,12,1,1) SPLINE ! unit 2, axle 12, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,12,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,12,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,12,1,2) SPLINE_FLAT ! unit 2, axle 12, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,12,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,12,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,12,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,12,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,12,1,2) SPLINE ! unit 2, axle 12, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,12,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,12,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,12,2,1) SPLINE_FLAT ! unit 2, axle 12, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,12,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,12,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,12,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,12,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,12,2,1) SPLINE ! unit 2, axle 12, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,12,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,12,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,12,2,2) SPLINE_FLAT ! unit 2, axle 12, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,12,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,12,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,12,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,12,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,12,2,2) SPLINE ! unit 2, axle 12, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,12,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,13,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,13,1,1) SPLINE_FLAT ! unit 2, axle 13, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,13,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,13,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,13,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,13,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,13,1,1) SPLINE ! unit 2, axle 13, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,13,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,13,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,13,1,2) SPLINE_FLAT ! unit 2, axle 13, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,13,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,13,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,13,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,13,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,13,1,2) SPLINE ! unit 2, axle 13, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,13,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,13,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,13,2,1) SPLINE_FLAT ! unit 2, axle 13, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,13,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,13,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,13,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,13,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,13,2,1) SPLINE ! unit 2, axle 13, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,13,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,13,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,13,2,2) SPLINE_FLAT ! unit 2, axle 13, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,13,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,13,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,13,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,13,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,13,2,2) SPLINE ! unit 2, axle 13, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,13,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,14,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,14,1,1) SPLINE_FLAT ! unit 2, axle 14, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,14,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,14,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,14,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,14,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,14,1,1) SPLINE ! unit 2, axle 14, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,14,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,14,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,14,1,2) SPLINE_FLAT ! unit 2, axle 14, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,14,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,14,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,14,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,14,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,14,1,2) SPLINE ! unit 2, axle 14, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,14,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,14,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,14,2,1) SPLINE_FLAT ! unit 2, axle 14, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,14,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,14,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,14,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,14,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,14,2,1) SPLINE ! unit 2, axle 14, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,14,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,14,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,14,2,2) SPLINE_FLAT ! unit 2, axle 14, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,14,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(2,14,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,14,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,14,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,14,2,2) SPLINE ! unit 2, axle 14, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,14,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1,1) SPLINE_FLAT ! unit 3, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1,1) SPLINE ! unit 3, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,1,2) SPLINE_FLAT ! unit 3, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,1,2) SPLINE ! unit 3, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2,1) SPLINE_FLAT ! unit 3, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2,1) SPLINE ! unit 3, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,1,2,2) SPLINE_FLAT ! unit 3, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,1,2,2) SPLINE ! unit 3, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,1) SPLINE_FLAT ! unit 3, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,1) SPLINE ! unit 3, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,1,2) SPLINE_FLAT ! unit 3, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,1,2) SPLINE ! unit 3, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,1) SPLINE_FLAT ! unit 3, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,1) SPLINE ! unit 3, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,2,2,2) SPLINE_FLAT ! unit 3, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,2,2,2) SPLINE ! unit 3, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,1,1) SPLINE_FLAT ! unit 3, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,1,1) SPLINE ! unit 3, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,1,2) SPLINE_FLAT ! unit 3, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,1,2) SPLINE ! unit 3, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,2,1) SPLINE_FLAT ! unit 3, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,2,1) SPLINE ! unit 3, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,3,2,2) SPLINE_FLAT ! unit 3, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,3,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,3,2,2) SPLINE ! unit 3, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,4,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,4,1,1) SPLINE_FLAT ! unit 3, axle 4, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,4,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,4,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,4,1,1) SPLINE ! unit 3, axle 4, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,4,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,4,1,2) SPLINE_FLAT ! unit 3, axle 4, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,4,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,4,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,4,1,2) SPLINE ! unit 3, axle 4, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,4,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,4,2,1) SPLINE_FLAT ! unit 3, axle 4, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,4,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,4,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,4,2,1) SPLINE ! unit 3, axle 4, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,4,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,4,2,2) SPLINE_FLAT ! unit 3, axle 4, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,4,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,4,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,4,2,2) SPLINE ! unit 3, axle 4, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,5,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,5,1,1) SPLINE_FLAT ! unit 3, axle 5, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,5,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,5,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,5,1,1) SPLINE ! unit 3, axle 5, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,5,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,5,1,2) SPLINE_FLAT ! unit 3, axle 5, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,5,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,5,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,5,1,2) SPLINE ! unit 3, axle 5, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,5,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,5,2,1) SPLINE_FLAT ! unit 3, axle 5, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,5,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,5,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,5,2,1) SPLINE ! unit 3, axle 5, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,5,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,5,2,2) SPLINE_FLAT ! unit 3, axle 5, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,5,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,5,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,5,2,2) SPLINE ! unit 3, axle 5, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,6,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,6,1,1) SPLINE_FLAT ! unit 3, axle 6, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,6,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,6,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,6,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,6,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,6,1,1) SPLINE ! unit 3, axle 6, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,6,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,6,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,6,1,2) SPLINE_FLAT ! unit 3, axle 6, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,6,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,6,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,6,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,6,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,6,1,2) SPLINE ! unit 3, axle 6, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,6,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,6,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,6,2,1) SPLINE_FLAT ! unit 3, axle 6, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,6,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,6,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,6,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,6,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,6,2,1) SPLINE ! unit 3, axle 6, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,6,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,6,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,6,2,2) SPLINE_FLAT ! unit 3, axle 6, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,6,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,6,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,6,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,6,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,6,2,2) SPLINE ! unit 3, axle 6, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,6,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,7,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,7,1,1) SPLINE_FLAT ! unit 3, axle 7, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,7,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,7,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,7,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,7,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,7,1,1) SPLINE ! unit 3, axle 7, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,7,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,7,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,7,1,2) SPLINE_FLAT ! unit 3, axle 7, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,7,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,7,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,7,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,7,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,7,1,2) SPLINE ! unit 3, axle 7, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,7,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,7,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,7,2,1) SPLINE_FLAT ! unit 3, axle 7, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,7,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,7,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,7,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,7,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,7,2,1) SPLINE ! unit 3, axle 7, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,7,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,7,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,7,2,2) SPLINE_FLAT ! unit 3, axle 7, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,7,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,7,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,7,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,7,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,7,2,2) SPLINE ! unit 3, axle 7, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,7,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,8,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,8,1,1) SPLINE_FLAT ! unit 3, axle 8, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,8,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,8,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,8,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,8,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,8,1,1) SPLINE ! unit 3, axle 8, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,8,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,8,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,8,1,2) SPLINE_FLAT ! unit 3, axle 8, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,8,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,8,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,8,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,8,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,8,1,2) SPLINE ! unit 3, axle 8, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,8,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,8,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,8,2,1) SPLINE_FLAT ! unit 3, axle 8, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,8,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,8,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,8,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,8,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,8,2,1) SPLINE ! unit 3, axle 8, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,8,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,8,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,8,2,2) SPLINE_FLAT ! unit 3, axle 8, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,8,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,8,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,8,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,8,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,8,2,2) SPLINE ! unit 3, axle 8, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,8,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,9,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,9,1,1) SPLINE_FLAT ! unit 3, axle 9, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,9,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,9,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,9,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,9,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,9,1,1) SPLINE ! unit 3, axle 9, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,9,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,9,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,9,1,2) SPLINE_FLAT ! unit 3, axle 9, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,9,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,9,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,9,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,9,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,9,1,2) SPLINE ! unit 3, axle 9, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,9,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,9,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,9,2,1) SPLINE_FLAT ! unit 3, axle 9, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,9,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,9,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,9,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,9,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,9,2,1) SPLINE ! unit 3, axle 9, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,9,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,9,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,9,2,2) SPLINE_FLAT ! unit 3, axle 9, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,9,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(3,9,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,9,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,9,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,9,2,2) SPLINE ! unit 3, axle 9, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,9,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,10,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,10,1,1) SPLINE_FLAT ! unit 3, axle 10, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,10,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,10,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,10,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,10,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,10,1,1) SPLINE ! unit 3, axle 10, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,10,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,10,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,10,1,2) SPLINE_FLAT ! unit 3, axle 10, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,10,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,10,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,10,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,10,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,10,1,2) SPLINE ! unit 3, axle 10, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,10,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,10,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,10,2,1) SPLINE_FLAT ! unit 3, axle 10, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,10,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,10,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,10,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,10,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,10,2,1) SPLINE ! unit 3, axle 10, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,10,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,10,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,10,2,2) SPLINE_FLAT ! unit 3, axle 10, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,10,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,10,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,10,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,10,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,10,2,2) SPLINE ! unit 3, axle 10, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,10,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,11,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,11,1,1) SPLINE_FLAT ! unit 3, axle 11, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,11,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,11,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,11,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,11,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,11,1,1) SPLINE ! unit 3, axle 11, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,11,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,11,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,11,1,2) SPLINE_FLAT ! unit 3, axle 11, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,11,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,11,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,11,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,11,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,11,1,2) SPLINE ! unit 3, axle 11, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,11,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,11,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,11,2,1) SPLINE_FLAT ! unit 3, axle 11, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,11,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,11,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,11,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,11,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,11,2,1) SPLINE ! unit 3, axle 11, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,11,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,11,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,11,2,2) SPLINE_FLAT ! unit 3, axle 11, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,11,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,11,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,11,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,11,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,11,2,2) SPLINE ! unit 3, axle 11, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,11,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,12,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,12,1,1) SPLINE_FLAT ! unit 3, axle 12, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,12,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,12,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,12,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,12,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,12,1,1) SPLINE ! unit 3, axle 12, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,12,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,12,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,12,1,2) SPLINE_FLAT ! unit 3, axle 12, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,12,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,12,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,12,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,12,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,12,1,2) SPLINE ! unit 3, axle 12, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,12,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,12,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,12,2,1) SPLINE_FLAT ! unit 3, axle 12, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,12,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,12,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,12,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,12,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,12,2,1) SPLINE ! unit 3, axle 12, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,12,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,12,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,12,2,2) SPLINE_FLAT ! unit 3, axle 12, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,12,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,12,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,12,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,12,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,12,2,2) SPLINE ! unit 3, axle 12, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,12,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,13,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,13,1,1) SPLINE_FLAT ! unit 3, axle 13, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,13,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,13,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,13,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,13,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,13,1,1) SPLINE ! unit 3, axle 13, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,13,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,13,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,13,1,2) SPLINE_FLAT ! unit 3, axle 13, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,13,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,13,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,13,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,13,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,13,1,2) SPLINE ! unit 3, axle 13, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,13,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,13,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,13,2,1) SPLINE_FLAT ! unit 3, axle 13, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,13,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,13,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,13,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,13,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,13,2,1) SPLINE ! unit 3, axle 13, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,13,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,13,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,13,2,2) SPLINE_FLAT ! unit 3, axle 13, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,13,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,13,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,13,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,13,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,13,2,2) SPLINE ! unit 3, axle 13, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,13,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,14,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,14,1,1) SPLINE_FLAT ! unit 3, axle 14, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,14,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,14,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,14,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,14,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,14,1,1) SPLINE ! unit 3, axle 14, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,14,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,14,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,14,1,2) SPLINE_FLAT ! unit 3, axle 14, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,14,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,14,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,14,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,14,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,14,1,2) SPLINE ! unit 3, axle 14, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,14,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,14,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,14,2,1) SPLINE_FLAT ! unit 3, axle 14, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,14,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,14,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,14,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,14,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,14,2,1) SPLINE ! unit 3, axle 14, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,14,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(3,14,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(3,14,2,2) SPLINE_FLAT ! unit 3, axle 14, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(3,14,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(3,14,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(3,14,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(3,14,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(3,14,2,2) SPLINE ! unit 3, axle 14, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(3,14,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,1,1) SPLINE_FLAT ! unit 4, axle 1, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,1,1) SPLINE ! unit 4, axle 1, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,1,2) SPLINE_FLAT ! unit 4, axle 1, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,1,2) SPLINE ! unit 4, axle 1, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,2,1) SPLINE_FLAT ! unit 4, axle 1, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,2,1) SPLINE ! unit 4, axle 1, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,1,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,1,2,2) SPLINE_FLAT ! unit 4, axle 1, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,1,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,1,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,1,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,1,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,1,2,2) SPLINE ! unit 4, axle 1, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,1,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,1,1) SPLINE_FLAT ! unit 4, axle 2, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,1,1) SPLINE ! unit 4, axle 2, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,1,2) SPLINE_FLAT ! unit 4, axle 2, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,1,2) SPLINE ! unit 4, axle 2, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,2,1) SPLINE_FLAT ! unit 4, axle 2, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,2,1) SPLINE ! unit 4, axle 2, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,2,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,2,2,2) SPLINE_FLAT ! unit 4, axle 2, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,2,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,2,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,2,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,2,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,2,2,2) SPLINE ! unit 4, axle 2, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,2,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,3,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,3,1,1) SPLINE_FLAT ! unit 4, axle 3, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,3,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,3,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,3,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,3,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,3,1,1) SPLINE ! unit 4, axle 3, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,3,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,3,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,3,1,2) SPLINE_FLAT ! unit 4, axle 3, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,3,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,3,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,3,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,3,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,3,1,2) SPLINE ! unit 4, axle 3, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,3,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,3,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,3,2,1) SPLINE_FLAT ! unit 4, axle 3, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,3,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,3,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,3,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,3,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,3,2,1) SPLINE ! unit 4, axle 3, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,3,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,3,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,3,2,2) SPLINE_FLAT ! unit 4, axle 3, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,3,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,3,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,3,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,3,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,3,2,2) SPLINE ! unit 4, axle 3, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,3,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,4,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,4,1,1) SPLINE_FLAT ! unit 4, axle 4, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,4,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,4,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,4,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,4,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,4,1,1) SPLINE ! unit 4, axle 4, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,4,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,4,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,4,1,2) SPLINE_FLAT ! unit 4, axle 4, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,4,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,4,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,4,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,4,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,4,1,2) SPLINE ! unit 4, axle 4, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,4,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,4,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,4,2,1) SPLINE_FLAT ! unit 4, axle 4, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,4,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,4,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,4,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,4,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,4,2,1) SPLINE ! unit 4, axle 4, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,4,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,4,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,4,2,2) SPLINE_FLAT ! unit 4, axle 4, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,4,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,4,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,4,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,4,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,4,2,2) SPLINE ! unit 4, axle 4, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,4,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,5,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,5,1,1) SPLINE_FLAT ! unit 4, axle 5, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,5,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,5,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,5,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,5,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,5,1,1) SPLINE ! unit 4, axle 5, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,5,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,5,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,5,1,2) SPLINE_FLAT ! unit 4, axle 5, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,5,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,5,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,5,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,5,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,5,1,2) SPLINE ! unit 4, axle 5, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,5,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,5,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,5,2,1) SPLINE_FLAT ! unit 4, axle 5, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,5,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,5,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,5,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,5,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,5,2,1) SPLINE ! unit 4, axle 5, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,5,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,5,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,5,2,2) SPLINE_FLAT ! unit 4, axle 5, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,5,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,5,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,5,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,5,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,5,2,2) SPLINE ! unit 4, axle 5, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,5,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,6,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,6,1,1) SPLINE_FLAT ! unit 4, axle 6, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,6,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,6,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,6,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,6,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,6,1,1) SPLINE ! unit 4, axle 6, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,6,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,6,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,6,1,2) SPLINE_FLAT ! unit 4, axle 6, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,6,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,6,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,6,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,6,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,6,1,2) SPLINE ! unit 4, axle 6, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,6,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,6,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,6,2,1) SPLINE_FLAT ! unit 4, axle 6, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,6,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,6,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,6,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,6,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,6,2,1) SPLINE ! unit 4, axle 6, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,6,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,6,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,6,2,2) SPLINE_FLAT ! unit 4, axle 6, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,6,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,6,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,6,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,6,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,6,2,2) SPLINE ! unit 4, axle 6, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,6,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,7,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,7,1,1) SPLINE_FLAT ! unit 4, axle 7, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,7,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,7,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,7,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,7,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,7,1,1) SPLINE ! unit 4, axle 7, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,7,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,7,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,7,1,2) SPLINE_FLAT ! unit 4, axle 7, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,7,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,7,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,7,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,7,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,7,1,2) SPLINE ! unit 4, axle 7, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,7,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,7,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,7,2,1) SPLINE_FLAT ! unit 4, axle 7, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,7,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,7,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,7,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,7,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,7,2,1) SPLINE ! unit 4, axle 7, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,7,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,7,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,7,2,2) SPLINE_FLAT ! unit 4, axle 7, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,7,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,7,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,7,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,7,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,7,2,2) SPLINE ! unit 4, axle 7, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,7,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,8,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,8,1,1) SPLINE_FLAT ! unit 4, axle 8, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,8,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,8,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,8,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,8,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,8,1,1) SPLINE ! unit 4, axle 8, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,8,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,8,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,8,1,2) SPLINE_FLAT ! unit 4, axle 8, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,8,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,8,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,8,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,8,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,8,1,2) SPLINE ! unit 4, axle 8, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,8,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,8,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,8,2,1) SPLINE_FLAT ! unit 4, axle 8, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,8,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,8,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,8,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,8,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,8,2,1) SPLINE ! unit 4, axle 8, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,8,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,8,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,8,2,2) SPLINE_FLAT ! unit 4, axle 8, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,8,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,8,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,8,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,8,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,8,2,2) SPLINE ! unit 4, axle 8, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,8,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,9,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,9,1,1) SPLINE_FLAT ! unit 4, axle 9, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,9,1,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,9,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,9,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,9,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,9,1,1) SPLINE ! unit 4, axle 9, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,9,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,9,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,9,1,2) SPLINE_FLAT ! unit 4, axle 9, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,9,1,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,9,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,9,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,9,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,9,1,2) SPLINE ! unit 4, axle 9, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,9,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,9,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,9,2,1) SPLINE_FLAT ! unit 4, axle 9, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,9,2,1) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,9,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,9,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,9,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,9,2,1) SPLINE ! unit 4, axle 9, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,9,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,9,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,9,2,2) SPLINE_FLAT ! unit 4, axle 9, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,9,2,2) 1.02 ! Gain multiplied with calculated value to get
                             ! L_Relax_Y
L_RELAX_Y_OFFSET(4,9,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,9,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,9,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,9,2,2) SPLINE ! unit 4, axle 9, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,9,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,10,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,10,1,1) SPLINE_FLAT ! unit 4, axle 10, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,10,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,10,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,10,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,10,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,10,1,1) SPLINE ! unit 4, axle 10, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,10,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,10,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,10,1,2) SPLINE_FLAT ! unit 4, axle 10, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,10,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,10,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,10,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,10,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,10,1,2) SPLINE ! unit 4, axle 10, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,10,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,10,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,10,2,1) SPLINE_FLAT ! unit 4, axle 10, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,10,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,10,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,10,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,10,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,10,2,1) SPLINE ! unit 4, axle 10, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,10,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,10,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,10,2,2) SPLINE_FLAT ! unit 4, axle 10, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,10,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,10,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,10,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,10,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,10,2,2) SPLINE ! unit 4, axle 10, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,10,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,11,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,11,1,1) SPLINE_FLAT ! unit 4, axle 11, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,11,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,11,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,11,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,11,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,11,1,1) SPLINE ! unit 4, axle 11, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,11,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,11,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,11,1,2) SPLINE_FLAT ! unit 4, axle 11, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,11,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,11,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,11,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,11,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,11,1,2) SPLINE ! unit 4, axle 11, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,11,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,11,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,11,2,1) SPLINE_FLAT ! unit 4, axle 11, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,11,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,11,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,11,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,11,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,11,2,1) SPLINE ! unit 4, axle 11, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,11,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,11,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,11,2,2) SPLINE_FLAT ! unit 4, axle 11, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,11,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,11,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,11,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,11,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,11,2,2) SPLINE ! unit 4, axle 11, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,11,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,12,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,12,1,1) SPLINE_FLAT ! unit 4, axle 12, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,12,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,12,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,12,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,12,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,12,1,1) SPLINE ! unit 4, axle 12, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,12,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,12,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,12,1,2) SPLINE_FLAT ! unit 4, axle 12, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,12,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,12,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,12,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,12,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,12,1,2) SPLINE ! unit 4, axle 12, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,12,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,12,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,12,2,1) SPLINE_FLAT ! unit 4, axle 12, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,12,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,12,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,12,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,12,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,12,2,1) SPLINE ! unit 4, axle 12, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,12,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,12,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,12,2,2) SPLINE_FLAT ! unit 4, axle 12, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,12,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,12,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,12,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,12,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,12,2,2) SPLINE ! unit 4, axle 12, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,12,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,13,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,13,1,1) SPLINE_FLAT ! unit 4, axle 13, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,13,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,13,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,13,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,13,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,13,1,1) SPLINE ! unit 4, axle 13, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,13,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,13,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,13,1,2) SPLINE_FLAT ! unit 4, axle 13, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,13,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,13,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,13,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,13,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,13,1,2) SPLINE ! unit 4, axle 13, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,13,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,13,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,13,2,1) SPLINE_FLAT ! unit 4, axle 13, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,13,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,13,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,13,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,13,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,13,2,1) SPLINE ! unit 4, axle 13, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,13,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,13,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,13,2,2) SPLINE_FLAT ! unit 4, axle 13, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,13,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,13,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,13,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,13,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,13,2,2) SPLINE ! unit 4, axle 13, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,13,2,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,14,1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,14,1,1) SPLINE_FLAT ! unit 4, axle 14, left, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,14,1,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,14,1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,14,1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,14,1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,14,1,1) SPLINE ! unit 4, axle 14, left, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,14,1,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,14,1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,14,1,2) SPLINE_FLAT ! unit 4, axle 14, left, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,14,1,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,14,1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,14,1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,14,1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,14,1,2) SPLINE ! unit 4, axle 14, left, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,14,1,2) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,14,2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,14,2,1) SPLINE_FLAT ! unit 4, axle 14, right, inner
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,14,2,1) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,14,2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,14,2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,14,2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,14,2,1) SPLINE ! unit 4, axle 14, right, inner
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,14,2,1) 30000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(4,14,2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(4,14,2,2) SPLINE_FLAT ! unit 4, axle 14, right, outer
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(4,14,2,2) 1.02 ! Gain multiplied with calculated value to get
                              ! L_Relax_Y
L_RELAX_Y_OFFSET(4,14,2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(4,14,2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(4,14,2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(4,14,2,2) SPLINE ! unit 4, axle 14, right, outer
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(4,14,2,2) 30000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 11 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 11 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1
 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880, 880
 800, 0, 75.02, 199.98, 350.02, 499.95, 600.05, 749.98, 900.02, 1049.95, 1175.02, 1299.98
 1100, -50.05, 117.7, 285.45, 453.09, 620.84, 788.48, 956.23, 1123.87, 1291.62, 1459.26, 1627.01
 1200, -59.95, 120.01, 299.97, 480.04, 660, 839.96, 1020.03, 1199.99, 1379.95, 1560.02, 1739.98
 1300, -69.96, 121.44, 312.84, 504.24, 695.64, 887.04, 1078.44, 1269.84, 1461.24, 1652.64, 1844.04
 1400, -79.97, 117.81, 315.59, 513.37, 711.15, 909.04, 1106.82, 1304.6, 1502.38, 1700.16, 1898.05
 1500, -89.98, 108.79, 307.56, 506.44, 705.21, 903.98, 1102.75, 1301.63, 1500.4, 1699.17, 1898.05
 1600, -99.99, 93.72, 287.43, 481.14, 674.85, 868.45, 1062.16, 1255.87, 1449.58, 1643.29, 1837
 1700, -110, 78.65, 267.19, 455.84, 644.38, 833.03, 1021.57, 1210.22, 1398.76, 1587.41, 1775.95
 1800, -120.01, 62.92, 245.85, 428.67, 611.6, 794.53, 977.35, 1160.28, 1343.21, 1526.14, 1708.96
 1900, -130.02, 47.08, 224.18, 401.28, 578.38, 755.48, 932.58, 1109.68, 1286.78, 1463.88, 1640.98
 2000, -140.03, 31.13, 202.18, 373.34, 544.39, 715.55, 886.6, 1057.65, 1228.81, 1399.86, 1571.02
 2100, -150.04, 15.07, 180.18, 345.29, 510.4, 675.51, 840.62, 1005.73, 1170.84, 1335.95, 1500.95
 2150, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04, -150.04
 2200, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98, -199.98
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 1 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT or TABLE) combined with a
! function MU_ROAD_L of lateral position (CONSTANT or TABLE). Alternatively, a custom
! equation can be defined at runtime. MU from the calculation can be adjusted with
! MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral position used in the calculation
! can be adjusted with L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable
! function supports 200 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, -1.6
 -20, -1.2
 -15, -0.85
 -10, -0.5
 -5, -0.25
 0, 0
 5, 0.25
 10, 0.5
 15, 0.85
 20, 1.2
 25, 1.6
ENDTABLE
MX_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MX_AERO)

MX_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMX

MX_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMX

MX_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMX

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 47 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IUNIT and IAXLE are used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1,1) 400 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 1
MX_AUX_GAIN(1,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 1

MX_AUX_COEFFICIENT(1,2) 400 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 1, axle 2
MX_AUX_GAIN(1,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 2

MX_AUX_COEFFICIENT(1,3) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 3
MX_AUX_GAIN(1,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 3

MX_AUX_COEFFICIENT(1,4) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 4
MX_AUX_GAIN(1,4)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,4)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,4) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,4) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,4) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,4) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,4) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 4

MX_AUX_COEFFICIENT(1,5) 3000 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 1, axle 5
MX_AUX_GAIN(1,5)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1,5)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1,5) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1,5) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1,5) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1,5) N-m ;
MX_AUX_FSTATIC_CONSTANT(1,5) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 1, axle 5

MX_AUX_COEFFICIENT(2,1) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 1
MX_AUX_GAIN(2,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 1

MX_AUX_COEFFICIENT(2,2) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 2
MX_AUX_GAIN(2,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 2

MX_AUX_COEFFICIENT(2,3) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 3
MX_AUX_GAIN(2,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 3

MX_AUX_COEFFICIENT(2,4) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 4
MX_AUX_GAIN(2,4)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,4)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,4) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,4) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,4) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,4) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,4) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 4

MX_AUX_COEFFICIENT(2,5) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 5
MX_AUX_GAIN(2,5)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,5)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,5) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,5) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,5) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,5) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,5) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 5

MX_AUX_COEFFICIENT(2,6) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 6
MX_AUX_GAIN(2,6)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,6)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,6) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,6) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,6) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,6) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,6) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 6

MX_AUX_COEFFICIENT(2,7) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 7
MX_AUX_GAIN(2,7)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,7)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,7) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,7) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,7) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,7) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,7) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 7

MX_AUX_COEFFICIENT(2,8) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 8
MX_AUX_GAIN(2,8)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,8)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,8) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,8) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,8) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,8) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,8) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 8

MX_AUX_COEFFICIENT(2,9) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 2, axle 9
MX_AUX_GAIN(2,9)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,9)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,9) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,9) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,9) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,9) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,9) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 2, axle 9

MX_AUX_COEFFICIENT(2,10) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 10
MX_AUX_GAIN(2,10)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,10) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,10) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,10) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,10) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,10) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,10) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 2, axle 10

MX_AUX_COEFFICIENT(2,11) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 11
MX_AUX_GAIN(2,11)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,11) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,11) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,11) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,11) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,11) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,11) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 2, axle 11

MX_AUX_COEFFICIENT(2,12) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 12
MX_AUX_GAIN(2,12)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,12) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,12) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,12) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,12) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,12) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,12) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 2, axle 12

MX_AUX_COEFFICIENT(2,13) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 13
MX_AUX_GAIN(2,13)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,13) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,13) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,13) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,13) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,13) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,13) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 2, axle 13

MX_AUX_COEFFICIENT(2,14) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 2, axle 14
MX_AUX_GAIN(2,14)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2,14) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2,14) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2,14) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2,14) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2,14) N-m ;
MX_AUX_FSTATIC_CONSTANT(2,14) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 2, axle 14

MX_AUX_COEFFICIENT(3,1) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 1
MX_AUX_GAIN(3,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 1

MX_AUX_COEFFICIENT(3,2) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 2
MX_AUX_GAIN(3,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 2

MX_AUX_COEFFICIENT(3,3) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 3
MX_AUX_GAIN(3,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 3

MX_AUX_COEFFICIENT(3,4) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 4
MX_AUX_GAIN(3,4)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,4)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,4) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,4) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,4) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,4) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,4) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 4

MX_AUX_COEFFICIENT(3,5) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 5
MX_AUX_GAIN(3,5)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,5)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,5) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,5) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,5) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,5) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,5) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 5

MX_AUX_COEFFICIENT(3,6) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 6
MX_AUX_GAIN(3,6)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,6)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,6) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,6) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,6) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,6) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,6) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 6

MX_AUX_COEFFICIENT(3,7) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 7
MX_AUX_GAIN(3,7)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,7)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,7) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,7) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,7) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,7) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,7) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 7

MX_AUX_COEFFICIENT(3,8) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 8
MX_AUX_GAIN(3,8)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,8)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,8) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,8) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,8) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,8) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,8) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 8

MX_AUX_COEFFICIENT(3,9) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 3, axle 9
MX_AUX_GAIN(3,9)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,9)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,9) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,9) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,9) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,9) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,9) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 3, axle 9

MX_AUX_COEFFICIENT(3,10) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 10
MX_AUX_GAIN(3,10)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,10) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,10) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,10) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,10) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,10) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,10) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 3, axle 10

MX_AUX_COEFFICIENT(3,11) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 11
MX_AUX_GAIN(3,11)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,11) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,11) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,11) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,11) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,11) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,11) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 3, axle 11

MX_AUX_COEFFICIENT(3,12) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 12
MX_AUX_GAIN(3,12)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,12) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,12) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,12) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,12) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,12) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,12) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 3, axle 12

MX_AUX_COEFFICIENT(3,13) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 13
MX_AUX_GAIN(3,13)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,13) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,13) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,13) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,13) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,13) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,13) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 3, axle 13

MX_AUX_COEFFICIENT(3,14) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 3, axle 14
MX_AUX_GAIN(3,14)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(3,14) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(3,14) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(3,14) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(3,14) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(3,14) N-m ;
MX_AUX_FSTATIC_CONSTANT(3,14) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 3, axle 14

MX_AUX_COEFFICIENT(4,1) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 1
MX_AUX_GAIN(4,1)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,1)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,1) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,1) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,1) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 1

MX_AUX_COEFFICIENT(4,2) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 2
MX_AUX_GAIN(4,2)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,2)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,2) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,2) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,2) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 2

MX_AUX_COEFFICIENT(4,3) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 3
MX_AUX_GAIN(4,3)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,3)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,3) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,3) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,3) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,3) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,3) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 3

MX_AUX_COEFFICIENT(4,4) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 4
MX_AUX_GAIN(4,4)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,4)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,4) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,4) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,4) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,4) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,4) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 4

MX_AUX_COEFFICIENT(4,5) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 5
MX_AUX_GAIN(4,5)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,5)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,5) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,5) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,5) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,5) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,5) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 5

MX_AUX_COEFFICIENT(4,6) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 6
MX_AUX_GAIN(4,6)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,6)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,6) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,6) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,6) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,6) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,6) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 6

MX_AUX_COEFFICIENT(4,7) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 7
MX_AUX_GAIN(4,7)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,7)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,7) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,7) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,7) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,7) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,7) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 7

MX_AUX_COEFFICIENT(4,8) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 8
MX_AUX_GAIN(4,8)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,8)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,8) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,8) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,8) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,8) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,8) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 8

MX_AUX_COEFFICIENT(4,9) 300 ! Coefficient: auxiliary roll moment per unit relative
                            ! axle roll (N-m/deg), unit 4, axle 9
MX_AUX_GAIN(4,9)    1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,9)  0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,9) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,9) 1 ! Scale factor divided into (relative axle roll -
                         ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,9) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,9) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,9) 0 ; N-m ! Constant auxiliary roll moment component due
                               ! to static axle load, unit 4, axle 9

MX_AUX_COEFFICIENT(4,10) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 10
MX_AUX_GAIN(4,10)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,10) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,10) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,10) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,10) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,10) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,10) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 4, axle 10

MX_AUX_COEFFICIENT(4,11) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 11
MX_AUX_GAIN(4,11)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,11) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,11) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,11) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,11) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,11) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,11) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 4, axle 11

MX_AUX_COEFFICIENT(4,12) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 12
MX_AUX_GAIN(4,12)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,12) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,12) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,12) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,12) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,12) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,12) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 4, axle 12

MX_AUX_COEFFICIENT(4,13) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 13
MX_AUX_GAIN(4,13)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,13) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,13) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,13) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,13) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,13) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,13) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 4, axle 13

MX_AUX_COEFFICIENT(4,14) 300 ! Coefficient: auxiliary roll moment per unit relative
                             ! axle roll (N-m/deg), unit 4, axle 14
MX_AUX_GAIN(4,14)   1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(4,14) 0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(4,14) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(4,14) 1 ! Scale factor divided into (relative axle roll -
                          ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(4,14) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(4,14) N-m ;
MX_AUX_FSTATIC_CONSTANT(4,14) 0 ; N-m ! Constant auxiliary roll moment component due
                                ! to static axle load, unit 4, axle 14

! MX_HITCH: Hitch X moment. Moment is a function of roll (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MX_HITCH_GAIN and MX_HITCH_OFFSET. Roll used in
! the calculation can be adjusted with ROLL_SCALE_HITCH and ROLL_START_HITCH. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(1) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(2) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! 1D table: col 1 = roll (deg), col 2 = moment (N-m)
MX_HITCH_TABLE(3) LINEAR ! linear interpolation and extrapolation
 -2, -100000
 -1.5, -50000
 -0.5, -50000
 0.5, 50000
 1.5, 50000
 2, 100000
ENDTABLE
MX_HITCH_GAIN(3)    1 ! Gain multiplied with calculated value to get moment
MX_HITCH_OFFSET(3)  0 ; N-m ! Offset added (after gain) to get moment
ROLL_START_HITCH(3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_HITCH(3) 1 ! Scale factor divided into (roll - ROLL_START_HITCH)

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -25, 0.38
 0, 0.2
 25, 0.38
ENDTABLE
MY_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MY_AERO)

MY_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMY

MY_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMY

MY_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMY

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 94 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.0275, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.25, 1063.7
 0.55, 5010
 0.7, 7500
ENDTABLE
MY_BRAKE_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,3,1) SPLINE ! unit 1, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,3,2) SPLINE ! unit 1, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,4,1) SPLINE ! unit 1, axle 4, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,4,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,4,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,4,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,4,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,4,2) SPLINE ! unit 1, axle 4, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,4,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,4,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,4,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,4,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,5,1) SPLINE ! unit 1, axle 5, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,5,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,5,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,5,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,5,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(1,5,2) SPLINE ! unit 1, axle 5, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(1,5,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,5,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,5,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,5,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,1) SPLINE ! unit 2, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,1,2) SPLINE ! unit 2, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,1) SPLINE ! unit 2, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,2,2) SPLINE ! unit 2, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,3,1) SPLINE ! unit 2, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,3,2) SPLINE ! unit 2, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,4,1) SPLINE ! unit 2, axle 4, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,4,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,4,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,4,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,4,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,4,2) SPLINE ! unit 2, axle 4, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,4,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,4,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,4,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,4,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,5,1) SPLINE ! unit 2, axle 5, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,5,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,5,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,5,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,5,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,5,2) SPLINE ! unit 2, axle 5, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,5,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,5,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,5,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,5,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,6,1) SPLINE ! unit 2, axle 6, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,6,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,6,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,6,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,6,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,6,2) SPLINE ! unit 2, axle 6, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,6,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,6,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,6,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,6,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,7,1) SPLINE ! unit 2, axle 7, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,7,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,7,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,7,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,7,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,7,2) SPLINE ! unit 2, axle 7, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,7,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,7,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,7,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,7,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,8,1) SPLINE ! unit 2, axle 8, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,8,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,8,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,8,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,8,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,8,2) SPLINE ! unit 2, axle 8, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,8,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,8,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,8,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,8,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,9,1) SPLINE ! unit 2, axle 9, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,9,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,9,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,9,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,9,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,9,2) SPLINE ! unit 2, axle 9, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,9,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,9,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,9,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,9,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,10,1) SPLINE ! unit 2, axle 10, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,10,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,10,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,10,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,10,2) SPLINE ! unit 2, axle 10, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,10,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,10,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,10,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,11,1) SPLINE ! unit 2, axle 11, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,11,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,11,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,11,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,11,2) SPLINE ! unit 2, axle 11, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,11,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,11,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,11,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,12,1) SPLINE ! unit 2, axle 12, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,12,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,12,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,12,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,12,2) SPLINE ! unit 2, axle 12, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,12,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,12,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,12,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,13,1) SPLINE ! unit 2, axle 13, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,13,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,13,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,13,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,13,2) SPLINE ! unit 2, axle 13, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,13,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,13,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,13,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,14,1) SPLINE ! unit 2, axle 14, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,14,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,14,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,14,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(2,14,2) SPLINE ! unit 2, axle 14, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,14,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,14,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,14,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,1,1) SPLINE ! unit 3, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,1,2) SPLINE ! unit 3, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,2,1) SPLINE ! unit 3, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,2,2) SPLINE ! unit 3, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,3,1) SPLINE ! unit 3, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,3,2) SPLINE ! unit 3, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,4,1) SPLINE ! unit 3, axle 4, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,4,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,4,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,4,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,4,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,4,2) SPLINE ! unit 3, axle 4, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,4,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,4,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,4,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,4,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,5,1) SPLINE ! unit 3, axle 5, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,5,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,5,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,5,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,5,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,5,2) SPLINE ! unit 3, axle 5, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,5,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,5,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,5,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,5,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,6,1) SPLINE ! unit 3, axle 6, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,6,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,6,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,6,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,6,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,6,2) SPLINE ! unit 3, axle 6, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,6,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,6,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,6,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,6,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,7,1) SPLINE ! unit 3, axle 7, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,7,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,7,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,7,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,7,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,7,2) SPLINE ! unit 3, axle 7, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,7,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,7,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,7,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,7,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,8,1) SPLINE ! unit 3, axle 8, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,8,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,8,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,8,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,8,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,8,2) SPLINE ! unit 3, axle 8, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,8,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,8,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,8,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,8,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,9,1) SPLINE ! unit 3, axle 9, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,9,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,9,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,9,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,9,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,9,2) SPLINE ! unit 3, axle 9, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,9,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,9,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,9,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,9,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,10,1) SPLINE ! unit 3, axle 10, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,10,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,10,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,10,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,10,2) SPLINE ! unit 3, axle 10, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,10,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,10,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,10,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,11,1) SPLINE ! unit 3, axle 11, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,11,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,11,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,11,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,11,2) SPLINE ! unit 3, axle 11, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,11,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,11,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,11,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,12,1) SPLINE ! unit 3, axle 12, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,12,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,12,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,12,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,12,2) SPLINE ! unit 3, axle 12, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,12,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,12,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,12,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,13,1) SPLINE ! unit 3, axle 13, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,13,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,13,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,13,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,13,2) SPLINE ! unit 3, axle 13, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,13,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,13,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,13,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,14,1) SPLINE ! unit 3, axle 14, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,14,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,14,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,14,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(3,14,2) SPLINE ! unit 3, axle 14, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(3,14,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(3,14,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(3,14,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,1,1) SPLINE ! unit 4, axle 1, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,1,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,1,2) SPLINE ! unit 4, axle 1, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,1,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,2,1) SPLINE ! unit 4, axle 2, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,2,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,2,2) SPLINE ! unit 4, axle 2, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,2,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,3,1) SPLINE ! unit 4, axle 3, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,3,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,3,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,3,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,3,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,3,2) SPLINE ! unit 4, axle 3, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,3,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,3,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,3,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,3,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,4,1) SPLINE ! unit 4, axle 4, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,4,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,4,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,4,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,4,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,4,2) SPLINE ! unit 4, axle 4, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,4,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,4,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,4,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,4,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,5,1) SPLINE ! unit 4, axle 5, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,5,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,5,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,5,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,5,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,5,2) SPLINE ! unit 4, axle 5, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,5,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,5,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,5,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,5,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,6,1) SPLINE ! unit 4, axle 6, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,6,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,6,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,6,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,6,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,6,2) SPLINE ! unit 4, axle 6, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,6,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,6,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,6,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,6,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,7,1) SPLINE ! unit 4, axle 7, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,7,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,7,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,7,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,7,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,7,2) SPLINE ! unit 4, axle 7, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,7,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,7,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,7,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,7,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,8,1) SPLINE ! unit 4, axle 8, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,8,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,8,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,8,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,8,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,8,2) SPLINE ! unit 4, axle 8, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,8,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,8,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,8,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,8,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,9,1) SPLINE ! unit 4, axle 9, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,9,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,9,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,9,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,9,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,9,2) SPLINE ! unit 4, axle 9, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,9,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,9,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,9,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,9,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                            ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,10,1) SPLINE ! unit 4, axle 10, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,10,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,10,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,10,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,10,2) SPLINE ! unit 4, axle 10, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,10,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,10,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,10,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,11,1) SPLINE ! unit 4, axle 11, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,11,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,11,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,11,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,11,2) SPLINE ! unit 4, axle 11, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,11,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,11,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,11,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,12,1) SPLINE ! unit 4, axle 12, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,12,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,12,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,12,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,12,2) SPLINE ! unit 4, axle 12, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,12,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,12,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,12,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,13,1) SPLINE ! unit 4, axle 13, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,13,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,13,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,13,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,13,2) SPLINE ! unit 4, axle 13, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,13,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,13,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,13,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,14,1) SPLINE ! unit 4, axle 14, left side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,14,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,14,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,14,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! 1D table: col 1 = wheel cylinder pressure (MPa), col 2 = brake torque (N-m)
MY_BRAKE_TABLE(4,14,2) SPLINE ! unit 4, axle 14, right side
 -0.1, 0
 -0.005, 0
 0, 0
 0.005, 0
 0.01, 0
 0.015, 0
 0.02, 0
 0.025, 0
 0.03, 0
 0.032, 0
 0.035, 0
 0.04, 8
 0.25, 1635.25
 0.55, 6818
 0.7, 10000
ENDTABLE
MY_BRAKE_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(4,14,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(4,14,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(4,14,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                             ! PBK_START_MY_BRAKE)

! MY_HITCH: Hitch Y moment. Moment is a function of pitch (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Moment from the
! calculation can be adjusted with MY_HITCH_GAIN and MY_HITCH_OFFSET. Pitch used in
! the calculation can be adjusted with PITCH_SCALE_HITCH and PITCH_START_HITCH. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IUNIT is used to identify the dataset
! when reading data.

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(1) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(1) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(2) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(2) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! 1D table: col 1 = pitch (deg), col 2 = moment (N-m)
MY_HITCH_TABLE(3) LINEAR ! linear interpolation and extrapolation
 -12, -100000
 -11, 0
 7, 0
 8, 100000
ENDTABLE
MY_HITCH_GAIN(3)    1 ! Gain multiplied with calculated value to get moment
MY_HITCH_OFFSET(3)  0 ; N-m ! Offset added (after gain) to get moment
PITCH_START_HITCH(3) 0 ; deg ! Offset subtracted from pitch
PITCH_SCALE_HITCH(3) 1 ! Scale factor divided into (pitch - PITCH_START_HITCH)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IUNIT is used to identify the dataset when reading data.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -25, -0.3
 25, 0.3
ENDTABLE
MZ_AERO_SHAPING_GAIN(1) 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET(1) 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO(1) 0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO(1) 1 ! Scale factor divided into (aerodynamic slip angle -
                        ! SLIP_START_MZ_AERO)

MZ_AERO_SHAPING_CONSTANT(2) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(2) 0 ; - ! Offset added (after gain) to get CMZ

MZ_AERO_SHAPING_CONSTANT(3) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(3) 0 ; - ! Offset added (after gain) to get CMZ

MZ_AERO_SHAPING_CONSTANT(4) 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET(4) 0 ; - ! Offset added (after gain) to get CMZ

! MZ_HITCH: Hitch Z moment. Moment is a function of articulation (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Moment from the calculation can be adjusted with MZ_HITCH_GAIN and MZ_HITCH_OFFSET.
! Articulation used in the calculation can be adjusted with ARTICULATION_SCALE_HITCH
! and ARTICULATION_START_HITCH. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IUNIT
! is used to identify the dataset when reading data.

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(1) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(1)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(1)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(1) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(1) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(2) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(2)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(2)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(2) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(2) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! 1D table: col 1 = articulation (deg), col 2 = moment (N-m)
MZ_HITCH_TABLE(3) LINEAR ! linear interpolation and extrapolation
 -91, -100000
 -90, 0
 90, 0
 91, 100000
ENDTABLE
MZ_HITCH_GAIN(3)    1 ! Gain multiplied with calculated value to get moment
MZ_HITCH_OFFSET(3)  0 ; N-m ! Offset added (after gain) to get moment
ARTICULATION_START_HITCH(3) 0 ; deg ! Offset subtracted from articulation
ARTICULATION_SCALE_HITCH(3) 1 ! Scale factor divided into (articulation -
                              ! ARTICULATION_START_HITCH)

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 94 datasets; if indices shown below are not used, e.g., (1,1,2),
! the current values of the indices IUNIT, IAXLE, and ISIDE are used to identify the
! dataset when reading data.

MZ_PARKING_STEER_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, left side
MZ_PARKING_STEER_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, left side

MZ_PARKING_STEER_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 1, right side
MZ_PARKING_STEER_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,1,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,1,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 1, right side

MZ_PARKING_STEER_CONSTANT(1,2,1) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 2, left side
MZ_PARKING_STEER_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2,1) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2,1) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2,1) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 2, left side

MZ_PARKING_STEER_CONSTANT(1,2,2) 0 ; N-m ! Constant steering torque at kingpin
                                   ! component due to vehicle speed, unit 1, axle
                                   ! 2, right side
MZ_PARKING_STEER_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get
                               ! steering torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2,2) 0 ; N-m ! Offset added (after gain) to get steering
                                 ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS MZ_PARKING_STEER_FZ_TABLE(1,2,2) N-m ;
MZ_PARKING_STEER_FZ_CONSTANT(1,2,2) 0 ; N-m ! Constant steering torque at kingpin
                                      ! component due to vertical load, unit 1,
                                      ! axle 2, right side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 188 datasets; if indices shown below are not used, e.g., (1,1,1,2), the
! current values of the indices IUNIT, IAXLE, ISIDE, and ITIRE are used to identify
! the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,1,1) 2D_FROM_ZERO ! unit 1, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1,2,1) 2D_FROM_ZERO ! unit 1, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,1,1) 2D_FROM_ZERO ! unit 1, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2,2,1) 2D_FROM_ZERO ! unit 1, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,1) 2D_FROM_ZERO ! unit 1, axle 3, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,1,2) 2D_FROM_ZERO ! unit 1, axle 3, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,1) 2D_FROM_ZERO ! unit 1, axle 3, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,3,2,2) 2D_FROM_ZERO ! unit 1, axle 3, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,1,1) 2D_FROM_ZERO ! unit 1, axle 4, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,1,2) 2D_FROM_ZERO ! unit 1, axle 4, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,2,1) 2D_FROM_ZERO ! unit 1, axle 4, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,4,2,2) 2D_FROM_ZERO ! unit 1, axle 4, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,4,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,4,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,1,1) 2D_FROM_ZERO ! unit 1, axle 5, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,1,2) 2D_FROM_ZERO ! unit 1, axle 5, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,2,1) 2D_FROM_ZERO ! unit 1, axle 5, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,5,2,2) 2D_FROM_ZERO ! unit 1, axle 5, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(1,5,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,5,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,1) 2D_FROM_ZERO ! unit 2, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,1,2) 2D_FROM_ZERO ! unit 2, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,1) 2D_FROM_ZERO ! unit 2, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1,2,2) 2D_FROM_ZERO ! unit 2, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,1) 2D_FROM_ZERO ! unit 2, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,1,2) 2D_FROM_ZERO ! unit 2, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,1) 2D_FROM_ZERO ! unit 2, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2,2,2) 2D_FROM_ZERO ! unit 2, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,1,1) 2D_FROM_ZERO ! unit 2, axle 3, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,1,2) 2D_FROM_ZERO ! unit 2, axle 3, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,2,1) 2D_FROM_ZERO ! unit 2, axle 3, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,3,2,2) 2D_FROM_ZERO ! unit 2, axle 3, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,4,1,1) 2D_FROM_ZERO ! unit 2, axle 4, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,4,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,4,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,4,1,2) 2D_FROM_ZERO ! unit 2, axle 4, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,4,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,4,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,4,2,1) 2D_FROM_ZERO ! unit 2, axle 4, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,4,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,4,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,4,2,2) 2D_FROM_ZERO ! unit 2, axle 4, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,4,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,4,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,5,1,1) 2D_FROM_ZERO ! unit 2, axle 5, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,5,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,5,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,5,1,2) 2D_FROM_ZERO ! unit 2, axle 5, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,5,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,5,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,5,2,1) 2D_FROM_ZERO ! unit 2, axle 5, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,5,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,5,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,5,2,2) 2D_FROM_ZERO ! unit 2, axle 5, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,5,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,5,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,6,1,1) 2D_FROM_ZERO ! unit 2, axle 6, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,6,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,6,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,6,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,6,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,6,1,2) 2D_FROM_ZERO ! unit 2, axle 6, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,6,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,6,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,6,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,6,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,6,2,1) 2D_FROM_ZERO ! unit 2, axle 6, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,6,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,6,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,6,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,6,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,6,2,2) 2D_FROM_ZERO ! unit 2, axle 6, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,6,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,6,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,6,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,6,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,7,1,1) 2D_FROM_ZERO ! unit 2, axle 7, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,7,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,7,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,7,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,7,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,7,1,2) 2D_FROM_ZERO ! unit 2, axle 7, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,7,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,7,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,7,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,7,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,7,2,1) 2D_FROM_ZERO ! unit 2, axle 7, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,7,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,7,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,7,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,7,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,7,2,2) 2D_FROM_ZERO ! unit 2, axle 7, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,7,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,7,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,7,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,7,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,8,1,1) 2D_FROM_ZERO ! unit 2, axle 8, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,8,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,8,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,8,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,8,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,8,1,2) 2D_FROM_ZERO ! unit 2, axle 8, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,8,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,8,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,8,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,8,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,8,2,1) 2D_FROM_ZERO ! unit 2, axle 8, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,8,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,8,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,8,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,8,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,8,2,2) 2D_FROM_ZERO ! unit 2, axle 8, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,8,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,8,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,8,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,8,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,9,1,1) 2D_FROM_ZERO ! unit 2, axle 9, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,9,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,9,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,9,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,9,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,9,1,2) 2D_FROM_ZERO ! unit 2, axle 9, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,9,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,9,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,9,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,9,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,9,2,1) 2D_FROM_ZERO ! unit 2, axle 9, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,9,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,9,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,9,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,9,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,9,2,2) 2D_FROM_ZERO ! unit 2, axle 9, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,9,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,9,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,9,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,9,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,10,1,1) 2D_FROM_ZERO ! unit 2, axle 10, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,10,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,10,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,10,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,10,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,10,1,2) 2D_FROM_ZERO ! unit 2, axle 10, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,10,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,10,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,10,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,10,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,10,2,1) 2D_FROM_ZERO ! unit 2, axle 10, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,10,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,10,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,10,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,10,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,10,2,2) 2D_FROM_ZERO ! unit 2, axle 10, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,10,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,10,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,10,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,10,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,11,1,1) 2D_FROM_ZERO ! unit 2, axle 11, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,11,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,11,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,11,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,11,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,11,1,2) 2D_FROM_ZERO ! unit 2, axle 11, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,11,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,11,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,11,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,11,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,11,2,1) 2D_FROM_ZERO ! unit 2, axle 11, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,11,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,11,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,11,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,11,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,11,2,2) 2D_FROM_ZERO ! unit 2, axle 11, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,11,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,11,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,11,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,11,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,12,1,1) 2D_FROM_ZERO ! unit 2, axle 12, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,12,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,12,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,12,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,12,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,12,1,2) 2D_FROM_ZERO ! unit 2, axle 12, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,12,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,12,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,12,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,12,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,12,2,1) 2D_FROM_ZERO ! unit 2, axle 12, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,12,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,12,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,12,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,12,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,12,2,2) 2D_FROM_ZERO ! unit 2, axle 12, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,12,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,12,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,12,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,12,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,13,1,1) 2D_FROM_ZERO ! unit 2, axle 13, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,13,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,13,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,13,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,13,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,13,1,2) 2D_FROM_ZERO ! unit 2, axle 13, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,13,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,13,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,13,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,13,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,13,2,1) 2D_FROM_ZERO ! unit 2, axle 13, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,13,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,13,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,13,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,13,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,13,2,2) 2D_FROM_ZERO ! unit 2, axle 13, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,13,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,13,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,13,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,13,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,14,1,1) 2D_FROM_ZERO ! unit 2, axle 14, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,14,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,14,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,14,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,14,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,14,1,2) 2D_FROM_ZERO ! unit 2, axle 14, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,14,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,14,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,14,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,14,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,14,2,1) 2D_FROM_ZERO ! unit 2, axle 14, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,14,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,14,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,14,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,14,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,14,2,2) 2D_FROM_ZERO ! unit 2, axle 14, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(2,14,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,14,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,14,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,14,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1,1) 2D_FROM_ZERO ! unit 3, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,1,2) 2D_FROM_ZERO ! unit 3, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2,1) 2D_FROM_ZERO ! unit 3, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,1,2,2) 2D_FROM_ZERO ! unit 3, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,1) 2D_FROM_ZERO ! unit 3, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,1,2) 2D_FROM_ZERO ! unit 3, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,1) 2D_FROM_ZERO ! unit 3, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,2,2,2) 2D_FROM_ZERO ! unit 3, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,1,1) 2D_FROM_ZERO ! unit 3, axle 3, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,1,2) 2D_FROM_ZERO ! unit 3, axle 3, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,2,1) 2D_FROM_ZERO ! unit 3, axle 3, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,3,2,2) 2D_FROM_ZERO ! unit 3, axle 3, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,4,1,1) 2D_FROM_ZERO ! unit 3, axle 4, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,4,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,4,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,4,1,2) 2D_FROM_ZERO ! unit 3, axle 4, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,4,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,4,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,4,2,1) 2D_FROM_ZERO ! unit 3, axle 4, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,4,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,4,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,4,2,2) 2D_FROM_ZERO ! unit 3, axle 4, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,4,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,4,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,5,1,1) 2D_FROM_ZERO ! unit 3, axle 5, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,5,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,5,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,5,1,2) 2D_FROM_ZERO ! unit 3, axle 5, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,5,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,5,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,5,2,1) 2D_FROM_ZERO ! unit 3, axle 5, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,5,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,5,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,5,2,2) 2D_FROM_ZERO ! unit 3, axle 5, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,5,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,5,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,6,1,1) 2D_FROM_ZERO ! unit 3, axle 6, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,6,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,6,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,6,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,6,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,6,1,2) 2D_FROM_ZERO ! unit 3, axle 6, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,6,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,6,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,6,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,6,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,6,2,1) 2D_FROM_ZERO ! unit 3, axle 6, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,6,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,6,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,6,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,6,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,6,2,2) 2D_FROM_ZERO ! unit 3, axle 6, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,6,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,6,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,6,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,6,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,7,1,1) 2D_FROM_ZERO ! unit 3, axle 7, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,7,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,7,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,7,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,7,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,7,1,2) 2D_FROM_ZERO ! unit 3, axle 7, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,7,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,7,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,7,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,7,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,7,2,1) 2D_FROM_ZERO ! unit 3, axle 7, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,7,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,7,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,7,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,7,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,7,2,2) 2D_FROM_ZERO ! unit 3, axle 7, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,7,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,7,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,7,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,7,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,8,1,1) 2D_FROM_ZERO ! unit 3, axle 8, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,8,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,8,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,8,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,8,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,8,1,2) 2D_FROM_ZERO ! unit 3, axle 8, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,8,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,8,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,8,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,8,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,8,2,1) 2D_FROM_ZERO ! unit 3, axle 8, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,8,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,8,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,8,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,8,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,8,2,2) 2D_FROM_ZERO ! unit 3, axle 8, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,8,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,8,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,8,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,8,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,9,1,1) 2D_FROM_ZERO ! unit 3, axle 9, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,9,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,9,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,9,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,9,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,9,1,2) 2D_FROM_ZERO ! unit 3, axle 9, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,9,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,9,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,9,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,9,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,9,2,1) 2D_FROM_ZERO ! unit 3, axle 9, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,9,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,9,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,9,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,9,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,9,2,2) 2D_FROM_ZERO ! unit 3, axle 9, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,9,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,9,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,9,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,9,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,10,1,1) 2D_FROM_ZERO ! unit 3, axle 10, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,10,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,10,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,10,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,10,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,10,1,2) 2D_FROM_ZERO ! unit 3, axle 10, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,10,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,10,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,10,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,10,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,10,2,1) 2D_FROM_ZERO ! unit 3, axle 10, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,10,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,10,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,10,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,10,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,10,2,2) 2D_FROM_ZERO ! unit 3, axle 10, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,10,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,10,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,10,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,10,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,11,1,1) 2D_FROM_ZERO ! unit 3, axle 11, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,11,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,11,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,11,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,11,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,11,1,2) 2D_FROM_ZERO ! unit 3, axle 11, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,11,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,11,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,11,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,11,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,11,2,1) 2D_FROM_ZERO ! unit 3, axle 11, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,11,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,11,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,11,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,11,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,11,2,2) 2D_FROM_ZERO ! unit 3, axle 11, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,11,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,11,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,11,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,11,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,12,1,1) 2D_FROM_ZERO ! unit 3, axle 12, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,12,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,12,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,12,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,12,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,12,1,2) 2D_FROM_ZERO ! unit 3, axle 12, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,12,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,12,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,12,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,12,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,12,2,1) 2D_FROM_ZERO ! unit 3, axle 12, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,12,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,12,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,12,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,12,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,12,2,2) 2D_FROM_ZERO ! unit 3, axle 12, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,12,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,12,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,12,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,12,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,13,1,1) 2D_FROM_ZERO ! unit 3, axle 13, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,13,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,13,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,13,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,13,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,13,1,2) 2D_FROM_ZERO ! unit 3, axle 13, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,13,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,13,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,13,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,13,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,13,2,1) 2D_FROM_ZERO ! unit 3, axle 13, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,13,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,13,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,13,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,13,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,13,2,2) 2D_FROM_ZERO ! unit 3, axle 13, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,13,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,13,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,13,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,13,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,14,1,1) 2D_FROM_ZERO ! unit 3, axle 14, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,14,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,14,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,14,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,14,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,14,1,2) 2D_FROM_ZERO ! unit 3, axle 14, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,14,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,14,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,14,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,14,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,14,2,1) 2D_FROM_ZERO ! unit 3, axle 14, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,14,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,14,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,14,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,14,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(3,14,2,2) 2D_FROM_ZERO ! unit 3, axle 14, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(3,14,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(3,14,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(3,14,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(3,14,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(3,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(3,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,1,1) 2D_FROM_ZERO ! unit 4, axle 1, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,1,2) 2D_FROM_ZERO ! unit 4, axle 1, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,2,1) 2D_FROM_ZERO ! unit 4, axle 1, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,1,2,2) 2D_FROM_ZERO ! unit 4, axle 1, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,1,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,1,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,1,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,1,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,1,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,1,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,1,1) 2D_FROM_ZERO ! unit 4, axle 2, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,1,2) 2D_FROM_ZERO ! unit 4, axle 2, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,2,1) 2D_FROM_ZERO ! unit 4, axle 2, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,2,2,2) 2D_FROM_ZERO ! unit 4, axle 2, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,2,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,2,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,2,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,2,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,2,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,3,1,1) 2D_FROM_ZERO ! unit 4, axle 3, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,3,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,3,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,3,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,3,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,3,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,3,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,3,1,2) 2D_FROM_ZERO ! unit 4, axle 3, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,3,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,3,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,3,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,3,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,3,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,3,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,3,2,1) 2D_FROM_ZERO ! unit 4, axle 3, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,3,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,3,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,3,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,3,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,3,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,3,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,3,2,2) 2D_FROM_ZERO ! unit 4, axle 3, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,3,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,3,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,3,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,3,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,3,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,3,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,4,1,1) 2D_FROM_ZERO ! unit 4, axle 4, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,4,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,4,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,4,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,4,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,4,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,4,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,4,1,2) 2D_FROM_ZERO ! unit 4, axle 4, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,4,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,4,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,4,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,4,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,4,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,4,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,4,2,1) 2D_FROM_ZERO ! unit 4, axle 4, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,4,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,4,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,4,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,4,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,4,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,4,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,4,2,2) 2D_FROM_ZERO ! unit 4, axle 4, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,4,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,4,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,4,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,4,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,4,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,4,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,5,1,1) 2D_FROM_ZERO ! unit 4, axle 5, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,5,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,5,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,5,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,5,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,5,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,5,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,5,1,2) 2D_FROM_ZERO ! unit 4, axle 5, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,5,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,5,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,5,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,5,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,5,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,5,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,5,2,1) 2D_FROM_ZERO ! unit 4, axle 5, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,5,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,5,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,5,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,5,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,5,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,5,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,5,2,2) 2D_FROM_ZERO ! unit 4, axle 5, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,5,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,5,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,5,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,5,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,5,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,5,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,6,1,1) 2D_FROM_ZERO ! unit 4, axle 6, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,6,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,6,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,6,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,6,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,6,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,6,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,6,1,2) 2D_FROM_ZERO ! unit 4, axle 6, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,6,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,6,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,6,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,6,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,6,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,6,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,6,2,1) 2D_FROM_ZERO ! unit 4, axle 6, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,6,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,6,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,6,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,6,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,6,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,6,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,6,2,2) 2D_FROM_ZERO ! unit 4, axle 6, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,6,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,6,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,6,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,6,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,6,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,6,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,7,1,1) 2D_FROM_ZERO ! unit 4, axle 7, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,7,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,7,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,7,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,7,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,7,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,7,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,7,1,2) 2D_FROM_ZERO ! unit 4, axle 7, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,7,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,7,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,7,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,7,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,7,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,7,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,7,2,1) 2D_FROM_ZERO ! unit 4, axle 7, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,7,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,7,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,7,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,7,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,7,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,7,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,7,2,2) 2D_FROM_ZERO ! unit 4, axle 7, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,7,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,7,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,7,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,7,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,7,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,7,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,8,1,1) 2D_FROM_ZERO ! unit 4, axle 8, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,8,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,8,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,8,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,8,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,8,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,8,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,8,1,2) 2D_FROM_ZERO ! unit 4, axle 8, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,8,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,8,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,8,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,8,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,8,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,8,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,8,2,1) 2D_FROM_ZERO ! unit 4, axle 8, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,8,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,8,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,8,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,8,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,8,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,8,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,8,2,2) 2D_FROM_ZERO ! unit 4, axle 8, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,8,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,8,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,8,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,8,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,8,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,8,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,9,1,1) 2D_FROM_ZERO ! unit 4, axle 9, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,9,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,9,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,9,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,9,1,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,9,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,9,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,9,1,2) 2D_FROM_ZERO ! unit 4, axle 9, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,9,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,9,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,9,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,9,1,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,9,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,9,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,9,2,1) 2D_FROM_ZERO ! unit 4, axle 9, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,9,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,9,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,9,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,9,2,1) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,9,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,9,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,9,2,2) 2D_FROM_ZERO ! unit 4, axle 9, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,9,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,9,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,9,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,9,2,2) 1 ! Scale factor divided into (Alpha -
                               ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,9,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,9,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,10,1,1) 2D_FROM_ZERO ! unit 4, axle 10, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,10,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,10,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,10,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,10,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,10,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,10,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,10,1,2) 2D_FROM_ZERO ! unit 4, axle 10, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,10,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,10,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,10,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,10,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,10,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,10,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,10,2,1) 2D_FROM_ZERO ! unit 4, axle 10, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,10,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,10,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,10,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,10,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,10,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,10,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,10,2,2) 2D_FROM_ZERO ! unit 4, axle 10, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,10,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,10,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,10,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,10,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,10,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,10,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,11,1,1) 2D_FROM_ZERO ! unit 4, axle 11, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,11,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,11,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,11,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,11,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,11,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,11,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,11,1,2) 2D_FROM_ZERO ! unit 4, axle 11, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,11,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,11,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,11,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,11,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,11,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,11,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,11,2,1) 2D_FROM_ZERO ! unit 4, axle 11, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,11,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,11,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,11,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,11,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,11,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,11,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,11,2,2) 2D_FROM_ZERO ! unit 4, axle 11, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,11,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,11,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,11,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,11,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,11,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,11,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,12,1,1) 2D_FROM_ZERO ! unit 4, axle 12, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,12,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,12,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,12,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,12,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,12,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,12,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,12,1,2) 2D_FROM_ZERO ! unit 4, axle 12, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,12,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,12,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,12,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,12,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,12,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,12,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,12,2,1) 2D_FROM_ZERO ! unit 4, axle 12, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,12,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,12,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,12,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,12,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,12,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,12,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,12,2,2) 2D_FROM_ZERO ! unit 4, axle 12, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,12,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,12,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,12,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,12,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,12,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,12,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,13,1,1) 2D_FROM_ZERO ! unit 4, axle 13, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,13,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,13,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,13,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,13,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,13,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,13,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,13,1,2) 2D_FROM_ZERO ! unit 4, axle 13, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,13,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,13,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,13,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,13,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,13,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,13,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,13,2,1) 2D_FROM_ZERO ! unit 4, axle 13, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,13,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,13,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,13,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,13,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,13,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,13,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,13,2,2) 2D_FROM_ZERO ! unit 4, axle 13, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,13,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,13,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,13,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,13,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,13,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,13,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,14,1,1) 2D_FROM_ZERO ! unit 4, axle 14, left, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,14,1,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,14,1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,14,1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,14,1,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,14,1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,14,1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,14,1,2) 2D_FROM_ZERO ! unit 4, axle 14, left, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,14,1,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,14,1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,14,1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,14,1,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,14,1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,14,1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,14,2,1) 2D_FROM_ZERO ! unit 4, axle 14, right, inner
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,14,2,1) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,14,2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,14,2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,14,2,1) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,14,2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,14,2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 5 values of Fz (N). Other rows
! have Alpha (deg) followed by 5 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(4,14,2,2) 2D_FROM_ZERO ! unit 4, axle 14, right, outer
 0, 4905, 9810, 19620, 29430, 39240
 1, 34.99, 85.89, 231.94, 431.45, 687.86
 2, 63.79, 156.52, 421.63, 784.76, 1252.92
 4, 99.48, 243.88, 652.97, 1217.04, 1949.83
 6, 108.2, 264.95, 703.46, 1313.71, 2114.84
 8, 98.69, 241.21, 632.63, 1184.84, 1920.83
 10, 79.76, 194.4, 499.89, 940.64, 1542.25
 12, 57.12, 138.52, 343.28, 651.79, 1091.45
 15, 22.1, 52.14, 102.43, 207.03, 395.26
 20, 0, 0, 0, 0, 0
 25, 0, 0, 0, 0, 0
 30, 0, 0, 0, 0, 0
 35, 0, 0, 0, 0, 0
 40, 0, 0, 0, 0, 0
 45, 0, 0, 0, 0, 0
 50, 0, 0, 0, 0, 0
 60, 0, 0, 0, 0, 0
 70, 0, 0, 0, 0, 0
 80, 0, 0, 0, 0, 0
 89, 0, 0, 0, 0, 0
 90, 0, 0, 0, 0, 0
ENDTABLE
MZ_TIRE_GAIN(4,14,2,2) 1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(4,14,2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(4,14,2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(4,14,2,2) 1 ! Scale factor divided into (Alpha -
                                ! ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(4,14,2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(4,14,2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 9 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(1) 0 ; N-m ! Constant this torque difference, 1st drive axle
                          ! diff
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(4) 0 ; N-m ! Constant this torque difference, 3rd drive axle
                          ! diff
M_DIFF_VISC_OFFSET(4) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(5) 0 ; N-m ! Constant this torque difference, 4th drive axle
                          ! diff
M_DIFF_VISC_OFFSET(5) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(6) 0 ; N-m ! Constant this torque difference, inter-axle diff
                          ! for drive axles 3,4,5
M_DIFF_VISC_OFFSET(6) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

M_DIFF_VISC_CONSTANT(7) 0 ; N-m ! Constant this torque difference, master transfer
                          ! case
M_DIFF_VISC_OFFSET(7) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_SW: Steering wheel torque. Torque at steering wheel can be a nonlinear CARPET
! function of vehicle speed and total steering torque about kingpin axes of both
! front wheels or a function of total steering torque about kingpin axes of both
! front wheels (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_SW_V of
! vehicle speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Torque at steering wheel from the calculation can be
! adjusted with M_SW_GAIN and M_SW_OFFSET.

M_SW_COEFFICIENT 0.04 ! Coefficient: torque at steering wheel per unit total
                      ! steering torque about kingpin axes of both front wheels
                      ! (N-m/N-m)
M_SW_GAIN           1 ! Gain multiplied with calculated value to get torque at
                      ! steering wheel
M_SW_OFFSET         0 ; N-m ! Offset added (after gain) to get torque at steering
                      ! wheel
M_SW_COMBINE MULTIPLY ! How to combine the two components
M_SW_V_CONSTANT     1 ; - ! Constant torque at steering wheel component due to
                      ! vehicle speed

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 94
! datasets; if indices shown below are not used, e.g., (1,1,2), the current values of
! the indices IUNIT, IAXLE, and ISIDE are used to identify the dataset when reading
! data.

PBK_DL_COEFFICIENT(1,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, left
                            ! side
PBK_DL_GAIN(1,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,1) MPa ;
PBK_DL_FZ_CONSTANT(1,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, left side

PBK_DL_COEFFICIENT(1,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 1, right
                            ! side
PBK_DL_GAIN(1,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,1,2) MPa ;
PBK_DL_FZ_CONSTANT(1,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 1, right side

PBK_DL_COEFFICIENT(1,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, left
                            ! side
PBK_DL_GAIN(1,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,1) MPa ;
PBK_DL_FZ_CONSTANT(1,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, left side

PBK_DL_COEFFICIENT(1,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 2, right
                            ! side
PBK_DL_GAIN(1,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,2,2) MPa ;
PBK_DL_FZ_CONSTANT(1,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 2, right side

PBK_DL_COEFFICIENT(1,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, left
                            ! side
PBK_DL_GAIN(1,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,3,1) MPa ;
PBK_DL_FZ_CONSTANT(1,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, left side

PBK_DL_COEFFICIENT(1,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 3, right
                            ! side
PBK_DL_GAIN(1,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,3,2) MPa ;
PBK_DL_FZ_CONSTANT(1,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 3, right side

PBK_DL_COEFFICIENT(1,4,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 4, left
                            ! side
PBK_DL_GAIN(1,4,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,4,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,4,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,4,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,4,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,4,1) MPa ;
PBK_DL_FZ_CONSTANT(1,4,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 4, left side

PBK_DL_COEFFICIENT(1,4,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 4, right
                            ! side
PBK_DL_GAIN(1,4,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,4,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,4,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,4,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,4,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,4,2) MPa ;
PBK_DL_FZ_CONSTANT(1,4,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 4, right side

PBK_DL_COEFFICIENT(1,5,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 5, left
                            ! side
PBK_DL_GAIN(1,5,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,5,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,5,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,5,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,5,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,5,1) MPa ;
PBK_DL_FZ_CONSTANT(1,5,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 5, left side

PBK_DL_COEFFICIENT(1,5,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 1, axle 5, right
                            ! side
PBK_DL_GAIN(1,5,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,5,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,5,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(1,5,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,5,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(1,5,2) MPa ;
PBK_DL_FZ_CONSTANT(1,5,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 1, axle 5, right side

PBK_DL_COEFFICIENT(2,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, left
                            ! side
PBK_DL_GAIN(2,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, left side

PBK_DL_COEFFICIENT(2,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 1, right
                            ! side
PBK_DL_GAIN(2,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1,2) MPa ;
PBK_DL_FZ_CONSTANT(2,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 1, right side

PBK_DL_COEFFICIENT(2,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, left
                            ! side
PBK_DL_GAIN(2,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, left side

PBK_DL_COEFFICIENT(2,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 2, right
                            ! side
PBK_DL_GAIN(2,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 2, right side

PBK_DL_COEFFICIENT(2,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 3, left
                            ! side
PBK_DL_GAIN(2,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,3,1) MPa ;
PBK_DL_FZ_CONSTANT(2,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 3, left side

PBK_DL_COEFFICIENT(2,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 3, right
                            ! side
PBK_DL_GAIN(2,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,3,2) MPa ;
PBK_DL_FZ_CONSTANT(2,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 3, right side

PBK_DL_COEFFICIENT(2,4,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 4, left
                            ! side
PBK_DL_GAIN(2,4,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,4,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,4,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,4,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,4,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,4,1) MPa ;
PBK_DL_FZ_CONSTANT(2,4,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 4, left side

PBK_DL_COEFFICIENT(2,4,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 4, right
                            ! side
PBK_DL_GAIN(2,4,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,4,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,4,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,4,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,4,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,4,2) MPa ;
PBK_DL_FZ_CONSTANT(2,4,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 4, right side

PBK_DL_COEFFICIENT(2,5,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 5, left
                            ! side
PBK_DL_GAIN(2,5,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,5,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,5,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,5,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,5,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,5,1) MPa ;
PBK_DL_FZ_CONSTANT(2,5,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 5, left side

PBK_DL_COEFFICIENT(2,5,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 5, right
                            ! side
PBK_DL_GAIN(2,5,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,5,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,5,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,5,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,5,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,5,2) MPa ;
PBK_DL_FZ_CONSTANT(2,5,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 5, right side

PBK_DL_COEFFICIENT(2,6,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 6, left
                            ! side
PBK_DL_GAIN(2,6,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,6,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,6,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,6,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,6,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,6,1) MPa ;
PBK_DL_FZ_CONSTANT(2,6,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 6, left side

PBK_DL_COEFFICIENT(2,6,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 6, right
                            ! side
PBK_DL_GAIN(2,6,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,6,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,6,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,6,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,6,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,6,2) MPa ;
PBK_DL_FZ_CONSTANT(2,6,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 6, right side

PBK_DL_COEFFICIENT(2,7,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 7, left
                            ! side
PBK_DL_GAIN(2,7,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,7,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,7,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,7,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,7,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,7,1) MPa ;
PBK_DL_FZ_CONSTANT(2,7,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 7, left side

PBK_DL_COEFFICIENT(2,7,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 7, right
                            ! side
PBK_DL_GAIN(2,7,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,7,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,7,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,7,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,7,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,7,2) MPa ;
PBK_DL_FZ_CONSTANT(2,7,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 7, right side

PBK_DL_COEFFICIENT(2,8,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 8, left
                            ! side
PBK_DL_GAIN(2,8,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,8,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,8,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,8,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,8,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,8,1) MPa ;
PBK_DL_FZ_CONSTANT(2,8,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 8, left side

PBK_DL_COEFFICIENT(2,8,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 8, right
                            ! side
PBK_DL_GAIN(2,8,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,8,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,8,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,8,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,8,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,8,2) MPa ;
PBK_DL_FZ_CONSTANT(2,8,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 8, right side

PBK_DL_COEFFICIENT(2,9,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 9, left
                            ! side
PBK_DL_GAIN(2,9,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,9,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,9,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,9,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,9,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,9,1) MPa ;
PBK_DL_FZ_CONSTANT(2,9,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 9, left side

PBK_DL_COEFFICIENT(2,9,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 2, axle 9, right
                            ! side
PBK_DL_GAIN(2,9,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,9,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,9,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(2,9,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,9,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,9,2) MPa ;
PBK_DL_FZ_CONSTANT(2,9,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 2, axle 9, right side

PBK_DL_COEFFICIENT(2,10,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 10, left
                             ! side
PBK_DL_GAIN(2,10,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,10,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,10,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,10,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,10,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,10,1) MPa ;
PBK_DL_FZ_CONSTANT(2,10,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 10, left side

PBK_DL_COEFFICIENT(2,10,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 10, right
                             ! side
PBK_DL_GAIN(2,10,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,10,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,10,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,10,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,10,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,10,2) MPa ;
PBK_DL_FZ_CONSTANT(2,10,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 10, right side

PBK_DL_COEFFICIENT(2,11,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 11, left
                             ! side
PBK_DL_GAIN(2,11,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,11,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,11,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,11,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,11,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,11,1) MPa ;
PBK_DL_FZ_CONSTANT(2,11,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 11, left side

PBK_DL_COEFFICIENT(2,11,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 11, right
                             ! side
PBK_DL_GAIN(2,11,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,11,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,11,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,11,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,11,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,11,2) MPa ;
PBK_DL_FZ_CONSTANT(2,11,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 11, right side

PBK_DL_COEFFICIENT(2,12,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 12, left
                             ! side
PBK_DL_GAIN(2,12,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,12,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,12,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,12,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,12,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,12,1) MPa ;
PBK_DL_FZ_CONSTANT(2,12,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 12, left side

PBK_DL_COEFFICIENT(2,12,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 12, right
                             ! side
PBK_DL_GAIN(2,12,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,12,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,12,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,12,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,12,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,12,2) MPa ;
PBK_DL_FZ_CONSTANT(2,12,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 12, right side

PBK_DL_COEFFICIENT(2,13,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 13, left
                             ! side
PBK_DL_GAIN(2,13,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,13,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,13,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,13,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,13,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,13,1) MPa ;
PBK_DL_FZ_CONSTANT(2,13,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 13, left side

PBK_DL_COEFFICIENT(2,13,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 13, right
                             ! side
PBK_DL_GAIN(2,13,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,13,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,13,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,13,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,13,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,13,2) MPa ;
PBK_DL_FZ_CONSTANT(2,13,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 13, right side

PBK_DL_COEFFICIENT(2,14,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 14, left
                             ! side
PBK_DL_GAIN(2,14,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,14,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,14,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,14,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,14,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,14,1) MPa ;
PBK_DL_FZ_CONSTANT(2,14,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 14, left side

PBK_DL_COEFFICIENT(2,14,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 2, axle 14, right
                             ! side
PBK_DL_GAIN(2,14,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,14,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,14,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(2,14,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,14,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,14,2) MPa ;
PBK_DL_FZ_CONSTANT(2,14,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 2, axle 14, right side

PBK_DL_COEFFICIENT(3,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, left
                            ! side
PBK_DL_GAIN(3,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,1,1) MPa ;
PBK_DL_FZ_CONSTANT(3,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, left side

PBK_DL_COEFFICIENT(3,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 1, right
                            ! side
PBK_DL_GAIN(3,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,1,2) MPa ;
PBK_DL_FZ_CONSTANT(3,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 1, right side

PBK_DL_COEFFICIENT(3,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, left
                            ! side
PBK_DL_GAIN(3,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,2,1) MPa ;
PBK_DL_FZ_CONSTANT(3,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, left side

PBK_DL_COEFFICIENT(3,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 2, right
                            ! side
PBK_DL_GAIN(3,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,2,2) MPa ;
PBK_DL_FZ_CONSTANT(3,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 2, right side

PBK_DL_COEFFICIENT(3,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 3, left
                            ! side
PBK_DL_GAIN(3,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,3,1) MPa ;
PBK_DL_FZ_CONSTANT(3,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 3, left side

PBK_DL_COEFFICIENT(3,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 3, right
                            ! side
PBK_DL_GAIN(3,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,3,2) MPa ;
PBK_DL_FZ_CONSTANT(3,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 3, right side

PBK_DL_COEFFICIENT(3,4,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 4, left
                            ! side
PBK_DL_GAIN(3,4,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,4,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,4,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,4,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,4,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,4,1) MPa ;
PBK_DL_FZ_CONSTANT(3,4,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 4, left side

PBK_DL_COEFFICIENT(3,4,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 4, right
                            ! side
PBK_DL_GAIN(3,4,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,4,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,4,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,4,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,4,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,4,2) MPa ;
PBK_DL_FZ_CONSTANT(3,4,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 4, right side

PBK_DL_COEFFICIENT(3,5,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 5, left
                            ! side
PBK_DL_GAIN(3,5,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,5,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,5,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,5,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,5,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,5,1) MPa ;
PBK_DL_FZ_CONSTANT(3,5,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 5, left side

PBK_DL_COEFFICIENT(3,5,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 5, right
                            ! side
PBK_DL_GAIN(3,5,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,5,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,5,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,5,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,5,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,5,2) MPa ;
PBK_DL_FZ_CONSTANT(3,5,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 5, right side

PBK_DL_COEFFICIENT(3,6,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 6, left
                            ! side
PBK_DL_GAIN(3,6,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,6,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,6,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,6,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,6,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,6,1) MPa ;
PBK_DL_FZ_CONSTANT(3,6,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 6, left side

PBK_DL_COEFFICIENT(3,6,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 6, right
                            ! side
PBK_DL_GAIN(3,6,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,6,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,6,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,6,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,6,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,6,2) MPa ;
PBK_DL_FZ_CONSTANT(3,6,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 6, right side

PBK_DL_COEFFICIENT(3,7,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 7, left
                            ! side
PBK_DL_GAIN(3,7,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,7,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,7,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,7,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,7,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,7,1) MPa ;
PBK_DL_FZ_CONSTANT(3,7,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 7, left side

PBK_DL_COEFFICIENT(3,7,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 7, right
                            ! side
PBK_DL_GAIN(3,7,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,7,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,7,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,7,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,7,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,7,2) MPa ;
PBK_DL_FZ_CONSTANT(3,7,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 7, right side

PBK_DL_COEFFICIENT(3,8,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 8, left
                            ! side
PBK_DL_GAIN(3,8,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,8,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,8,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,8,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,8,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,8,1) MPa ;
PBK_DL_FZ_CONSTANT(3,8,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 8, left side

PBK_DL_COEFFICIENT(3,8,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 8, right
                            ! side
PBK_DL_GAIN(3,8,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,8,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,8,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,8,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,8,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,8,2) MPa ;
PBK_DL_FZ_CONSTANT(3,8,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 8, right side

PBK_DL_COEFFICIENT(3,9,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 9, left
                            ! side
PBK_DL_GAIN(3,9,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,9,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,9,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,9,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,9,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,9,1) MPa ;
PBK_DL_FZ_CONSTANT(3,9,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 9, left side

PBK_DL_COEFFICIENT(3,9,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 3, axle 9, right
                            ! side
PBK_DL_GAIN(3,9,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,9,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,9,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(3,9,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,9,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,9,2) MPa ;
PBK_DL_FZ_CONSTANT(3,9,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 3, axle 9, right side

PBK_DL_COEFFICIENT(3,10,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 10, left
                             ! side
PBK_DL_GAIN(3,10,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,10,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,10,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,10,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,10,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,10,1) MPa ;
PBK_DL_FZ_CONSTANT(3,10,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 10, left side

PBK_DL_COEFFICIENT(3,10,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 10, right
                             ! side
PBK_DL_GAIN(3,10,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,10,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,10,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,10,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,10,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,10,2) MPa ;
PBK_DL_FZ_CONSTANT(3,10,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 10, right side

PBK_DL_COEFFICIENT(3,11,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 11, left
                             ! side
PBK_DL_GAIN(3,11,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,11,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,11,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,11,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,11,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,11,1) MPa ;
PBK_DL_FZ_CONSTANT(3,11,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 11, left side

PBK_DL_COEFFICIENT(3,11,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 11, right
                             ! side
PBK_DL_GAIN(3,11,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,11,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,11,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,11,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,11,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,11,2) MPa ;
PBK_DL_FZ_CONSTANT(3,11,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 11, right side

PBK_DL_COEFFICIENT(3,12,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 12, left
                             ! side
PBK_DL_GAIN(3,12,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,12,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,12,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,12,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,12,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,12,1) MPa ;
PBK_DL_FZ_CONSTANT(3,12,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 12, left side

PBK_DL_COEFFICIENT(3,12,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 12, right
                             ! side
PBK_DL_GAIN(3,12,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,12,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,12,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,12,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,12,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,12,2) MPa ;
PBK_DL_FZ_CONSTANT(3,12,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 12, right side

PBK_DL_COEFFICIENT(3,13,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 13, left
                             ! side
PBK_DL_GAIN(3,13,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,13,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,13,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,13,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,13,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,13,1) MPa ;
PBK_DL_FZ_CONSTANT(3,13,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 13, left side

PBK_DL_COEFFICIENT(3,13,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 13, right
                             ! side
PBK_DL_GAIN(3,13,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,13,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,13,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,13,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,13,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,13,2) MPa ;
PBK_DL_FZ_CONSTANT(3,13,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 13, right side

PBK_DL_COEFFICIENT(3,14,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 14, left
                             ! side
PBK_DL_GAIN(3,14,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,14,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,14,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,14,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,14,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,14,1) MPa ;
PBK_DL_FZ_CONSTANT(3,14,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 14, left side

PBK_DL_COEFFICIENT(3,14,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 3, axle 14, right
                             ! side
PBK_DL_GAIN(3,14,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(3,14,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(3,14,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(3,14,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(3,14,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(3,14,2) MPa ;
PBK_DL_FZ_CONSTANT(3,14,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 3, axle 14, right side

PBK_DL_COEFFICIENT(4,1,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, left
                            ! side
PBK_DL_GAIN(4,1,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,1,1) MPa ;
PBK_DL_FZ_CONSTANT(4,1,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, left side

PBK_DL_COEFFICIENT(4,1,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 1, right
                            ! side
PBK_DL_GAIN(4,1,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,1,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,1,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,1,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,1,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,1,2) MPa ;
PBK_DL_FZ_CONSTANT(4,1,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 1, right side

PBK_DL_COEFFICIENT(4,2,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 2, left
                            ! side
PBK_DL_GAIN(4,2,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,2,1) MPa ;
PBK_DL_FZ_CONSTANT(4,2,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, left side

PBK_DL_COEFFICIENT(4,2,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 2, right
                            ! side
PBK_DL_GAIN(4,2,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,2,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,2,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,2,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,2,2) MPa ;
PBK_DL_FZ_CONSTANT(4,2,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 2, right side

PBK_DL_COEFFICIENT(4,3,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 3, left
                            ! side
PBK_DL_GAIN(4,3,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,3,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,3,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,3,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,3,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,3,1) MPa ;
PBK_DL_FZ_CONSTANT(4,3,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 3, left side

PBK_DL_COEFFICIENT(4,3,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 3, right
                            ! side
PBK_DL_GAIN(4,3,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,3,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,3,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,3,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,3,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,3,2) MPa ;
PBK_DL_FZ_CONSTANT(4,3,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 3, right side

PBK_DL_COEFFICIENT(4,4,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 4, left
                            ! side
PBK_DL_GAIN(4,4,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,4,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,4,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,4,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,4,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,4,1) MPa ;
PBK_DL_FZ_CONSTANT(4,4,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 4, left side

PBK_DL_COEFFICIENT(4,4,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 4, right
                            ! side
PBK_DL_GAIN(4,4,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,4,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,4,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,4,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,4,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,4,2) MPa ;
PBK_DL_FZ_CONSTANT(4,4,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 4, right side

PBK_DL_COEFFICIENT(4,5,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 5, left
                            ! side
PBK_DL_GAIN(4,5,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,5,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,5,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,5,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,5,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,5,1) MPa ;
PBK_DL_FZ_CONSTANT(4,5,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 5, left side

PBK_DL_COEFFICIENT(4,5,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 5, right
                            ! side
PBK_DL_GAIN(4,5,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,5,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,5,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,5,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,5,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,5,2) MPa ;
PBK_DL_FZ_CONSTANT(4,5,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 5, right side

PBK_DL_COEFFICIENT(4,6,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 6, left
                            ! side
PBK_DL_GAIN(4,6,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,6,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,6,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,6,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,6,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,6,1) MPa ;
PBK_DL_FZ_CONSTANT(4,6,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 6, left side

PBK_DL_COEFFICIENT(4,6,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 6, right
                            ! side
PBK_DL_GAIN(4,6,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,6,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,6,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,6,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,6,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,6,2) MPa ;
PBK_DL_FZ_CONSTANT(4,6,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 6, right side

PBK_DL_COEFFICIENT(4,7,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 7, left
                            ! side
PBK_DL_GAIN(4,7,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,7,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,7,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,7,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,7,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,7,1) MPa ;
PBK_DL_FZ_CONSTANT(4,7,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 7, left side

PBK_DL_COEFFICIENT(4,7,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 7, right
                            ! side
PBK_DL_GAIN(4,7,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,7,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,7,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,7,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,7,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,7,2) MPa ;
PBK_DL_FZ_CONSTANT(4,7,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 7, right side

PBK_DL_COEFFICIENT(4,8,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 8, left
                            ! side
PBK_DL_GAIN(4,8,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,8,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,8,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,8,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,8,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,8,1) MPa ;
PBK_DL_FZ_CONSTANT(4,8,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 8, left side

PBK_DL_COEFFICIENT(4,8,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 8, right
                            ! side
PBK_DL_GAIN(4,8,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,8,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,8,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,8,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,8,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,8,2) MPa ;
PBK_DL_FZ_CONSTANT(4,8,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 8, right side

PBK_DL_COEFFICIENT(4,9,1) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 9, left
                            ! side
PBK_DL_GAIN(4,9,1)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,9,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,9,1) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,9,1) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,9,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,9,1) MPa ;
PBK_DL_FZ_CONSTANT(4,9,1) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 9, left side

PBK_DL_COEFFICIENT(4,9,2) 1 ! Coefficient: delivery pressure per unit master
                            ! cylinder pressure (MPa/MPa), unit 4, axle 9, right
                            ! side
PBK_DL_GAIN(4,9,2)  1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,9,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,9,2) 0 ; MPa ! Offset subtracted from master cylinder
                              ! pressure
PBK_CON_SCALE_PBK_DL(4,9,2) 1 ! Scale factor divided into (master cylinder pressure
                              ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,9,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,9,2) MPa ;
PBK_DL_FZ_CONSTANT(4,9,2) 0 ; MPa ! Constant delivery pressure component due to
                            ! dynamic wheel load, unit 4, axle 9, right side

PBK_DL_COEFFICIENT(4,10,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 10, left
                             ! side
PBK_DL_GAIN(4,10,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,10,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,10,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,10,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,10,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,10,1) MPa ;
PBK_DL_FZ_CONSTANT(4,10,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 10, left side

PBK_DL_COEFFICIENT(4,10,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 10, right
                             ! side
PBK_DL_GAIN(4,10,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,10,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,10,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,10,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,10,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,10,2) MPa ;
PBK_DL_FZ_CONSTANT(4,10,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 10, right side

PBK_DL_COEFFICIENT(4,11,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 11, left
                             ! side
PBK_DL_GAIN(4,11,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,11,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,11,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,11,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,11,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,11,1) MPa ;
PBK_DL_FZ_CONSTANT(4,11,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 11, left side

PBK_DL_COEFFICIENT(4,11,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 11, right
                             ! side
PBK_DL_GAIN(4,11,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,11,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,11,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,11,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,11,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,11,2) MPa ;
PBK_DL_FZ_CONSTANT(4,11,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 11, right side

PBK_DL_COEFFICIENT(4,12,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 12, left
                             ! side
PBK_DL_GAIN(4,12,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,12,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,12,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,12,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,12,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,12,1) MPa ;
PBK_DL_FZ_CONSTANT(4,12,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 12, left side

PBK_DL_COEFFICIENT(4,12,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 12, right
                             ! side
PBK_DL_GAIN(4,12,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,12,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,12,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,12,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,12,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,12,2) MPa ;
PBK_DL_FZ_CONSTANT(4,12,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 12, right side

PBK_DL_COEFFICIENT(4,13,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 13, left
                             ! side
PBK_DL_GAIN(4,13,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,13,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,13,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,13,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,13,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,13,1) MPa ;
PBK_DL_FZ_CONSTANT(4,13,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 13, left side

PBK_DL_COEFFICIENT(4,13,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 13, right
                             ! side
PBK_DL_GAIN(4,13,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,13,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,13,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,13,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,13,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,13,2) MPa ;
PBK_DL_FZ_CONSTANT(4,13,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 13, right side

PBK_DL_COEFFICIENT(4,14,1) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 14, left
                             ! side
PBK_DL_GAIN(4,14,1) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,14,1) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,14,1) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,14,1) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,14,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,14,1) MPa ;
PBK_DL_FZ_CONSTANT(4,14,1) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 14, left side

PBK_DL_COEFFICIENT(4,14,2) 1 ! Coefficient: delivery pressure per unit master
                             ! cylinder pressure (MPa/MPa), unit 4, axle 14, right
                             ! side
PBK_DL_GAIN(4,14,2) 1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(4,14,2) 0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(4,14,2) 0 ; MPa ! Offset subtracted from master cylinder
                               ! pressure
PBK_CON_SCALE_PBK_DL(4,14,2) 1 ! Scale factor divided into (master cylinder pressure
                               ! - PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(4,14,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(4,14,2) MPa ;
PBK_DL_FZ_CONSTANT(4,14,2) 0 ; MPa ! Constant delivery pressure component due to
                             ! dynamic wheel load, unit 4, axle 14, right side

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 2.05
 0.91, 1
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! Small Bumps Smoothed

! 2D table: row 1 has "0" (place holder) followed by 6 values of lateral position
! (m). Other rows have station (m) followed by 6 values of dZ (m).
ROAD_DZ_CARPET(1) 2D_LINEAR
 0, -10, -4.2, -3.5, 3.5, 4.2, 10
 0, -0.4, -0.4, 0, 0, -0.4, -0.4
 10, -0.4, -0.4, 0, 0, -0.4, -0.4
 10.1, -0.4, -0.4, 0.00117035, 0.00117035, -0.4, -0.4
 10.2, -0.4, -0.4, 0.00466314, 0.00466314, -0.4, -0.4
 10.3, -0.4, -0.4, 0.0104239, 0.0104239, -0.4, -0.4
 10.4, -0.4, -0.4, 0.0183626, 0.0183626, -0.4, -0.4
 10.5, -0.4, -0.4, 0.0283555, 0.0283555, -0.4, -0.4
 10.6, -0.4, -0.4, 0.0402467, 0.0402467, -0.4, -0.4
 10.7, -0.4, -0.4, 0.0538505, 0.0538505, -0.4, -0.4
 10.8, -0.4, -0.4, 0.0689547, 0.0689547, -0.4, -0.4
 10.9, -0.4, -0.4, 0.0853235, 0.0853235, -0.4, -0.4
 11, -0.4, -0.4, 0.102702, 0.102702, -0.4, -0.4
 11.1, -0.4, -0.4, 0.120818, 0.120818, -0.4, -0.4
 11.2, -0.4, -0.4, 0.139389, 0.139389, -0.4, -0.4
 11.3, -0.4, -0.4, 0.158127, 0.158127, -0.4, -0.4
 11.4, -0.4, -0.4, 0.176737, 0.176737, -0.4, -0.4
 11.5, -0.4, -0.4, 0.19493, 0.19493, -0.4, -0.4
 11.6, -0.4, -0.4, 0.212422, 0.212422, -0.4, -0.4
 11.7, -0.4, -0.4, 0.22894, 0.22894, -0.4, -0.4
 11.8, -0.4, -0.4, 0.244226, 0.244226, -0.4, -0.4
 11.9, -0.4, -0.4, 0.258042, 0.258042, -0.4, -0.4
 12, -0.4, -0.4, 0.270172, 0.270172, -0.4, -0.4
 12.1, -0.4, -0.4, 0.280426, 0.280426, -0.4, -0.4
 12.2, -0.4, -0.4, 0.288645, 0.288645, -0.4, -0.4
 12.3, -0.4, -0.4, 0.294701, 0.294701, -0.4, -0.4
 12.4, -0.4, -0.4, 0.298499, 0.298499, -0.4, -0.4
 12.5, -0.4, -0.4, 0.299979, 0.299979, -0.4, -0.4
 12.6, -0.4, -0.4, 0.299119, 0.299119, -0.4, -0.4
 12.7, -0.4, -0.4, 0.295933, 0.295933, -0.4, -0.4
 12.8, -0.4, -0.4, 0.290469, 0.290469, -0.4, -0.4
 12.9, -0.4, -0.4, 0.282812, 0.282812, -0.4, -0.4
 13, -0.4, -0.4, 0.273084, 0.273084, -0.4, -0.4
 13.1, -0.4, -0.4, 0.261435, 0.261435, -0.4, -0.4
 13.2, -0.4, -0.4, 0.248047, 0.248047, -0.4, -0.4
 13.3, -0.4, -0.4, 0.233128, 0.233128, -0.4, -0.4
 13.4, -0.4, -0.4, 0.216913, 0.216913, -0.4, -0.4
 13.5, -0.4, -0.4, 0.199654, 0.199654, -0.4, -0.4
 13.6, -0.4, -0.4, 0.181619, 0.181619, -0.4, -0.4
 13.7, -0.4, -0.4, 0.163092, 0.163092, -0.4, -0.4
 13.8, -0.4, -0.4, 0.14436, 0.14436, -0.4, -0.4
 13.9, -0.4, -0.4, 0.125716, 0.125716, -0.4, -0.4
 14, -0.4, -0.4, 0.107451, 0.107451, -0.4, -0.4
 14.1, -0.4, -0.4, 0.0898496, 0.0898496, -0.4, -0.4
 14.2, -0.4, -0.4, 0.0731872, 0.0731872, -0.4, -0.4
 14.3, -0.4, -0.4, 0.0577234, 0.0577234, -0.4, -0.4
 14.4, -0.4, -0.4, 0.0436995, 0.0436995, -0.4, -0.4
 14.5, -0.4, -0.4, 0.0313345, 0.0313345, -0.4, -0.4
 14.6, -0.4, -0.4, 0.0208211, 0.0208211, -0.4, -0.4
 14.7, -0.4, -0.4, 0.0123236, 0.0123236, -0.4, -0.4
 14.8, -0.4, -0.4, 0.00597446, 0.00597446, -0.4, -0.4
 14.9, -0.4, -0.4, 0.00187278, 0.00187278, -0.4, -0.4
 15, -0.4, -0.4, 8.25873e-05, 8.25873e-05, -0.4, -0.4
 15.1, -0.4, -0.4, 0, 0, -0.4, -0.4
 29.9, -0.4, -0.4, 0, 0, -0.4, -0.4
 30, -0.4, -0.4, 0, 0, -0.4, -0.4
 30.1, -0.4, -0.4, 0.00117035, 0.00117035, -0.4, -0.4
 30.2, -0.4, -0.4, 0.00466314, 0.00466314, -0.4, -0.4
 30.3, -0.4, -0.4, 0.0104239, 0.0104239, -0.4, -0.4
 30.4, -0.4, -0.4, 0.0183626, 0.0183626, -0.4, -0.4
 30.5, -0.4, -0.4, 0.0283555, 0.0283555, -0.4, -0.4
 30.6, -0.4, -0.4, 0.0402467, 0.0402467, -0.4, -0.4
 30.7, -0.4, -0.4, 0.0538505, 0.0538505, -0.4, -0.4
 30.8, -0.4, -0.4, 0.0689547, 0.0689547, -0.4, -0.4
 30.9, -0.4, -0.4, 0.0853235, 0.0853235, -0.4, -0.4
 31, -0.4, -0.4, 0.102702, 0.102702, -0.4, -0.4
 31.1, -0.4, -0.4, 0.120818, 0.120818, -0.4, -0.4
 31.2, -0.4, -0.4, 0.139389, 0.139389, -0.4, -0.4
 31.3, -0.4, -0.4, 0.158127, 0.158127, -0.4, -0.4
 31.4, -0.4, -0.4, 0.176737, 0.176737, -0.4, -0.4
 31.5, -0.4, -0.4, 0.19493, 0.19493, -0.4, -0.4
 31.6, -0.4, -0.4, 0.212422, 0.212422, -0.4, -0.4
 31.7, -0.4, -0.4, 0.22894, 0.22894, -0.4, -0.4
 31.8, -0.4, -0.4, 0.244226, 0.244226, -0.4, -0.4
 31.9, -0.4, -0.4, 0.258042, 0.258042, -0.4, -0.4
 32, -0.4, -0.4, 0.270172, 0.270172, -0.4, -0.4
 32.1, -0.4, -0.4, 0.280426, 0.280426, -0.4, -0.4
 32.2, -0.4, -0.4, 0.288645, 0.288645, -0.4, -0.4
 32.3, -0.4, -0.4, 0.294701, 0.294701, -0.4, -0.4
 32.4, -0.4, -0.4, 0.298499, 0.298499, -0.4, -0.4
 32.5, -0.4, -0.4, 0.299979, 0.299979, -0.4, -0.4
 32.6, -0.4, -0.4, 0.299119, 0.299119, -0.4, -0.4
 32.7, -0.4, -0.4, 0.295933, 0.295933, -0.4, -0.4
 32.8, -0.4, -0.4, 0.290469, 0.290469, -0.4, -0.4
 32.9, -0.4, -0.4, 0.282812, 0.282812, -0.4, -0.4
 33, -0.4, -0.4, 0.273084, 0.273084, -0.4, -0.4
 33.1, -0.4, -0.4, 0.261435, 0.261435, -0.4, -0.4
 33.2, -0.4, -0.4, 0.248047, 0.248047, -0.4, -0.4
 33.3, -0.4, -0.4, 0.233128, 0.233128, -0.4, -0.4
 33.4, -0.4, -0.4, 0.216913, 0.216913, -0.4, -0.4
 33.5, -0.4, -0.4, 0.199654, 0.199654, -0.4, -0.4
 33.6, -0.4, -0.4, 0.181619, 0.181619, -0.4, -0.4
 33.7, -0.4, -0.4, 0.163092, 0.163092, -0.4, -0.4
 33.8, -0.4, -0.4, 0.14436, 0.14436, -0.4, -0.4
 33.9, -0.4, -0.4, 0.125716, 0.125716, -0.4, -0.4
 34, -0.4, -0.4, 0.107451, 0.107451, -0.4, -0.4
 34.1, -0.4, -0.4, 0.0898496, 0.0898496, -0.4, -0.4
 34.2, -0.4, -0.4, 0.0731872, 0.0731872, -0.4, -0.4
 34.3, -0.4, -0.4, 0.0577234, 0.0577234, -0.4, -0.4
 34.4, -0.4, -0.4, 0.0436995, 0.0436995, -0.4, -0.4
 34.5, -0.4, -0.4, 0.0313345, 0.0313345, -0.4, -0.4
 34.6, -0.4, -0.4, 0.0208211, 0.0208211, -0.4, -0.4
 34.7, -0.4, -0.4, 0.0123236, 0.0123236, -0.4, -0.4
 34.8, -0.4, -0.4, 0.00597446, 0.00597446, -0.4, -0.4
 34.9, -0.4, -0.4, 0.00187278, 0.00187278, -0.4, -0.4
 35, -0.4, -0.4, 8.25873e-05, 8.25873e-05, -0.4, -0.4
 35.1, -0.4, -0.4, 0, 0, -0.4, -0.4
 89.9, -0.4, -0.4, 0, 0, -0.4, -0.4
 90, -0.4, -0.4, 0, 0, -0.4, -0.4
 90.1, -0.4, -0.4, 0.00117035, 0.00117035, -0.4, -0.4
 90.2, -0.4, -0.4, 0.00466314, 0.00466314, -0.4, -0.4
 90.3, -0.4, -0.4, 0.0104239, 0.0104239, -0.4, -0.4
 90.4, -0.4, -0.4, 0.0183626, 0.0183626, -0.4, -0.4
 90.5, -0.4, -0.4, 0.0283555, 0.0283555, -0.4, -0.4
 90.6, -0.4, -0.4, 0.0402467, 0.0402467, -0.4, -0.4
 90.7, -0.4, -0.4, 0.0538505, 0.0538505, -0.4, -0.4
 90.8, -0.4, -0.4, 0.0689547, 0.0689547, -0.4, -0.4
 90.9, -0.4, -0.4, 0.0853235, 0.0853235, -0.4, -0.4
 91, -0.4, -0.4, 0.102702, 0.102702, -0.4, -0.4
 91.1, -0.4, -0.4, 0.120818, 0.120818, -0.4, -0.4
 91.2, -0.4, -0.4, 0.139389, 0.139389, -0.4, -0.4
 91.3, -0.4, -0.4, 0.158127, 0.158127, -0.4, -0.4
 91.4, -0.4, -0.4, 0.176737, 0.176737, -0.4, -0.4
 91.5, -0.4, -0.4, 0.19493, 0.19493, -0.4, -0.4
 91.6, -0.4, -0.4, 0.212422, 0.212422, -0.4, -0.4
 91.7, -0.4, -0.4, 0.22894, 0.22894, -0.4, -0.4
 91.8, -0.4, -0.4, 0.244226, 0.244226, -0.4, -0.4
 91.9, -0.4, -0.4, 0.258042, 0.258042, -0.4, -0.4
 92, -0.4, -0.4, 0.270172, 0.270172, -0.4, -0.4
 92.1, -0.4, -0.4, 0.280426, 0.280426, -0.4, -0.4
 92.2, -0.4, -0.4, 0.288645, 0.288645, -0.4, -0.4
 92.3, -0.4, -0.4, 0.294701, 0.294701, -0.4, -0.4
 92.4, -0.4, -0.4, 0.298499, 0.298499, -0.4, -0.4
 92.5, -0.4, -0.4, 0.299979, 0.299979, -0.4, -0.4
 92.6, -0.4, -0.4, 0.299119, 0.299119, -0.4, -0.4
 92.7, -0.4, -0.4, 0.295933, 0.295933, -0.4, -0.4
 92.8, -0.4, -0.4, 0.290469, 0.290469, -0.4, -0.4
 92.9, -0.4, -0.4, 0.282812, 0.282812, -0.4, -0.4
 93, -0.4, -0.4, 0.273084, 0.273084, -0.4, -0.4
 93.1, -0.4, -0.4, 0.261435, 0.261435, -0.4, -0.4
 93.2, -0.4, -0.4, 0.248047, 0.248047, -0.4, -0.4
 93.3, -0.4, -0.4, 0.233128, 0.233128, -0.4, -0.4
 93.4, -0.4, -0.4, 0.216913, 0.216913, -0.4, -0.4
 93.5, -0.4, -0.4, 0.199654, 0.199654, -0.4, -0.4
 93.6, -0.4, -0.4, 0.181619, 0.181619, -0.4, -0.4
 93.7, -0.4, -0.4, 0.163092, 0.163092, -0.4, -0.4
 93.8, -0.4, -0.4, 0.14436, 0.14436, -0.4, -0.4
 93.9, -0.4, -0.4, 0.125716, 0.125716, -0.4, -0.4
 94, -0.4, -0.4, 0.107451, 0.107451, -0.4, -0.4
 94.1, -0.4, -0.4, 0.0898496, 0.0898496, -0.4, -0.4
 94.2, -0.4, -0.4, 0.0731872, 0.0731872, -0.4, -0.4
 94.3, -0.4, -0.4, 0.0577234, 0.0577234, -0.4, -0.4
 94.4, -0.4, -0.4, 0.0436995, 0.0436995, -0.4, -0.4
 94.5, -0.4, -0.4, 0.0313345, 0.0313345, -0.4, -0.4
 94.6, -0.4, -0.4, 0.0208211, 0.0208211, -0.4, -0.4
 94.7, -0.4, -0.4, 0.0123236, 0.0123236, -0.4, -0.4
 94.8, -0.4, -0.4, 0.00597446, 0.00597446, -0.4, -0.4
 94.9, -0.4, -0.4, 0.00187278, 0.00187278, -0.4, -0.4
 95, -0.4, -0.4, 8.25873e-05, 8.25873e-05, -0.4, -0.4
 95.1, -0.4, -0.4, 0, 0, -0.4, -0.4
 95.2, -0.4, -0.4, 0, 0, -0.4, -0.4
 97.9, -0.4, -0.4, 0, 0, -0.4, -0.4
 98, -0.4, -0.4, 0.00117035, 0.00117035, -0.4, -0.4
 98.1, -0.4, -0.4, 0.00466314, 0.00466314, -0.4, -0.4
 98.2, -0.4, -0.4, 0.0104239, 0.0104239, -0.4, -0.4
 98.3, -0.4, -0.4, 0.0183626, 0.0183626, -0.4, -0.4
 98.4, -0.4, -0.4, 0.0283555, 0.0283555, -0.4, -0.4
 98.5, -0.4, -0.4, 0.0402467, 0.0402467, -0.4, -0.4
 98.6, -0.4, -0.4, 0.0538505, 0.0538505, -0.4, -0.4
 98.7, -0.4, -0.4, 0.0689547, 0.0689547, -0.4, -0.4
 98.8, -0.4, -0.4, 0.0853235, 0.0853235, -0.4, -0.4
 98.9, -0.4, -0.4, 0.102702, 0.102702, -0.4, -0.4
 99, -0.4, -0.4, 0.120818, 0.120818, -0.4, -0.4
 99.1, -0.4, -0.4, 0.139389, 0.139389, -0.4, -0.4
 99.2, -0.4, -0.4, 0.158127, 0.158127, -0.4, -0.4
 99.3, -0.4, -0.4, 0.176737, 0.176737, -0.4, -0.4
 99.4, -0.4, -0.4, 0.19493, 0.19493, -0.4, -0.4
 99.5, -0.4, -0.4, 0.212422, 0.212422, -0.4, -0.4
 99.6, -0.4, -0.4, 0.22894, 0.22894, -0.4, -0.4
 99.7, -0.4, -0.4, 0.244226, 0.244226, -0.4, -0.4
 99.8, -0.4, -0.4, 0.258042, 0.258042, -0.4, -0.4
 99.9, -0.4, -0.4, 0.270172, 0.270172, -0.4, -0.4
 100, -0.4, -0.4, 0.280426, 0.280426, -0.4, -0.4
 100.1, -0.4, -0.4, 0.288645, 0.288645, -0.4, -0.4
 100.2, -0.4, -0.4, 0.294701, 0.294701, -0.4, -0.4
 100.3, -0.4, -0.4, 0.298499, 0.298499, -0.4, -0.4
 100.4, -0.4, -0.4, 0.299979, 0.299979, -0.4, -0.4
 100.5, -0.4, -0.4, 0.299119, 0.299119, -0.4, -0.4
 100.6, -0.4, -0.4, 0.295933, 0.295933, -0.4, -0.4
 100.7, -0.4, -0.4, 0.290469, 0.290469, -0.4, -0.4
 100.8, -0.4, -0.4, 0.282812, 0.282812, -0.4, -0.4
 100.9, -0.4, -0.4, 0.273084, 0.273084, -0.4, -0.4
 101, -0.4, -0.4, 0.261435, 0.261435, -0.4, -0.4
 101.1, -0.4, -0.4, 0.248047, 0.248047, -0.4, -0.4
 101.2, -0.4, -0.4, 0.233128, 0.233128, -0.4, -0.4
 101.3, -0.4, -0.4, 0.216913, 0.216913, -0.4, -0.4
 101.4, -0.4, -0.4, 0.199654, 0.199654, -0.4, -0.4
 101.5, -0.4, -0.4, 0.181619, 0.181619, -0.4, -0.4
 101.6, -0.4, -0.4, 0.163092, 0.163092, -0.4, -0.4
 101.7, -0.4, -0.4, 0.14436, 0.14436, -0.4, -0.4
 101.8, -0.4, -0.4, 0.125716, 0.125716, -0.4, -0.4
 101.9, -0.4, -0.4, 0.107451, 0.107451, -0.4, -0.4
 102, -0.4, -0.4, 0.0898496, 0.0898496, -0.4, -0.4
 102.1, -0.4, -0.4, 0.0731872, 0.0731872, -0.4, -0.4
 102.2, -0.4, -0.4, 0.0577234, 0.0577234, -0.4, -0.4
 102.3, -0.4, -0.4, 0.0436995, 0.0436995, -0.4, -0.4
 102.4, -0.4, -0.4, 0.0313345, 0.0313345, -0.4, -0.4
 102.5, -0.4, -0.4, 0.0208211, 0.0208211, -0.4, -0.4
 102.6, -0.4, -0.4, 0.0123236, 0.0123236, -0.4, -0.4
 102.7, -0.4, -0.4, 0.00597446, 0.00597446, -0.4, -0.4
 102.8, -0.4, -0.4, 0.00187278, 0.00187278, -0.4, -0.4
 102.9, -0.4, -0.4, 8.25873e-05, 8.25873e-05, -0.4, -0.4
 103, -0.4, -0.4, 0, 0, -0.4, -0.4
 200, -0.4, -0.4, 0, 0, -0.4, -0.4
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! RR_SURF: Tire/road rolling resistance surface-effect coefficient. RR_SURF can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT or TABLE) combined with a function RR_SURF_L of lateral position
! (CONSTANT or TABLE). Alternatively, a custom equation can be defined at runtime.
! RR_SURF from the calculation can be adjusted with RR_SURF_GAIN and RR_SURF_OFFSET.
! Station used in the calculation can be adjusted with SSCALE_RR_SURF and
! SSTART_RR_SURF. Lateral position used in the calculation can be adjusted with
! L_SCALE_RR_SURF and L_START_RR_SURF. This configurable function supports 200
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

RR_SURF_CONSTANT(1) 1 ; - ! Constant RR_SURF component due to station
RR_SURF_GAIN(1)     1 ! Gain multiplied with calculated value to get RR_SURF
RR_SURF_OFFSET(1)   0 ; - ! Offset added (after gain) to get RR_SURF
RR_SURF_COMBINE(1) MULTIPLY ! How to combine the two components
RR_SURF_L_CONSTANT(1) 1 ; - ! [D] Constant RR_SURF component due to lateral position

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 47 datasets; if indices shown below are not used, e.g., (1,2), the current values
! of the indices IUNIT and IAXLE are used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(1,1) 1 ; - ! Constant gain, unit 1, axle 1
R_STEER_SPEED_GAIN(1,1) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get gain

R_STEER_SPEED_CONSTANT(1,2) 1 ; - ! Constant gain, unit 1, axle 2
R_STEER_SPEED_GAIN(1,2) 1 ! Gain multiplied with calculated value to get gain
R_STEER_SPEED_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get gain

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: Four Small Bumps, 0.3 m incr. elev.
SPEED_TARGET_CONSTANT(1) 15 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 94 datasets; if indices
! shown below are not used, e.g., (1,1,2), the current values of the indices IUNIT,
! IAXLE, and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,1) SPLINE ! unit 1, axle 1, left side
 -36, -32.85
 -34.56, -31.62
 -33.12, -30.39
 -31.68, -29.15
 -30.24, -27.91
 -28.8, -26.66
 -27.36, -25.41
 -25.92, -24.15
 -24.48, -22.89
 -23.04, -21.61
 -21.6, -20.34
 -20.16, -19.05
 -18.72, -17.75
 -17.28, -16.45
 -15.84, -15.14
 -14.4, -13.81
 -12.96, -12.48
 -11.52, -11.14
 -10.08, -9.79
 -8.64, -8.42
 -7.2, -7.05
 -5.76, -5.66
 -4.32, -4.26
 -2.88, -2.86
 -1.44, -1.43
 0, 0
 1.44, 1.45
 2.88, 2.91
 4.32, 4.38
 5.76, 5.86
 7.2, 7.36
 8.64, 8.87
 10.08, 10.39
 11.52, 11.93
 12.96, 13.48
 14.4, 15.04
 15.84, 16.61
 17.28, 18.2
 18.72, 19.79
 20.16, 21.4
 21.6, 23.02
 23.04, 24.65
 24.48, 26.29
 25.92, 27.94
 27.36, 29.6
 28.8, 31.27
 30.24, 32.95
 31.68, 34.63
 33.12, 36.32
 34.56, 38.02
 36, 39.71
ENDTABLE
STEER_KIN_GAIN(1,1,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1,2) SPLINE ! unit 1, axle 1, right side
 -36, -39.71
 -34.56, -38.02
 -33.12, -36.32
 -31.68, -34.63
 -30.24, -32.95
 -28.8, -31.27
 -27.36, -29.6
 -25.92, -27.94
 -24.48, -26.29
 -23.04, -24.65
 -21.6, -23.02
 -20.16, -21.4
 -18.72, -19.79
 -17.28, -18.2
 -15.84, -16.61
 -14.4, -15.04
 -12.96, -13.48
 -11.52, -11.93
 -10.08, -10.39
 -8.64, -8.87
 -7.2, -7.36
 -5.76, -5.86
 -4.32, -4.38
 -2.88, -2.91
 -1.44, -1.45
 0, 0
 1.44, 1.43
 2.88, 2.86
 4.32, 4.26
 5.76, 5.66
 7.2, 7.05
 8.64, 8.42
 10.08, 9.79
 11.52, 11.14
 12.96, 12.48
 14.4, 13.81
 15.84, 15.14
 17.28, 16.45
 18.72, 17.75
 20.16, 19.05
 21.6, 20.34
 23.04, 21.61
 24.48, 22.89
 25.92, 24.15
 27.36, 25.41
 28.8, 26.66
 30.24, 27.91
 31.68, 29.15
 33.12, 30.39
 34.56, 31.62
 36, 32.85
ENDTABLE
STEER_KIN_GAIN(1,1,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2,1) SPLINE ! unit 1, axle 2, left side
 -28.89, -26.29
 -27.73, -25.32
 -26.57, -24.34
 -25.42, -23.36
 -24.26, -22.37
 -23.11, -21.38
 -21.95, -20.38
 -20.8, -19.37
 -19.64, -18.36
 -18.49, -17.34
 -17.33, -16.32
 -16.18, -15.29
 -15.02, -14.25
 -13.86, -13.2
 -12.71, -12.15
 -11.55, -11.09
 -10.4, -10.02
 -9.24, -8.94
 -8.09, -7.86
 -6.93, -6.76
 -5.78, -5.66
 -4.62, -4.54
 -3.47, -3.42
 -2.31, -2.29
 -1.16, -1.15
 0, 0
 1.16, 1.16
 2.31, 2.33
 3.47, 3.51
 4.62, 4.7
 5.78, 5.9
 6.93, 7.11
 8.09, 8.33
 9.24, 9.57
 10.4, 10.81
 11.55, 12.06
 12.71, 13.32
 13.86, 14.6
 15.02, 15.88
 16.18, 17.17
 17.33, 18.47
 18.49, 19.79
 19.64, 21.11
 20.8, 22.44
 21.95, 23.78
 23.11, 25.13
 24.26, 26.48
 25.42, 27.85
 26.57, 29.22
 27.73, 30.6
 28.89, 31.98
ENDTABLE
STEER_KIN_GAIN(1,2,1) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,2,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2,2) SPLINE ! unit 1, axle 2, right side
 -28.89, -31.98
 -27.73, -30.6
 -26.57, -29.22
 -25.42, -27.85
 -24.26, -26.48
 -23.11, -25.13
 -21.95, -23.78
 -20.8, -22.44
 -19.64, -21.11
 -18.49, -19.79
 -17.33, -18.47
 -16.18, -17.17
 -15.02, -15.88
 -13.86, -14.6
 -12.71, -13.32
 -11.55, -12.06
 -10.4, -10.81
 -9.24, -9.57
 -8.09, -8.33
 -6.93, -7.11
 -5.78, -5.9
 -4.62, -4.7
 -3.47, -3.51
 -2.31, -2.33
 -1.16, -1.16
 0, 0
 1.16, 1.15
 2.31, 2.29
 3.47, 3.42
 4.62, 4.54
 5.78, 5.66
 6.93, 6.76
 8.09, 7.86
 9.24, 8.94
 10.4, 10.02
 11.55, 11.09
 12.71, 12.15
 13.86, 13.2
 15.02, 14.25
 16.18, 15.29
 17.33, 16.32
 18.49, 17.34
 19.64, 18.36
 20.8, 19.37
 21.95, 20.38
 23.11, 21.38
 24.26, 22.37
 25.42, 23.36
 26.57, 24.34
 27.73, 25.32
 28.89, 26.29
ENDTABLE
STEER_KIN_GAIN(1,2,2) 1 ! Gain multiplied with calculated value to get road wheel
                        ! steer
STEER_KIN_OFFSET(1,2,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 47 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IUNIT and IAXLE are used to identify the dataset when reading
! data.

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 3
SUSP_AXLE_ROLL_STEER_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,4) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 4
SUSP_AXLE_ROLL_STEER_OFFSET(1,4) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,4) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(1,5) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 1, axle 5
SUSP_AXLE_ROLL_STEER_OFFSET(1,5) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(1,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(1,5) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 3
SUSP_AXLE_ROLL_STEER_OFFSET(2,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,4) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 4
SUSP_AXLE_ROLL_STEER_OFFSET(2,4) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,4) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,5) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 5
SUSP_AXLE_ROLL_STEER_OFFSET(2,5) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,5) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,6) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 6
SUSP_AXLE_ROLL_STEER_OFFSET(2,6) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,6) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,6) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,7) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 7
SUSP_AXLE_ROLL_STEER_OFFSET(2,7) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,7) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,7) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,8) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 8
SUSP_AXLE_ROLL_STEER_OFFSET(2,8) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,8) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,8) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,9) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 2, axle 9
SUSP_AXLE_ROLL_STEER_OFFSET(2,9) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,9) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,9) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,10) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 2, axle 10
SUSP_AXLE_ROLL_STEER_OFFSET(2,10) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,10) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,10) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,11) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 2, axle 11
SUSP_AXLE_ROLL_STEER_OFFSET(2,11) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,11) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,11) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,12) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 2, axle 12
SUSP_AXLE_ROLL_STEER_OFFSET(2,12) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,12) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,12) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,13) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 2, axle 13
SUSP_AXLE_ROLL_STEER_OFFSET(2,13) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,13) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,13) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(2,14) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 2, axle 14
SUSP_AXLE_ROLL_STEER_OFFSET(2,14) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2,14) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2,14) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 3
SUSP_AXLE_ROLL_STEER_OFFSET(3,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,4) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 4
SUSP_AXLE_ROLL_STEER_OFFSET(3,4) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,4) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,5) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 5
SUSP_AXLE_ROLL_STEER_OFFSET(3,5) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,5) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,6) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 6
SUSP_AXLE_ROLL_STEER_OFFSET(3,6) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,6) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,6) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,7) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 7
SUSP_AXLE_ROLL_STEER_OFFSET(3,7) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,7) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,7) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,8) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 8
SUSP_AXLE_ROLL_STEER_OFFSET(3,8) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,8) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,8) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,9) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 3, axle 9
SUSP_AXLE_ROLL_STEER_OFFSET(3,9) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,9) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,9) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,10) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 3, axle 10
SUSP_AXLE_ROLL_STEER_OFFSET(3,10) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,10) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,10) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,11) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 3, axle 11
SUSP_AXLE_ROLL_STEER_OFFSET(3,11) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,11) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,11) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,12) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 3, axle 12
SUSP_AXLE_ROLL_STEER_OFFSET(3,12) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,12) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,12) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,13) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 3, axle 13
SUSP_AXLE_ROLL_STEER_OFFSET(3,13) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,13) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,13) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(3,14) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 3, axle 14
SUSP_AXLE_ROLL_STEER_OFFSET(3,14) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(3,14) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(3,14) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,1) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 1
SUSP_AXLE_ROLL_STEER_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,1) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,2) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 2
SUSP_AXLE_ROLL_STEER_OFFSET(4,2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,2) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,3) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 3
SUSP_AXLE_ROLL_STEER_OFFSET(4,3) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,3) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,4) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 4
SUSP_AXLE_ROLL_STEER_OFFSET(4,4) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,4) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,5) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 5
SUSP_AXLE_ROLL_STEER_OFFSET(4,5) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,5) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,6) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 6
SUSP_AXLE_ROLL_STEER_OFFSET(4,6) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,6) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,6) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,7) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 7
SUSP_AXLE_ROLL_STEER_OFFSET(4,7) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,7) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,7) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,8) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 8
SUSP_AXLE_ROLL_STEER_OFFSET(4,8) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,8) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,8) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,9) 0 ! Coefficient: steer per unit roll
                                        ! (deg/deg), unit 4, axle 9
SUSP_AXLE_ROLL_STEER_OFFSET(4,9) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,9) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,9) 1 ! Scale factor divided into (roll -
                             ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,10) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 4, axle 10
SUSP_AXLE_ROLL_STEER_OFFSET(4,10) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,10) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,10) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,11) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 4, axle 11
SUSP_AXLE_ROLL_STEER_OFFSET(4,11) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,11) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,11) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,12) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 4, axle 12
SUSP_AXLE_ROLL_STEER_OFFSET(4,12) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,12) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,12) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,13) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 4, axle 13
SUSP_AXLE_ROLL_STEER_OFFSET(4,13) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,13) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,13) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

SUSP_AXLE_ROLL_STEER_COEFFICIENT(4,14) 0 ! Coefficient: steer per unit roll
                                         ! (deg/deg), unit 4, axle 14
SUSP_AXLE_ROLL_STEER_OFFSET(4,14) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(4,14) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(4,14) 1 ! Scale factor divided into (roll -
                              ! ROLL_START_AXLE_STEER)

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 47 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IUNIT and IAXLE are used to identify
! the dataset when reading data.

SUSP_DIVE_AXLE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive, unit 1, axle 1
SUSP_DIVE_AXLE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive, unit 1, axle 2
SUSP_DIVE_AXLE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(1,3) 0 ; deg ! Constant suspension dive, unit 1, axle 3
SUSP_DIVE_AXLE_OFFSET(1,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(1,4) 0 ; deg ! Constant suspension dive, unit 1, axle 4
SUSP_DIVE_AXLE_OFFSET(1,4) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(1,5) 0 ; deg ! Constant suspension dive, unit 1, axle 5
SUSP_DIVE_AXLE_OFFSET(1,5) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,1) 0 ; deg ! Constant suspension dive, unit 2, axle 1
SUSP_DIVE_AXLE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,2) 0 ; deg ! Constant suspension dive, unit 2, axle 2
SUSP_DIVE_AXLE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,3) 0 ; deg ! Constant suspension dive, unit 2, axle 3
SUSP_DIVE_AXLE_OFFSET(2,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,4) 0 ; deg ! Constant suspension dive, unit 2, axle 4
SUSP_DIVE_AXLE_OFFSET(2,4) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,5) 0 ; deg ! Constant suspension dive, unit 2, axle 5
SUSP_DIVE_AXLE_OFFSET(2,5) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,6) 0 ; deg ! Constant suspension dive, unit 2, axle 6
SUSP_DIVE_AXLE_OFFSET(2,6) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,7) 0 ; deg ! Constant suspension dive, unit 2, axle 7
SUSP_DIVE_AXLE_OFFSET(2,7) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,8) 0 ; deg ! Constant suspension dive, unit 2, axle 8
SUSP_DIVE_AXLE_OFFSET(2,8) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,9) 0 ; deg ! Constant suspension dive, unit 2, axle 9
SUSP_DIVE_AXLE_OFFSET(2,9) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(2,10) 0 ; deg ! Constant suspension dive, unit 2, axle 10
SUSP_DIVE_AXLE_OFFSET(2,10) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(2,11) 0 ; deg ! Constant suspension dive, unit 2, axle 11
SUSP_DIVE_AXLE_OFFSET(2,11) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(2,12) 0 ; deg ! Constant suspension dive, unit 2, axle 12
SUSP_DIVE_AXLE_OFFSET(2,12) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(2,13) 0 ; deg ! Constant suspension dive, unit 2, axle 13
SUSP_DIVE_AXLE_OFFSET(2,13) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(2,14) 0 ; deg ! Constant suspension dive, unit 2, axle 14
SUSP_DIVE_AXLE_OFFSET(2,14) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(3,1) 0 ; deg ! Constant suspension dive, unit 3, axle 1
SUSP_DIVE_AXLE_OFFSET(3,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,2) 0 ; deg ! Constant suspension dive, unit 3, axle 2
SUSP_DIVE_AXLE_OFFSET(3,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,3) 0 ; deg ! Constant suspension dive, unit 3, axle 3
SUSP_DIVE_AXLE_OFFSET(3,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,4) 0 ; deg ! Constant suspension dive, unit 3, axle 4
SUSP_DIVE_AXLE_OFFSET(3,4) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,5) 0 ; deg ! Constant suspension dive, unit 3, axle 5
SUSP_DIVE_AXLE_OFFSET(3,5) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,6) 0 ; deg ! Constant suspension dive, unit 3, axle 6
SUSP_DIVE_AXLE_OFFSET(3,6) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,7) 0 ; deg ! Constant suspension dive, unit 3, axle 7
SUSP_DIVE_AXLE_OFFSET(3,7) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,8) 0 ; deg ! Constant suspension dive, unit 3, axle 8
SUSP_DIVE_AXLE_OFFSET(3,8) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,9) 0 ; deg ! Constant suspension dive, unit 3, axle 9
SUSP_DIVE_AXLE_OFFSET(3,9) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(3,10) 0 ; deg ! Constant suspension dive, unit 3, axle 10
SUSP_DIVE_AXLE_OFFSET(3,10) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(3,11) 0 ; deg ! Constant suspension dive, unit 3, axle 11
SUSP_DIVE_AXLE_OFFSET(3,11) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(3,12) 0 ; deg ! Constant suspension dive, unit 3, axle 12
SUSP_DIVE_AXLE_OFFSET(3,12) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(3,13) 0 ; deg ! Constant suspension dive, unit 3, axle 13
SUSP_DIVE_AXLE_OFFSET(3,13) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(3,14) 0 ; deg ! Constant suspension dive, unit 3, axle 14
SUSP_DIVE_AXLE_OFFSET(3,14) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(4,1) 0 ; deg ! Constant suspension dive, unit 4, axle 1
SUSP_DIVE_AXLE_OFFSET(4,1) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,2) 0 ; deg ! Constant suspension dive, unit 4, axle 2
SUSP_DIVE_AXLE_OFFSET(4,2) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,3) 0 ; deg ! Constant suspension dive, unit 4, axle 3
SUSP_DIVE_AXLE_OFFSET(4,3) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,4) 0 ; deg ! Constant suspension dive, unit 4, axle 4
SUSP_DIVE_AXLE_OFFSET(4,4) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,5) 0 ; deg ! Constant suspension dive, unit 4, axle 5
SUSP_DIVE_AXLE_OFFSET(4,5) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,6) 0 ; deg ! Constant suspension dive, unit 4, axle 6
SUSP_DIVE_AXLE_OFFSET(4,6) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,7) 0 ; deg ! Constant suspension dive, unit 4, axle 7
SUSP_DIVE_AXLE_OFFSET(4,7) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,8) 0 ; deg ! Constant suspension dive, unit 4, axle 8
SUSP_DIVE_AXLE_OFFSET(4,8) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,9) 0 ; deg ! Constant suspension dive, unit 4, axle 9
SUSP_DIVE_AXLE_OFFSET(4,9) 0 ; deg ! Offset added (after gain) to get suspension
                             ! dive

SUSP_DIVE_AXLE_CONSTANT(4,10) 0 ; deg ! Constant suspension dive, unit 4, axle 10
SUSP_DIVE_AXLE_OFFSET(4,10) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(4,11) 0 ; deg ! Constant suspension dive, unit 4, axle 11
SUSP_DIVE_AXLE_OFFSET(4,11) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(4,12) 0 ; deg ! Constant suspension dive, unit 4, axle 12
SUSP_DIVE_AXLE_OFFSET(4,12) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(4,13) 0 ; deg ! Constant suspension dive, unit 4, axle 13
SUSP_DIVE_AXLE_OFFSET(4,13) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

SUSP_DIVE_AXLE_CONSTANT(4,14) 0 ; deg ! Constant suspension dive, unit 4, axle 14
SUSP_DIVE_AXLE_OFFSET(4,14) 0 ; deg ! Offset added (after gain) to get suspension
                              ! dive

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 47 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IUNIT and IAXLE
! are used to identify the dataset when reading data.

SUSP_X_AXLE_CONSTANT(1,1) 0 ; mm ! Constant X axle movement forward, unit 1, axle 1
SUSP_X_AXLE_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(1,2) 0 ; mm ! Constant X axle movement forward, unit 1, axle 2
SUSP_X_AXLE_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(1,3) 0 ; mm ! Constant X axle movement forward, unit 1, axle 3
SUSP_X_AXLE_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(1,4) 0 ; mm ! Constant X axle movement forward, unit 1, axle 4
SUSP_X_AXLE_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(1,5) 0 ; mm ! Constant X axle movement forward, unit 1, axle 5
SUSP_X_AXLE_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,1) 0 ; mm ! Constant X axle movement forward, unit 2, axle 1
SUSP_X_AXLE_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,2) 0 ; mm ! Constant X axle movement forward, unit 2, axle 2
SUSP_X_AXLE_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,3) 0 ; mm ! Constant X axle movement forward, unit 2, axle 3
SUSP_X_AXLE_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,4) 0 ; mm ! Constant X axle movement forward, unit 2, axle 4
SUSP_X_AXLE_OFFSET(2,4) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,5) 0 ; mm ! Constant X axle movement forward, unit 2, axle 5
SUSP_X_AXLE_OFFSET(2,5) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,6) 0 ; mm ! Constant X axle movement forward, unit 2, axle 6
SUSP_X_AXLE_OFFSET(2,6) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,7) 0 ; mm ! Constant X axle movement forward, unit 2, axle 7
SUSP_X_AXLE_OFFSET(2,7) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,8) 0 ; mm ! Constant X axle movement forward, unit 2, axle 8
SUSP_X_AXLE_OFFSET(2,8) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,9) 0 ; mm ! Constant X axle movement forward, unit 2, axle 9
SUSP_X_AXLE_OFFSET(2,9) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(2,10) 0 ; mm ! Constant X axle movement forward, unit 2, axle
                             ! 10
SUSP_X_AXLE_OFFSET(2,10) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(2,11) 0 ; mm ! Constant X axle movement forward, unit 2, axle
                             ! 11
SUSP_X_AXLE_OFFSET(2,11) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(2,12) 0 ; mm ! Constant X axle movement forward, unit 2, axle
                             ! 12
SUSP_X_AXLE_OFFSET(2,12) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(2,13) 0 ; mm ! Constant X axle movement forward, unit 2, axle
                             ! 13
SUSP_X_AXLE_OFFSET(2,13) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(2,14) 0 ; mm ! Constant X axle movement forward, unit 2, axle
                             ! 14
SUSP_X_AXLE_OFFSET(2,14) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(3,1) 0 ; mm ! Constant X axle movement forward, unit 3, axle 1
SUSP_X_AXLE_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,2) 0 ; mm ! Constant X axle movement forward, unit 3, axle 2
SUSP_X_AXLE_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,3) 0 ; mm ! Constant X axle movement forward, unit 3, axle 3
SUSP_X_AXLE_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,4) 0 ; mm ! Constant X axle movement forward, unit 3, axle 4
SUSP_X_AXLE_OFFSET(3,4) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,5) 0 ; mm ! Constant X axle movement forward, unit 3, axle 5
SUSP_X_AXLE_OFFSET(3,5) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,6) 0 ; mm ! Constant X axle movement forward, unit 3, axle 6
SUSP_X_AXLE_OFFSET(3,6) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,7) 0 ; mm ! Constant X axle movement forward, unit 3, axle 7
SUSP_X_AXLE_OFFSET(3,7) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,8) 0 ; mm ! Constant X axle movement forward, unit 3, axle 8
SUSP_X_AXLE_OFFSET(3,8) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,9) 0 ; mm ! Constant X axle movement forward, unit 3, axle 9
SUSP_X_AXLE_OFFSET(3,9) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(3,10) 0 ; mm ! Constant X axle movement forward, unit 3, axle
                             ! 10
SUSP_X_AXLE_OFFSET(3,10) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(3,11) 0 ; mm ! Constant X axle movement forward, unit 3, axle
                             ! 11
SUSP_X_AXLE_OFFSET(3,11) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(3,12) 0 ; mm ! Constant X axle movement forward, unit 3, axle
                             ! 12
SUSP_X_AXLE_OFFSET(3,12) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(3,13) 0 ; mm ! Constant X axle movement forward, unit 3, axle
                             ! 13
SUSP_X_AXLE_OFFSET(3,13) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(3,14) 0 ; mm ! Constant X axle movement forward, unit 3, axle
                             ! 14
SUSP_X_AXLE_OFFSET(3,14) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(4,1) 0 ; mm ! Constant X axle movement forward, unit 4, axle 1
SUSP_X_AXLE_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,2) 0 ; mm ! Constant X axle movement forward, unit 4, axle 2
SUSP_X_AXLE_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,3) 0 ; mm ! Constant X axle movement forward, unit 4, axle 3
SUSP_X_AXLE_OFFSET(4,3) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,4) 0 ; mm ! Constant X axle movement forward, unit 4, axle 4
SUSP_X_AXLE_OFFSET(4,4) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,5) 0 ; mm ! Constant X axle movement forward, unit 4, axle 5
SUSP_X_AXLE_OFFSET(4,5) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,6) 0 ; mm ! Constant X axle movement forward, unit 4, axle 6
SUSP_X_AXLE_OFFSET(4,6) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,7) 0 ; mm ! Constant X axle movement forward, unit 4, axle 7
SUSP_X_AXLE_OFFSET(4,7) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,8) 0 ; mm ! Constant X axle movement forward, unit 4, axle 8
SUSP_X_AXLE_OFFSET(4,8) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,9) 0 ; mm ! Constant X axle movement forward, unit 4, axle 9
SUSP_X_AXLE_OFFSET(4,9) 0 ; mm ! Offset added (after gain) to get X axle movement
                          ! forward

SUSP_X_AXLE_CONSTANT(4,10) 0 ; mm ! Constant X axle movement forward, unit 4, axle
                             ! 10
SUSP_X_AXLE_OFFSET(4,10) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(4,11) 0 ; mm ! Constant X axle movement forward, unit 4, axle
                             ! 11
SUSP_X_AXLE_OFFSET(4,11) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(4,12) 0 ; mm ! Constant X axle movement forward, unit 4, axle
                             ! 12
SUSP_X_AXLE_OFFSET(4,12) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(4,13) 0 ; mm ! Constant X axle movement forward, unit 4, axle
                             ! 13
SUSP_X_AXLE_OFFSET(4,13) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

SUSP_X_AXLE_CONSTANT(4,14) 0 ; mm ! Constant X axle movement forward, unit 4, axle
                             ! 14
SUSP_X_AXLE_OFFSET(4,14) 0 ; mm ! Offset added (after gain) to get X axle movement
                           ! forward

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 47 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IUNIT and IAXLE are used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,1) SPLINE ! unit 1, axle 1
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,2) SPLINE ! unit 1, axle 2
 -10, -9.2034
 -9.5, -8.7475
 -9, -8.291
 -8.5, -7.8339
 -8, -7.3762
 -7.5, -6.9179
 -7, -6.4591
 -6.5, -5.9998
 -6, -5.54
 -5.5, -5.0798
 -5, -4.6193
 -4.5, -4.1583
 -4, -3.6971
 -3.5, -3.2356
 -3, -2.7738
 -2.5, -2.3118
 -2, -1.8497
 -1.5, -1.3874
 -1, -0.92498
 -0.5, -0.46251
 0, 4.2323e-19
 0.5, 0.46251
 1, 0.92498
 1.5, 1.3874
 2, 1.8497
 2.5, 2.3118
 3, 2.7738
 3.5, 3.2356
 4, 3.6971
 4.5, 4.1583
 5, 4.6193
 5.5, 5.0798
 6, 5.54
 6.5, 5.9998
 7, 6.4591
 7.5, 6.9179
 8, 7.3762
 8.5, 7.8339
 9, 8.291
 9.5, 8.7475
 10, 9.2034
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,3) SPLINE ! unit 1, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,4) SPLINE ! unit 1, axle 4
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,4) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,4) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,4) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,4) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,4) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,4) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 4

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(1,5) SPLINE ! unit 1, axle 5
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(1,5) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(1,5) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(1,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(1,5) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(1,5) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(1,5) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(1,5) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 1, axle 5

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,1) SPLINE ! unit 2, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,2) SPLINE ! unit 2, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,3) SPLINE ! unit 2, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,4) SPLINE ! unit 2, axle 4
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,4) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,4) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,4) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,4) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,4) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,4) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 4

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,5) SPLINE ! unit 2, axle 5
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,5) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,5) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,5) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,5) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,5) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,5) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 5

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,6) SPLINE ! unit 2, axle 6
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,6) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,6) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,6) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,6) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,6) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,6) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,6) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 6

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,7) SPLINE ! unit 2, axle 7
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,7) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,7) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,7) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,7) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,7) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,7) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,7) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 7

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,8) SPLINE ! unit 2, axle 8
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,8) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,8) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,8) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,8) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,8) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,8) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,8) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 8

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,9) SPLINE ! unit 2, axle 9
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,9) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,9) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,9) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,9) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,9) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,9) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,9) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 2, axle 9

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,10) SPLINE ! unit 2, axle 10
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,10) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,10) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,10) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,10) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,10) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,10) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,10) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 2, axle 10

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,11) SPLINE ! unit 2, axle 11
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,11) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,11) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,11) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,11) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,11) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,11) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,11) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 2, axle 11

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,12) SPLINE ! unit 2, axle 12
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,12) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,12) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,12) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,12) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,12) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,12) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,12) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 2, axle 12

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,13) SPLINE ! unit 2, axle 13
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,13) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,13) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,13) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,13) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,13) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,13) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,13) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 2, axle 13

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2,14) SPLINE ! unit 2, axle 14
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2,14) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(2,14) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2,14) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2,14) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2,14) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2,14) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2,14) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 2, axle 14

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,1) SPLINE ! unit 3, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,2) SPLINE ! unit 3, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,3) SPLINE ! unit 3, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,4) SPLINE ! unit 3, axle 4
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,4) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,4) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,4) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,4) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,4) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,4) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 4

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,5) SPLINE ! unit 3, axle 5
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,5) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,5) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,5) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,5) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,5) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,5) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 5

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,6) SPLINE ! unit 3, axle 6
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,6) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,6) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,6) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,6) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,6) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,6) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,6) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 6

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,7) SPLINE ! unit 3, axle 7
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,7) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,7) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,7) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,7) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,7) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,7) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,7) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 7

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,8) SPLINE ! unit 3, axle 8
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,8) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,8) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,8) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,8) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,8) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,8) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,8) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 8

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,9) SPLINE ! unit 3, axle 9
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,9) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,9) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,9) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,9) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,9) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,9) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,9) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 3, axle 9

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,10) SPLINE ! unit 3, axle 10
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,10) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,10) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,10) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,10) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,10) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,10) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,10) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 3, axle 10

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,11) SPLINE ! unit 3, axle 11
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,11) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,11) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,11) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,11) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,11) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,11) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,11) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 3, axle 11

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,12) SPLINE ! unit 3, axle 12
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,12) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,12) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,12) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,12) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,12) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,12) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,12) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 3, axle 12

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,13) SPLINE ! unit 3, axle 13
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,13) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,13) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,13) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,13) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,13) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,13) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,13) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 3, axle 13

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(3,14) SPLINE ! unit 3, axle 14
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(3,14) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(3,14) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(3,14) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(3,14) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(3,14) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(3,14) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(3,14) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 3, axle 14

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,1) SPLINE ! unit 4, axle 1
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,1) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,1) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,1) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,1) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,1) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,1) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 1

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,2) SPLINE ! unit 4, axle 2
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,2) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,2) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 2

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,3) SPLINE ! unit 4, axle 3
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,3) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,3) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,3) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,3) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,3) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,3) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,3) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 3

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,4) SPLINE ! unit 4, axle 4
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,4) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,4) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,4) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,4) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,4) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,4) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,4) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 4

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,5) SPLINE ! unit 4, axle 5
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,5) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,5) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,5) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,5) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,5) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,5) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,5) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 5

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,6) SPLINE ! unit 4, axle 6
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,6) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,6) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,6) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,6) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,6) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,6) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,6) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 6

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,7) SPLINE ! unit 4, axle 7
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,7) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,7) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,7) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,7) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,7) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,7) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,7) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 7

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,8) SPLINE ! unit 4, axle 8
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,8) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,8) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,8) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,8) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,8) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,8) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,8) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 8

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,9) SPLINE ! unit 4, axle 9
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,9) 1 ! Gain multiplied with calculated value to get Y
                             ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,9) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,9) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,9) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,9) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,9) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,9) 0 ; mm ! Constant Y movement component due to
                                     ! jounce, unit 4, axle 9

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,10) SPLINE ! unit 4, axle 10
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,10) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,10) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,10) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,10) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,10) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,10) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,10) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 4, axle 10

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,11) SPLINE ! unit 4, axle 11
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,11) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,11) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,11) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,11) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,11) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,11) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,11) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 4, axle 11

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,12) SPLINE ! unit 4, axle 12
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,12) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,12) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,12) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,12) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,12) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,12) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,12) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 4, axle 12

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,13) SPLINE ! unit 4, axle 13
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,13) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,13) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,13) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,13) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,13) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,13) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,13) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 4, axle 13

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(4,14) SPLINE ! unit 4, axle 14
 -10, 33.861
 -9.5, 32.184
 -9, 30.505
 -8.5, 28.823
 -8, 27.139
 -7.5, 25.453
 -7, 23.765
 -6.5, 22.075
 -6, 20.383
 -5.5, 18.69
 -5, 16.995
 -4.5, 15.3
 -4, 13.603
 -3.5, 11.904
 -3, 10.206
 -2.5, 8.5058
 -2, 6.8054
 -1.5, 5.1045
 -1, 3.4032
 -0.5, 1.7017
 0, 5.317e-18
 0.5, -1.7017
 1, -3.4032
 1.5, -5.1045
 2, -6.8054
 2.5, -8.5058
 3, -10.206
 3.5, -11.904
 4, -13.603
 4.5, -15.3
 5, -16.995
 5.5, -18.69
 6, -20.383
 6.5, -22.075
 7, -23.765
 7.5, -25.453
 8, -27.139
 8.5, -28.823
 9, -30.505
 9.5, -32.184
 10, -33.861
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(4,14) 1 ! Gain multiplied with calculated value to get Y
                              ! movement
SUSP_Y_AXLE_ROLL_OFFSET(4,14) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(4,14) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(4,14) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(4,14) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(4,14) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(4,14) 0 ; mm ! Constant Y movement component due to
                                      ! jounce, unit 4, axle 14

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT   0.75 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 228
 0.2, 228
 0.8, 248
 1, 248
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 419
 0.2, 419
 0.8, 538
 1, 538
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 559
 0.2, 559
 0.8, 990
 1, 990
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 800
 0.2, 800
 0.8, 1322
 1, 1322
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 1081
 0.2, 1081
 0.8, 1890
 1, 1890
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(6) LINEAR_FLAT ! shifting between gears 6 and 7
 0, 1250
 0.2, 1250
 0.8, 2554
 1, 2554
ENDTABLE
UPSHIFT_TRANS_GAIN(6) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(6) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(6) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(6) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L10   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L10
SV_ABS_ON_OFF_L11   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L11
SV_ABS_ON_OFF_L12   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L12
SV_ABS_ON_OFF_L13   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L13
SV_ABS_ON_OFF_L14   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L14
SV_ABS_ON_OFF_L15   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L15
SV_ABS_ON_OFF_L16   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L16
SV_ABS_ON_OFF_L17   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L17
SV_ABS_ON_OFF_L18   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L18
SV_ABS_ON_OFF_L19   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L19
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_L20   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L20
SV_ABS_ON_OFF_L21   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L21
SV_ABS_ON_OFF_L22   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L22
SV_ABS_ON_OFF_L23   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L23
SV_ABS_ON_OFF_L24   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L24
SV_ABS_ON_OFF_L25   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L25
SV_ABS_ON_OFF_L26   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L26
SV_ABS_ON_OFF_L27   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L27
SV_ABS_ON_OFF_L28   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L28
SV_ABS_ON_OFF_L29   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L29
SV_ABS_ON_OFF_L3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_L30   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L30
SV_ABS_ON_OFF_L31   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L31
SV_ABS_ON_OFF_L32   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L32
SV_ABS_ON_OFF_L33   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L33
SV_ABS_ON_OFF_L34   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L34
SV_ABS_ON_OFF_L35   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L35
SV_ABS_ON_OFF_L36   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L36
SV_ABS_ON_OFF_L37   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L37
SV_ABS_ON_OFF_L38   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L38
SV_ABS_ON_OFF_L39   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L39
SV_ABS_ON_OFF_L4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_L40   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L40
SV_ABS_ON_OFF_L41   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L41
SV_ABS_ON_OFF_L42   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L42
SV_ABS_ON_OFF_L43   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L43
SV_ABS_ON_OFF_L44   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L44
SV_ABS_ON_OFF_L45   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L45
SV_ABS_ON_OFF_L46   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L46
SV_ABS_ON_OFF_L47   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L47
SV_ABS_ON_OFF_L5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_L6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_L7    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L7
SV_ABS_ON_OFF_L8    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L8
SV_ABS_ON_OFF_L9    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L9
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R10   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L10
SV_ABS_ON_OFF_R11   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L11
SV_ABS_ON_OFF_R12   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L12
SV_ABS_ON_OFF_R13   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L13
SV_ABS_ON_OFF_R14   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L14
SV_ABS_ON_OFF_R15   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L15
SV_ABS_ON_OFF_R16   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L16
SV_ABS_ON_OFF_R17   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L17
SV_ABS_ON_OFF_R18   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L18
SV_ABS_ON_OFF_R19   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L19
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R20   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L20
SV_ABS_ON_OFF_R21   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L21
SV_ABS_ON_OFF_R22   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L22
SV_ABS_ON_OFF_R23   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L23
SV_ABS_ON_OFF_R24   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L24
SV_ABS_ON_OFF_R25   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L25
SV_ABS_ON_OFF_R26   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L26
SV_ABS_ON_OFF_R27   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L27
SV_ABS_ON_OFF_R28   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L28
SV_ABS_ON_OFF_R29   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L29
SV_ABS_ON_OFF_R3    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L3
SV_ABS_ON_OFF_R30   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L30
SV_ABS_ON_OFF_R31   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L31
SV_ABS_ON_OFF_R32   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L32
SV_ABS_ON_OFF_R33   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L33
SV_ABS_ON_OFF_R34   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L34
SV_ABS_ON_OFF_R35   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L35
SV_ABS_ON_OFF_R36   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L36
SV_ABS_ON_OFF_R37   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L37
SV_ABS_ON_OFF_R38   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L38
SV_ABS_ON_OFF_R39   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L39
SV_ABS_ON_OFF_R4    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L4
SV_ABS_ON_OFF_R40   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L40
SV_ABS_ON_OFF_R41   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L41
SV_ABS_ON_OFF_R42   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L42
SV_ABS_ON_OFF_R43   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L43
SV_ABS_ON_OFF_R44   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L44
SV_ABS_ON_OFF_R45   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L45
SV_ABS_ON_OFF_R46   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L46
SV_ABS_ON_OFF_R47   1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L47
SV_ABS_ON_OFF_R5    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L5
SV_ABS_ON_OFF_R6    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L6
SV_ABS_ON_OFF_R7    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L7
SV_ABS_ON_OFF_R8    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L8
SV_ABS_ON_OFF_R9    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L9
SV_AERO_ROAD_ID_1   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_2   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_3   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_ID_4   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 131.7639302 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_2 128.7551687 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_3 110.9450463 ; m ! Road path station for tracked aero road point
SV_AERO_ROAD_STA_4 93.18006496 ; m ! Road path station for tracked aero road point
SV_ART_H1_OLD -0.008557125011 ; deg ! Articulation for hitch 1
SV_ART_H2_OLD 0.002220820473 ; deg ! Articulation for hitch 2
SV_ART_H3_OLD 0.01488061783 ; deg ! Articulation for hitch 3
SV_AT_LOCKED        0 ; - ! Lock state of automatic transmission
SV_AVX   0.1221286993 ; deg/s ! ODE: Body-X roll rate of sprung-mass, unit 1 {AVx}
SV_AVX_A1 -0.09875165912 ; deg/s ! ODE: Roll rate of axle 1
SV_AVX_A10 -0.2772432387 ; deg/s ! ODE: Roll rate of axle 10
SV_AVX_A11 0.3801246599 ; deg/s ! ODE: Roll rate of axle 11
SV_AVX_A12 -0.08067768903 ; deg/s ! ODE: Roll rate of axle 12
SV_AVX_A13 -1.398550674 ; deg/s ! ODE: Roll rate of axle 13
SV_AVX_A14 -1.677007224 ; deg/s ! ODE: Roll rate of axle 14
SV_AVX_A15 0.3013093894 ; deg/s ! ODE: Roll rate of axle 15
SV_AVX_A16 0.00969286249 ; deg/s ! ODE: Roll rate of axle 16
SV_AVX_A17 -2.41959833 ; deg/s ! ODE: Roll rate of axle 17
SV_AVX_A18 -2.913643207 ; deg/s ! ODE: Roll rate of axle 18
SV_AVX_A19 5.877699107 ; deg/s ! ODE: Roll rate of axle 19
SV_AVX_A2 -0.1140541271 ; deg/s ! ODE: Roll rate of axle 2
SV_AVX_A20 -0.4825122473 ; deg/s ! ODE: Roll rate of axle 20
SV_AVX_A21 -0.4939703248 ; deg/s ! ODE: Roll rate of axle 21
SV_AVX_A22 5.588085124 ; deg/s ! ODE: Roll rate of axle 22
SV_AVX_A23 -1.505252478 ; deg/s ! ODE: Roll rate of axle 23
SV_AVX_A24 -0.7956667014 ; deg/s ! ODE: Roll rate of axle 24
SV_AVX_A25 0.42639941 ; deg/s ! ODE: Roll rate of axle 25
SV_AVX_A26 0.6314726024 ; deg/s ! ODE: Roll rate of axle 26
SV_AVX_A27 -1.274659804 ; deg/s ! ODE: Roll rate of axle 27
SV_AVX_A28 -1.252845852 ; deg/s ! ODE: Roll rate of axle 28
SV_AVX_A29 -0.1402457085 ; deg/s ! ODE: Roll rate of axle 29
SV_AVX_A3 -0.07512406124 ; deg/s ! ODE: Roll rate of axle 3
SV_AVX_A30 -0.07495506136 ; deg/s ! ODE: Roll rate of axle 30
SV_AVX_A31 -0.005108459182 ; deg/s ! ODE: Roll rate of axle 31
SV_AVX_A32 -1.437274885 ; deg/s ! ODE: Roll rate of axle 32
SV_AVX_A33 -3.903847113 ; deg/s ! ODE: Roll rate of axle 33
SV_AVX_A34 0.1204561284 ; deg/s ! ODE: Roll rate of axle 34
SV_AVX_A35 0.1243757453 ; deg/s ! ODE: Roll rate of axle 35
SV_AVX_A36 0.1372705123 ; deg/s ! ODE: Roll rate of axle 36
SV_AVX_A37 0.3877590522 ; deg/s ! ODE: Roll rate of axle 37
SV_AVX_A38 0.4095888111 ; deg/s ! ODE: Roll rate of axle 38
SV_AVX_A39 0.02769593381 ; deg/s ! ODE: Roll rate of axle 39
SV_AVX_A4 -0.06525514599 ; deg/s ! ODE: Roll rate of axle 4
SV_AVX_A40 -0.4452149263 ; deg/s ! ODE: Roll rate of axle 40
SV_AVX_A41 0.007224039488 ; deg/s ! ODE: Roll rate of axle 41
SV_AVX_A42 0.08205445507 ; deg/s ! ODE: Roll rate of axle 42
SV_AVX_A43 -0.01121324631 ; deg/s ! ODE: Roll rate of axle 43
SV_AVX_A44 -0.03965984508 ; deg/s ! ODE: Roll rate of axle 44
SV_AVX_A45 -0.05314941835 ; deg/s ! ODE: Roll rate of axle 45
SV_AVX_A46 0.02147650585 ; deg/s ! ODE: Roll rate of axle 46
SV_AVX_A47 0.03537067484 ; deg/s ! ODE: Roll rate of axle 47
SV_AVX_A5 -0.05620723467 ; deg/s ! ODE: Roll rate of axle 5
SV_AVX_A6 0.07625628789 ; deg/s ! ODE: Roll rate of axle 6
SV_AVX_A7 0.03579637902 ; deg/s ! ODE: Roll rate of axle 7
SV_AVX_A8 -0.006396668176 ; deg/s ! ODE: Roll rate of axle 8
SV_AVX_A9 -0.4593981592 ; deg/s ! ODE: Roll rate of axle 9
SV_AVX_SM2 -0.004279968237 ; deg/s ! ODE: Body-X roll rate of unit 2 sprung-mass
SV_AVX_SM3 0.05619503633 ; deg/s ! ODE: Body-X roll rate of unit 3 sprung-mass
SV_AVX_SM4 -0.05197498592 ; deg/s ! ODE: Body-X roll rate of unit 4 sprung-mass
SV_AVY   0.1898177024 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass, unit 1 {AVy}
SV_AVY_L1 81.10917588 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L10 81.3379245 ; rpm ! ODE: Spin of wheel L10 {AVy_L10}
SV_AVY_L10_OLD 81.33670691 ; rpm ! Spin of wheel L10 (previous time step)
SV_AVY_L11 81.3376071 ; rpm ! ODE: Spin of wheel L11 {AVy_L11}
SV_AVY_L11_OLD 81.33665998 ; rpm ! Spin of wheel L11 (previous time step)
SV_AVY_L12 81.33667363 ; rpm ! ODE: Spin of wheel L12 {AVy_L12}
SV_AVY_L12_OLD 81.33575117 ; rpm ! Spin of wheel L12 (previous time step)
SV_AVY_L13 81.33893791 ; rpm ! ODE: Spin of wheel L13 {AVy_L13}
SV_AVY_L13_OLD 81.33792083 ; rpm ! Spin of wheel L13 (previous time step)
SV_AVY_L14 81.33535644 ; rpm ! ODE: Spin of wheel L14 {AVy_L14}
SV_AVY_L14_OLD 81.33429077 ; rpm ! Spin of wheel L14 (previous time step)
SV_AVY_L15 81.33939365 ; rpm ! ODE: Spin of wheel L15 {AVy_L15}
SV_AVY_L15_OLD 81.33856223 ; rpm ! Spin of wheel L15 (previous time step)
SV_AVY_L16 81.33601335 ; rpm ! ODE: Spin of wheel L16 {AVy_L16}
SV_AVY_L16_OLD 81.33485545 ; rpm ! Spin of wheel L16 (previous time step)
SV_AVY_L17 81.33648138 ; rpm ! ODE: Spin of wheel L17 {AVy_L17}
SV_AVY_L17_OLD 81.33564383 ; rpm ! Spin of wheel L17 (previous time step)
SV_AVY_L18 81.34399401 ; rpm ! ODE: Spin of wheel L18 {AVy_L18}
SV_AVY_L18_OLD 81.34309168 ; rpm ! Spin of wheel L18 (previous time step)
SV_AVY_L19 81.34214708 ; rpm ! ODE: Spin of wheel L19 {AVy_L19}
SV_AVY_L19_OLD 81.34177935 ; rpm ! Spin of wheel L19 (previous time step)
SV_AVY_L1_OLD 81.11509486 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 81.10320057 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L20 80.76123789 ; rpm ! ODE: Spin of wheel L20 {AVy_L20}
SV_AVY_L20_OLD 80.75902161 ; rpm ! Spin of wheel L20 (previous time step)
SV_AVY_L21 80.80155934 ; rpm ! ODE: Spin of wheel L21 {AVy_L21}
SV_AVY_L21_OLD 80.79934308 ; rpm ! Spin of wheel L21 (previous time step)
SV_AVY_L22 80.59495883 ; rpm ! ODE: Spin of wheel L22 {AVy_L22}
SV_AVY_L22_OLD 80.5939794 ; rpm ! Spin of wheel L22 (previous time step)
SV_AVY_L23 80.46352599 ; rpm ! ODE: Spin of wheel L23 {AVy_L23}
SV_AVY_L23_OLD 80.45818993 ; rpm ! Spin of wheel L23 (previous time step)
SV_AVY_L24 80.41285184 ; rpm ! ODE: Spin of wheel L24 {AVy_L24}
SV_AVY_L24_OLD 80.40689373 ; rpm ! Spin of wheel L24 (previous time step)
SV_AVY_L25 81.65530293 ; rpm ! ODE: Spin of wheel L25 {AVy_L25}
SV_AVY_L25_OLD 81.65155936 ; rpm ! Spin of wheel L25 (previous time step)
SV_AVY_L26 80.57299278 ; rpm ! ODE: Spin of wheel L26 {AVy_L26}
SV_AVY_L26_OLD 80.56603735 ; rpm ! Spin of wheel L26 (previous time step)
SV_AVY_L27 77.74067023 ; rpm ! ODE: Spin of wheel L27 {AVy_L27}
SV_AVY_L27_OLD 77.76693588 ; rpm ! Spin of wheel L27 (previous time step)
SV_AVY_L28 79.78703892 ; rpm ! ODE: Spin of wheel L28 {AVy_L28}
SV_AVY_L28_OLD 79.80521173 ; rpm ! Spin of wheel L28 (previous time step)
SV_AVY_L29 80.74889933 ; rpm ! ODE: Spin of wheel L29 {AVy_L29}
SV_AVY_L29_OLD 80.74668304 ; rpm ! Spin of wheel L29 (previous time step)
SV_AVY_L2_OLD 81.10917744 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_L3 82.13397974 ; rpm ! ODE: Spin of wheel L3 {AVy_L3}
SV_AVY_L30 80.9789532 ; rpm ! ODE: Spin of wheel L30 {AVy_L30}
SV_AVY_L30_OLD 80.97673689 ; rpm ! Spin of wheel L30 (previous time step)
SV_AVY_L31 81.48345454 ; rpm ! ODE: Spin of wheel L31 {AVy_L31}
SV_AVY_L31_OLD 81.48123821 ; rpm ! Spin of wheel L31 (previous time step)
SV_AVY_L32 80.77370614 ; rpm ! ODE: Spin of wheel L32 {AVy_L32}
SV_AVY_L32_OLD 80.80614392 ; rpm ! Spin of wheel L32 (previous time step)
SV_AVY_L33 78.72432867 ; rpm ! ODE: Spin of wheel L33 {AVy_L33}
SV_AVY_L33_OLD 78.72660417 ; rpm ! Spin of wheel L33 (previous time step)
SV_AVY_L34 81.44529237 ; rpm ! ODE: Spin of wheel L34 {AVy_L34}
SV_AVY_L34_OLD 81.44895567 ; rpm ! Spin of wheel L34 (previous time step)
SV_AVY_L35 81.29419291 ; rpm ! ODE: Spin of wheel L35 {AVy_L35}
SV_AVY_L35_OLD 81.29785621 ; rpm ! Spin of wheel L35 (previous time step)
SV_AVY_L36 81.13997273 ; rpm ! ODE: Spin of wheel L36 {AVy_L36}
SV_AVY_L36_OLD 81.14363604 ; rpm ! Spin of wheel L36 (previous time step)
SV_AVY_L37 81.83551407 ; rpm ! ODE: Spin of wheel L37 {AVy_L37}
SV_AVY_L37_OLD 81.83917738 ; rpm ! Spin of wheel L37 (previous time step)
SV_AVY_L38 81.73280582 ; rpm ! ODE: Spin of wheel L38 {AVy_L38}
SV_AVY_L38_OLD 81.73646913 ; rpm ! Spin of wheel L38 (previous time step)
SV_AVY_L39 80.9993476 ; rpm ! ODE: Spin of wheel L39 {AVy_L39}
SV_AVY_L39_OLD 81.00301089 ; rpm ! Spin of wheel L39 (previous time step)
SV_AVY_L3_OLD 82.13205472 ; rpm ! Spin of wheel L3 (previous time step)
SV_AVY_L4 82.16420759 ; rpm ! ODE: Spin of wheel L4 {AVy_L4}
SV_AVY_L40 81.51117925 ; rpm ! ODE: Spin of wheel L40 {AVy_L40}
SV_AVY_L40_OLD 81.51484256 ; rpm ! Spin of wheel L40 (previous time step)
SV_AVY_L41 81.80604801 ; rpm ! ODE: Spin of wheel L41 {AVy_L41}
SV_AVY_L41_OLD 81.80966594 ; rpm ! Spin of wheel L41 (previous time step)
SV_AVY_L42 81.76189706 ; rpm ! ODE: Spin of wheel L42 {AVy_L42}
SV_AVY_L42_OLD 81.76113794 ; rpm ! Spin of wheel L42 (previous time step)
SV_AVY_L43 82.03870465 ; rpm ! ODE: Spin of wheel L43 {AVy_L43}
SV_AVY_L43_OLD 82.04249974 ; rpm ! Spin of wheel L43 (previous time step)
SV_AVY_L44 82.03184582 ; rpm ! ODE: Spin of wheel L44 {AVy_L44}
SV_AVY_L44_OLD 82.0357526 ; rpm ! Spin of wheel L44 (previous time step)
SV_AVY_L45 82.02504547 ; rpm ! ODE: Spin of wheel L45 {AVy_L45}
SV_AVY_L45_OLD 82.02903278 ; rpm ! Spin of wheel L45 (previous time step)
SV_AVY_L46 82.02290616 ; rpm ! ODE: Spin of wheel L46 {AVy_L46}
SV_AVY_L46_OLD 82.02926888 ; rpm ! Spin of wheel L46 (previous time step)
SV_AVY_L47 82.01471072 ; rpm ! ODE: Spin of wheel L47 {AVy_L47}
SV_AVY_L47_OLD 82.02108853 ; rpm ! Spin of wheel L47 (previous time step)
SV_AVY_L4_OLD 82.1622192 ; rpm ! Spin of wheel L4 (previous time step)
SV_AVY_L5 82.20839822 ; rpm ! ODE: Spin of wheel L5 {AVy_L5}
SV_AVY_L5_OLD 82.2063294 ; rpm ! Spin of wheel L5 (previous time step)
SV_AVY_L6  81.3363781 ; rpm ! ODE: Spin of wheel L6 {AVy_L6}
SV_AVY_L6_OLD 81.33503199 ; rpm ! Spin of wheel L6 (previous time step)
SV_AVY_L7  81.3366582 ; rpm ! ODE: Spin of wheel L7 {AVy_L7}
SV_AVY_L7_OLD 81.3353255 ; rpm ! Spin of wheel L7 (previous time step)
SV_AVY_L8 81.33698618 ; rpm ! ODE: Spin of wheel L8 {AVy_L8}
SV_AVY_L8_OLD 81.3356652 ; rpm ! Spin of wheel L8 (previous time step)
SV_AVY_L9 81.33803792 ; rpm ! ODE: Spin of wheel L9 {AVy_L9}
SV_AVY_L9_OLD 81.33681756 ; rpm ! Spin of wheel L9 (previous time step)
SV_AVY_R1 81.08867294 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R10 81.34871404 ; rpm ! ODE: Spin of wheel R10 {AVy_R10}
SV_AVY_R10_OLD 81.34735915 ; rpm ! Spin of wheel R10 (previous time step)
SV_AVY_R11 81.34733322 ; rpm ! ODE: Spin of wheel R11 {AVy_R11}
SV_AVY_R11_OLD 81.34622509 ; rpm ! Spin of wheel R11 (previous time step)
SV_AVY_R12 81.34760319 ; rpm ! ODE: Spin of wheel R12 {AVy_R12}
SV_AVY_R12_OLD 81.34637204 ; rpm ! Spin of wheel R12 (previous time step)
SV_AVY_R13 81.34898431 ; rpm ! ODE: Spin of wheel R13 {AVy_R13}
SV_AVY_R13_OLD 81.34775257 ; rpm ! Spin of wheel R13 (previous time step)
SV_AVY_R14 81.34713145 ; rpm ! ODE: Spin of wheel R14 {AVy_R14}
SV_AVY_R14_OLD 81.34570725 ; rpm ! Spin of wheel R14 (previous time step)
SV_AVY_R15 81.34970599 ; rpm ! ODE: Spin of wheel R15 {AVy_R15}
SV_AVY_R15_OLD 81.34858621 ; rpm ! Spin of wheel R15 (previous time step)
SV_AVY_R16 81.34695872 ; rpm ! ODE: Spin of wheel R16 {AVy_R16}
SV_AVY_R16_OLD 81.34556144 ; rpm ! Spin of wheel R16 (previous time step)
SV_AVY_R17 81.34929342 ; rpm ! ODE: Spin of wheel R17 {AVy_R17}
SV_AVY_R17_OLD 81.3479537 ; rpm ! Spin of wheel R17 (previous time step)
SV_AVY_R18 81.35227521 ; rpm ! ODE: Spin of wheel R18 {AVy_R18}
SV_AVY_R18_OLD 81.35108452 ; rpm ! Spin of wheel R18 (previous time step)
SV_AVY_R19 81.35189739 ; rpm ! ODE: Spin of wheel R19 {AVy_R19}
SV_AVY_R19_OLD 81.34966641 ; rpm ! Spin of wheel R19 (previous time step)
SV_AVY_R1_OLD 81.09422308 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 81.09230765 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R20 80.77242401 ; rpm ! ODE: Spin of wheel R20 {AVy_R20}
SV_AVY_R20_OLD 80.77020773 ; rpm ! Spin of wheel R20 (previous time step)
SV_AVY_R21 80.8094425 ; rpm ! ODE: Spin of wheel R21 {AVy_R21}
SV_AVY_R21_OLD 80.80722624 ; rpm ! Spin of wheel R21 (previous time step)
SV_AVY_R22 80.89492919 ; rpm ! ODE: Spin of wheel R22 {AVy_R22}
SV_AVY_R22_OLD 80.90511115 ; rpm ! Spin of wheel R22 (previous time step)
SV_AVY_R23 80.46034645 ; rpm ! ODE: Spin of wheel R23 {AVy_R23}
SV_AVY_R23_OLD 80.45436093 ; rpm ! Spin of wheel R23 (previous time step)
SV_AVY_R24 80.39255965 ; rpm ! ODE: Spin of wheel R24 {AVy_R24}
SV_AVY_R24_OLD 80.38711137 ; rpm ! Spin of wheel R24 (previous time step)
SV_AVY_R25 81.66679156 ; rpm ! ODE: Spin of wheel R25 {AVy_R25}
SV_AVY_R25_OLD 81.65998586 ; rpm ! Spin of wheel R25 (previous time step)
SV_AVY_R26 80.54550535 ; rpm ! ODE: Spin of wheel R26 {AVy_R26}
SV_AVY_R26_OLD 80.53701524 ; rpm ! Spin of wheel R26 (previous time step)
SV_AVY_R27 77.94493963 ; rpm ! ODE: Spin of wheel R27 {AVy_R27}
SV_AVY_R27_OLD 77.94596363 ; rpm ! Spin of wheel R27 (previous time step)
SV_AVY_R28 79.80537283 ; rpm ! ODE: Spin of wheel R28 {AVy_R28}
SV_AVY_R28_OLD 79.81839814 ; rpm ! Spin of wheel R28 (previous time step)
SV_AVY_R29 80.73805999 ; rpm ! ODE: Spin of wheel R29 {AVy_R29}
SV_AVY_R29_OLD 80.73584369 ; rpm ! Spin of wheel R29 (previous time step)
SV_AVY_R2_OLD 81.09754232 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVY_R3 82.12820011 ; rpm ! ODE: Spin of wheel R3 {AVy_R3}
SV_AVY_R30 80.9816563 ; rpm ! ODE: Spin of wheel R30 {AVy_R30}
SV_AVY_R30_OLD 80.97943998 ; rpm ! Spin of wheel R30 (previous time step)
SV_AVY_R31 81.48765501 ; rpm ! ODE: Spin of wheel R31 {AVy_R31}
SV_AVY_R31_OLD 81.48543869 ; rpm ! Spin of wheel R31 (previous time step)
SV_AVY_R32 80.65903952 ; rpm ! ODE: Spin of wheel R32 {AVy_R32}
SV_AVY_R32_OLD 80.6876085 ; rpm ! Spin of wheel R32 (previous time step)
SV_AVY_R33 79.12432265 ; rpm ! ODE: Spin of wheel R33 {AVy_R33}
SV_AVY_R33_OLD 79.08388921 ; rpm ! Spin of wheel R33 (previous time step)
SV_AVY_R34 81.43460261 ; rpm ! ODE: Spin of wheel R34 {AVy_R34}
SV_AVY_R34_OLD 81.43826592 ; rpm ! Spin of wheel R34 (previous time step)
SV_AVY_R35 81.29537896 ; rpm ! ODE: Spin of wheel R35 {AVy_R35}
SV_AVY_R35_OLD 81.29904227 ; rpm ! Spin of wheel R35 (previous time step)
SV_AVY_R36 81.14601946 ; rpm ! ODE: Spin of wheel R36 {AVy_R36}
SV_AVY_R36_OLD 81.14968277 ; rpm ! Spin of wheel R36 (previous time step)
SV_AVY_R37 81.82406373 ; rpm ! ODE: Spin of wheel R37 {AVy_R37}
SV_AVY_R37_OLD 81.82772704 ; rpm ! Spin of wheel R37 (previous time step)
SV_AVY_R38 81.72704801 ; rpm ! ODE: Spin of wheel R38 {AVy_R38}
SV_AVY_R38_OLD 81.73071132 ; rpm ! Spin of wheel R38 (previous time step)
SV_AVY_R39 81.01458292 ; rpm ! ODE: Spin of wheel R39 {AVy_R39}
SV_AVY_R39_OLD 81.01824621 ; rpm ! Spin of wheel R39 (previous time step)
SV_AVY_R3_OLD 82.12631607 ; rpm ! Spin of wheel R3 (previous time step)
SV_AVY_R4 82.15867054 ; rpm ! ODE: Spin of wheel R4 {AVy_R4}
SV_AVY_R40 81.51656696 ; rpm ! ODE: Spin of wheel R40 {AVy_R40}
SV_AVY_R40_OLD 81.52023027 ; rpm ! Spin of wheel R40 (previous time step)
SV_AVY_R41 81.87764406 ; rpm ! ODE: Spin of wheel R41 {AVy_R41}
SV_AVY_R41_OLD 81.87689114 ; rpm ! Spin of wheel R41 (previous time step)
SV_AVY_R42 81.77621515 ; rpm ! ODE: Spin of wheel R42 {AVy_R42}
SV_AVY_R42_OLD 81.77692212 ; rpm ! Spin of wheel R42 (previous time step)
SV_AVY_R43 82.0437218 ; rpm ! ODE: Spin of wheel R43 {AVy_R43}
SV_AVY_R43_OLD 82.04764645 ; rpm ! Spin of wheel R43 (previous time step)
SV_AVY_R44 82.03664279 ; rpm ! ODE: Spin of wheel R44 {AVy_R44}
SV_AVY_R44_OLD 82.04065308 ; rpm ! Spin of wheel R44 (previous time step)
SV_AVY_R45 82.02936392 ; rpm ! ODE: Spin of wheel R45 {AVy_R45}
SV_AVY_R45_OLD 82.03348102 ; rpm ! Spin of wheel R45 (previous time step)
SV_AVY_R46 82.02705986 ; rpm ! ODE: Spin of wheel R46 {AVy_R46}
SV_AVY_R46_OLD 82.03347066 ; rpm ! Spin of wheel R46 (previous time step)
SV_AVY_R47 82.01819033 ; rpm ! ODE: Spin of wheel R47 {AVy_R47}
SV_AVY_R47_OLD 82.02466468 ; rpm ! Spin of wheel R47 (previous time step)
SV_AVY_R4_OLD 82.1567414 ; rpm ! Spin of wheel R4 (previous time step)
SV_AVY_R5 82.20340565 ; rpm ! ODE: Spin of wheel R5 {AVy_R5}
SV_AVY_R5_OLD 82.20141376 ; rpm ! Spin of wheel R5 (previous time step)
SV_AVY_R6 81.34737183 ; rpm ! ODE: Spin of wheel R6 {AVy_R6}
SV_AVY_R6_OLD 81.34590342 ; rpm ! Spin of wheel R6 (previous time step)
SV_AVY_R7 81.34766284 ; rpm ! ODE: Spin of wheel R7 {AVy_R7}
SV_AVY_R7_OLD 81.34620801 ; rpm ! Spin of wheel R7 (previous time step)
SV_AVY_R8 81.34800129 ; rpm ! ODE: Spin of wheel R8 {AVy_R8}
SV_AVY_R8_OLD 81.34655775 ; rpm ! Spin of wheel R8 (previous time step)
SV_AVY_R9 81.34883203 ; rpm ! ODE: Spin of wheel R9 {AVy_R9}
SV_AVY_R9_OLD 81.34745084 ; rpm ! Spin of wheel R9 (previous time step)
SV_AVY_SM2 -0.5946612024 ; deg/s ! ODE: Body-Y pitch rate of unit 2 sprung-mass
SV_AVY_SM3 1.78576837 ; deg/s ! ODE: Body-Y pitch rate of unit 3 sprung-mass
SV_AVY_SM4 -1.616269394 ; deg/s ! ODE: Body-Y pitch rate of unit 4 sprung-mass
SV_AVZ -0.008011028328 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass, unit 1 {AVz}
SV_AVZ_SM2 0.01010954718 ; deg/s ! ODE: Body-Z yaw rate of unit 2 sprung-mass
SV_AVZ_SM3 -0.007468431797 ; deg/s ! ODE: Body-Z yaw rate of unit 3 sprung-mass
SV_AVZ_SM4 0.00887693662 ; deg/s ! ODE: Body-Z yaw rate of unit 4 sprung-mass
SV_AV_CL   232.013147 ; rpm ! Clutch relative spin
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_ENG   623.25384 ; rpm ! ODE: Engine crankshaft spin {AV_Eng}
SV_AV_SHAFT_L_D1 82.13397974 ; rpm ! ODE: Diff1 Left (first) output shaft speed
SV_AV_SHAFT_L_D4 82.16420759 ; rpm ! ODE: Diff4 Left (first) output shaft speed
SV_AV_SHAFT_L_D5 82.20839822 ; rpm ! ODE: Diff5 Left (first) output shaft speed
SV_AV_SHAFT_L_D6 529.1196676 ; rpm ! ODE: Diff6 Left (first) output shaft speed
SV_AV_SHAFT_L_D7 528.9242191 ; rpm ! ODE: Diff7 Left (first) output shaft speed
SV_AV_SHAFT_R_D1 82.12820011 ; rpm ! ODE: Diff1 Right (second) output shaft speed
SV_AV_SHAFT_R_D4 82.15867054 ; rpm ! ODE: Diff4 Right (second) output shaft speed
SV_AV_SHAFT_R_D5 82.20340565 ; rpm ! ODE: Diff5 Right (second) output shaft speed
SV_AV_SHAFT_R_D6 529.4060085 ; rpm ! ODE: Diff6 Right (second) output shaft speed
SV_AV_SHAFT_R_D7 529.262838 ; rpm ! ODE: Diff7 Right (second) output shaft speed
SV_AV_SW -0.5495462001 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_AV_TC    391.25285 ; rpm ! ODE: Torque coupling output shaft spin
SV_AV_TR_OUT 528.7200675 ; rpm ! ODE: Transmission output shaft spin
SV_A_CONTROL        0 ; deg ! ODE: Str whl angle from driver model in torque control
SV_BETA 0.004668068112 ; deg ! Sideslip (ISO)
SV_BETA_2 -0.02259813442 ; deg ! Sideslip (ISO)
SV_BETA_3 0.02660241615 ; deg ! Sideslip (ISO)
SV_BETA_4 0.01052426298 ; deg ! Sideslip (ISO)
SV_BETA_RD 0.004668068112 ; deg ! Sideslip using road axes
SV_BETA_RD_2 -0.02259813442 ; deg ! Sideslip using road axes
SV_BETA_RD_3 0.02660241615 ; deg ! Sideslip using road axes
SV_BETA_RD_4 0.01066236035 ; deg ! Sideslip using road axes
SV_BRAKE_STATE      0 ; - ! Braking state, used for clutch control
SV_CL_2ND_DIFF_LOCKED_1 0 ; - ! 2nd Clutch lock state for 1st drive axle diff
SV_CL_2ND_DIFF_LOCKED_4 0 ; - ! 2nd Clutch lock state for 3rd drive axle diff
SV_CL_2ND_DIFF_LOCKED_5 0 ; - ! 2nd Clutch lock state for 4th drive axle diff
SV_CL_2ND_DIFF_LOCKED_6 0 ; - ! 2nd Clutch lock state for inter-axle diff for drive
                          ! axles 3,4,5
SV_CL_2ND_DIFF_LOCKED_7 0 ; - ! 2nd Clutch lock state for master transfer case
SV_CL_2ND_DIFF_SLIP_REF_1 0 ; deg ! 2nd Clutch ref. angle for 1st drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_4 0 ; deg ! 2nd Clutch ref. angle for 3rd drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_5 0 ; deg ! 2nd Clutch ref. angle for 4th drive axle diff
SV_CL_2ND_DIFF_SLIP_REF_6 0 ; deg ! 2nd Clutch ref. angle for inter-axle diff for
                            ! drive axles 3,4,5
SV_CL_2ND_DIFF_SLIP_REF_7 0 ; deg ! 2nd Clutch ref. angle for master transfer case
SV_CL_2ND_DIFF_SPIN_1 0 ; rpm ! 2nd Clutch rel. spin for 1st drive axle diff
SV_CL_2ND_DIFF_SPIN_4 0 ; rpm ! 2nd Clutch rel. spin for 3rd drive axle diff
SV_CL_2ND_DIFF_SPIN_5 0 ; rpm ! 2nd Clutch rel. spin for 4th drive axle diff
SV_CL_2ND_DIFF_SPIN_6 0 ; rpm ! 2nd Clutch rel. spin for inter-axle diff for drive
                        ! axles 3,4,5
SV_CL_2ND_DIFF_SPIN_7 0 ; rpm ! 2nd Clutch rel. spin for master transfer case
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_CL_AUTO_BRAKE    0 ; - ! Boolean: 1 if auto clutch for low-speed braking
SV_CL_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto clutch for a gear shift
SV_CL_CON           0 ; - ! Transmission clutch control {ClutchTr}
SV_CL_DIFF_LOCKED_1 0 ; - ! Clutch lock state for 1st drive axle diff
SV_CL_DIFF_LOCKED_4 0 ; - ! Clutch lock state for 3rd drive axle diff
SV_CL_DIFF_LOCKED_5 0 ; - ! Clutch lock state for 4th drive axle diff
SV_CL_DIFF_LOCKED_6 0 ; - ! Clutch lock state for inter-axle diff for drive axles
                      ! 3,4,5
SV_CL_DIFF_LOCKED_7 0 ; - ! Clutch lock state for master transfer case
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Clutch ref. angle for 1st drive axle diff
SV_CL_DIFF_SLIP_REF_4 0 ; deg ! Clutch ref. angle for 3rd drive axle diff
SV_CL_DIFF_SLIP_REF_5 0 ; deg ! Clutch ref. angle for 4th drive axle diff
SV_CL_DIFF_SLIP_REF_6 0 ; deg ! Clutch ref. angle for inter-axle diff for drive
                        ! axles 3,4,5
SV_CL_DIFF_SLIP_REF_7 0 ; deg ! Clutch ref. angle for master transfer case
SV_CL_DIFF_SPIN_1 0.005738646917 ; rpm ! Clutch rel. spin for 1st drive axle diff
SV_CL_DIFF_SPIN_4 0.005477800613 ; rpm ! Clutch rel. spin for 3rd drive axle diff
SV_CL_DIFF_SPIN_5 0.004915647442 ; rpm ! Clutch rel. spin for 4th drive axle diff
SV_CL_DIFF_SPIN_6 -0.2858798664 ; rpm ! Clutch rel. spin for inter-axle diff for
                                ! drive axles 3,4,5
SV_CL_DIFF_SPIN_7 -0.3380390895 ; rpm ! Clutch rel. spin for master transfer case
SV_CL_LOCKED        0 ; - ! Clutch lockup state
SV_CL_PRESS         0 ; - ! Initial direction state for automatic clutch
SV_CL_TWIN_LOCKED_LF 0 ; - ! Lock state of LF twin clutch
SV_CL_TWIN_LOCKED_L_D4 0 ; - ! Lock state of L Diff4 twin clutch
SV_CL_TWIN_LOCKED_L_D5 0 ; - ! Lock state of L Diff5 twin clutch
SV_CL_TWIN_LOCKED_L_D6 0 ; - ! Lock state of L Diff6 twin clutch
SV_CL_TWIN_LOCKED_L_D7 0 ; - ! Lock state of L Diff7 twin clutch
SV_CL_TWIN_LOCKED_RF 0 ; - ! Lock state of RF twin clutch
SV_CL_TWIN_LOCKED_R_D4 0 ; - ! Lock state of R Diff4 twin clutch
SV_CL_TWIN_LOCKED_R_D5 0 ; - ! Lock state of R Diff5 twin clutch
SV_CL_TWIN_LOCKED_R_D6 0 ; - ! Lock state of R Diff6 twin clutch
SV_CL_TWIN_LOCKED_R_D7 0 ; - ! Lock state of R Diff7 twin clutch
SV_CL_TWIN_SPIN_LF  0 ; rpm ! Rel. spin of LF twin clutch
SV_CL_TWIN_SPIN_L_D4 0 ; rpm ! Rel. spin of L Diff4 twin clutch
SV_CL_TWIN_SPIN_L_D5 0 ; rpm ! Rel. spin of L Diff5 twin clutch
SV_CL_TWIN_SPIN_L_D6 0 ; rpm ! Rel. spin of L Diff6 twin clutch
SV_CL_TWIN_SPIN_L_D7 0 ; rpm ! Rel. spin of L Diff7 twin clutch
SV_CL_TWIN_SPIN_RF  0 ; rpm ! Rel. spin of RF twin clutch
SV_CL_TWIN_SPIN_R_D4 0 ; rpm ! Rel. spin of R Diff4 twin clutch
SV_CL_TWIN_SPIN_R_D5 0 ; rpm ! Rel. spin of R Diff5 twin clutch
SV_CL_TWIN_SPIN_R_D6 0 ; rpm ! Rel. spin of R Diff6 twin clutch
SV_CL_TWIN_SPIN_R_D7 0 ; rpm ! Rel. spin of R Diff7 twin clutch
SV_CMP_S_L1 61.84306121 ; mm ! Compression of ride spring L1
SV_CMP_S_L10 19.34073064 ; mm ! Compression of ride spring L10
SV_CMP_S_L11 19.28350975 ; mm ! Compression of ride spring L11
SV_CMP_S_L12 17.74630616 ; mm ! Compression of ride spring L12
SV_CMP_S_L13 17.57779207 ; mm ! Compression of ride spring L13
SV_CMP_S_L14 17.32668998 ; mm ! Compression of ride spring L14
SV_CMP_S_L15 15.19152351 ; mm ! Compression of ride spring L15
SV_CMP_S_L16 14.99084913 ; mm ! Compression of ride spring L16
SV_CMP_S_L17 14.69617147 ; mm ! Compression of ride spring L17
SV_CMP_S_L18 13.74809094 ; mm ! Compression of ride spring L18
SV_CMP_S_L19 13.74809094 ; mm ! Compression of ride spring L19
SV_CMP_S_L2 61.84306121 ; mm ! Compression of ride spring L2
SV_CMP_S_L20 -18.82227551 ; mm ! Compression of ride spring L20
SV_CMP_S_L21 -22.13234279 ; mm ! Compression of ride spring L21
SV_CMP_S_L22 -26.63428101 ; mm ! Compression of ride spring L22
SV_CMP_S_L23 -15.076745 ; mm ! Compression of ride spring L23
SV_CMP_S_L24 -16.69488307 ; mm ! Compression of ride spring L24
SV_CMP_S_L25 24.35716002 ; mm ! Compression of ride spring L25
SV_CMP_S_L26 84.50428125 ; mm ! Compression of ride spring L26
SV_CMP_S_L27 45.14740191 ; mm ! Compression of ride spring L27
SV_CMP_S_L28 3.828413453 ; mm ! Compression of ride spring L28
SV_CMP_S_L29 -18.88997756 ; mm ! Compression of ride spring L29
SV_CMP_S_L3 5.542680397 ; mm ! Compression of ride spring L3
SV_CMP_S_L30 -27.35009379 ; mm ! Compression of ride spring L30
SV_CMP_S_L31 -9.378842139 ; mm ! Compression of ride spring L31
SV_CMP_S_L32 83.81307812 ; mm ! Compression of ride spring L32
SV_CMP_S_L33 83.81307812 ; mm ! Compression of ride spring L33
SV_CMP_S_L34 -25.26544731 ; mm ! Compression of ride spring L34
SV_CMP_S_L35 -23.91540425 ; mm ! Compression of ride spring L35
SV_CMP_S_L36 -22.55929795 ; mm ! Compression of ride spring L36
SV_CMP_S_L37 -25.96164593 ; mm ! Compression of ride spring L37
SV_CMP_S_L38 -24.91253496 ; mm ! Compression of ride spring L38
SV_CMP_S_L39 -17.51954221 ; mm ! Compression of ride spring L39
SV_CMP_S_L4 5.542680397 ; mm ! Compression of ride spring L4
SV_CMP_S_L40 -23.78607721 ; mm ! Compression of ride spring L40
SV_CMP_S_L41 -21.42297582 ; mm ! Compression of ride spring L41
SV_CMP_S_L42 -18.13208841 ; mm ! Compression of ride spring L42
SV_CMP_S_L43 10.26338535 ; mm ! Compression of ride spring L43
SV_CMP_S_L44 13.61192747 ; mm ! Compression of ride spring L44
SV_CMP_S_L45 16.96025807 ; mm ! Compression of ride spring L45
SV_CMP_S_L46 43.42314589 ; mm ! Compression of ride spring L46
SV_CMP_S_L47 43.42314589 ; mm ! Compression of ride spring L47
SV_CMP_S_L5 5.542680397 ; mm ! Compression of ride spring L5
SV_CMP_S_L6 21.73760904 ; mm ! Compression of ride spring L6
SV_CMP_S_L7 21.5327536 ; mm ! Compression of ride spring L7
SV_CMP_S_L8 21.3278691 ; mm ! Compression of ride spring L8
SV_CMP_S_L9 19.60060909 ; mm ! Compression of ride spring L9
SV_CMP_S_R1 62.02064756 ; mm ! Compression of ride spring R1
SV_CMP_S_R10 19.58668177 ; mm ! Compression of ride spring R10
SV_CMP_S_R11 19.54343958 ; mm ! Compression of ride spring R11
SV_CMP_S_R12 17.72746046 ; mm ! Compression of ride spring R12
SV_CMP_S_R13 17.61747719 ; mm ! Compression of ride spring R13
SV_CMP_S_R14 17.27398307 ; mm ! Compression of ride spring R14
SV_CMP_S_R15 15.12323198 ; mm ! Compression of ride spring R15
SV_CMP_S_R16 14.89929442 ; mm ! Compression of ride spring R16
SV_CMP_S_R17 14.51345632 ; mm ! Compression of ride spring R17
SV_CMP_S_R18 13.51483404 ; mm ! Compression of ride spring R18
SV_CMP_S_R19 13.51483404 ; mm ! Compression of ride spring R19
SV_CMP_S_R2 62.02064756 ; mm ! Compression of ride spring R2
SV_CMP_S_R20 -19.08918681 ; mm ! Compression of ride spring R20
SV_CMP_S_R21 -22.44656439 ; mm ! Compression of ride spring R21
SV_CMP_S_R22 -26.90972158 ; mm ! Compression of ride spring R22
SV_CMP_S_R23 -15.0485682 ; mm ! Compression of ride spring R23
SV_CMP_S_R24 -16.65099704 ; mm ! Compression of ride spring R24
SV_CMP_S_R25 24.40737776 ; mm ! Compression of ride spring R25
SV_CMP_S_R26 84.52831937 ; mm ! Compression of ride spring R26
SV_CMP_S_R27 45.17757837 ; mm ! Compression of ride spring R27
SV_CMP_S_R28 3.823747655 ; mm ! Compression of ride spring R28
SV_CMP_S_R29 -18.9178569 ; mm ! Compression of ride spring R29
SV_CMP_S_R3 5.760671937 ; mm ! Compression of ride spring R3
SV_CMP_S_R30 -27.3327525 ; mm ! Compression of ride spring R30
SV_CMP_S_R31 -9.337105188 ; mm ! Compression of ride spring R31
SV_CMP_S_R32 83.88723114 ; mm ! Compression of ride spring R32
SV_CMP_S_R33 83.88723114 ; mm ! Compression of ride spring R33
SV_CMP_S_R34 -25.38824088 ; mm ! Compression of ride spring R34
SV_CMP_S_R35 -24.03130222 ; mm ! Compression of ride spring R35
SV_CMP_S_R36 -22.68327751 ; mm ! Compression of ride spring R36
SV_CMP_S_R37 -26.15282797 ; mm ! Compression of ride spring R37
SV_CMP_S_R38 -25.10879923 ; mm ! Compression of ride spring R38
SV_CMP_S_R39 -17.80816954 ; mm ! Compression of ride spring R39
SV_CMP_S_R4 5.760671937 ; mm ! Compression of ride spring R4
SV_CMP_S_R40 -23.7498548 ; mm ! Compression of ride spring R40
SV_CMP_S_R41 -21.62410856 ; mm ! Compression of ride spring R41
SV_CMP_S_R42 -18.12888947 ; mm ! Compression of ride spring R42
SV_CMP_S_R43 10.34180684 ; mm ! Compression of ride spring R43
SV_CMP_S_R44 13.69029658 ; mm ! Compression of ride spring R44
SV_CMP_S_R45 17.03899785 ; mm ! Compression of ride spring R45
SV_CMP_S_R46 43.50213157 ; mm ! Compression of ride spring R46
SV_CMP_S_R47 43.50213157 ; mm ! Compression of ride spring R47
SV_CMP_S_R5 5.760671937 ; mm ! Compression of ride spring R5
SV_CMP_S_R6 21.93946714 ; mm ! Compression of ride spring R6
SV_CMP_S_R7 21.73515481 ; mm ! Compression of ride spring R7
SV_CMP_S_R8 21.53078319 ; mm ! Compression of ride spring R8
SV_CMP_S_R9 19.83128009 ; mm ! Compression of ride spring R9
SV_CMP_T_L10I 5.720719696 ; mm ! Tire L10i compression
SV_CMP_T_L10O 5.758344153 ; mm ! Tire L10o compression
SV_CMP_T_L11I 5.16373859 ; mm ! Tire L11i compression
SV_CMP_T_L11O 5.216938024 ; mm ! Tire L11o compression
SV_CMP_T_L12I 4.836506163 ; mm ! Tire L12i compression
SV_CMP_T_L12O 4.783310125 ; mm ! Tire L12o compression
SV_CMP_T_L13I 4.748001868 ; mm ! Tire L13i compression
SV_CMP_T_L13O 4.771076491 ; mm ! Tire L13o compression
SV_CMP_T_L14I 4.852083222 ; mm ! Tire L14i compression
SV_CMP_T_L14O 4.761166105 ; mm ! Tire L14o compression
SV_CMP_T_L15I 4.891078985 ; mm ! Tire L15i compression
SV_CMP_T_L15O 4.871898236 ; mm ! Tire L15o compression
SV_CMP_T_L16I 4.820453539 ; mm ! Tire L16i compression
SV_CMP_T_L16O 4.773171359 ; mm ! Tire L16o compression
SV_CMP_T_L17I 5.148152383 ; mm ! Tire L17i compression
SV_CMP_T_L17O 4.994248857 ; mm ! Tire L17o compression
SV_CMP_T_L18I 4.867565609 ; mm ! Tire L18i compression
SV_CMP_T_L18O 4.898012447 ; mm ! Tire L18o compression
SV_CMP_T_L19I 3.424731533 ; mm ! Tire L19i compression
SV_CMP_T_L19O 3.161572193 ; mm ! Tire L19o compression
SV_CMP_T_L1I 14.9499288 ; mm ! Tire L1i compression
SV_CMP_T_L1O        0 ; mm ! Tire L1o compression
SV_CMP_T_L20I -6.916449854 ; mm ! Tire L20i compression
SV_CMP_T_L20O -6.998280567 ; mm ! Tire L20o compression
SV_CMP_T_L21I -5.57226674 ; mm ! Tire L21i compression
SV_CMP_T_L21O -5.712728321 ; mm ! Tire L21o compression
SV_CMP_T_L22I 0.5812028657 ; mm ! Tire L22i compression
SV_CMP_T_L22O 0.4721900505 ; mm ! Tire L22o compression
SV_CMP_T_L23I 2.688575875 ; mm ! Tire L23i compression
SV_CMP_T_L23O 2.671964877 ; mm ! Tire L23o compression
SV_CMP_T_L24I 1.883541102 ; mm ! Tire L24i compression
SV_CMP_T_L24O 1.883262133 ; mm ! Tire L24o compression
SV_CMP_T_L25I 2.46325151 ; mm ! Tire L25i compression
SV_CMP_T_L25O 2.463287468 ; mm ! Tire L25o compression
SV_CMP_T_L26I 9.294255647 ; mm ! Tire L26i compression
SV_CMP_T_L26O 9.289725962 ; mm ! Tire L26o compression
SV_CMP_T_L27I 13.19370815 ; mm ! Tire L27i compression
SV_CMP_T_L27O 13.20697819 ; mm ! Tire L27o compression
SV_CMP_T_L28I 9.848564585 ; mm ! Tire L28i compression
SV_CMP_T_L28O 9.813446872 ; mm ! Tire L28o compression
SV_CMP_T_L29I -101.5067255 ; mm ! Tire L29i compression
SV_CMP_T_L29O -101.5682809 ; mm ! Tire L29o compression
SV_CMP_T_L2I 14.88655318 ; mm ! Tire L2i compression
SV_CMP_T_L2O        0 ; mm ! Tire L2o compression
SV_CMP_T_L30I -79.43109662 ; mm ! Tire L30i compression
SV_CMP_T_L30O -79.43675639 ; mm ! Tire L30o compression
SV_CMP_T_L31I -105.5591294 ; mm ! Tire L31i compression
SV_CMP_T_L31O -105.5396207 ; mm ! Tire L31o compression
SV_CMP_T_L32I 21.8406676 ; mm ! Tire L32i compression
SV_CMP_T_L32O 21.88978965 ; mm ! Tire L32o compression
SV_CMP_T_L33I 12.63504437 ; mm ! Tire L33i compression
SV_CMP_T_L33O 12.61042509 ; mm ! Tire L33o compression
SV_CMP_T_L34I -88.45679271 ; mm ! Tire L34i compression
SV_CMP_T_L34O -88.51436132 ; mm ! Tire L34o compression
SV_CMP_T_L35I -80.19771398 ; mm ! Tire L35i compression
SV_CMP_T_L35O -80.24674344 ; mm ! Tire L35o compression
SV_CMP_T_L36I -71.97760477 ; mm ! Tire L36i compression
SV_CMP_T_L36O -72.03669009 ; mm ! Tire L36o compression
SV_CMP_T_L37I -41.38570425 ; mm ! Tire L37i compression
SV_CMP_T_L37O -41.43164674 ; mm ! Tire L37o compression
SV_CMP_T_L38I -31.93819595 ; mm ! Tire L38i compression
SV_CMP_T_L38O -31.99049951 ; mm ! Tire L38o compression
SV_CMP_T_L39I -47.92420483 ; mm ! Tire L39i compression
SV_CMP_T_L39O -48.08999865 ; mm ! Tire L39o compression
SV_CMP_T_L3I 2.957201092 ; mm ! Tire L3i compression
SV_CMP_T_L3O 2.956725968 ; mm ! Tire L3o compression
SV_CMP_T_L40I -3.960225932 ; mm ! Tire L40i compression
SV_CMP_T_L40O -3.881388548 ; mm ! Tire L40o compression
SV_CMP_T_L41I 0.02542682598 ; mm ! Tire L41i compression
SV_CMP_T_L41O -0.191538861 ; mm ! Tire L41o compression
SV_CMP_T_L42I 0.7078058598 ; mm ! Tire L42i compression
SV_CMP_T_L42O 0.7443197244 ; mm ! Tire L42o compression
SV_CMP_T_L43I 4.927606851 ; mm ! Tire L43i compression
SV_CMP_T_L43O 4.934469921 ; mm ! Tire L43o compression
SV_CMP_T_L44I 5.178869752 ; mm ! Tire L44i compression
SV_CMP_T_L44O 5.185746154 ; mm ! Tire L44o compression
SV_CMP_T_L45I 5.431309534 ; mm ! Tire L45i compression
SV_CMP_T_L45O 5.4386841 ; mm ! Tire L45o compression
SV_CMP_T_L46I 9.41907768 ; mm ! Tire L46i compression
SV_CMP_T_L46O 9.426253755 ; mm ! Tire L46o compression
SV_CMP_T_L47I 9.561627562 ; mm ! Tire L47i compression
SV_CMP_T_L47O 9.568489357 ; mm ! Tire L47o compression
SV_CMP_T_L4I 2.844122966 ; mm ! Tire L4i compression
SV_CMP_T_L4O 2.843607134 ; mm ! Tire L4o compression
SV_CMP_T_L5I 2.731394798 ; mm ! Tire L5i compression
SV_CMP_T_L5O 2.730964001 ; mm ! Tire L5o compression
SV_CMP_T_L6I 5.732766718 ; mm ! Tire L6i compression
SV_CMP_T_L6O 5.754844385 ; mm ! Tire L6o compression
SV_CMP_T_L7I 5.743101788 ; mm ! Tire L7i compression
SV_CMP_T_L7O 5.765962613 ; mm ! Tire L7o compression
SV_CMP_T_L8I 5.753535854 ; mm ! Tire L8i compression
SV_CMP_T_L8O 5.777147011 ; mm ! Tire L8o compression
SV_CMP_T_L9I 5.472224758 ; mm ! Tire L9i compression
SV_CMP_T_L9O 5.491367751 ; mm ! Tire L9o compression
SV_CMP_T_R10I 5.538059026 ; mm ! Tire R10i compression
SV_CMP_T_R10O 5.500434569 ; mm ! Tire R10o compression
SV_CMP_T_R11I 4.90546392 ; mm ! Tire R11i compression
SV_CMP_T_R11O 4.852264486 ; mm ! Tire R11o compression
SV_CMP_T_R12I 5.094764345 ; mm ! Tire R12i compression
SV_CMP_T_R12O 5.147960383 ; mm ! Tire R12o compression
SV_CMP_T_R13I 4.635978294 ; mm ! Tire R13i compression
SV_CMP_T_R13O 4.612903671 ; mm ! Tire R13o compression
SV_CMP_T_R14I 5.293471156 ; mm ! Tire R14i compression
SV_CMP_T_R14O 5.384388272 ; mm ! Tire R14o compression
SV_CMP_T_R15I 4.984198429 ; mm ! Tire R15i compression
SV_CMP_T_R15O 5.003379178 ; mm ! Tire R15o compression
SV_CMP_T_R16I 5.050000896 ; mm ! Tire R16i compression
SV_CMP_T_R16O 5.097283075 ; mm ! Tire R16o compression
SV_CMP_T_R17I 5.89532918 ; mm ! Tire R17i compression
SV_CMP_T_R17O 6.049232706 ; mm ! Tire R17o compression
SV_CMP_T_R18I 4.719751122 ; mm ! Tire R18i compression
SV_CMP_T_R18O 4.689304284 ; mm ! Tire R18o compression
SV_CMP_T_R19I 4.702327682 ; mm ! Tire R19i compression
SV_CMP_T_R19O 4.965487022 ; mm ! Tire R19o compression
SV_CMP_T_R1I 14.96550719 ; mm ! Tire R1i compression
SV_CMP_T_R1O        0 ; mm ! Tire R1o compression
SV_CMP_T_R20I -6.519174942 ; mm ! Tire R20i compression
SV_CMP_T_R20O -6.437344229 ; mm ! Tire R20o compression
SV_CMP_T_R21I -4.890348421 ; mm ! Tire R21i compression
SV_CMP_T_R21O -4.74988684 ; mm ! Tire R21o compression
SV_CMP_T_R22I 1.110442501 ; mm ! Tire R22i compression
SV_CMP_T_R22O 1.219455317 ; mm ! Tire R22o compression
SV_CMP_T_R23I 2.769219594 ; mm ! Tire R23i compression
SV_CMP_T_R23O 2.785830593 ; mm ! Tire R23o compression
SV_CMP_T_R24I 1.884895451 ; mm ! Tire R24i compression
SV_CMP_T_R24O 1.88517442 ; mm ! Tire R24o compression
SV_CMP_T_R25I 2.463076938 ; mm ! Tire R25i compression
SV_CMP_T_R25O 2.463040979 ; mm ! Tire R25o compression
SV_CMP_T_R26I 9.316246536 ; mm ! Tire R26i compression
SV_CMP_T_R26O 9.320776221 ; mm ! Tire R26o compression
SV_CMP_T_R27I 13.12928425 ; mm ! Tire R27i compression
SV_CMP_T_R27O 13.11601421 ; mm ! Tire R27o compression
SV_CMP_T_R28I 10.01905542 ; mm ! Tire R28i compression
SV_CMP_T_R28O 10.05417313 ; mm ! Tire R28o compression
SV_CMP_T_R29I -101.2078837 ; mm ! Tire R29i compression
SV_CMP_T_R29O -101.1463282 ; mm ! Tire R29o compression
SV_CMP_T_R2I 14.95129525 ; mm ! Tire R2i compression
SV_CMP_T_R2O        0 ; mm ! Tire R2o compression
SV_CMP_T_R30I -79.40361934 ; mm ! Tire R30i compression
SV_CMP_T_R30O -79.39795957 ; mm ! Tire R30o compression
SV_CMP_T_R31I -105.6538409 ; mm ! Tire R31i compression
SV_CMP_T_R31O -105.6733496 ; mm ! Tire R31o compression
SV_CMP_T_R32I 21.60218801 ; mm ! Tire R32i compression
SV_CMP_T_R32O 21.55306596 ; mm ! Tire R32o compression
SV_CMP_T_R33I 12.75456699 ; mm ! Tire R33i compression
SV_CMP_T_R33O 12.77918627 ; mm ! Tire R33o compression
SV_CMP_T_R34I -88.17730635 ; mm ! Tire R34i compression
SV_CMP_T_R34O -88.11973773 ; mm ! Tire R34o compression
SV_CMP_T_R35I -79.95968385 ; mm ! Tire R35i compression
SV_CMP_T_R35O -79.91065439 ; mm ! Tire R35o compression
SV_CMP_T_R36I -71.69075508 ; mm ! Tire R36i compression
SV_CMP_T_R36O -71.63166976 ; mm ! Tire R36o compression
SV_CMP_T_R37I -41.16266087 ; mm ! Tire R37i compression
SV_CMP_T_R37O -41.11671838 ; mm ! Tire R37o compression
SV_CMP_T_R38I -31.68427062 ; mm ! Tire R38i compression
SV_CMP_T_R38O -31.63196706 ; mm ! Tire R38o compression
SV_CMP_T_R39I -47.11930256 ; mm ! Tire R39i compression
SV_CMP_T_R39O -46.95350874 ; mm ! Tire R39o compression
SV_CMP_T_R3I 2.95958131 ; mm ! Tire R3i compression
SV_CMP_T_R3O 2.960056434 ; mm ! Tire R3o compression
SV_CMP_T_R40I -4.342968717 ; mm ! Tire R40i compression
SV_CMP_T_R40O -4.421806101 ; mm ! Tire R40o compression
SV_CMP_T_R41I 1.078760242 ; mm ! Tire R41i compression
SV_CMP_T_R41O 1.295725929 ; mm ! Tire R41o compression
SV_CMP_T_R42I 0.5305369366 ; mm ! Tire R42i compression
SV_CMP_T_R42O 0.4940230721 ; mm ! Tire R42o compression
SV_CMP_T_R43I 4.894287751 ; mm ! Tire R43i compression
SV_CMP_T_R43O 4.887424681 ; mm ! Tire R43o compression
SV_CMP_T_R44I 5.145485928 ; mm ! Tire R44i compression
SV_CMP_T_R44O 5.138609525 ; mm ! Tire R44o compression
SV_CMP_T_R45I 5.395507205 ; mm ! Tire R45i compression
SV_CMP_T_R45O 5.388132639 ; mm ! Tire R45o compression
SV_CMP_T_R46I 9.384238996 ; mm ! Tire R46i compression
SV_CMP_T_R46O 9.377062922 ; mm ! Tire R46o compression
SV_CMP_T_R47I 9.528314654 ; mm ! Tire R47i compression
SV_CMP_T_R47O 9.521452859 ; mm ! Tire R47o compression
SV_CMP_T_R4I 2.846707117 ; mm ! Tire R4i compression
SV_CMP_T_R4O 2.847222949 ; mm ! Tire R4o compression
SV_CMP_T_R5I 2.733552953 ; mm ! Tire R5i compression
SV_CMP_T_R5O 2.73398375 ; mm ! Tire R5o compression
SV_CMP_T_R6I 5.625583209 ; mm ! Tire R6i compression
SV_CMP_T_R6O 5.603505543 ; mm ! Tire R6o compression
SV_CMP_T_R7I 5.632116174 ; mm ! Tire R7i compression
SV_CMP_T_R7O 5.609255349 ; mm ! Tire R7o compression
SV_CMP_T_R8I 5.638907493 ; mm ! Tire R8i compression
SV_CMP_T_R8O 5.615296335 ; mm ! Tire R8o compression
SV_CMP_T_R9I 5.379288611 ; mm ! Tire R9i compression
SV_CMP_T_R9O 5.360145617 ; mm ! Tire R9o compression
SV_CONTACT_ID_L10I  1 ; - ! Road surface ID for tire contact {RdID_L10I}
SV_CONTACT_ID_L10O  1 ; - ! Road surface ID for tire contact {RdID_L10O}
SV_CONTACT_ID_L11I  1 ; - ! Road surface ID for tire contact {RdID_L11I}
SV_CONTACT_ID_L11O  1 ; - ! Road surface ID for tire contact {RdID_L11O}
SV_CONTACT_ID_L12I  1 ; - ! Road surface ID for tire contact {RdID_L12I}
SV_CONTACT_ID_L12O  1 ; - ! Road surface ID for tire contact {RdID_L12O}
SV_CONTACT_ID_L13I  1 ; - ! Road surface ID for tire contact {RdID_L13I}
SV_CONTACT_ID_L13O  1 ; - ! Road surface ID for tire contact {RdID_L13O}
SV_CONTACT_ID_L14I  1 ; - ! Road surface ID for tire contact {RdID_L14I}
SV_CONTACT_ID_L14O  1 ; - ! Road surface ID for tire contact {RdID_L14O}
SV_CONTACT_ID_L15I  1 ; - ! Road surface ID for tire contact {RdID_L15I}
SV_CONTACT_ID_L15O  1 ; - ! Road surface ID for tire contact {RdID_L15O}
SV_CONTACT_ID_L16I  1 ; - ! Road surface ID for tire contact {RdID_L16I}
SV_CONTACT_ID_L16O  1 ; - ! Road surface ID for tire contact {RdID_L16O}
SV_CONTACT_ID_L17I  1 ; - ! Road surface ID for tire contact {RdID_L17I}
SV_CONTACT_ID_L17O  1 ; - ! Road surface ID for tire contact {RdID_L17O}
SV_CONTACT_ID_L18I  1 ; - ! Road surface ID for tire contact {RdID_L18I}
SV_CONTACT_ID_L18O  1 ; - ! Road surface ID for tire contact {RdID_L18O}
SV_CONTACT_ID_L19I  1 ; - ! Road surface ID for tire contact {RdID_L19I}
SV_CONTACT_ID_L19O  1 ; - ! Road surface ID for tire contact {RdID_L19O}
SV_CONTACT_ID_L1I   1 ; - ! Road surface ID for tire contact {RdID_L1I}
SV_CONTACT_ID_L1O   1 ; - ! Road surface ID for tire contact {RdID_L1O}
SV_CONTACT_ID_L20I  1 ; - ! Road surface ID for tire contact {RdID_L20I}
SV_CONTACT_ID_L20O  1 ; - ! Road surface ID for tire contact {RdID_L20O}
SV_CONTACT_ID_L21I  1 ; - ! Road surface ID for tire contact {RdID_L21I}
SV_CONTACT_ID_L21O  1 ; - ! Road surface ID for tire contact {RdID_L21O}
SV_CONTACT_ID_L22I  1 ; - ! Road surface ID for tire contact {RdID_L22I}
SV_CONTACT_ID_L22O  1 ; - ! Road surface ID for tire contact {RdID_L22O}
SV_CONTACT_ID_L23I  1 ; - ! Road surface ID for tire contact {RdID_L23I}
SV_CONTACT_ID_L23O  1 ; - ! Road surface ID for tire contact {RdID_L23O}
SV_CONTACT_ID_L24I  1 ; - ! Road surface ID for tire contact {RdID_L24I}
SV_CONTACT_ID_L24O  1 ; - ! Road surface ID for tire contact {RdID_L24O}
SV_CONTACT_ID_L25I  1 ; - ! Road surface ID for tire contact {RdID_L25I}
SV_CONTACT_ID_L25O  1 ; - ! Road surface ID for tire contact {RdID_L25O}
SV_CONTACT_ID_L26I  1 ; - ! Road surface ID for tire contact {RdID_L26I}
SV_CONTACT_ID_L26O  1 ; - ! Road surface ID for tire contact {RdID_L26O}
SV_CONTACT_ID_L27I  1 ; - ! Road surface ID for tire contact {RdID_L27I}
SV_CONTACT_ID_L27O  1 ; - ! Road surface ID for tire contact {RdID_L27O}
SV_CONTACT_ID_L28I  1 ; - ! Road surface ID for tire contact {RdID_L28I}
SV_CONTACT_ID_L28O  1 ; - ! Road surface ID for tire contact {RdID_L28O}
SV_CONTACT_ID_L29I  1 ; - ! Road surface ID for tire contact {RdID_L29I}
SV_CONTACT_ID_L29O  1 ; - ! Road surface ID for tire contact {RdID_L29O}
SV_CONTACT_ID_L2I   1 ; - ! Road surface ID for tire contact {RdID_L2I}
SV_CONTACT_ID_L2O   1 ; - ! Road surface ID for tire contact {RdID_L2O}
SV_CONTACT_ID_L30I  1 ; - ! Road surface ID for tire contact {RdID_L30I}
SV_CONTACT_ID_L30O  1 ; - ! Road surface ID for tire contact {RdID_L30O}
SV_CONTACT_ID_L31I  1 ; - ! Road surface ID for tire contact {RdID_L31I}
SV_CONTACT_ID_L31O  1 ; - ! Road surface ID for tire contact {RdID_L31O}
SV_CONTACT_ID_L32I  1 ; - ! Road surface ID for tire contact {RdID_L32I}
SV_CONTACT_ID_L32O  1 ; - ! Road surface ID for tire contact {RdID_L32O}
SV_CONTACT_ID_L33I  1 ; - ! Road surface ID for tire contact {RdID_L33I}
SV_CONTACT_ID_L33O  1 ; - ! Road surface ID for tire contact {RdID_L33O}
SV_CONTACT_ID_L34I  1 ; - ! Road surface ID for tire contact {RdID_L34I}
SV_CONTACT_ID_L34O  1 ; - ! Road surface ID for tire contact {RdID_L34O}
SV_CONTACT_ID_L35I  1 ; - ! Road surface ID for tire contact {RdID_L35I}
SV_CONTACT_ID_L35O  1 ; - ! Road surface ID for tire contact {RdID_L35O}
SV_CONTACT_ID_L36I  1 ; - ! Road surface ID for tire contact {RdID_L36I}
SV_CONTACT_ID_L36O  1 ; - ! Road surface ID for tire contact {RdID_L36O}
SV_CONTACT_ID_L37I  1 ; - ! Road surface ID for tire contact {RdID_L37I}
SV_CONTACT_ID_L37O  1 ; - ! Road surface ID for tire contact {RdID_L37O}
SV_CONTACT_ID_L38I  1 ; - ! Road surface ID for tire contact {RdID_L38I}
SV_CONTACT_ID_L38O  1 ; - ! Road surface ID for tire contact {RdID_L38O}
SV_CONTACT_ID_L39I  1 ; - ! Road surface ID for tire contact {RdID_L39I}
SV_CONTACT_ID_L39O  1 ; - ! Road surface ID for tire contact {RdID_L39O}
SV_CONTACT_ID_L3I   1 ; - ! Road surface ID for tire contact {RdID_L3I}
SV_CONTACT_ID_L3O   1 ; - ! Road surface ID for tire contact {RdID_L3O}
SV_CONTACT_ID_L40I  1 ; - ! Road surface ID for tire contact {RdID_L40I}
SV_CONTACT_ID_L40O  1 ; - ! Road surface ID for tire contact {RdID_L40O}
SV_CONTACT_ID_L41I  1 ; - ! Road surface ID for tire contact {RdID_L41I}
SV_CONTACT_ID_L41O  1 ; - ! Road surface ID for tire contact {RdID_L41O}
SV_CONTACT_ID_L42I  1 ; - ! Road surface ID for tire contact {RdID_L42I}
SV_CONTACT_ID_L42O  1 ; - ! Road surface ID for tire contact {RdID_L42O}
SV_CONTACT_ID_L43I  1 ; - ! Road surface ID for tire contact {RdID_L43I}
SV_CONTACT_ID_L43O  1 ; - ! Road surface ID for tire contact {RdID_L43O}
SV_CONTACT_ID_L44I  1 ; - ! Road surface ID for tire contact {RdID_L44I}
SV_CONTACT_ID_L44O  1 ; - ! Road surface ID for tire contact {RdID_L44O}
SV_CONTACT_ID_L45I  1 ; - ! Road surface ID for tire contact {RdID_L45I}
SV_CONTACT_ID_L45O  1 ; - ! Road surface ID for tire contact {RdID_L45O}
SV_CONTACT_ID_L46I  1 ; - ! Road surface ID for tire contact {RdID_L46I}
SV_CONTACT_ID_L46O  1 ; - ! Road surface ID for tire contact {RdID_L46O}
SV_CONTACT_ID_L47I  1 ; - ! Road surface ID for tire contact {RdID_L47I}
SV_CONTACT_ID_L47O  1 ; - ! Road surface ID for tire contact {RdID_L47O}
SV_CONTACT_ID_L4I   1 ; - ! Road surface ID for tire contact {RdID_L4I}
SV_CONTACT_ID_L4O   1 ; - ! Road surface ID for tire contact {RdID_L4O}
SV_CONTACT_ID_L5I   1 ; - ! Road surface ID for tire contact {RdID_L5I}
SV_CONTACT_ID_L5O   1 ; - ! Road surface ID for tire contact {RdID_L5O}
SV_CONTACT_ID_L6I   1 ; - ! Road surface ID for tire contact {RdID_L6I}
SV_CONTACT_ID_L6O   1 ; - ! Road surface ID for tire contact {RdID_L6O}
SV_CONTACT_ID_L7I   1 ; - ! Road surface ID for tire contact {RdID_L7I}
SV_CONTACT_ID_L7O   1 ; - ! Road surface ID for tire contact {RdID_L7O}
SV_CONTACT_ID_L8I   1 ; - ! Road surface ID for tire contact {RdID_L8I}
SV_CONTACT_ID_L8O   1 ; - ! Road surface ID for tire contact {RdID_L8O}
SV_CONTACT_ID_L9I   1 ; - ! Road surface ID for tire contact {RdID_L9I}
SV_CONTACT_ID_L9O   1 ; - ! Road surface ID for tire contact {RdID_L9O}
SV_CONTACT_ID_R10I  1 ; - ! Road surface ID for tire contact {RdID_R10I}
SV_CONTACT_ID_R10O  1 ; - ! Road surface ID for tire contact {RdID_R10O}
SV_CONTACT_ID_R11I  1 ; - ! Road surface ID for tire contact {RdID_R11I}
SV_CONTACT_ID_R11O  1 ; - ! Road surface ID for tire contact {RdID_R11O}
SV_CONTACT_ID_R12I  1 ; - ! Road surface ID for tire contact {RdID_R12I}
SV_CONTACT_ID_R12O  1 ; - ! Road surface ID for tire contact {RdID_R12O}
SV_CONTACT_ID_R13I  1 ; - ! Road surface ID for tire contact {RdID_R13I}
SV_CONTACT_ID_R13O  1 ; - ! Road surface ID for tire contact {RdID_R13O}
SV_CONTACT_ID_R14I  1 ; - ! Road surface ID for tire contact {RdID_R14I}
SV_CONTACT_ID_R14O  1 ; - ! Road surface ID for tire contact {RdID_R14O}
SV_CONTACT_ID_R15I  1 ; - ! Road surface ID for tire contact {RdID_R15I}
SV_CONTACT_ID_R15O  1 ; - ! Road surface ID for tire contact {RdID_R15O}
SV_CONTACT_ID_R16I  1 ; - ! Road surface ID for tire contact {RdID_R16I}
SV_CONTACT_ID_R16O  1 ; - ! Road surface ID for tire contact {RdID_R16O}
SV_CONTACT_ID_R17I  1 ; - ! Road surface ID for tire contact {RdID_R17I}
SV_CONTACT_ID_R17O  1 ; - ! Road surface ID for tire contact {RdID_R17O}
SV_CONTACT_ID_R18I  1 ; - ! Road surface ID for tire contact {RdID_R18I}
SV_CONTACT_ID_R18O  1 ; - ! Road surface ID for tire contact {RdID_R18O}
SV_CONTACT_ID_R19I  1 ; - ! Road surface ID for tire contact {RdID_R19I}
SV_CONTACT_ID_R19O  1 ; - ! Road surface ID for tire contact {RdID_R19O}
SV_CONTACT_ID_R1I   1 ; - ! Road surface ID for tire contact {RdID_R1I}
SV_CONTACT_ID_R1O   1 ; - ! Road surface ID for tire contact {RdID_R1O}
SV_CONTACT_ID_R20I  1 ; - ! Road surface ID for tire contact {RdID_R20I}
SV_CONTACT_ID_R20O  1 ; - ! Road surface ID for tire contact {RdID_R20O}
SV_CONTACT_ID_R21I  1 ; - ! Road surface ID for tire contact {RdID_R21I}
SV_CONTACT_ID_R21O  1 ; - ! Road surface ID for tire contact {RdID_R21O}
SV_CONTACT_ID_R22I  1 ; - ! Road surface ID for tire contact {RdID_R22I}
SV_CONTACT_ID_R22O  1 ; - ! Road surface ID for tire contact {RdID_R22O}
SV_CONTACT_ID_R23I  1 ; - ! Road surface ID for tire contact {RdID_R23I}
SV_CONTACT_ID_R23O  1 ; - ! Road surface ID for tire contact {RdID_R23O}
SV_CONTACT_ID_R24I  1 ; - ! Road surface ID for tire contact {RdID_R24I}
SV_CONTACT_ID_R24O  1 ; - ! Road surface ID for tire contact {RdID_R24O}
SV_CONTACT_ID_R25I  1 ; - ! Road surface ID for tire contact {RdID_R25I}
SV_CONTACT_ID_R25O  1 ; - ! Road surface ID for tire contact {RdID_R25O}
SV_CONTACT_ID_R26I  1 ; - ! Road surface ID for tire contact {RdID_R26I}
SV_CONTACT_ID_R26O  1 ; - ! Road surface ID for tire contact {RdID_R26O}
SV_CONTACT_ID_R27I  1 ; - ! Road surface ID for tire contact {RdID_R27I}
SV_CONTACT_ID_R27O  1 ; - ! Road surface ID for tire contact {RdID_R27O}
SV_CONTACT_ID_R28I  1 ; - ! Road surface ID for tire contact {RdID_R28I}
SV_CONTACT_ID_R28O  1 ; - ! Road surface ID for tire contact {RdID_R28O}
SV_CONTACT_ID_R29I  1 ; - ! Road surface ID for tire contact {RdID_R29I}
SV_CONTACT_ID_R29O  1 ; - ! Road surface ID for tire contact {RdID_R29O}
SV_CONTACT_ID_R2I   1 ; - ! Road surface ID for tire contact {RdID_R2I}
SV_CONTACT_ID_R2O   1 ; - ! Road surface ID for tire contact {RdID_R2O}
SV_CONTACT_ID_R30I  1 ; - ! Road surface ID for tire contact {RdID_R30I}
SV_CONTACT_ID_R30O  1 ; - ! Road surface ID for tire contact {RdID_R30O}
SV_CONTACT_ID_R31I  1 ; - ! Road surface ID for tire contact {RdID_R31I}
SV_CONTACT_ID_R31O  1 ; - ! Road surface ID for tire contact {RdID_R31O}
SV_CONTACT_ID_R32I  1 ; - ! Road surface ID for tire contact {RdID_R32I}
SV_CONTACT_ID_R32O  1 ; - ! Road surface ID for tire contact {RdID_R32O}
SV_CONTACT_ID_R33I  1 ; - ! Road surface ID for tire contact {RdID_R33I}
SV_CONTACT_ID_R33O  1 ; - ! Road surface ID for tire contact {RdID_R33O}
SV_CONTACT_ID_R34I  1 ; - ! Road surface ID for tire contact {RdID_R34I}
SV_CONTACT_ID_R34O  1 ; - ! Road surface ID for tire contact {RdID_R34O}
SV_CONTACT_ID_R35I  1 ; - ! Road surface ID for tire contact {RdID_R35I}
SV_CONTACT_ID_R35O  1 ; - ! Road surface ID for tire contact {RdID_R35O}
SV_CONTACT_ID_R36I  1 ; - ! Road surface ID for tire contact {RdID_R36I}
SV_CONTACT_ID_R36O  1 ; - ! Road surface ID for tire contact {RdID_R36O}
SV_CONTACT_ID_R37I  1 ; - ! Road surface ID for tire contact {RdID_R37I}
SV_CONTACT_ID_R37O  1 ; - ! Road surface ID for tire contact {RdID_R37O}
SV_CONTACT_ID_R38I  1 ; - ! Road surface ID for tire contact {RdID_R38I}
SV_CONTACT_ID_R38O  1 ; - ! Road surface ID for tire contact {RdID_R38O}
SV_CONTACT_ID_R39I  1 ; - ! Road surface ID for tire contact {RdID_R39I}
SV_CONTACT_ID_R39O  1 ; - ! Road surface ID for tire contact {RdID_R39O}
SV_CONTACT_ID_R3I   1 ; - ! Road surface ID for tire contact {RdID_R3I}
SV_CONTACT_ID_R3O   1 ; - ! Road surface ID for tire contact {RdID_R3O}
SV_CONTACT_ID_R40I  1 ; - ! Road surface ID for tire contact {RdID_R40I}
SV_CONTACT_ID_R40O  1 ; - ! Road surface ID for tire contact {RdID_R40O}
SV_CONTACT_ID_R41I  1 ; - ! Road surface ID for tire contact {RdID_R41I}
SV_CONTACT_ID_R41O  1 ; - ! Road surface ID for tire contact {RdID_R41O}
SV_CONTACT_ID_R42I  1 ; - ! Road surface ID for tire contact {RdID_R42I}
SV_CONTACT_ID_R42O  1 ; - ! Road surface ID for tire contact {RdID_R42O}
SV_CONTACT_ID_R43I  1 ; - ! Road surface ID for tire contact {RdID_R43I}
SV_CONTACT_ID_R43O  1 ; - ! Road surface ID for tire contact {RdID_R43O}
SV_CONTACT_ID_R44I  1 ; - ! Road surface ID for tire contact {RdID_R44I}
SV_CONTACT_ID_R44O  1 ; - ! Road surface ID for tire contact {RdID_R44O}
SV_CONTACT_ID_R45I  1 ; - ! Road surface ID for tire contact {RdID_R45I}
SV_CONTACT_ID_R45O  1 ; - ! Road surface ID for tire contact {RdID_R45O}
SV_CONTACT_ID_R46I  1 ; - ! Road surface ID for tire contact {RdID_R46I}
SV_CONTACT_ID_R46O  1 ; - ! Road surface ID for tire contact {RdID_R46O}
SV_CONTACT_ID_R47I  1 ; - ! Road surface ID for tire contact {RdID_R47I}
SV_CONTACT_ID_R47O  1 ; - ! Road surface ID for tire contact {RdID_R47O}
SV_CONTACT_ID_R4I   1 ; - ! Road surface ID for tire contact {RdID_R4I}
SV_CONTACT_ID_R4O   1 ; - ! Road surface ID for tire contact {RdID_R4O}
SV_CONTACT_ID_R5I   1 ; - ! Road surface ID for tire contact {RdID_R5I}
SV_CONTACT_ID_R5O   1 ; - ! Road surface ID for tire contact {RdID_R5O}
SV_CONTACT_ID_R6I   1 ; - ! Road surface ID for tire contact {RdID_R6I}
SV_CONTACT_ID_R6O   1 ; - ! Road surface ID for tire contact {RdID_R6O}
SV_CONTACT_ID_R7I   1 ; - ! Road surface ID for tire contact {RdID_R7I}
SV_CONTACT_ID_R7O   1 ; - ! Road surface ID for tire contact {RdID_R7O}
SV_CONTACT_ID_R8I   1 ; - ! Road surface ID for tire contact {RdID_R8I}
SV_CONTACT_ID_R8O   1 ; - ! Road surface ID for tire contact {RdID_R8O}
SV_CONTACT_ID_R9I   1 ; - ! Road surface ID for tire contact {RdID_R9I}
SV_CONTACT_ID_R9O   1 ; - ! Road surface ID for tire contact {RdID_R9O}
SV_CONTACT_STA_L10I 120.555626 ; m ! Road path station for tire contact {S_Rd_L10I}
SV_CONTACT_STA_L10O 120.5556687 ; m ! Road path station for tire contact {S_Rd_L10O}
SV_CONTACT_STA_L11I 119.3556261 ; m ! Road path station for tire contact {S_Rd_L11I}
SV_CONTACT_STA_L11O 119.3556688 ; m ! Road path station for tire contact {S_Rd_L11O}
SV_CONTACT_STA_L12I 118.1556261 ; m ! Road path station for tire contact {S_Rd_L12I}
SV_CONTACT_STA_L12O 118.1556688 ; m ! Road path station for tire contact {S_Rd_L12O}
SV_CONTACT_STA_L13I 116.9556259 ; m ! Road path station for tire contact {S_Rd_L13I}
SV_CONTACT_STA_L13O 116.9556686 ; m ! Road path station for tire contact {S_Rd_L13O}
SV_CONTACT_STA_L14I 115.7556256 ; m ! Road path station for tire contact {S_Rd_L14I}
SV_CONTACT_STA_L14O 115.7556683 ; m ! Road path station for tire contact {S_Rd_L14O}
SV_CONTACT_STA_L15I 114.5556253 ; m ! Road path station for tire contact {S_Rd_L15I}
SV_CONTACT_STA_L15O 114.555668 ; m ! Road path station for tire contact {S_Rd_L15O}
SV_CONTACT_STA_L16I 113.3556251 ; m ! Road path station for tire contact {S_Rd_L16I}
SV_CONTACT_STA_L16O 113.3556678 ; m ! Road path station for tire contact {S_Rd_L16O}
SV_CONTACT_STA_L17I 112.1556246 ; m ! Road path station for tire contact {S_Rd_L17I}
SV_CONTACT_STA_L17O 112.1556674 ; m ! Road path station for tire contact {S_Rd_L17O}
SV_CONTACT_STA_L18I 110.9556245 ; m ! Road path station for tire contact {S_Rd_L18I}
SV_CONTACT_STA_L18O 110.9556672 ; m ! Road path station for tire contact {S_Rd_L18O}
SV_CONTACT_STA_L19I 109.7556253 ; m ! Road path station for tire contact {S_Rd_L19I}
SV_CONTACT_STA_L19O 109.7556682 ; m ! Road path station for tire contact {S_Rd_L19O}
SV_CONTACT_STA_L1I 134.7604015 ; m ! Road path station for tire contact {S_Rd_L1I}
SV_CONTACT_STA_L1O 0.0001323203469 ; m ! Road path station for tire contact
                                   ! {S_Rd_L1O}
SV_CONTACT_STA_L20I 107.5502058 ; m ! Road path station for tire contact {S_Rd_L20I}
SV_CONTACT_STA_L20O 107.550237 ; m ! Road path station for tire contact {S_Rd_L20O}
SV_CONTACT_STA_L21I 106.3501341 ; m ! Road path station for tire contact {S_Rd_L21I}
SV_CONTACT_STA_L21O 106.3501658 ; m ! Road path station for tire contact {S_Rd_L21O}
SV_CONTACT_STA_L22I 105.1500149 ; m ! Road path station for tire contact {S_Rd_L22I}
SV_CONTACT_STA_L22O 105.1500463 ; m ! Road path station for tire contact {S_Rd_L22O}
SV_CONTACT_STA_L23I 103.9499356 ; m ! Road path station for tire contact {S_Rd_L23I}
SV_CONTACT_STA_L23O 103.9499661 ; m ! Road path station for tire contact {S_Rd_L23O}
SV_CONTACT_STA_L24I 102.7286949 ; m ! Road path station for tire contact {S_Rd_L24I}
SV_CONTACT_STA_L24O 102.7287252 ; m ! Road path station for tire contact {S_Rd_L24O}
SV_CONTACT_STA_L25I 101.4597503 ; m ! Road path station for tire contact {S_Rd_L25I}
SV_CONTACT_STA_L25O 101.4597808 ; m ! Road path station for tire contact {S_Rd_L25O}
SV_CONTACT_STA_L26I 100.3602088 ; m ! Road path station for tire contact {S_Rd_L26I}
SV_CONTACT_STA_L26O 100.3602393 ; m ! Road path station for tire contact {S_Rd_L26O}
SV_CONTACT_STA_L27I 99.2439441 ; m ! Road path station for tire contact {S_Rd_L27I}
SV_CONTACT_STA_L27O 99.24397258 ; m ! Road path station for tire contact {S_Rd_L27O}
SV_CONTACT_STA_L28I 97.95555296 ; m ! Road path station for tire contact {S_Rd_L28I}
SV_CONTACT_STA_L28O 97.95558414 ; m ! Road path station for tire contact {S_Rd_L28O}
SV_CONTACT_STA_L29I 96.75061339 ; m ! Road path station for tire contact {S_Rd_L29I}
SV_CONTACT_STA_L29O 96.75064438 ; m ! Road path station for tire contact {S_Rd_L29O}
SV_CONTACT_STA_L2I 133.660335 ; m ! Road path station for tire contact {S_Rd_L2I}
SV_CONTACT_STA_L2O -1.099842799 ; m ! Road path station for tire contact {S_Rd_L2O}
SV_CONTACT_STA_L30I 95.550337 ; m ! Road path station for tire contact {S_Rd_L30I}
SV_CONTACT_STA_L30O 95.55036744 ; m ! Road path station for tire contact {S_Rd_L30O}
SV_CONTACT_STA_L31I 94.25555784 ; m ! Road path station for tire contact {S_Rd_L31I}
SV_CONTACT_STA_L31O 94.25559098 ; m ! Road path station for tire contact {S_Rd_L31O}
SV_CONTACT_STA_L32I 93.09414189 ; m ! Road path station for tire contact {S_Rd_L32I}
SV_CONTACT_STA_L32O 93.094177 ; m ! Road path station for tire contact {S_Rd_L32O}
SV_CONTACT_STA_L33I 92.00368504 ; m ! Road path station for tire contact {S_Rd_L33I}
SV_CONTACT_STA_L33O 92.00371925 ; m ! Road path station for tire contact {S_Rd_L33O}
SV_CONTACT_STA_L34I 89.76399036 ; m ! Road path station for tire contact {S_Rd_L34I}
SV_CONTACT_STA_L34O 89.76393989 ; m ! Road path station for tire contact {S_Rd_L34O}
SV_CONTACT_STA_L35I 88.56400663 ; m ! Road path station for tire contact {S_Rd_L35I}
SV_CONTACT_STA_L35O 88.56395627 ; m ! Road path station for tire contact {S_Rd_L35O}
SV_CONTACT_STA_L36I 87.36402246 ; m ! Road path station for tire contact {S_Rd_L36I}
SV_CONTACT_STA_L36O 87.36397198 ; m ! Road path station for tire contact {S_Rd_L36O}
SV_CONTACT_STA_L37I 86.16429301 ; m ! Road path station for tire contact {S_Rd_L37I}
SV_CONTACT_STA_L37O 86.16424268 ; m ! Road path station for tire contact {S_Rd_L37O}
SV_CONTACT_STA_L38I 84.96432281 ; m ! Road path station for tire contact {S_Rd_L38I}
SV_CONTACT_STA_L38O 84.96427241 ; m ! Road path station for tire contact {S_Rd_L38O}
SV_CONTACT_STA_L39I 83.764063 ; m ! Road path station for tire contact {S_Rd_L39I}
SV_CONTACT_STA_L39O 83.7640113 ; m ! Road path station for tire contact {S_Rd_L39O}
SV_CONTACT_STA_L3I 129.8601054 ; m ! Road path station for tire contact {S_Rd_L3I}
SV_CONTACT_STA_L3O 129.8601024 ; m ! Road path station for tire contact {S_Rd_L3O}
SV_CONTACT_STA_L40I 82.56448589 ; m ! Road path station for tire contact {S_Rd_L40I}
SV_CONTACT_STA_L40O 82.56443698 ; m ! Road path station for tire contact {S_Rd_L40O}
SV_CONTACT_STA_L41I 81.36445339 ; m ! Road path station for tire contact {S_Rd_L41I}
SV_CONTACT_STA_L41O 81.36440111 ; m ! Road path station for tire contact {S_Rd_L41O}
SV_CONTACT_STA_L42I 80.1643835 ; m ! Road path station for tire contact {S_Rd_L42I}
SV_CONTACT_STA_L42O 80.16433411 ; m ! Road path station for tire contact {S_Rd_L42O}
SV_CONTACT_STA_L43I 78.96435378 ; m ! Road path station for tire contact {S_Rd_L43I}
SV_CONTACT_STA_L43O 78.96430404 ; m ! Road path station for tire contact {S_Rd_L43O}
SV_CONTACT_STA_L44I 77.76427888 ; m ! Road path station for tire contact {S_Rd_L44I}
SV_CONTACT_STA_L44O 77.76422915 ; m ! Road path station for tire contact {S_Rd_L44O}
SV_CONTACT_STA_L45I 76.56420399 ; m ! Road path station for tire contact {S_Rd_L45I}
SV_CONTACT_STA_L45O 76.56415427 ; m ! Road path station for tire contact {S_Rd_L45O}
SV_CONTACT_STA_L46I 75.36417164 ; m ! Road path station for tire contact {S_Rd_L46I}
SV_CONTACT_STA_L46O 75.36412191 ; m ! Road path station for tire contact {S_Rd_L46O}
SV_CONTACT_STA_L47I 74.1640955 ; m ! Road path station for tire contact {S_Rd_L47I}
SV_CONTACT_STA_L47O 74.16404577 ; m ! Road path station for tire contact {S_Rd_L47O}
SV_CONTACT_STA_L4I 128.7600748 ; m ! Road path station for tire contact {S_Rd_L4I}
SV_CONTACT_STA_L4O 128.7600718 ; m ! Road path station for tire contact {S_Rd_L4O}
SV_CONTACT_STA_L5I 127.6600441 ; m ! Road path station for tire contact {S_Rd_L5I}
SV_CONTACT_STA_L5O 127.6600411 ; m ! Road path station for tire contact {S_Rd_L5O}
SV_CONTACT_STA_L6I 125.355627 ; m ! Road path station for tire contact {S_Rd_L6I}
SV_CONTACT_STA_L6O 125.3556697 ; m ! Road path station for tire contact {S_Rd_L6O}
SV_CONTACT_STA_L7I 124.1556267 ; m ! Road path station for tire contact {S_Rd_L7I}
SV_CONTACT_STA_L7O 124.1556694 ; m ! Road path station for tire contact {S_Rd_L7O}
SV_CONTACT_STA_L8I 122.9556265 ; m ! Road path station for tire contact {S_Rd_L8I}
SV_CONTACT_STA_L8O 122.9556692 ; m ! Road path station for tire contact {S_Rd_L8O}
SV_CONTACT_STA_L9I 121.7556264 ; m ! Road path station for tire contact {S_Rd_L9I}
SV_CONTACT_STA_L9O 121.7556691 ; m ! Road path station for tire contact {S_Rd_L9O}
SV_CONTACT_STA_R10I 120.5554187 ; m ! Road path station for tire contact {S_Rd_R10I}
SV_CONTACT_STA_R10O 120.5553761 ; m ! Road path station for tire contact {S_Rd_R10O}
SV_CONTACT_STA_R11I 119.3554189 ; m ! Road path station for tire contact {S_Rd_R11I}
SV_CONTACT_STA_R11O 119.3553762 ; m ! Road path station for tire contact {S_Rd_R11O}
SV_CONTACT_STA_R12I 118.1554186 ; m ! Road path station for tire contact {S_Rd_R12I}
SV_CONTACT_STA_R12O 118.1553758 ; m ! Road path station for tire contact {S_Rd_R12O}
SV_CONTACT_STA_R13I 116.9554186 ; m ! Road path station for tire contact {S_Rd_R13I}
SV_CONTACT_STA_R13O 116.9553759 ; m ! Road path station for tire contact {S_Rd_R13O}
SV_CONTACT_STA_R14I 115.7554179 ; m ! Road path station for tire contact {S_Rd_R14I}
SV_CONTACT_STA_R14O 115.7553751 ; m ! Road path station for tire contact {S_Rd_R14O}
SV_CONTACT_STA_R15I 114.5554178 ; m ! Road path station for tire contact {S_Rd_R15I}
SV_CONTACT_STA_R15O 114.5553751 ; m ! Road path station for tire contact {S_Rd_R15O}
SV_CONTACT_STA_R16I 113.3554175 ; m ! Road path station for tire contact {S_Rd_R16I}
SV_CONTACT_STA_R16O 113.3553748 ; m ! Road path station for tire contact {S_Rd_R16O}
SV_CONTACT_STA_R17I 112.1554168 ; m ! Road path station for tire contact {S_Rd_R17I}
SV_CONTACT_STA_R17O 112.1553739 ; m ! Road path station for tire contact {S_Rd_R17O}
SV_CONTACT_STA_R18I 110.9554172 ; m ! Road path station for tire contact {S_Rd_R18I}
SV_CONTACT_STA_R18O 110.9553745 ; m ! Road path station for tire contact {S_Rd_R18O}
SV_CONTACT_STA_R19I 109.7554171 ; m ! Road path station for tire contact {S_Rd_R19I}
SV_CONTACT_STA_R19O 109.7553742 ; m ! Road path station for tire contact {S_Rd_R19O}
SV_CONTACT_STA_R1I 134.7603935 ; m ! Road path station for tire contact {S_Rd_R1I}
SV_CONTACT_STA_R1O 0.0001323203469 ; m ! Road path station for tire contact
                                   ! {S_Rd_R1O}
SV_CONTACT_STA_R20I 107.5500544 ; m ! Road path station for tire contact {S_Rd_R20I}
SV_CONTACT_STA_R20O 107.5500232 ; m ! Road path station for tire contact {S_Rd_R20O}
SV_CONTACT_STA_R21I 106.3499799 ; m ! Road path station for tire contact {S_Rd_R21I}
SV_CONTACT_STA_R21O 106.3499481 ; m ! Road path station for tire contact {S_Rd_R21O}
SV_CONTACT_STA_R22I 105.1498622 ; m ! Road path station for tire contact {S_Rd_R22I}
SV_CONTACT_STA_R22O 105.1498307 ; m ! Road path station for tire contact {S_Rd_R22O}
SV_CONTACT_STA_R23I 103.9497873 ; m ! Road path station for tire contact {S_Rd_R23I}
SV_CONTACT_STA_R23O 103.9497568 ; m ! Road path station for tire contact {S_Rd_R23O}
SV_CONTACT_STA_R24I 102.7285479 ; m ! Road path station for tire contact {S_Rd_R24I}
SV_CONTACT_STA_R24O 102.7285177 ; m ! Road path station for tire contact {S_Rd_R24O}
SV_CONTACT_STA_R25I 101.4596019 ; m ! Road path station for tire contact {S_Rd_R25I}
SV_CONTACT_STA_R25O 101.4595713 ; m ! Road path station for tire contact {S_Rd_R25O}
SV_CONTACT_STA_R26I 100.3600609 ; m ! Road path station for tire contact {S_Rd_R26I}
SV_CONTACT_STA_R26O 100.3600304 ; m ! Road path station for tire contact {S_Rd_R26O}
SV_CONTACT_STA_R27I 99.24380586 ; m ! Road path station for tire contact {S_Rd_R27I}
SV_CONTACT_STA_R27O 99.24377739 ; m ! Road path station for tire contact {S_Rd_R27O}
SV_CONTACT_STA_R28I 97.9554016 ; m ! Road path station for tire contact {S_Rd_R28I}
SV_CONTACT_STA_R28O 97.95537042 ; m ! Road path station for tire contact {S_Rd_R28O}
SV_CONTACT_STA_R29I 96.75046296 ; m ! Road path station for tire contact {S_Rd_R29I}
SV_CONTACT_STA_R29O 96.75043197 ; m ! Road path station for tire contact {S_Rd_R29O}
SV_CONTACT_STA_R2I 133.6603935 ; m ! Road path station for tire contact {S_Rd_R2I}
SV_CONTACT_STA_R2O -1.099842799 ; m ! Road path station for tire contact {S_Rd_R2O}
SV_CONTACT_STA_R30I 95.55018924 ; m ! Road path station for tire contact {S_Rd_R30I}
SV_CONTACT_STA_R30O 95.55015881 ; m ! Road path station for tire contact {S_Rd_R30O}
SV_CONTACT_STA_R31I 94.25539694 ; m ! Road path station for tire contact {S_Rd_R31I}
SV_CONTACT_STA_R31O 94.2553638 ; m ! Road path station for tire contact {S_Rd_R31O}
SV_CONTACT_STA_R32I 93.09397148 ; m ! Road path station for tire contact {S_Rd_R32I}
SV_CONTACT_STA_R32O 93.09393638 ; m ! Road path station for tire contact {S_Rd_R32O}
SV_CONTACT_STA_R33I 92.00351894 ; m ! Road path station for tire contact {S_Rd_R33I}
SV_CONTACT_STA_R33O 92.00348472 ; m ! Road path station for tire contact {S_Rd_R33O}
SV_CONTACT_STA_R34I 89.76423536 ; m ! Road path station for tire contact {S_Rd_R34I}
SV_CONTACT_STA_R34O 89.76428582 ; m ! Road path station for tire contact {S_Rd_R34O}
SV_CONTACT_STA_R35I 88.56425117 ; m ! Road path station for tire contact {S_Rd_R35I}
SV_CONTACT_STA_R35O 88.56430153 ; m ! Road path station for tire contact {S_Rd_R35O}
SV_CONTACT_STA_R36I 87.36426755 ; m ! Road path station for tire contact {S_Rd_R36I}
SV_CONTACT_STA_R36O 87.36431803 ; m ! Road path station for tire contact {S_Rd_R36O}
SV_CONTACT_STA_R37I 86.16453737 ; m ! Road path station for tire contact {S_Rd_R37I}
SV_CONTACT_STA_R37O 86.1645877 ; m ! Road path station for tire contact {S_Rd_R37O}
SV_CONTACT_STA_R38I 84.96456752 ; m ! Road path station for tire contact {S_Rd_R38I}
SV_CONTACT_STA_R38O 84.96461793 ; m ! Road path station for tire contact {S_Rd_R38O}
SV_CONTACT_STA_R39I 83.76431399 ; m ! Road path station for tire contact {S_Rd_R39I}
SV_CONTACT_STA_R39O 83.76436568 ; m ! Road path station for tire contact {S_Rd_R39O}
SV_CONTACT_STA_R3I 129.8601204 ; m ! Road path station for tire contact {S_Rd_R3I}
SV_CONTACT_STA_R3O 129.8601234 ; m ! Road path station for tire contact {S_Rd_R3O}
SV_CONTACT_STA_R40I 82.56472335 ; m ! Road path station for tire contact {S_Rd_R40I}
SV_CONTACT_STA_R40O 82.56477226 ; m ! Road path station for tire contact {S_Rd_R40O}
SV_CONTACT_STA_R41I 81.36470721 ; m ! Road path station for tire contact {S_Rd_R41I}
SV_CONTACT_STA_R41O 81.36475949 ; m ! Road path station for tire contact {S_Rd_R41O}
SV_CONTACT_STA_R42I 80.1646233 ; m ! Road path station for tire contact {S_Rd_R42I}
SV_CONTACT_STA_R42O 80.1646727 ; m ! Road path station for tire contact {S_Rd_R42O}
SV_CONTACT_STA_R43I 78.96459522 ; m ! Road path station for tire contact {S_Rd_R43I}
SV_CONTACT_STA_R43O 78.96464495 ; m ! Road path station for tire contact {S_Rd_R43O}
SV_CONTACT_STA_R44I 77.76452032 ; m ! Road path station for tire contact {S_Rd_R44I}
SV_CONTACT_STA_R44O 77.76457005 ; m ! Road path station for tire contact {S_Rd_R44O}
SV_CONTACT_STA_R45I 76.56444541 ; m ! Road path station for tire contact {S_Rd_R45I}
SV_CONTACT_STA_R45O 76.56449513 ; m ! Road path station for tire contact {S_Rd_R45O}
SV_CONTACT_STA_R46I 75.36441306 ; m ! Road path station for tire contact {S_Rd_R46I}
SV_CONTACT_STA_R46O 75.36446279 ; m ! Road path station for tire contact {S_Rd_R46O}
SV_CONTACT_STA_R47I 74.16433694 ; m ! Road path station for tire contact {S_Rd_R47I}
SV_CONTACT_STA_R47O 74.16438668 ; m ! Road path station for tire contact {S_Rd_R47O}
SV_CONTACT_STA_R4I 128.7600898 ; m ! Road path station for tire contact {S_Rd_R4I}
SV_CONTACT_STA_R4O 128.7600928 ; m ! Road path station for tire contact {S_Rd_R4O}
SV_CONTACT_STA_R5I 127.6600591 ; m ! Road path station for tire contact {S_Rd_R5I}
SV_CONTACT_STA_R5O 127.6600621 ; m ! Road path station for tire contact {S_Rd_R5O}
SV_CONTACT_STA_R6I 125.3554197 ; m ! Road path station for tire contact {S_Rd_R6I}
SV_CONTACT_STA_R6O 125.355377 ; m ! Road path station for tire contact {S_Rd_R6O}
SV_CONTACT_STA_R7I 124.1554195 ; m ! Road path station for tire contact {S_Rd_R7I}
SV_CONTACT_STA_R7O 124.1553768 ; m ! Road path station for tire contact {S_Rd_R7O}
SV_CONTACT_STA_R8I 122.9554192 ; m ! Road path station for tire contact {S_Rd_R8I}
SV_CONTACT_STA_R8O 122.9553765 ; m ! Road path station for tire contact {S_Rd_R8O}
SV_CONTACT_STA_R9I 121.7554191 ; m ! Road path station for tire contact {S_Rd_R9I}
SV_CONTACT_STA_R9O 121.7553764 ; m ! Road path station for tire contact {S_Rd_R9O}
SV_DRGEAR_CVT      -0 ; - ! Derivative of delayed CVT gear ratio
SV_DZDX_GND         0 ; - ! dZ/dX of ground at unit 1 aero ref. pt
SV_DZDX_GND_2       0 ; - ! dZ/dX of ground at unit 2 aero ref. pt
SV_DZDX_GND_3       0 ; - ! dZ/dX of ground at unit 3 aero ref. pt
SV_DZDX_GND_4 -0.13388 ; - ! dZ/dX of ground at unit 4 aero ref. pt
SV_DZDX_L10I        0 ; - ! Ground X slope under tire L10i
SV_DZDX_L10O        0 ; - ! Ground X slope under tire L10o
SV_DZDX_L11I        0 ; - ! Ground X slope under tire L11i
SV_DZDX_L11O        0 ; - ! Ground X slope under tire L11o
SV_DZDX_L12I        0 ; - ! Ground X slope under tire L12i
SV_DZDX_L12O        0 ; - ! Ground X slope under tire L12o
SV_DZDX_L13I        0 ; - ! Ground X slope under tire L13i
SV_DZDX_L13O        0 ; - ! Ground X slope under tire L13o
SV_DZDX_L14I        0 ; - ! Ground X slope under tire L14i
SV_DZDX_L14O        0 ; - ! Ground X slope under tire L14o
SV_DZDX_L15I        0 ; - ! Ground X slope under tire L15i
SV_DZDX_L15O        0 ; - ! Ground X slope under tire L15o
SV_DZDX_L16I        0 ; - ! Ground X slope under tire L16i
SV_DZDX_L16O        0 ; - ! Ground X slope under tire L16o
SV_DZDX_L17I        0 ; - ! Ground X slope under tire L17i
SV_DZDX_L17O        0 ; - ! Ground X slope under tire L17o
SV_DZDX_L18I        0 ; - ! Ground X slope under tire L18i
SV_DZDX_L18O        0 ; - ! Ground X slope under tire L18o
SV_DZDX_L19I        0 ; - ! Ground X slope under tire L19i
SV_DZDX_L19O        0 ; - ! Ground X slope under tire L19o
SV_DZDX_L1I         0 ; - ! Ground X slope under tire L1i
SV_DZDX_L1O         0 ; - ! Ground X slope under tire L1o
SV_DZDX_L20I        0 ; - ! Ground X slope under tire L20i
SV_DZDX_L20O        0 ; - ! Ground X slope under tire L20o
SV_DZDX_L21I        0 ; - ! Ground X slope under tire L21i
SV_DZDX_L21O        0 ; - ! Ground X slope under tire L21o
SV_DZDX_L22I        0 ; - ! Ground X slope under tire L22i
SV_DZDX_L22O        0 ; - ! Ground X slope under tire L22o
SV_DZDX_L23I        0 ; - ! Ground X slope under tire L23i
SV_DZDX_L23O        0 ; - ! Ground X slope under tire L23o
SV_DZDX_L24I -0.0410168 ; - ! Ground X slope under tire L24i
SV_DZDX_L24O -0.0410168 ; - ! Ground X slope under tire L24o
SV_DZDX_L25I -0.18035 ; - ! Ground X slope under tire L25i
SV_DZDX_L25O -0.18035 ; - ! Ground X slope under tire L25o
SV_DZDX_L26I   0.0148 ; - ! Ground X slope under tire L26i
SV_DZDX_L26O   0.0148 ; - ! Ground X slope under tire L26o
SV_DZDX_L27I   0.1861 ; - ! Ground X slope under tire L27i
SV_DZDX_L27O   0.1861 ; - ! Ground X slope under tire L27o
SV_DZDX_L28I 0.0117035 ; - ! Ground X slope under tire L28i
SV_DZDX_L28O 0.0117035 ; - ! Ground X slope under tire L28o
SV_DZDX_L29I        0 ; - ! Ground X slope under tire L29i
SV_DZDX_L29O        0 ; - ! Ground X slope under tire L29o
SV_DZDX_L2I         0 ; - ! Ground X slope under tire L2i
SV_DZDX_L2O         0 ; - ! Ground X slope under tire L2o
SV_DZDX_L30I        0 ; - ! Ground X slope under tire L30i
SV_DZDX_L30O        0 ; - ! Ground X slope under tire L30o
SV_DZDX_L31I -0.154638 ; - ! Ground X slope under tire L31i
SV_DZDX_L31O -0.154638 ; - ! Ground X slope under tire L31o
SV_DZDX_L32I -0.11649 ; - ! Ground X slope under tire L32i
SV_DZDX_L32O -0.11649 ; - ! Ground X slope under tire L32o
SV_DZDX_L33I  0.10254 ; - ! Ground X slope under tire L33i
SV_DZDX_L33O  0.10254 ; - ! Ground X slope under tire L33o
SV_DZDX_L34I        0 ; - ! Ground X slope under tire L34i
SV_DZDX_L34O        0 ; - ! Ground X slope under tire L34o
SV_DZDX_L35I        0 ; - ! Ground X slope under tire L35i
SV_DZDX_L35O        0 ; - ! Ground X slope under tire L35o
SV_DZDX_L36I        0 ; - ! Ground X slope under tire L36i
SV_DZDX_L36O        0 ; - ! Ground X slope under tire L36o
SV_DZDX_L37I        0 ; - ! Ground X slope under tire L37i
SV_DZDX_L37O        0 ; - ! Ground X slope under tire L37o
SV_DZDX_L38I        0 ; - ! Ground X slope under tire L38i
SV_DZDX_L38O        0 ; - ! Ground X slope under tire L38o
SV_DZDX_L39I        0 ; - ! Ground X slope under tire L39i
SV_DZDX_L39O        0 ; - ! Ground X slope under tire L39o
SV_DZDX_L3I         0 ; - ! Ground X slope under tire L3i
SV_DZDX_L3O         0 ; - ! Ground X slope under tire L3o
SV_DZDX_L40I        0 ; - ! Ground X slope under tire L40i
SV_DZDX_L40O        0 ; - ! Ground X slope under tire L40o
SV_DZDX_L41I        0 ; - ! Ground X slope under tire L41i
SV_DZDX_L41O        0 ; - ! Ground X slope under tire L41o
SV_DZDX_L42I        0 ; - ! Ground X slope under tire L42i
SV_DZDX_L42O        0 ; - ! Ground X slope under tire L42o
SV_DZDX_L43I        0 ; - ! Ground X slope under tire L43i
SV_DZDX_L43O        0 ; - ! Ground X slope under tire L43o
SV_DZDX_L44I        0 ; - ! Ground X slope under tire L44i
SV_DZDX_L44O        0 ; - ! Ground X slope under tire L44o
SV_DZDX_L45I        0 ; - ! Ground X slope under tire L45i
SV_DZDX_L45O        0 ; - ! Ground X slope under tire L45o
SV_DZDX_L46I        0 ; - ! Ground X slope under tire L46i
SV_DZDX_L46O        0 ; - ! Ground X slope under tire L46o
SV_DZDX_L47I        0 ; - ! Ground X slope under tire L47i
SV_DZDX_L47O        0 ; - ! Ground X slope under tire L47o
SV_DZDX_L4I         0 ; - ! Ground X slope under tire L4i
SV_DZDX_L4O         0 ; - ! Ground X slope under tire L4o
SV_DZDX_L5I         0 ; - ! Ground X slope under tire L5i
SV_DZDX_L5O         0 ; - ! Ground X slope under tire L5o
SV_DZDX_L6I         0 ; - ! Ground X slope under tire L6i
SV_DZDX_L6O         0 ; - ! Ground X slope under tire L6o
SV_DZDX_L7I         0 ; - ! Ground X slope under tire L7i
SV_DZDX_L7O         0 ; - ! Ground X slope under tire L7o
SV_DZDX_L8I         0 ; - ! Ground X slope under tire L8i
SV_DZDX_L8O         0 ; - ! Ground X slope under tire L8o
SV_DZDX_L9I         0 ; - ! Ground X slope under tire L9i
SV_DZDX_L9O         0 ; - ! Ground X slope under tire L9o
SV_DZDX_R10I        0 ; - ! Ground X slope under tire R10i
SV_DZDX_R10O        0 ; - ! Ground X slope under tire R10o
SV_DZDX_R11I        0 ; - ! Ground X slope under tire R11i
SV_DZDX_R11O        0 ; - ! Ground X slope under tire R11o
SV_DZDX_R12I        0 ; - ! Ground X slope under tire R12i
SV_DZDX_R12O        0 ; - ! Ground X slope under tire R12o
SV_DZDX_R13I        0 ; - ! Ground X slope under tire R13i
SV_DZDX_R13O        0 ; - ! Ground X slope under tire R13o
SV_DZDX_R14I        0 ; - ! Ground X slope under tire R14i
SV_DZDX_R14O        0 ; - ! Ground X slope under tire R14o
SV_DZDX_R15I        0 ; - ! Ground X slope under tire R15i
SV_DZDX_R15O        0 ; - ! Ground X slope under tire R15o
SV_DZDX_R16I        0 ; - ! Ground X slope under tire R16i
SV_DZDX_R16O        0 ; - ! Ground X slope under tire R16o
SV_DZDX_R17I        0 ; - ! Ground X slope under tire R17i
SV_DZDX_R17O        0 ; - ! Ground X slope under tire R17o
SV_DZDX_R18I        0 ; - ! Ground X slope under tire R18i
SV_DZDX_R18O        0 ; - ! Ground X slope under tire R18o
SV_DZDX_R19I        0 ; - ! Ground X slope under tire R19i
SV_DZDX_R19O        0 ; - ! Ground X slope under tire R19o
SV_DZDX_R1I         0 ; - ! Ground X slope under tire R1i
SV_DZDX_R1O         0 ; - ! Ground X slope under tire R1o
SV_DZDX_R20I        0 ; - ! Ground X slope under tire R20i
SV_DZDX_R20O        0 ; - ! Ground X slope under tire R20o
SV_DZDX_R21I        0 ; - ! Ground X slope under tire R21i
SV_DZDX_R21O        0 ; - ! Ground X slope under tire R21o
SV_DZDX_R22I        0 ; - ! Ground X slope under tire R22i
SV_DZDX_R22O        0 ; - ! Ground X slope under tire R22o
SV_DZDX_R23I        0 ; - ! Ground X slope under tire R23i
SV_DZDX_R23O        0 ; - ! Ground X slope under tire R23o
SV_DZDX_R24I -0.0410168 ; - ! Ground X slope under tire R24i
SV_DZDX_R24O -0.0410168 ; - ! Ground X slope under tire R24o
SV_DZDX_R25I -0.18035 ; - ! Ground X slope under tire R25i
SV_DZDX_R25O -0.18035 ; - ! Ground X slope under tire R25o
SV_DZDX_R26I   0.0148 ; - ! Ground X slope under tire R26i
SV_DZDX_R26O   0.0148 ; - ! Ground X slope under tire R26o
SV_DZDX_R27I   0.1861 ; - ! Ground X slope under tire R27i
SV_DZDX_R27O   0.1861 ; - ! Ground X slope under tire R27o
SV_DZDX_R28I 0.0117035 ; - ! Ground X slope under tire R28i
SV_DZDX_R28O 0.0117035 ; - ! Ground X slope under tire R28o
SV_DZDX_R29I        0 ; - ! Ground X slope under tire R29i
SV_DZDX_R29O        0 ; - ! Ground X slope under tire R29o
SV_DZDX_R2I         0 ; - ! Ground X slope under tire R2i
SV_DZDX_R2O         0 ; - ! Ground X slope under tire R2o
SV_DZDX_R30I        0 ; - ! Ground X slope under tire R30i
SV_DZDX_R30O        0 ; - ! Ground X slope under tire R30o
SV_DZDX_R31I -0.154638 ; - ! Ground X slope under tire R31i
SV_DZDX_R31O -0.154638 ; - ! Ground X slope under tire R31o
SV_DZDX_R32I -0.11649 ; - ! Ground X slope under tire R32i
SV_DZDX_R32O -0.11649 ; - ! Ground X slope under tire R32o
SV_DZDX_R33I  0.10254 ; - ! Ground X slope under tire R33i
SV_DZDX_R33O  0.10254 ; - ! Ground X slope under tire R33o
SV_DZDX_R34I        0 ; - ! Ground X slope under tire R34i
SV_DZDX_R34O        0 ; - ! Ground X slope under tire R34o
SV_DZDX_R35I        0 ; - ! Ground X slope under tire R35i
SV_DZDX_R35O        0 ; - ! Ground X slope under tire R35o
SV_DZDX_R36I        0 ; - ! Ground X slope under tire R36i
SV_DZDX_R36O        0 ; - ! Ground X slope under tire R36o
SV_DZDX_R37I        0 ; - ! Ground X slope under tire R37i
SV_DZDX_R37O        0 ; - ! Ground X slope under tire R37o
SV_DZDX_R38I        0 ; - ! Ground X slope under tire R38i
SV_DZDX_R38O        0 ; - ! Ground X slope under tire R38o
SV_DZDX_R39I        0 ; - ! Ground X slope under tire R39i
SV_DZDX_R39O        0 ; - ! Ground X slope under tire R39o
SV_DZDX_R3I         0 ; - ! Ground X slope under tire R3i
SV_DZDX_R3O         0 ; - ! Ground X slope under tire R3o
SV_DZDX_R40I        0 ; - ! Ground X slope under tire R40i
SV_DZDX_R40O        0 ; - ! Ground X slope under tire R40o
SV_DZDX_R41I        0 ; - ! Ground X slope under tire R41i
SV_DZDX_R41O        0 ; - ! Ground X slope under tire R41o
SV_DZDX_R42I        0 ; - ! Ground X slope under tire R42i
SV_DZDX_R42O        0 ; - ! Ground X slope under tire R42o
SV_DZDX_R43I        0 ; - ! Ground X slope under tire R43i
SV_DZDX_R43O        0 ; - ! Ground X slope under tire R43o
SV_DZDX_R44I        0 ; - ! Ground X slope under tire R44i
SV_DZDX_R44O        0 ; - ! Ground X slope under tire R44o
SV_DZDX_R45I        0 ; - ! Ground X slope under tire R45i
SV_DZDX_R45O        0 ; - ! Ground X slope under tire R45o
SV_DZDX_R46I        0 ; - ! Ground X slope under tire R46i
SV_DZDX_R46O        0 ; - ! Ground X slope under tire R46o
SV_DZDX_R47I        0 ; - ! Ground X slope under tire R47i
SV_DZDX_R47O        0 ; - ! Ground X slope under tire R47o
SV_DZDX_R4I         0 ; - ! Ground X slope under tire R4i
SV_DZDX_R4O         0 ; - ! Ground X slope under tire R4o
SV_DZDX_R5I         0 ; - ! Ground X slope under tire R5i
SV_DZDX_R5O         0 ; - ! Ground X slope under tire R5o
SV_DZDX_R6I         0 ; - ! Ground X slope under tire R6i
SV_DZDX_R6O         0 ; - ! Ground X slope under tire R6o
SV_DZDX_R7I         0 ; - ! Ground X slope under tire R7i
SV_DZDX_R7O         0 ; - ! Ground X slope under tire R7o
SV_DZDX_R8I         0 ; - ! Ground X slope under tire R8i
SV_DZDX_R8O         0 ; - ! Ground X slope under tire R8o
SV_DZDX_R9I         0 ; - ! Ground X slope under tire R9i
SV_DZDX_R9O         0 ; - ! Ground X slope under tire R9o
SV_DZDY_GND         0 ; - ! dZ/dY of ground at unit 1 aero ref. pt
SV_DZDY_GND_2       0 ; - ! dZ/dY of ground at unit 2 aero ref. pt
SV_DZDY_GND_3       0 ; - ! dZ/dY of ground at unit 3 aero ref. pt
SV_DZDY_GND_4       0 ; - ! dZ/dY of ground at unit 4 aero ref. pt
SV_DZDY_L10I        0 ; - ! Ground Y slope under tire L10i
SV_DZDY_L10O        0 ; - ! Ground Y slope under tire L10o
SV_DZDY_L11I        0 ; - ! Ground Y slope under tire L11i
SV_DZDY_L11O        0 ; - ! Ground Y slope under tire L11o
SV_DZDY_L12I        0 ; - ! Ground Y slope under tire L12i
SV_DZDY_L12O        0 ; - ! Ground Y slope under tire L12o
SV_DZDY_L13I        0 ; - ! Ground Y slope under tire L13i
SV_DZDY_L13O        0 ; - ! Ground Y slope under tire L13o
SV_DZDY_L14I        0 ; - ! Ground Y slope under tire L14i
SV_DZDY_L14O        0 ; - ! Ground Y slope under tire L14o
SV_DZDY_L15I        0 ; - ! Ground Y slope under tire L15i
SV_DZDY_L15O        0 ; - ! Ground Y slope under tire L15o
SV_DZDY_L16I        0 ; - ! Ground Y slope under tire L16i
SV_DZDY_L16O        0 ; - ! Ground Y slope under tire L16o
SV_DZDY_L17I        0 ; - ! Ground Y slope under tire L17i
SV_DZDY_L17O        0 ; - ! Ground Y slope under tire L17o
SV_DZDY_L18I        0 ; - ! Ground Y slope under tire L18i
SV_DZDY_L18O        0 ; - ! Ground Y slope under tire L18o
SV_DZDY_L19I        0 ; - ! Ground Y slope under tire L19i
SV_DZDY_L19O        0 ; - ! Ground Y slope under tire L19o
SV_DZDY_L1I         0 ; - ! Ground Y slope under tire L1i
SV_DZDY_L1O         0 ; - ! Ground Y slope under tire L1o
SV_DZDY_L20I        0 ; - ! Ground Y slope under tire L20i
SV_DZDY_L20O        0 ; - ! Ground Y slope under tire L20o
SV_DZDY_L21I        0 ; - ! Ground Y slope under tire L21i
SV_DZDY_L21O        0 ; - ! Ground Y slope under tire L21o
SV_DZDY_L22I        0 ; - ! Ground Y slope under tire L22i
SV_DZDY_L22O        0 ; - ! Ground Y slope under tire L22o
SV_DZDY_L23I        0 ; - ! Ground Y slope under tire L23i
SV_DZDY_L23O        0 ; - ! Ground Y slope under tire L23o
SV_DZDY_L24I        0 ; - ! Ground Y slope under tire L24i
SV_DZDY_L24O        0 ; - ! Ground Y slope under tire L24o
SV_DZDY_L25I        0 ; - ! Ground Y slope under tire L25i
SV_DZDY_L25O        0 ; - ! Ground Y slope under tire L25o
SV_DZDY_L26I        0 ; - ! Ground Y slope under tire L26i
SV_DZDY_L26O        0 ; - ! Ground Y slope under tire L26o
SV_DZDY_L27I        0 ; - ! Ground Y slope under tire L27i
SV_DZDY_L27O        0 ; - ! Ground Y slope under tire L27o
SV_DZDY_L28I        0 ; - ! Ground Y slope under tire L28i
SV_DZDY_L28O        0 ; - ! Ground Y slope under tire L28o
SV_DZDY_L29I        0 ; - ! Ground Y slope under tire L29i
SV_DZDY_L29O        0 ; - ! Ground Y slope under tire L29o
SV_DZDY_L2I         0 ; - ! Ground Y slope under tire L2i
SV_DZDY_L2O         0 ; - ! Ground Y slope under tire L2o
SV_DZDY_L30I        0 ; - ! Ground Y slope under tire L30i
SV_DZDY_L30O        0 ; - ! Ground Y slope under tire L30o
SV_DZDY_L31I        0 ; - ! Ground Y slope under tire L31i
SV_DZDY_L31O        0 ; - ! Ground Y slope under tire L31o
SV_DZDY_L32I        0 ; - ! Ground Y slope under tire L32i
SV_DZDY_L32O        0 ; - ! Ground Y slope under tire L32o
SV_DZDY_L33I        0 ; - ! Ground Y slope under tire L33i
SV_DZDY_L33O        0 ; - ! Ground Y slope under tire L33o
SV_DZDY_L34I        0 ; - ! Ground Y slope under tire L34i
SV_DZDY_L34O        0 ; - ! Ground Y slope under tire L34o
SV_DZDY_L35I        0 ; - ! Ground Y slope under tire L35i
SV_DZDY_L35O        0 ; - ! Ground Y slope under tire L35o
SV_DZDY_L36I        0 ; - ! Ground Y slope under tire L36i
SV_DZDY_L36O        0 ; - ! Ground Y slope under tire L36o
SV_DZDY_L37I        0 ; - ! Ground Y slope under tire L37i
SV_DZDY_L37O        0 ; - ! Ground Y slope under tire L37o
SV_DZDY_L38I        0 ; - ! Ground Y slope under tire L38i
SV_DZDY_L38O        0 ; - ! Ground Y slope under tire L38o
SV_DZDY_L39I        0 ; - ! Ground Y slope under tire L39i
SV_DZDY_L39O        0 ; - ! Ground Y slope under tire L39o
SV_DZDY_L3I         0 ; - ! Ground Y slope under tire L3i
SV_DZDY_L3O         0 ; - ! Ground Y slope under tire L3o
SV_DZDY_L40I        0 ; - ! Ground Y slope under tire L40i
SV_DZDY_L40O        0 ; - ! Ground Y slope under tire L40o
SV_DZDY_L41I        0 ; - ! Ground Y slope under tire L41i
SV_DZDY_L41O        0 ; - ! Ground Y slope under tire L41o
SV_DZDY_L42I        0 ; - ! Ground Y slope under tire L42i
SV_DZDY_L42O        0 ; - ! Ground Y slope under tire L42o
SV_DZDY_L43I        0 ; - ! Ground Y slope under tire L43i
SV_DZDY_L43O        0 ; - ! Ground Y slope under tire L43o
SV_DZDY_L44I        0 ; - ! Ground Y slope under tire L44i
SV_DZDY_L44O        0 ; - ! Ground Y slope under tire L44o
SV_DZDY_L45I        0 ; - ! Ground Y slope under tire L45i
SV_DZDY_L45O        0 ; - ! Ground Y slope under tire L45o
SV_DZDY_L46I        0 ; - ! Ground Y slope under tire L46i
SV_DZDY_L46O        0 ; - ! Ground Y slope under tire L46o
SV_DZDY_L47I        0 ; - ! Ground Y slope under tire L47i
SV_DZDY_L47O        0 ; - ! Ground Y slope under tire L47o
SV_DZDY_L4I         0 ; - ! Ground Y slope under tire L4i
SV_DZDY_L4O         0 ; - ! Ground Y slope under tire L4o
SV_DZDY_L5I         0 ; - ! Ground Y slope under tire L5i
SV_DZDY_L5O         0 ; - ! Ground Y slope under tire L5o
SV_DZDY_L6I         0 ; - ! Ground Y slope under tire L6i
SV_DZDY_L6O         0 ; - ! Ground Y slope under tire L6o
SV_DZDY_L7I         0 ; - ! Ground Y slope under tire L7i
SV_DZDY_L7O         0 ; - ! Ground Y slope under tire L7o
SV_DZDY_L8I         0 ; - ! Ground Y slope under tire L8i
SV_DZDY_L8O         0 ; - ! Ground Y slope under tire L8o
SV_DZDY_L9I         0 ; - ! Ground Y slope under tire L9i
SV_DZDY_L9O         0 ; - ! Ground Y slope under tire L9o
SV_DZDY_R10I        0 ; - ! Ground Y slope under tire R10i
SV_DZDY_R10O        0 ; - ! Ground Y slope under tire R10o
SV_DZDY_R11I        0 ; - ! Ground Y slope under tire R11i
SV_DZDY_R11O        0 ; - ! Ground Y slope under tire R11o
SV_DZDY_R12I        0 ; - ! Ground Y slope under tire R12i
SV_DZDY_R12O        0 ; - ! Ground Y slope under tire R12o
SV_DZDY_R13I        0 ; - ! Ground Y slope under tire R13i
SV_DZDY_R13O        0 ; - ! Ground Y slope under tire R13o
SV_DZDY_R14I        0 ; - ! Ground Y slope under tire R14i
SV_DZDY_R14O        0 ; - ! Ground Y slope under tire R14o
SV_DZDY_R15I        0 ; - ! Ground Y slope under tire R15i
SV_DZDY_R15O        0 ; - ! Ground Y slope under tire R15o
SV_DZDY_R16I        0 ; - ! Ground Y slope under tire R16i
SV_DZDY_R16O        0 ; - ! Ground Y slope under tire R16o
SV_DZDY_R17I        0 ; - ! Ground Y slope under tire R17i
SV_DZDY_R17O        0 ; - ! Ground Y slope under tire R17o
SV_DZDY_R18I        0 ; - ! Ground Y slope under tire R18i
SV_DZDY_R18O        0 ; - ! Ground Y slope under tire R18o
SV_DZDY_R19I        0 ; - ! Ground Y slope under tire R19i
SV_DZDY_R19O        0 ; - ! Ground Y slope under tire R19o
SV_DZDY_R1I         0 ; - ! Ground Y slope under tire R1i
SV_DZDY_R1O         0 ; - ! Ground Y slope under tire R1o
SV_DZDY_R20I        0 ; - ! Ground Y slope under tire R20i
SV_DZDY_R20O        0 ; - ! Ground Y slope under tire R20o
SV_DZDY_R21I        0 ; - ! Ground Y slope under tire R21i
SV_DZDY_R21O        0 ; - ! Ground Y slope under tire R21o
SV_DZDY_R22I        0 ; - ! Ground Y slope under tire R22i
SV_DZDY_R22O        0 ; - ! Ground Y slope under tire R22o
SV_DZDY_R23I        0 ; - ! Ground Y slope under tire R23i
SV_DZDY_R23O        0 ; - ! Ground Y slope under tire R23o
SV_DZDY_R24I        0 ; - ! Ground Y slope under tire R24i
SV_DZDY_R24O        0 ; - ! Ground Y slope under tire R24o
SV_DZDY_R25I        0 ; - ! Ground Y slope under tire R25i
SV_DZDY_R25O        0 ; - ! Ground Y slope under tire R25o
SV_DZDY_R26I        0 ; - ! Ground Y slope under tire R26i
SV_DZDY_R26O        0 ; - ! Ground Y slope under tire R26o
SV_DZDY_R27I        0 ; - ! Ground Y slope under tire R27i
SV_DZDY_R27O        0 ; - ! Ground Y slope under tire R27o
SV_DZDY_R28I        0 ; - ! Ground Y slope under tire R28i
SV_DZDY_R28O        0 ; - ! Ground Y slope under tire R28o
SV_DZDY_R29I        0 ; - ! Ground Y slope under tire R29i
SV_DZDY_R29O        0 ; - ! Ground Y slope under tire R29o
SV_DZDY_R2I         0 ; - ! Ground Y slope under tire R2i
SV_DZDY_R2O         0 ; - ! Ground Y slope under tire R2o
SV_DZDY_R30I        0 ; - ! Ground Y slope under tire R30i
SV_DZDY_R30O        0 ; - ! Ground Y slope under tire R30o
SV_DZDY_R31I        0 ; - ! Ground Y slope under tire R31i
SV_DZDY_R31O        0 ; - ! Ground Y slope under tire R31o
SV_DZDY_R32I        0 ; - ! Ground Y slope under tire R32i
SV_DZDY_R32O        0 ; - ! Ground Y slope under tire R32o
SV_DZDY_R33I        0 ; - ! Ground Y slope under tire R33i
SV_DZDY_R33O        0 ; - ! Ground Y slope under tire R33o
SV_DZDY_R34I        0 ; - ! Ground Y slope under tire R34i
SV_DZDY_R34O        0 ; - ! Ground Y slope under tire R34o
SV_DZDY_R35I        0 ; - ! Ground Y slope under tire R35i
SV_DZDY_R35O        0 ; - ! Ground Y slope under tire R35o
SV_DZDY_R36I        0 ; - ! Ground Y slope under tire R36i
SV_DZDY_R36O        0 ; - ! Ground Y slope under tire R36o
SV_DZDY_R37I        0 ; - ! Ground Y slope under tire R37i
SV_DZDY_R37O        0 ; - ! Ground Y slope under tire R37o
SV_DZDY_R38I        0 ; - ! Ground Y slope under tire R38i
SV_DZDY_R38O        0 ; - ! Ground Y slope under tire R38o
SV_DZDY_R39I        0 ; - ! Ground Y slope under tire R39i
SV_DZDY_R39O        0 ; - ! Ground Y slope under tire R39o
SV_DZDY_R3I         0 ; - ! Ground Y slope under tire R3i
SV_DZDY_R3O         0 ; - ! Ground Y slope under tire R3o
SV_DZDY_R40I        0 ; - ! Ground Y slope under tire R40i
SV_DZDY_R40O        0 ; - ! Ground Y slope under tire R40o
SV_DZDY_R41I        0 ; - ! Ground Y slope under tire R41i
SV_DZDY_R41O        0 ; - ! Ground Y slope under tire R41o
SV_DZDY_R42I        0 ; - ! Ground Y slope under tire R42i
SV_DZDY_R42O        0 ; - ! Ground Y slope under tire R42o
SV_DZDY_R43I        0 ; - ! Ground Y slope under tire R43i
SV_DZDY_R43O        0 ; - ! Ground Y slope under tire R43o
SV_DZDY_R44I        0 ; - ! Ground Y slope under tire R44i
SV_DZDY_R44O        0 ; - ! Ground Y slope under tire R44o
SV_DZDY_R45I        0 ; - ! Ground Y slope under tire R45i
SV_DZDY_R45O        0 ; - ! Ground Y slope under tire R45o
SV_DZDY_R46I        0 ; - ! Ground Y slope under tire R46i
SV_DZDY_R46O        0 ; - ! Ground Y slope under tire R46o
SV_DZDY_R47I        0 ; - ! Ground Y slope under tire R47i
SV_DZDY_R47O        0 ; - ! Ground Y slope under tire R47o
SV_DZDY_R4I         0 ; - ! Ground Y slope under tire R4i
SV_DZDY_R4O         0 ; - ! Ground Y slope under tire R4o
SV_DZDY_R5I         0 ; - ! Ground Y slope under tire R5i
SV_DZDY_R5O         0 ; - ! Ground Y slope under tire R5o
SV_DZDY_R6I         0 ; - ! Ground Y slope under tire R6i
SV_DZDY_R6O         0 ; - ! Ground Y slope under tire R6o
SV_DZDY_R7I         0 ; - ! Ground Y slope under tire R7i
SV_DZDY_R7O         0 ; - ! Ground Y slope under tire R7o
SV_DZDY_R8I         0 ; - ! Ground Y slope under tire R8i
SV_DZDY_R8O         0 ; - ! Ground Y slope under tire R8o
SV_DZDY_R9I         0 ; - ! Ground Y slope under tire R9i
SV_DZDY_R9O         0 ; - ! Ground Y slope under tire R9o
SV_D_ALPHA_L10I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L10i
SV_D_ALPHA_L10O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L10o
SV_D_ALPHA_L11I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L11i
SV_D_ALPHA_L11O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L11o
SV_D_ALPHA_L12I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L12i
SV_D_ALPHA_L12O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L12o
SV_D_ALPHA_L13I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L13i
SV_D_ALPHA_L13O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L13o
SV_D_ALPHA_L14I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L14i
SV_D_ALPHA_L14O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L14o
SV_D_ALPHA_L15I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L15i
SV_D_ALPHA_L15O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L15o
SV_D_ALPHA_L16I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L16i
SV_D_ALPHA_L16O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L16o
SV_D_ALPHA_L17I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L17i
SV_D_ALPHA_L17O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L17o
SV_D_ALPHA_L18I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L18i
SV_D_ALPHA_L18O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L18o
SV_D_ALPHA_L19I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L19i
SV_D_ALPHA_L19O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L19o
SV_D_ALPHA_L1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1i
SV_D_ALPHA_L1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L1o
SV_D_ALPHA_L20I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L20i
SV_D_ALPHA_L20O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L20o
SV_D_ALPHA_L21I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L21i
SV_D_ALPHA_L21O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L21o
SV_D_ALPHA_L22I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L22i
SV_D_ALPHA_L22O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L22o
SV_D_ALPHA_L23I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L23i
SV_D_ALPHA_L23O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L23o
SV_D_ALPHA_L24I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L24i
SV_D_ALPHA_L24O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L24o
SV_D_ALPHA_L25I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L25i
SV_D_ALPHA_L25O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L25o
SV_D_ALPHA_L26I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L26i
SV_D_ALPHA_L26O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L26o
SV_D_ALPHA_L27I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L27i
SV_D_ALPHA_L27O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L27o
SV_D_ALPHA_L28I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L28i
SV_D_ALPHA_L28O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L28o
SV_D_ALPHA_L29I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L29i
SV_D_ALPHA_L29O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L29o
SV_D_ALPHA_L2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2i
SV_D_ALPHA_L2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L2o
SV_D_ALPHA_L30I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L30i
SV_D_ALPHA_L30O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L30o
SV_D_ALPHA_L31I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L31i
SV_D_ALPHA_L31O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L31o
SV_D_ALPHA_L32I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L32i
SV_D_ALPHA_L32O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L32o
SV_D_ALPHA_L33I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L33i
SV_D_ALPHA_L33O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L33o
SV_D_ALPHA_L34I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L34i
SV_D_ALPHA_L34O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L34o
SV_D_ALPHA_L35I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L35i
SV_D_ALPHA_L35O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L35o
SV_D_ALPHA_L36I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L36i
SV_D_ALPHA_L36O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L36o
SV_D_ALPHA_L37I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L37i
SV_D_ALPHA_L37O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L37o
SV_D_ALPHA_L38I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L38i
SV_D_ALPHA_L38O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L38o
SV_D_ALPHA_L39I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L39i
SV_D_ALPHA_L39O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L39o
SV_D_ALPHA_L3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3i
SV_D_ALPHA_L3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L3o
SV_D_ALPHA_L40I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L40i
SV_D_ALPHA_L40O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L40o
SV_D_ALPHA_L41I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L41i
SV_D_ALPHA_L41O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L41o
SV_D_ALPHA_L42I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L42i
SV_D_ALPHA_L42O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L42o
SV_D_ALPHA_L43I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L43i
SV_D_ALPHA_L43O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L43o
SV_D_ALPHA_L44I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L44i
SV_D_ALPHA_L44O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L44o
SV_D_ALPHA_L45I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L45i
SV_D_ALPHA_L45O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L45o
SV_D_ALPHA_L46I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L46i
SV_D_ALPHA_L46O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L46o
SV_D_ALPHA_L47I     0 ; - ! Delta Alpha (Fy 0-crossing), tire L47i
SV_D_ALPHA_L47O     0 ; - ! Delta Alpha (Fy 0-crossing), tire L47o
SV_D_ALPHA_L4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4i
SV_D_ALPHA_L4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L4o
SV_D_ALPHA_L5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5i
SV_D_ALPHA_L5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L5o
SV_D_ALPHA_L6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6i
SV_D_ALPHA_L6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L6o
SV_D_ALPHA_L7I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L7i
SV_D_ALPHA_L7O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L7o
SV_D_ALPHA_L8I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L8i
SV_D_ALPHA_L8O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L8o
SV_D_ALPHA_L9I      0 ; - ! Delta Alpha (Fy 0-crossing), tire L9i
SV_D_ALPHA_L9O      0 ; - ! Delta Alpha (Fy 0-crossing), tire L9o
SV_D_ALPHA_MX_L10I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L10i
SV_D_ALPHA_MX_L10O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L10o
SV_D_ALPHA_MX_L11I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L11i
SV_D_ALPHA_MX_L11O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L11o
SV_D_ALPHA_MX_L12I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L12i
SV_D_ALPHA_MX_L12O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L12o
SV_D_ALPHA_MX_L13I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L13i
SV_D_ALPHA_MX_L13O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L13o
SV_D_ALPHA_MX_L14I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L14i
SV_D_ALPHA_MX_L14O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L14o
SV_D_ALPHA_MX_L15I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L15i
SV_D_ALPHA_MX_L15O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L15o
SV_D_ALPHA_MX_L16I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L16i
SV_D_ALPHA_MX_L16O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L16o
SV_D_ALPHA_MX_L17I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L17i
SV_D_ALPHA_MX_L17O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L17o
SV_D_ALPHA_MX_L18I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L18i
SV_D_ALPHA_MX_L18O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L18o
SV_D_ALPHA_MX_L19I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L19i
SV_D_ALPHA_MX_L19O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L19o
SV_D_ALPHA_MX_L1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1i
SV_D_ALPHA_MX_L1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L1o
SV_D_ALPHA_MX_L20I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L20i
SV_D_ALPHA_MX_L20O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L20o
SV_D_ALPHA_MX_L21I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L21i
SV_D_ALPHA_MX_L21O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L21o
SV_D_ALPHA_MX_L22I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L22i
SV_D_ALPHA_MX_L22O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L22o
SV_D_ALPHA_MX_L23I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L23i
SV_D_ALPHA_MX_L23O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L23o
SV_D_ALPHA_MX_L24I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L24i
SV_D_ALPHA_MX_L24O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L24o
SV_D_ALPHA_MX_L25I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L25i
SV_D_ALPHA_MX_L25O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L25o
SV_D_ALPHA_MX_L26I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L26i
SV_D_ALPHA_MX_L26O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L26o
SV_D_ALPHA_MX_L27I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L27i
SV_D_ALPHA_MX_L27O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L27o
SV_D_ALPHA_MX_L28I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L28i
SV_D_ALPHA_MX_L28O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L28o
SV_D_ALPHA_MX_L29I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L29i
SV_D_ALPHA_MX_L29O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L29o
SV_D_ALPHA_MX_L2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2i
SV_D_ALPHA_MX_L2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L2o
SV_D_ALPHA_MX_L30I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L30i
SV_D_ALPHA_MX_L30O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L30o
SV_D_ALPHA_MX_L31I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L31i
SV_D_ALPHA_MX_L31O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L31o
SV_D_ALPHA_MX_L32I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L32i
SV_D_ALPHA_MX_L32O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L32o
SV_D_ALPHA_MX_L33I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L33i
SV_D_ALPHA_MX_L33O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L33o
SV_D_ALPHA_MX_L34I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L34i
SV_D_ALPHA_MX_L34O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L34o
SV_D_ALPHA_MX_L35I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L35i
SV_D_ALPHA_MX_L35O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L35o
SV_D_ALPHA_MX_L36I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L36i
SV_D_ALPHA_MX_L36O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L36o
SV_D_ALPHA_MX_L37I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L37i
SV_D_ALPHA_MX_L37O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L37o
SV_D_ALPHA_MX_L38I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L38i
SV_D_ALPHA_MX_L38O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L38o
SV_D_ALPHA_MX_L39I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L39i
SV_D_ALPHA_MX_L39O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L39o
SV_D_ALPHA_MX_L3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3i
SV_D_ALPHA_MX_L3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L3o
SV_D_ALPHA_MX_L40I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L40i
SV_D_ALPHA_MX_L40O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L40o
SV_D_ALPHA_MX_L41I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L41i
SV_D_ALPHA_MX_L41O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L41o
SV_D_ALPHA_MX_L42I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L42i
SV_D_ALPHA_MX_L42O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L42o
SV_D_ALPHA_MX_L43I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L43i
SV_D_ALPHA_MX_L43O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L43o
SV_D_ALPHA_MX_L44I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L44i
SV_D_ALPHA_MX_L44O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L44o
SV_D_ALPHA_MX_L45I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L45i
SV_D_ALPHA_MX_L45O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L45o
SV_D_ALPHA_MX_L46I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L46i
SV_D_ALPHA_MX_L46O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L46o
SV_D_ALPHA_MX_L47I  0 ; - ! Delta Alpha (Mx 0-crossing), tire L47i
SV_D_ALPHA_MX_L47O  0 ; - ! Delta Alpha (Mx 0-crossing), tire L47o
SV_D_ALPHA_MX_L4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4i
SV_D_ALPHA_MX_L4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L4o
SV_D_ALPHA_MX_L5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5i
SV_D_ALPHA_MX_L5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L5o
SV_D_ALPHA_MX_L6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6i
SV_D_ALPHA_MX_L6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L6o
SV_D_ALPHA_MX_L7I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L7i
SV_D_ALPHA_MX_L7O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L7o
SV_D_ALPHA_MX_L8I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L8i
SV_D_ALPHA_MX_L8O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L8o
SV_D_ALPHA_MX_L9I   0 ; - ! Delta Alpha (Mx 0-crossing), tire L9i
SV_D_ALPHA_MX_L9O   0 ; - ! Delta Alpha (Mx 0-crossing), tire L9o
SV_D_ALPHA_MX_R10I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R10i
SV_D_ALPHA_MX_R10O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R10o
SV_D_ALPHA_MX_R11I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R11i
SV_D_ALPHA_MX_R11O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R11o
SV_D_ALPHA_MX_R12I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R12i
SV_D_ALPHA_MX_R12O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R12o
SV_D_ALPHA_MX_R13I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R13i
SV_D_ALPHA_MX_R13O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R13o
SV_D_ALPHA_MX_R14I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R14i
SV_D_ALPHA_MX_R14O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R14o
SV_D_ALPHA_MX_R15I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R15i
SV_D_ALPHA_MX_R15O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R15o
SV_D_ALPHA_MX_R16I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R16i
SV_D_ALPHA_MX_R16O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R16o
SV_D_ALPHA_MX_R17I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R17i
SV_D_ALPHA_MX_R17O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R17o
SV_D_ALPHA_MX_R18I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R18i
SV_D_ALPHA_MX_R18O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R18o
SV_D_ALPHA_MX_R19I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R19i
SV_D_ALPHA_MX_R19O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R19o
SV_D_ALPHA_MX_R1I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1i
SV_D_ALPHA_MX_R1O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R1o
SV_D_ALPHA_MX_R20I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R20i
SV_D_ALPHA_MX_R20O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R20o
SV_D_ALPHA_MX_R21I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R21i
SV_D_ALPHA_MX_R21O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R21o
SV_D_ALPHA_MX_R22I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R22i
SV_D_ALPHA_MX_R22O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R22o
SV_D_ALPHA_MX_R23I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R23i
SV_D_ALPHA_MX_R23O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R23o
SV_D_ALPHA_MX_R24I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R24i
SV_D_ALPHA_MX_R24O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R24o
SV_D_ALPHA_MX_R25I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R25i
SV_D_ALPHA_MX_R25O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R25o
SV_D_ALPHA_MX_R26I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R26i
SV_D_ALPHA_MX_R26O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R26o
SV_D_ALPHA_MX_R27I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R27i
SV_D_ALPHA_MX_R27O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R27o
SV_D_ALPHA_MX_R28I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R28i
SV_D_ALPHA_MX_R28O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R28o
SV_D_ALPHA_MX_R29I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R29i
SV_D_ALPHA_MX_R29O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R29o
SV_D_ALPHA_MX_R2I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2i
SV_D_ALPHA_MX_R2O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R2o
SV_D_ALPHA_MX_R30I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R30i
SV_D_ALPHA_MX_R30O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R30o
SV_D_ALPHA_MX_R31I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R31i
SV_D_ALPHA_MX_R31O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R31o
SV_D_ALPHA_MX_R32I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R32i
SV_D_ALPHA_MX_R32O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R32o
SV_D_ALPHA_MX_R33I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R33i
SV_D_ALPHA_MX_R33O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R33o
SV_D_ALPHA_MX_R34I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R34i
SV_D_ALPHA_MX_R34O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R34o
SV_D_ALPHA_MX_R35I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R35i
SV_D_ALPHA_MX_R35O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R35o
SV_D_ALPHA_MX_R36I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R36i
SV_D_ALPHA_MX_R36O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R36o
SV_D_ALPHA_MX_R37I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R37i
SV_D_ALPHA_MX_R37O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R37o
SV_D_ALPHA_MX_R38I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R38i
SV_D_ALPHA_MX_R38O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R38o
SV_D_ALPHA_MX_R39I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R39i
SV_D_ALPHA_MX_R39O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R39o
SV_D_ALPHA_MX_R3I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3i
SV_D_ALPHA_MX_R3O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R3o
SV_D_ALPHA_MX_R40I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R40i
SV_D_ALPHA_MX_R40O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R40o
SV_D_ALPHA_MX_R41I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R41i
SV_D_ALPHA_MX_R41O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R41o
SV_D_ALPHA_MX_R42I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R42i
SV_D_ALPHA_MX_R42O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R42o
SV_D_ALPHA_MX_R43I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R43i
SV_D_ALPHA_MX_R43O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R43o
SV_D_ALPHA_MX_R44I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R44i
SV_D_ALPHA_MX_R44O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R44o
SV_D_ALPHA_MX_R45I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R45i
SV_D_ALPHA_MX_R45O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R45o
SV_D_ALPHA_MX_R46I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R46i
SV_D_ALPHA_MX_R46O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R46o
SV_D_ALPHA_MX_R47I  0 ; - ! Delta Alpha (Mx 0-crossing), tire R47i
SV_D_ALPHA_MX_R47O  0 ; - ! Delta Alpha (Mx 0-crossing), tire R47o
SV_D_ALPHA_MX_R4I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4i
SV_D_ALPHA_MX_R4O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R4o
SV_D_ALPHA_MX_R5I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5i
SV_D_ALPHA_MX_R5O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R5o
SV_D_ALPHA_MX_R6I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6i
SV_D_ALPHA_MX_R6O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R6o
SV_D_ALPHA_MX_R7I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R7i
SV_D_ALPHA_MX_R7O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R7o
SV_D_ALPHA_MX_R8I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R8i
SV_D_ALPHA_MX_R8O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R8o
SV_D_ALPHA_MX_R9I   0 ; - ! Delta Alpha (Mx 0-crossing), tire R9i
SV_D_ALPHA_MX_R9O   0 ; - ! Delta Alpha (Mx 0-crossing), tire R9o
SV_D_ALPHA_R10I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R10i
SV_D_ALPHA_R10O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R10o
SV_D_ALPHA_R11I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R11i
SV_D_ALPHA_R11O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R11o
SV_D_ALPHA_R12I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R12i
SV_D_ALPHA_R12O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R12o
SV_D_ALPHA_R13I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R13i
SV_D_ALPHA_R13O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R13o
SV_D_ALPHA_R14I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R14i
SV_D_ALPHA_R14O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R14o
SV_D_ALPHA_R15I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R15i
SV_D_ALPHA_R15O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R15o
SV_D_ALPHA_R16I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R16i
SV_D_ALPHA_R16O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R16o
SV_D_ALPHA_R17I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R17i
SV_D_ALPHA_R17O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R17o
SV_D_ALPHA_R18I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R18i
SV_D_ALPHA_R18O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R18o
SV_D_ALPHA_R19I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R19i
SV_D_ALPHA_R19O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R19o
SV_D_ALPHA_R1I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1i
SV_D_ALPHA_R1O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R1o
SV_D_ALPHA_R20I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R20i
SV_D_ALPHA_R20O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R20o
SV_D_ALPHA_R21I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R21i
SV_D_ALPHA_R21O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R21o
SV_D_ALPHA_R22I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R22i
SV_D_ALPHA_R22O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R22o
SV_D_ALPHA_R23I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R23i
SV_D_ALPHA_R23O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R23o
SV_D_ALPHA_R24I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R24i
SV_D_ALPHA_R24O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R24o
SV_D_ALPHA_R25I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R25i
SV_D_ALPHA_R25O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R25o
SV_D_ALPHA_R26I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R26i
SV_D_ALPHA_R26O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R26o
SV_D_ALPHA_R27I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R27i
SV_D_ALPHA_R27O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R27o
SV_D_ALPHA_R28I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R28i
SV_D_ALPHA_R28O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R28o
SV_D_ALPHA_R29I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R29i
SV_D_ALPHA_R29O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R29o
SV_D_ALPHA_R2I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2i
SV_D_ALPHA_R2O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R2o
SV_D_ALPHA_R30I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R30i
SV_D_ALPHA_R30O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R30o
SV_D_ALPHA_R31I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R31i
SV_D_ALPHA_R31O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R31o
SV_D_ALPHA_R32I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R32i
SV_D_ALPHA_R32O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R32o
SV_D_ALPHA_R33I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R33i
SV_D_ALPHA_R33O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R33o
SV_D_ALPHA_R34I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R34i
SV_D_ALPHA_R34O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R34o
SV_D_ALPHA_R35I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R35i
SV_D_ALPHA_R35O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R35o
SV_D_ALPHA_R36I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R36i
SV_D_ALPHA_R36O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R36o
SV_D_ALPHA_R37I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R37i
SV_D_ALPHA_R37O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R37o
SV_D_ALPHA_R38I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R38i
SV_D_ALPHA_R38O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R38o
SV_D_ALPHA_R39I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R39i
SV_D_ALPHA_R39O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R39o
SV_D_ALPHA_R3I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3i
SV_D_ALPHA_R3O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R3o
SV_D_ALPHA_R40I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R40i
SV_D_ALPHA_R40O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R40o
SV_D_ALPHA_R41I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R41i
SV_D_ALPHA_R41O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R41o
SV_D_ALPHA_R42I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R42i
SV_D_ALPHA_R42O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R42o
SV_D_ALPHA_R43I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R43i
SV_D_ALPHA_R43O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R43o
SV_D_ALPHA_R44I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R44i
SV_D_ALPHA_R44O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R44o
SV_D_ALPHA_R45I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R45i
SV_D_ALPHA_R45O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R45o
SV_D_ALPHA_R46I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R46i
SV_D_ALPHA_R46O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R46o
SV_D_ALPHA_R47I     0 ; - ! Delta Alpha (Fy 0-crossing), tire R47i
SV_D_ALPHA_R47O     0 ; - ! Delta Alpha (Fy 0-crossing), tire R47o
SV_D_ALPHA_R4I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4i
SV_D_ALPHA_R4O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R4o
SV_D_ALPHA_R5I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5i
SV_D_ALPHA_R5O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R5o
SV_D_ALPHA_R6I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6i
SV_D_ALPHA_R6O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R6o
SV_D_ALPHA_R7I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R7i
SV_D_ALPHA_R7O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R7o
SV_D_ALPHA_R8I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R8i
SV_D_ALPHA_R8O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R8o
SV_D_ALPHA_R9I      0 ; - ! Delta Alpha (Fy 0-crossing), tire R9i
SV_D_ALPHA_R9O      0 ; - ! Delta Alpha (Fy 0-crossing), tire R9o
SV_D_CONI_L10I      0 ; - ! Delta Coni (Mz 0-crossing), tire L10i
SV_D_CONI_L10O      0 ; - ! Delta Coni (Mz 0-crossing), tire L10o
SV_D_CONI_L11I      0 ; - ! Delta Coni (Mz 0-crossing), tire L11i
SV_D_CONI_L11O      0 ; - ! Delta Coni (Mz 0-crossing), tire L11o
SV_D_CONI_L12I      0 ; - ! Delta Coni (Mz 0-crossing), tire L12i
SV_D_CONI_L12O      0 ; - ! Delta Coni (Mz 0-crossing), tire L12o
SV_D_CONI_L13I      0 ; - ! Delta Coni (Mz 0-crossing), tire L13i
SV_D_CONI_L13O      0 ; - ! Delta Coni (Mz 0-crossing), tire L13o
SV_D_CONI_L14I      0 ; - ! Delta Coni (Mz 0-crossing), tire L14i
SV_D_CONI_L14O      0 ; - ! Delta Coni (Mz 0-crossing), tire L14o
SV_D_CONI_L15I      0 ; - ! Delta Coni (Mz 0-crossing), tire L15i
SV_D_CONI_L15O      0 ; - ! Delta Coni (Mz 0-crossing), tire L15o
SV_D_CONI_L16I      0 ; - ! Delta Coni (Mz 0-crossing), tire L16i
SV_D_CONI_L16O      0 ; - ! Delta Coni (Mz 0-crossing), tire L16o
SV_D_CONI_L17I      0 ; - ! Delta Coni (Mz 0-crossing), tire L17i
SV_D_CONI_L17O      0 ; - ! Delta Coni (Mz 0-crossing), tire L17o
SV_D_CONI_L18I      0 ; - ! Delta Coni (Mz 0-crossing), tire L18i
SV_D_CONI_L18O      0 ; - ! Delta Coni (Mz 0-crossing), tire L18o
SV_D_CONI_L19I      0 ; - ! Delta Coni (Mz 0-crossing), tire L19i
SV_D_CONI_L19O      0 ; - ! Delta Coni (Mz 0-crossing), tire L19o
SV_D_CONI_L1I       0 ; - ! Delta Coni (Mz 0-crossing), tire L1i
SV_D_CONI_L1O       0 ; - ! Delta Coni (Mz 0-crossing), tire L1o
SV_D_CONI_L20I      0 ; - ! Delta Coni (Mz 0-crossing), tire L20i
SV_D_CONI_L20O      0 ; - ! Delta Coni (Mz 0-crossing), tire L20o
SV_D_CONI_L21I      0 ; - ! Delta Coni (Mz 0-crossing), tire L21i
SV_D_CONI_L21O      0 ; - ! Delta Coni (Mz 0-crossing), tire L21o
SV_D_CONI_L22I      0 ; - ! Delta Coni (Mz 0-crossing), tire L22i
SV_D_CONI_L22O      0 ; - ! Delta Coni (Mz 0-crossing), tire L22o
SV_D_CONI_L23I      0 ; - ! Delta Coni (Mz 0-crossing), tire L23i
SV_D_CONI_L23O      0 ; - ! Delta Coni (Mz 0-crossing), tire L23o
SV_D_CONI_L24I      0 ; - ! Delta Coni (Mz 0-crossing), tire L24i
SV_D_CONI_L24O      0 ; - ! Delta Coni (Mz 0-crossing), tire L24o
SV_D_CONI_L25I      0 ; - ! Delta Coni (Mz 0-crossing), tire L25i
SV_D_CONI_L25O      0 ; - ! Delta Coni (Mz 0-crossing), tire L25o
SV_D_CONI_L26I      0 ; - ! Delta Coni (Mz 0-crossing), tire L26i
SV_D_CONI_L26O      0 ; - ! Delta Coni (Mz 0-crossing), tire L26o
SV_D_CONI_L27I      0 ; - ! Delta Coni (Mz 0-crossing), tire L27i
SV_D_CONI_L27O      0 ; - ! Delta Coni (Mz 0-crossing), tire L27o
SV_D_CONI_L28I      0 ; - ! Delta Coni (Mz 0-crossing), tire L28i
SV_D_CONI_L28O      0 ; - ! Delta Coni (Mz 0-crossing), tire L28o
SV_D_CONI_L29I      0 ; - ! Delta Coni (Mz 0-crossing), tire L29i
SV_D_CONI_L29O      0 ; - ! Delta Coni (Mz 0-crossing), tire L29o
SV_D_CONI_L2I       0 ; - ! Delta Coni (Mz 0-crossing), tire L2i
SV_D_CONI_L2O       0 ; - ! Delta Coni (Mz 0-crossing), tire L2o
SV_D_CONI_L30I      0 ; - ! Delta Coni (Mz 0-crossing), tire L30i
SV_D_CONI_L30O      0 ; - ! Delta Coni (Mz 0-crossing), tire L30o
SV_D_CONI_L31I      0 ; - ! Delta Coni (Mz 0-crossing), tire L31i
SV_D_CONI_L31O      0 ; - ! Delta Coni (Mz 0-crossing), tire L31o
SV_D_CONI_L32I      0 ; - ! Delta Coni (Mz 0-crossing), tire L32i
SV_D_CONI_L32O      0 ; - ! Delta Coni (Mz 0-crossing), tire L32o
SV_D_CONI_L33I      0 ; - ! Delta Coni (Mz 0-crossing), tire L33i
SV_D_CONI_L33O      0 ; - ! Delta Coni (Mz 0-crossing), tire L33o
SV_D_CONI_L34I      0 ; - ! Delta Coni (Mz 0-crossing), tire L34i
SV_D_CONI_L34O      0 ; - ! Delta Coni (Mz 0-crossing), tire L34o
SV_D_CONI_L35I      0 ; - ! Delta Coni (Mz 0-crossing), tire L35i
SV_D_CONI_L35O      0 ; - ! Delta Coni (Mz 0-crossing), tire L35o
SV_D_CONI_L36I      0 ; - ! Delta Coni (Mz 0-crossing), tire L36i
SV_D_CONI_L36O      0 ; - ! Delta Coni (Mz 0-crossing), tire L36o
SV_D_CONI_L37I      0 ; - ! Delta Coni (Mz 0-crossing), tire L37i
SV_D_CONI_L37O      0 ; - ! Delta Coni (Mz 0-crossing), tire L37o
SV_D_CONI_L38I      0 ; - ! Delta Coni (Mz 0-crossing), tire L38i
SV_D_CONI_L38O      0 ; - ! Delta Coni (Mz 0-crossing), tire L38o
SV_D_CONI_L39I      0 ; - ! Delta Coni (Mz 0-crossing), tire L39i
SV_D_CONI_L39O      0 ; - ! Delta Coni (Mz 0-crossing), tire L39o
SV_D_CONI_L3I       0 ; - ! Delta Coni (Mz 0-crossing), tire L3i
SV_D_CONI_L3O       0 ; - ! Delta Coni (Mz 0-crossing), tire L3o
SV_D_CONI_L40I      0 ; - ! Delta Coni (Mz 0-crossing), tire L40i
SV_D_CONI_L40O      0 ; - ! Delta Coni (Mz 0-crossing), tire L40o
SV_D_CONI_L41I      0 ; - ! Delta Coni (Mz 0-crossing), tire L41i
SV_D_CONI_L41O      0 ; - ! Delta Coni (Mz 0-crossing), tire L41o
SV_D_CONI_L42I      0 ; - ! Delta Coni (Mz 0-crossing), tire L42i
SV_D_CONI_L42O      0 ; - ! Delta Coni (Mz 0-crossing), tire L42o
SV_D_CONI_L43I      0 ; - ! Delta Coni (Mz 0-crossing), tire L43i
SV_D_CONI_L43O      0 ; - ! Delta Coni (Mz 0-crossing), tire L43o
SV_D_CONI_L44I      0 ; - ! Delta Coni (Mz 0-crossing), tire L44i
SV_D_CONI_L44O      0 ; - ! Delta Coni (Mz 0-crossing), tire L44o
SV_D_CONI_L45I      0 ; - ! Delta Coni (Mz 0-crossing), tire L45i
SV_D_CONI_L45O      0 ; - ! Delta Coni (Mz 0-crossing), tire L45o
SV_D_CONI_L46I      0 ; - ! Delta Coni (Mz 0-crossing), tire L46i
SV_D_CONI_L46O      0 ; - ! Delta Coni (Mz 0-crossing), tire L46o
SV_D_CONI_L47I      0 ; - ! Delta Coni (Mz 0-crossing), tire L47i
SV_D_CONI_L47O      0 ; - ! Delta Coni (Mz 0-crossing), tire L47o
SV_D_CONI_L4I       0 ; - ! Delta Coni (Mz 0-crossing), tire L4i
SV_D_CONI_L4O       0 ; - ! Delta Coni (Mz 0-crossing), tire L4o
SV_D_CONI_L5I       0 ; - ! Delta Coni (Mz 0-crossing), tire L5i
SV_D_CONI_L5O       0 ; - ! Delta Coni (Mz 0-crossing), tire L5o
SV_D_CONI_L6I       0 ; - ! Delta Coni (Mz 0-crossing), tire L6i
SV_D_CONI_L6O       0 ; - ! Delta Coni (Mz 0-crossing), tire L6o
SV_D_CONI_L7I       0 ; - ! Delta Coni (Mz 0-crossing), tire L7i
SV_D_CONI_L7O       0 ; - ! Delta Coni (Mz 0-crossing), tire L7o
SV_D_CONI_L8I       0 ; - ! Delta Coni (Mz 0-crossing), tire L8i
SV_D_CONI_L8O       0 ; - ! Delta Coni (Mz 0-crossing), tire L8o
SV_D_CONI_L9I       0 ; - ! Delta Coni (Mz 0-crossing), tire L9i
SV_D_CONI_L9O       0 ; - ! Delta Coni (Mz 0-crossing), tire L9o
SV_D_CONI_R10I      0 ; - ! Delta Coni (Mz 0-crossing), tire R10i
SV_D_CONI_R10O      0 ; - ! Delta Coni (Mz 0-crossing), tire R10o
SV_D_CONI_R11I      0 ; - ! Delta Coni (Mz 0-crossing), tire R11i
SV_D_CONI_R11O      0 ; - ! Delta Coni (Mz 0-crossing), tire R11o
SV_D_CONI_R12I      0 ; - ! Delta Coni (Mz 0-crossing), tire R12i
SV_D_CONI_R12O      0 ; - ! Delta Coni (Mz 0-crossing), tire R12o
SV_D_CONI_R13I      0 ; - ! Delta Coni (Mz 0-crossing), tire R13i
SV_D_CONI_R13O      0 ; - ! Delta Coni (Mz 0-crossing), tire R13o
SV_D_CONI_R14I      0 ; - ! Delta Coni (Mz 0-crossing), tire R14i
SV_D_CONI_R14O      0 ; - ! Delta Coni (Mz 0-crossing), tire R14o
SV_D_CONI_R15I      0 ; - ! Delta Coni (Mz 0-crossing), tire R15i
SV_D_CONI_R15O      0 ; - ! Delta Coni (Mz 0-crossing), tire R15o
SV_D_CONI_R16I      0 ; - ! Delta Coni (Mz 0-crossing), tire R16i
SV_D_CONI_R16O      0 ; - ! Delta Coni (Mz 0-crossing), tire R16o
SV_D_CONI_R17I      0 ; - ! Delta Coni (Mz 0-crossing), tire R17i
SV_D_CONI_R17O      0 ; - ! Delta Coni (Mz 0-crossing), tire R17o
SV_D_CONI_R18I      0 ; - ! Delta Coni (Mz 0-crossing), tire R18i
SV_D_CONI_R18O      0 ; - ! Delta Coni (Mz 0-crossing), tire R18o
SV_D_CONI_R19I      0 ; - ! Delta Coni (Mz 0-crossing), tire R19i
SV_D_CONI_R19O      0 ; - ! Delta Coni (Mz 0-crossing), tire R19o
SV_D_CONI_R1I       0 ; - ! Delta Coni (Mz 0-crossing), tire R1i
SV_D_CONI_R1O       0 ; - ! Delta Coni (Mz 0-crossing), tire R1o
SV_D_CONI_R20I      0 ; - ! Delta Coni (Mz 0-crossing), tire R20i
SV_D_CONI_R20O      0 ; - ! Delta Coni (Mz 0-crossing), tire R20o
SV_D_CONI_R21I      0 ; - ! Delta Coni (Mz 0-crossing), tire R21i
SV_D_CONI_R21O      0 ; - ! Delta Coni (Mz 0-crossing), tire R21o
SV_D_CONI_R22I      0 ; - ! Delta Coni (Mz 0-crossing), tire R22i
SV_D_CONI_R22O      0 ; - ! Delta Coni (Mz 0-crossing), tire R22o
SV_D_CONI_R23I      0 ; - ! Delta Coni (Mz 0-crossing), tire R23i
SV_D_CONI_R23O      0 ; - ! Delta Coni (Mz 0-crossing), tire R23o
SV_D_CONI_R24I      0 ; - ! Delta Coni (Mz 0-crossing), tire R24i
SV_D_CONI_R24O      0 ; - ! Delta Coni (Mz 0-crossing), tire R24o
SV_D_CONI_R25I      0 ; - ! Delta Coni (Mz 0-crossing), tire R25i
SV_D_CONI_R25O      0 ; - ! Delta Coni (Mz 0-crossing), tire R25o
SV_D_CONI_R26I      0 ; - ! Delta Coni (Mz 0-crossing), tire R26i
SV_D_CONI_R26O      0 ; - ! Delta Coni (Mz 0-crossing), tire R26o
SV_D_CONI_R27I      0 ; - ! Delta Coni (Mz 0-crossing), tire R27i
SV_D_CONI_R27O      0 ; - ! Delta Coni (Mz 0-crossing), tire R27o
SV_D_CONI_R28I      0 ; - ! Delta Coni (Mz 0-crossing), tire R28i
SV_D_CONI_R28O      0 ; - ! Delta Coni (Mz 0-crossing), tire R28o
SV_D_CONI_R29I      0 ; - ! Delta Coni (Mz 0-crossing), tire R29i
SV_D_CONI_R29O      0 ; - ! Delta Coni (Mz 0-crossing), tire R29o
SV_D_CONI_R2I       0 ; - ! Delta Coni (Mz 0-crossing), tire R2i
SV_D_CONI_R2O       0 ; - ! Delta Coni (Mz 0-crossing), tire R2o
SV_D_CONI_R30I      0 ; - ! Delta Coni (Mz 0-crossing), tire R30i
SV_D_CONI_R30O      0 ; - ! Delta Coni (Mz 0-crossing), tire R30o
SV_D_CONI_R31I      0 ; - ! Delta Coni (Mz 0-crossing), tire R31i
SV_D_CONI_R31O      0 ; - ! Delta Coni (Mz 0-crossing), tire R31o
SV_D_CONI_R32I      0 ; - ! Delta Coni (Mz 0-crossing), tire R32i
SV_D_CONI_R32O      0 ; - ! Delta Coni (Mz 0-crossing), tire R32o
SV_D_CONI_R33I      0 ; - ! Delta Coni (Mz 0-crossing), tire R33i
SV_D_CONI_R33O      0 ; - ! Delta Coni (Mz 0-crossing), tire R33o
SV_D_CONI_R34I      0 ; - ! Delta Coni (Mz 0-crossing), tire R34i
SV_D_CONI_R34O      0 ; - ! Delta Coni (Mz 0-crossing), tire R34o
SV_D_CONI_R35I      0 ; - ! Delta Coni (Mz 0-crossing), tire R35i
SV_D_CONI_R35O      0 ; - ! Delta Coni (Mz 0-crossing), tire R35o
SV_D_CONI_R36I      0 ; - ! Delta Coni (Mz 0-crossing), tire R36i
SV_D_CONI_R36O      0 ; - ! Delta Coni (Mz 0-crossing), tire R36o
SV_D_CONI_R37I      0 ; - ! Delta Coni (Mz 0-crossing), tire R37i
SV_D_CONI_R37O      0 ; - ! Delta Coni (Mz 0-crossing), tire R37o
SV_D_CONI_R38I      0 ; - ! Delta Coni (Mz 0-crossing), tire R38i
SV_D_CONI_R38O      0 ; - ! Delta Coni (Mz 0-crossing), tire R38o
SV_D_CONI_R39I      0 ; - ! Delta Coni (Mz 0-crossing), tire R39i
SV_D_CONI_R39O      0 ; - ! Delta Coni (Mz 0-crossing), tire R39o
SV_D_CONI_R3I       0 ; - ! Delta Coni (Mz 0-crossing), tire R3i
SV_D_CONI_R3O       0 ; - ! Delta Coni (Mz 0-crossing), tire R3o
SV_D_CONI_R40I      0 ; - ! Delta Coni (Mz 0-crossing), tire R40i
SV_D_CONI_R40O      0 ; - ! Delta Coni (Mz 0-crossing), tire R40o
SV_D_CONI_R41I      0 ; - ! Delta Coni (Mz 0-crossing), tire R41i
SV_D_CONI_R41O      0 ; - ! Delta Coni (Mz 0-crossing), tire R41o
SV_D_CONI_R42I      0 ; - ! Delta Coni (Mz 0-crossing), tire R42i
SV_D_CONI_R42O      0 ; - ! Delta Coni (Mz 0-crossing), tire R42o
SV_D_CONI_R43I      0 ; - ! Delta Coni (Mz 0-crossing), tire R43i
SV_D_CONI_R43O      0 ; - ! Delta Coni (Mz 0-crossing), tire R43o
SV_D_CONI_R44I      0 ; - ! Delta Coni (Mz 0-crossing), tire R44i
SV_D_CONI_R44O      0 ; - ! Delta Coni (Mz 0-crossing), tire R44o
SV_D_CONI_R45I      0 ; - ! Delta Coni (Mz 0-crossing), tire R45i
SV_D_CONI_R45O      0 ; - ! Delta Coni (Mz 0-crossing), tire R45o
SV_D_CONI_R46I      0 ; - ! Delta Coni (Mz 0-crossing), tire R46i
SV_D_CONI_R46O      0 ; - ! Delta Coni (Mz 0-crossing), tire R46o
SV_D_CONI_R47I      0 ; - ! Delta Coni (Mz 0-crossing), tire R47i
SV_D_CONI_R47O      0 ; - ! Delta Coni (Mz 0-crossing), tire R47o
SV_D_CONI_R4I       0 ; - ! Delta Coni (Mz 0-crossing), tire R4i
SV_D_CONI_R4O       0 ; - ! Delta Coni (Mz 0-crossing), tire R4o
SV_D_CONI_R5I       0 ; - ! Delta Coni (Mz 0-crossing), tire R5i
SV_D_CONI_R5O       0 ; - ! Delta Coni (Mz 0-crossing), tire R5o
SV_D_CONI_R6I       0 ; - ! Delta Coni (Mz 0-crossing), tire R6i
SV_D_CONI_R6O       0 ; - ! Delta Coni (Mz 0-crossing), tire R6o
SV_D_CONI_R7I       0 ; - ! Delta Coni (Mz 0-crossing), tire R7i
SV_D_CONI_R7O       0 ; - ! Delta Coni (Mz 0-crossing), tire R7o
SV_D_CONI_R8I       0 ; - ! Delta Coni (Mz 0-crossing), tire R8i
SV_D_CONI_R8O       0 ; - ! Delta Coni (Mz 0-crossing), tire R8o
SV_D_CONI_R9I       0 ; - ! Delta Coni (Mz 0-crossing), tire R9i
SV_D_CONI_R9O       0 ; - ! Delta Coni (Mz 0-crossing), tire R9o
SV_D_KAPPA_L10I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L10i
SV_D_KAPPA_L10O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L10o
SV_D_KAPPA_L11I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L11i
SV_D_KAPPA_L11O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L11o
SV_D_KAPPA_L12I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L12i
SV_D_KAPPA_L12O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L12o
SV_D_KAPPA_L13I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L13i
SV_D_KAPPA_L13O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L13o
SV_D_KAPPA_L14I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L14i
SV_D_KAPPA_L14O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L14o
SV_D_KAPPA_L15I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L15i
SV_D_KAPPA_L15O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L15o
SV_D_KAPPA_L16I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L16i
SV_D_KAPPA_L16O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L16o
SV_D_KAPPA_L17I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L17i
SV_D_KAPPA_L17O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L17o
SV_D_KAPPA_L18I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L18i
SV_D_KAPPA_L18O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L18o
SV_D_KAPPA_L19I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L19i
SV_D_KAPPA_L19O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L19o
SV_D_KAPPA_L1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1i
SV_D_KAPPA_L1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L1o
SV_D_KAPPA_L20I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L20i
SV_D_KAPPA_L20O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L20o
SV_D_KAPPA_L21I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L21i
SV_D_KAPPA_L21O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L21o
SV_D_KAPPA_L22I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L22i
SV_D_KAPPA_L22O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L22o
SV_D_KAPPA_L23I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L23i
SV_D_KAPPA_L23O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L23o
SV_D_KAPPA_L24I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L24i
SV_D_KAPPA_L24O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L24o
SV_D_KAPPA_L25I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L25i
SV_D_KAPPA_L25O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L25o
SV_D_KAPPA_L26I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L26i
SV_D_KAPPA_L26O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L26o
SV_D_KAPPA_L27I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L27i
SV_D_KAPPA_L27O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L27o
SV_D_KAPPA_L28I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L28i
SV_D_KAPPA_L28O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L28o
SV_D_KAPPA_L29I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L29i
SV_D_KAPPA_L29O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L29o
SV_D_KAPPA_L2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2i
SV_D_KAPPA_L2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L2o
SV_D_KAPPA_L30I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L30i
SV_D_KAPPA_L30O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L30o
SV_D_KAPPA_L31I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L31i
SV_D_KAPPA_L31O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L31o
SV_D_KAPPA_L32I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L32i
SV_D_KAPPA_L32O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L32o
SV_D_KAPPA_L33I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L33i
SV_D_KAPPA_L33O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L33o
SV_D_KAPPA_L34I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L34i
SV_D_KAPPA_L34O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L34o
SV_D_KAPPA_L35I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L35i
SV_D_KAPPA_L35O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L35o
SV_D_KAPPA_L36I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L36i
SV_D_KAPPA_L36O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L36o
SV_D_KAPPA_L37I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L37i
SV_D_KAPPA_L37O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L37o
SV_D_KAPPA_L38I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L38i
SV_D_KAPPA_L38O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L38o
SV_D_KAPPA_L39I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L39i
SV_D_KAPPA_L39O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L39o
SV_D_KAPPA_L3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3i
SV_D_KAPPA_L3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L3o
SV_D_KAPPA_L40I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L40i
SV_D_KAPPA_L40O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L40o
SV_D_KAPPA_L41I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L41i
SV_D_KAPPA_L41O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L41o
SV_D_KAPPA_L42I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L42i
SV_D_KAPPA_L42O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L42o
SV_D_KAPPA_L43I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L43i
SV_D_KAPPA_L43O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L43o
SV_D_KAPPA_L44I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L44i
SV_D_KAPPA_L44O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L44o
SV_D_KAPPA_L45I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L45i
SV_D_KAPPA_L45O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L45o
SV_D_KAPPA_L46I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L46i
SV_D_KAPPA_L46O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L46o
SV_D_KAPPA_L47I     0 ; - ! Delta Kappa (Fx 0-crossing), tire L47i
SV_D_KAPPA_L47O     0 ; - ! Delta Kappa (Fx 0-crossing), tire L47o
SV_D_KAPPA_L4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4i
SV_D_KAPPA_L4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L4o
SV_D_KAPPA_L5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5i
SV_D_KAPPA_L5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L5o
SV_D_KAPPA_L6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6i
SV_D_KAPPA_L6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L6o
SV_D_KAPPA_L7I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L7i
SV_D_KAPPA_L7O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L7o
SV_D_KAPPA_L8I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L8i
SV_D_KAPPA_L8O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L8o
SV_D_KAPPA_L9I      0 ; - ! Delta Kappa (Fx 0-crossing), tire L9i
SV_D_KAPPA_L9O      0 ; - ! Delta Kappa (Fx 0-crossing), tire L9o
SV_D_KAPPA_R10I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R10i
SV_D_KAPPA_R10O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R10o
SV_D_KAPPA_R11I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R11i
SV_D_KAPPA_R11O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R11o
SV_D_KAPPA_R12I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R12i
SV_D_KAPPA_R12O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R12o
SV_D_KAPPA_R13I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R13i
SV_D_KAPPA_R13O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R13o
SV_D_KAPPA_R14I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R14i
SV_D_KAPPA_R14O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R14o
SV_D_KAPPA_R15I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R15i
SV_D_KAPPA_R15O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R15o
SV_D_KAPPA_R16I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R16i
SV_D_KAPPA_R16O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R16o
SV_D_KAPPA_R17I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R17i
SV_D_KAPPA_R17O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R17o
SV_D_KAPPA_R18I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R18i
SV_D_KAPPA_R18O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R18o
SV_D_KAPPA_R19I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R19i
SV_D_KAPPA_R19O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R19o
SV_D_KAPPA_R1I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1i
SV_D_KAPPA_R1O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R1o
SV_D_KAPPA_R20I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R20i
SV_D_KAPPA_R20O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R20o
SV_D_KAPPA_R21I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R21i
SV_D_KAPPA_R21O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R21o
SV_D_KAPPA_R22I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R22i
SV_D_KAPPA_R22O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R22o
SV_D_KAPPA_R23I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R23i
SV_D_KAPPA_R23O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R23o
SV_D_KAPPA_R24I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R24i
SV_D_KAPPA_R24O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R24o
SV_D_KAPPA_R25I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R25i
SV_D_KAPPA_R25O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R25o
SV_D_KAPPA_R26I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R26i
SV_D_KAPPA_R26O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R26o
SV_D_KAPPA_R27I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R27i
SV_D_KAPPA_R27O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R27o
SV_D_KAPPA_R28I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R28i
SV_D_KAPPA_R28O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R28o
SV_D_KAPPA_R29I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R29i
SV_D_KAPPA_R29O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R29o
SV_D_KAPPA_R2I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2i
SV_D_KAPPA_R2O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R2o
SV_D_KAPPA_R30I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R30i
SV_D_KAPPA_R30O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R30o
SV_D_KAPPA_R31I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R31i
SV_D_KAPPA_R31O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R31o
SV_D_KAPPA_R32I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R32i
SV_D_KAPPA_R32O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R32o
SV_D_KAPPA_R33I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R33i
SV_D_KAPPA_R33O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R33o
SV_D_KAPPA_R34I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R34i
SV_D_KAPPA_R34O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R34o
SV_D_KAPPA_R35I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R35i
SV_D_KAPPA_R35O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R35o
SV_D_KAPPA_R36I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R36i
SV_D_KAPPA_R36O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R36o
SV_D_KAPPA_R37I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R37i
SV_D_KAPPA_R37O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R37o
SV_D_KAPPA_R38I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R38i
SV_D_KAPPA_R38O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R38o
SV_D_KAPPA_R39I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R39i
SV_D_KAPPA_R39O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R39o
SV_D_KAPPA_R3I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3i
SV_D_KAPPA_R3O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R3o
SV_D_KAPPA_R40I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R40i
SV_D_KAPPA_R40O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R40o
SV_D_KAPPA_R41I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R41i
SV_D_KAPPA_R41O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R41o
SV_D_KAPPA_R42I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R42i
SV_D_KAPPA_R42O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R42o
SV_D_KAPPA_R43I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R43i
SV_D_KAPPA_R43O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R43o
SV_D_KAPPA_R44I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R44i
SV_D_KAPPA_R44O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R44o
SV_D_KAPPA_R45I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R45i
SV_D_KAPPA_R45O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R45o
SV_D_KAPPA_R46I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R46i
SV_D_KAPPA_R46O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R46o
SV_D_KAPPA_R47I     0 ; - ! Delta Kappa (Fx 0-crossing), tire R47i
SV_D_KAPPA_R47O     0 ; - ! Delta Kappa (Fx 0-crossing), tire R47o
SV_D_KAPPA_R4I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4i
SV_D_KAPPA_R4O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R4o
SV_D_KAPPA_R5I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5i
SV_D_KAPPA_R5O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R5o
SV_D_KAPPA_R6I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6i
SV_D_KAPPA_R6O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R6o
SV_D_KAPPA_R7I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R7i
SV_D_KAPPA_R7O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R7o
SV_D_KAPPA_R8I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R8i
SV_D_KAPPA_R8O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R8o
SV_D_KAPPA_R9I      0 ; - ! Delta Kappa (Fx 0-crossing), tire R9i
SV_D_KAPPA_R9O      0 ; - ! Delta Kappa (Fx 0-crossing), tire R9o
SV_ESC_STATE        0 ; - ! State of ESC engine torque control
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST           0 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  12656.71873 ; N ! Force from ride spring L1
SV_FS_L10  4835.18266 ; N ! Force from ride spring L10
SV_FS_L11 4820.877436 ; N ! Force from ride spring L11
SV_FS_L12  4436.57654 ; N ! Force from ride spring L12
SV_FS_L13 4394.448018 ; N ! Force from ride spring L13
SV_FS_L14 4331.672494 ; N ! Force from ride spring L14
SV_FS_L15 3797.880878 ; N ! Force from ride spring L15
SV_FS_L16 3747.712282 ; N ! Force from ride spring L16
SV_FS_L17 3674.042867 ; N ! Force from ride spring L17
SV_FS_L18 3437.022735 ; N ! Force from ride spring L18
SV_FS_L19 3437.022735 ; N ! Force from ride spring L19
SV_FS_L2  12656.71873 ; N ! Force from ride spring L2
SV_FS_L20 -4705.568877 ; N ! Force from ride spring L20
SV_FS_L21 -5533.085697 ; N ! Force from ride spring L21
SV_FS_L22 -6658.570252 ; N ! Force from ride spring L22
SV_FS_L23 -3769.186249 ; N ! Force from ride spring L23
SV_FS_L24 -4173.720769 ; N ! Force from ride spring L24
SV_FS_L25 6089.290005 ; N ! Force from ride spring L25
SV_FS_L26 21126.07031 ; N ! Force from ride spring L26
SV_FS_L27 11286.85048 ; N ! Force from ride spring L27
SV_FS_L28 957.1033633 ; N ! Force from ride spring L28
SV_FS_L29 -4722.49439 ; N ! Force from ride spring L29
SV_FS_L3  745.8544708 ; N ! Force from ride spring L3
SV_FS_L30 -6837.523448 ; N ! Force from ride spring L30
SV_FS_L31 -2344.710535 ; N ! Force from ride spring L31
SV_FS_L32 20953.26953 ; N ! Force from ride spring L32
SV_FS_L33 20953.26953 ; N ! Force from ride spring L33
SV_FS_L34 -6316.361828 ; N ! Force from ride spring L34
SV_FS_L35 -5978.851063 ; N ! Force from ride spring L35
SV_FS_L36 -5639.824488 ; N ! Force from ride spring L36
SV_FS_L37 -6490.411482 ; N ! Force from ride spring L37
SV_FS_L38 -6228.133739 ; N ! Force from ride spring L38
SV_FS_L39 -4379.885553 ; N ! Force from ride spring L39
SV_FS_L4  745.8544708 ; N ! Force from ride spring L4
SV_FS_L40 -5946.519302 ; N ! Force from ride spring L40
SV_FS_L41 -5355.743955 ; N ! Force from ride spring L41
SV_FS_L42 -4533.022102 ; N ! Force from ride spring L42
SV_FS_L43 2565.846337 ; N ! Force from ride spring L43
SV_FS_L44 3402.981868 ; N ! Force from ride spring L44
SV_FS_L45 4240.064518 ; N ! Force from ride spring L45
SV_FS_L46 10855.78647 ; N ! Force from ride spring L46
SV_FS_L47 10855.78647 ; N ! Force from ride spring L47
SV_FS_L5  745.8544708 ; N ! Force from ride spring L5
SV_FS_L6   5434.40226 ; N ! Force from ride spring L6
SV_FS_L7  5383.188401 ; N ! Force from ride spring L7
SV_FS_L8  5331.967274 ; N ! Force from ride spring L8
SV_FS_L9  4900.152274 ; N ! Force from ride spring L9
SV_FS_R1  12740.39154 ; N ! Force from ride spring R1
SV_FS_R10 4896.670442 ; N ! Force from ride spring R10
SV_FS_R11 4885.859896 ; N ! Force from ride spring R11
SV_FS_R12 4431.865116 ; N ! Force from ride spring R12
SV_FS_R13 4404.369298 ; N ! Force from ride spring R13
SV_FS_R14 4318.495768 ; N ! Force from ride spring R14
SV_FS_R15 3780.807995 ; N ! Force from ride spring R15
SV_FS_R16 3724.823604 ; N ! Force from ride spring R16
SV_FS_R17  3628.36408 ; N ! Force from ride spring R17
SV_FS_R18  3378.70851 ; N ! Force from ride spring R18
SV_FS_R19  3378.70851 ; N ! Force from ride spring R19
SV_FS_R2  12740.39154 ; N ! Force from ride spring R2
SV_FS_R20 -4772.296701 ; N ! Force from ride spring R20
SV_FS_R21 -5611.641097 ; N ! Force from ride spring R21
SV_FS_R22 -6727.430394 ; N ! Force from ride spring R22
SV_FS_R23 -3762.14205 ; N ! Force from ride spring R23
SV_FS_R24 -4162.749261 ; N ! Force from ride spring R24
SV_FS_R25 6101.844441 ; N ! Force from ride spring R25
SV_FS_R26 21132.07984 ; N ! Force from ride spring R26
SV_FS_R27 11294.39459 ; N ! Force from ride spring R27
SV_FS_R28 955.9369138 ; N ! Force from ride spring R28
SV_FS_R29 -4729.464225 ; N ! Force from ride spring R29
SV_FS_R3  896.6561758 ; N ! Force from ride spring R3
SV_FS_R30 -6833.188124 ; N ! Force from ride spring R30
SV_FS_R31 -2334.276297 ; N ! Force from ride spring R31
SV_FS_R32 20971.80778 ; N ! Force from ride spring R32
SV_FS_R33 20971.80778 ; N ! Force from ride spring R33
SV_FS_R34 -6347.060221 ; N ! Force from ride spring R34
SV_FS_R35 -6007.825555 ; N ! Force from ride spring R35
SV_FS_R36 -5670.819377 ; N ! Force from ride spring R36
SV_FS_R37 -6538.206992 ; N ! Force from ride spring R37
SV_FS_R38 -6277.199809 ; N ! Force from ride spring R38
SV_FS_R39 -4452.042385 ; N ! Force from ride spring R39
SV_FS_R4  896.6561758 ; N ! Force from ride spring R4
SV_FS_R40  -5937.4637 ; N ! Force from ride spring R40
SV_FS_R41 -5406.02714 ; N ! Force from ride spring R41
SV_FS_R42 -4532.222367 ; N ! Force from ride spring R42
SV_FS_R43 2585.451709 ; N ! Force from ride spring R43
SV_FS_R44 3422.574146 ; N ! Force from ride spring R44
SV_FS_R45 4259.749461 ; N ! Force from ride spring R45
SV_FS_R46 10875.53289 ; N ! Force from ride spring R46
SV_FS_R47 10875.53289 ; N ! Force from ride spring R47
SV_FS_R5  896.6561758 ; N ! Force from ride spring R5
SV_FS_R6  5484.866784 ; N ! Force from ride spring R6
SV_FS_R7  5433.788701 ; N ! Force from ride spring R7
SV_FS_R8  5382.695798 ; N ! Force from ride spring R8
SV_FS_R9  4957.820022 ; N ! Force from ride spring R9
SV_FUEL             0 ; kg ! ODE: Mass of fuel consumed {Mfuel}
SV_FX_SM_L1 74.99511478 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L10 -82.06545606 ; N ! Tire force [sx] component, wheel L10
SV_FX_SM_L11 -73.11342593 ; N ! Tire force [sx] component, wheel L11
SV_FX_SM_L12 -69.04346517 ; N ! Tire force [sx] component, wheel L12
SV_FX_SM_L13 -69.97596294 ; N ! Tire force [sx] component, wheel L13
SV_FX_SM_L14 -70.7900235 ; N ! Tire force [sx] component, wheel L14
SV_FX_SM_L15 -68.62305268 ; N ! Tire force [sx] component, wheel L15
SV_FX_SM_L16 -72.14785499 ; N ! Tire force [sx] component, wheel L16
SV_FX_SM_L17 -70.34741268 ; N ! Tire force [sx] component, wheel L17
SV_FX_SM_L18 -69.37668554 ; N ! Tire force [sx] component, wheel L18
SV_FX_SM_L19 -47.26867839 ; N ! Tire force [sx] component, wheel L19
SV_FX_SM_L2 75.48452844 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_L20       -0 ; N ! Tire force [sx] component, wheel L20
SV_FX_SM_L21       -0 ; N ! Tire force [sx] component, wheel L21
SV_FX_SM_L22 0.2735447688 ; N ! Tire force [sx] component, wheel L22
SV_FX_SM_L23 -115.8950817 ; N ! Tire force [sx] component, wheel L23
SV_FX_SM_L24 54.1111179 ; N ! Tire force [sx] component, wheel L24
SV_FX_SM_L25 773.5024303 ; N ! Tire force [sx] component, wheel L25
SV_FX_SM_L26 -584.0179474 ; N ! Tire force [sx] component, wheel L26
SV_FX_SM_L27 -4495.258258 ; N ! Tire force [sx] component, wheel L27
SV_FX_SM_L28 -210.5570777 ; N ! Tire force [sx] component, wheel L28
SV_FX_SM_L29       -0 ; N ! Tire force [sx] component, wheel L29
SV_FX_SM_L3 953.1620992 ; N ! Tire force [sx] component, wheel L3
SV_FX_SM_L30       -0 ; N ! Tire force [sx] component, wheel L30
SV_FX_SM_L31        0 ; N ! Tire force [sx] component, wheel L31
SV_FX_SM_L32 4786.725207 ; N ! Tire force [sx] component, wheel L32
SV_FX_SM_L33 -2671.800154 ; N ! Tire force [sx] component, wheel L33
SV_FX_SM_L34       -0 ; N ! Tire force [sx] component, wheel L34
SV_FX_SM_L35       -0 ; N ! Tire force [sx] component, wheel L35
SV_FX_SM_L36       -0 ; N ! Tire force [sx] component, wheel L36
SV_FX_SM_L37       -0 ; N ! Tire force [sx] component, wheel L37
SV_FX_SM_L38       -0 ; N ! Tire force [sx] component, wheel L38
SV_FX_SM_L39       -0 ; N ! Tire force [sx] component, wheel L39
SV_FX_SM_L4 941.9520849 ; N ! Tire force [sx] component, wheel L4
SV_FX_SM_L40        0 ; N ! Tire force [sx] component, wheel L40
SV_FX_SM_L41 -0.316259139 ; N ! Tire force [sx] component, wheel L41
SV_FX_SM_L42 -44.80673811 ; N ! Tire force [sx] component, wheel L42
SV_FX_SM_L43 65.84051123 ; N ! Tire force [sx] component, wheel L43
SV_FX_SM_L44 70.52640287 ; N ! Tire force [sx] component, wheel L44
SV_FX_SM_L45 74.84474304 ; N ! Tire force [sx] component, wheel L45
SV_FX_SM_L46 156.950162 ; N ! Tire force [sx] component, wheel L46
SV_FX_SM_L47 159.0855136 ; N ! Tire force [sx] component, wheel L47
SV_FX_SM_L5 940.2852577 ; N ! Tire force [sx] component, wheel L5
SV_FX_SM_L6 -83.64225199 ; N ! Tire force [sx] component, wheel L6
SV_FX_SM_L7 -83.58793799 ; N ! Tire force [sx] component, wheel L7
SV_FX_SM_L8 -83.55808279 ; N ! Tire force [sx] component, wheel L8
SV_FX_SM_L9 -79.57972152 ; N ! Tire force [sx] component, wheel L9
SV_FX_SM_R1 73.35936984 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R10 -81.87953592 ; N ! Tire force [sx] component, wheel R10
SV_FX_SM_R11 -72.13926031 ; N ! Tire force [sx] component, wheel R11
SV_FX_SM_R12 -76.22277924 ; N ! Tire force [sx] component, wheel R12
SV_FX_SM_R13 -71.74204021 ; N ! Tire force [sx] component, wheel R13
SV_FX_SM_R14 -81.10794615 ; N ! Tire force [sx] component, wheel R14
SV_FX_SM_R15 -73.47879845 ; N ! Tire force [sx] component, wheel R15
SV_FX_SM_R16 -78.10491429 ; N ! Tire force [sx] component, wheel R16
SV_FX_SM_R17 -86.29877435 ; N ! Tire force [sx] component, wheel R17
SV_FX_SM_R18 -71.62861906 ; N ! Tire force [sx] component, wheel R18
SV_FX_SM_R19 -84.82059627 ; N ! Tire force [sx] component, wheel R19
SV_FX_SM_R2 71.22250897 ; N ! Tire force [sx] component, wheel R2
SV_FX_SM_R20       -0 ; N ! Tire force [sx] component, wheel R20
SV_FX_SM_R21       -0 ; N ! Tire force [sx] component, wheel R21
SV_FX_SM_R22 117.9383383 ; N ! Tire force [sx] component, wheel R22
SV_FX_SM_R23 -127.4230758 ; N ! Tire force [sx] component, wheel R23
SV_FX_SM_R24 61.35384301 ; N ! Tire force [sx] component, wheel R24
SV_FX_SM_R25 733.8602712 ; N ! Tire force [sx] component, wheel R25
SV_FX_SM_R26 -602.4469509 ; N ! Tire force [sx] component, wheel R26
SV_FX_SM_R27 -4779.016542 ; N ! Tire force [sx] component, wheel R27
SV_FX_SM_R28 -284.5892801 ; N ! Tire force [sx] component, wheel R28
SV_FX_SM_R29       -0 ; N ! Tire force [sx] component, wheel R29
SV_FX_SM_R3 953.8433274 ; N ! Tire force [sx] component, wheel R3
SV_FX_SM_R30       -0 ; N ! Tire force [sx] component, wheel R30
SV_FX_SM_R31        0 ; N ! Tire force [sx] component, wheel R31
SV_FX_SM_R32 4685.421106 ; N ! Tire force [sx] component, wheel R32
SV_FX_SM_R33 -3240.836037 ; N ! Tire force [sx] component, wheel R33
SV_FX_SM_R34       -0 ; N ! Tire force [sx] component, wheel R34
SV_FX_SM_R35       -0 ; N ! Tire force [sx] component, wheel R35
SV_FX_SM_R36       -0 ; N ! Tire force [sx] component, wheel R36
SV_FX_SM_R37       -0 ; N ! Tire force [sx] component, wheel R37
SV_FX_SM_R38       -0 ; N ! Tire force [sx] component, wheel R38
SV_FX_SM_R39       -0 ; N ! Tire force [sx] component, wheel R39
SV_FX_SM_R4 942.8246569 ; N ! Tire force [sx] component, wheel R4
SV_FX_SM_R40        0 ; N ! Tire force [sx] component, wheel R40
SV_FX_SM_R41 -39.08637796 ; N ! Tire force [sx] component, wheel R41
SV_FX_SM_R42 -29.49389717 ; N ! Tire force [sx] component, wheel R42
SV_FX_SM_R43 66.93578042 ; N ! Tire force [sx] component, wheel R43
SV_FX_SM_R44 71.30436606 ; N ! Tire force [sx] component, wheel R44
SV_FX_SM_R45 75.93157651 ; N ! Tire force [sx] component, wheel R45
SV_FX_SM_R46 157.0585427 ; N ! Tire force [sx] component, wheel R46
SV_FX_SM_R47 159.8669993 ; N ! Tire force [sx] component, wheel R47
SV_FX_SM_R5 941.3361549 ; N ! Tire force [sx] component, wheel R5
SV_FX_SM_R6 -84.12558935 ; N ! Tire force [sx] component, wheel R6
SV_FX_SM_R7 -84.0311733 ; N ! Tire force [sx] component, wheel R7
SV_FX_SM_R8 -83.97050361 ; N ! Tire force [sx] component, wheel R8
SV_FX_SM_R9 -80.78928048 ; N ! Tire force [sx] component, wheel R9
SV_FY_SM_L1 -124.4881577 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L10 33.67067718 ; N ! Tire force [sy] component, wheel L10
SV_FY_SM_L11 44.92740032 ; N ! Tire force [sy] component, wheel L11
SV_FY_SM_L12 -47.97128525 ; N ! Tire force [sy] component, wheel L12
SV_FY_SM_L13 20.38267347 ; N ! Tire force [sy] component, wheel L13
SV_FY_SM_L14 -71.55825207 ; N ! Tire force [sy] component, wheel L14
SV_FY_SM_L15 -26.94588026 ; N ! Tire force [sy] component, wheel L15
SV_FY_SM_L16 -53.54050048 ; N ! Tire force [sy] component, wheel L16
SV_FY_SM_L17 -119.0937641 ; N ! Tire force [sy] component, wheel L17
SV_FY_SM_L18 21.22774412 ; N ! Tire force [sy] component, wheel L18
SV_FY_SM_L19 -81.52949467 ; N ! Tire force [sy] component, wheel L19
SV_FY_SM_L2 -65.48680862 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_L20        0 ; N ! Tire force [sy] component, wheel L20
SV_FY_SM_L21        0 ; N ! Tire force [sy] component, wheel L21
SV_FY_SM_L22 -84.07395835 ; N ! Tire force [sy] component, wheel L22
SV_FY_SM_L23 -4.89146593 ; N ! Tire force [sy] component, wheel L23
SV_FY_SM_L24 -5.866898691 ; N ! Tire force [sy] component, wheel L24
SV_FY_SM_L25 -17.40528318 ; N ! Tire force [sy] component, wheel L25
SV_FY_SM_L26 -78.87076828 ; N ! Tire force [sy] component, wheel L26
SV_FY_SM_L27 92.57879266 ; N ! Tire force [sy] component, wheel L27
SV_FY_SM_L28 21.68454857 ; N ! Tire force [sy] component, wheel L28
SV_FY_SM_L29        0 ; N ! Tire force [sy] component, wheel L29
SV_FY_SM_L3 -0.08535811116 ; N ! Tire force [sy] component, wheel L3
SV_FY_SM_L30        0 ; N ! Tire force [sy] component, wheel L30
SV_FY_SM_L31        0 ; N ! Tire force [sy] component, wheel L31
SV_FY_SM_L32 -17.37639847 ; N ! Tire force [sy] component, wheel L32
SV_FY_SM_L33 -342.5859991 ; N ! Tire force [sy] component, wheel L33
SV_FY_SM_L34        0 ; N ! Tire force [sy] component, wheel L34
SV_FY_SM_L35        0 ; N ! Tire force [sy] component, wheel L35
SV_FY_SM_L36        0 ; N ! Tire force [sy] component, wheel L36
SV_FY_SM_L37        0 ; N ! Tire force [sy] component, wheel L37
SV_FY_SM_L38        0 ; N ! Tire force [sy] component, wheel L38
SV_FY_SM_L39        0 ; N ! Tire force [sy] component, wheel L39
SV_FY_SM_L4 2.18155218 ; N ! Tire force [sy] component, wheel L4
SV_FY_SM_L40        0 ; N ! Tire force [sy] component, wheel L40
SV_FY_SM_L41 -0.01790126638 ; N ! Tire force [sy] component, wheel L41
SV_FY_SM_L42 15.26025455 ; N ! Tire force [sy] component, wheel L42
SV_FY_SM_L43 23.66083261 ; N ! Tire force [sy] component, wheel L43
SV_FY_SM_L44 29.30779568 ; N ! Tire force [sy] component, wheel L44
SV_FY_SM_L45 35.63731682 ; N ! Tire force [sy] component, wheel L45
SV_FY_SM_L46 50.03412584 ; N ! Tire force [sy] component, wheel L46
SV_FY_SM_L47 56.99121755 ; N ! Tire force [sy] component, wheel L47
SV_FY_SM_L5 4.18174168 ; N ! Tire force [sy] component, wheel L5
SV_FY_SM_L6 27.94606101 ; N ! Tire force [sy] component, wheel L6
SV_FY_SM_L7 26.3455561 ; N ! Tire force [sy] component, wheel L7
SV_FY_SM_L8 24.70725617 ; N ! Tire force [sy] component, wheel L8
SV_FY_SM_L9 19.74394026 ; N ! Tire force [sy] component, wheel L9
SV_FY_SM_R1 50.81551275 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R10 31.456186 ; N ! Tire force [sy] component, wheel R10
SV_FY_SM_R11 41.12078988 ; N ! Tire force [sy] component, wheel R11
SV_FY_SM_R12 -53.21048627 ; N ! Tire force [sy] component, wheel R12
SV_FY_SM_R13 16.72984289 ; N ! Tire force [sy] component, wheel R13
SV_FY_SM_R14 -89.9998965 ; N ! Tire force [sy] component, wheel R14
SV_FY_SM_R15 -28.55301013 ; N ! Tire force [sy] component, wheel R15
SV_FY_SM_R16 -58.5762791 ; N ! Tire force [sy] component, wheel R16
SV_FY_SM_R17 -170.4583743 ; N ! Tire force [sy] component, wheel R17
SV_FY_SM_R18 2.790251678 ; N ! Tire force [sy] component, wheel R18
SV_FY_SM_R19 -279.5542944 ; N ! Tire force [sy] component, wheel R19
SV_FY_SM_R2 100.799604 ; N ! Tire force [sy] component, wheel R2
SV_FY_SM_R20        0 ; N ! Tire force [sy] component, wheel R20
SV_FY_SM_R21        0 ; N ! Tire force [sy] component, wheel R21
SV_FY_SM_R22 -104.1581915 ; N ! Tire force [sy] component, wheel R22
SV_FY_SM_R23 -7.655296884 ; N ! Tire force [sy] component, wheel R23
SV_FY_SM_R24 -6.403638426 ; N ! Tire force [sy] component, wheel R24
SV_FY_SM_R25 -17.61106837 ; N ! Tire force [sy] component, wheel R25
SV_FY_SM_R26 -78.87910814 ; N ! Tire force [sy] component, wheel R26
SV_FY_SM_R27 77.65632149 ; N ! Tire force [sy] component, wheel R27
SV_FY_SM_R28 14.08216385 ; N ! Tire force [sy] component, wheel R28
SV_FY_SM_R29        0 ; N ! Tire force [sy] component, wheel R29
SV_FY_SM_R3 -0.11281001 ; N ! Tire force [sy] component, wheel R3
SV_FY_SM_R30       -0 ; N ! Tire force [sy] component, wheel R30
SV_FY_SM_R31       -0 ; N ! Tire force [sy] component, wheel R31
SV_FY_SM_R32 -23.16366463 ; N ! Tire force [sy] component, wheel R32
SV_FY_SM_R33 -407.4199561 ; N ! Tire force [sy] component, wheel R33
SV_FY_SM_R34        0 ; N ! Tire force [sy] component, wheel R34
SV_FY_SM_R35        0 ; N ! Tire force [sy] component, wheel R35
SV_FY_SM_R36        0 ; N ! Tire force [sy] component, wheel R36
SV_FY_SM_R37        0 ; N ! Tire force [sy] component, wheel R37
SV_FY_SM_R38        0 ; N ! Tire force [sy] component, wheel R38
SV_FY_SM_R39        0 ; N ! Tire force [sy] component, wheel R39
SV_FY_SM_R4 2.158094183 ; N ! Tire force [sy] component, wheel R4
SV_FY_SM_R40       -0 ; N ! Tire force [sy] component, wheel R40
SV_FY_SM_R41 -78.76589706 ; N ! Tire force [sy] component, wheel R41
SV_FY_SM_R42 9.589412588 ; N ! Tire force [sy] component, wheel R42
SV_FY_SM_R43 23.38078028 ; N ! Tire force [sy] component, wheel R43
SV_FY_SM_R44 28.96738143 ; N ! Tire force [sy] component, wheel R44
SV_FY_SM_R45 35.19612931 ; N ! Tire force [sy] component, wheel R45
SV_FY_SM_R46 49.64265509 ; N ! Tire force [sy] component, wheel R46
SV_FY_SM_R47 56.53456585 ; N ! Tire force [sy] component, wheel R47
SV_FY_SM_R5 4.158505902 ; N ! Tire force [sy] component, wheel R5
SV_FY_SM_R6 27.05283502 ; N ! Tire force [sy] component, wheel R6
SV_FY_SM_R7 25.45971762 ; N ! Tire force [sy] component, wheel R7
SV_FY_SM_R8 23.82441161 ; N ! Tire force [sy] component, wheel R8
SV_FY_SM_R9 18.53818228 ; N ! Tire force [sy] component, wheel R9
SV_FZ_SM_L1 14652.07513 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L10 11242.75204 ; N ! Tire force force [sz] component, wheel L10
SV_FZ_SM_L11 10148.89134 ; N ! Tire force force [sz] component, wheel L11
SV_FZ_SM_L12 9411.380728 ; N ! Tire force force [sz] component, wheel L12
SV_FZ_SM_L13 9332.409165 ; N ! Tire force force [sz] component, wheel L13
SV_FZ_SM_L14 9418.693585 ; N ! Tire force force [sz] component, wheel L14
SV_FZ_SM_L15 9536.084256 ; N ! Tire force force [sz] component, wheel L15
SV_FZ_SM_L16 9447.906475 ; N ! Tire force force [sz] component, wheel L16
SV_FZ_SM_L17 9879.678952 ; N ! Tire force force [sz] component, wheel L17
SV_FZ_SM_L18 9452.39459 ; N ! Tire force force [sz] component, wheel L18
SV_FZ_SM_L19 6412.749259 ; N ! Tire force force [sz] component, wheel L19
SV_FZ_SM_L2 14589.54683 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_L20        0 ; N ! Tire force force [sz] component, wheel L20
SV_FZ_SM_L21        0 ; N ! Tire force force [sz] component, wheel L21
SV_FZ_SM_L22 1093.510225 ; N ! Tire force force [sz] component, wheel L22
SV_FZ_SM_L23 5430.79178 ; N ! Tire force force [sz] component, wheel L23
SV_FZ_SM_L24 3710.227781 ; N ! Tire force force [sz] component, wheel L24
SV_FZ_SM_L25 4787.816887 ; N ! Tire force force [sz] component, wheel L25
SV_FZ_SM_L26 18024.46393 ; N ! Tire force force [sz] component, wheel L26
SV_FZ_SM_L27 24778.47842 ; N ! Tire force force [sz] component, wheel L27
SV_FZ_SM_L28 18574.63174 ; N ! Tire force force [sz] component, wheel L28
SV_FZ_SM_L29        0 ; N ! Tire force force [sz] component, wheel L29
SV_FZ_SM_L3 5796.449018 ; N ! Tire force force [sz] component, wheel L3
SV_FZ_SM_L30       -0 ; N ! Tire force force [sz] component, wheel L30
SV_FZ_SM_L31        0 ; N ! Tire force force [sz] component, wheel L31
SV_FZ_SM_L32 42719.00793 ; N ! Tire force force [sz] component, wheel L32
SV_FZ_SM_L33 23931.20591 ; N ! Tire force force [sz] component, wheel L33
SV_FZ_SM_L34        0 ; N ! Tire force force [sz] component, wheel L34
SV_FZ_SM_L35        0 ; N ! Tire force force [sz] component, wheel L35
SV_FZ_SM_L36        0 ; N ! Tire force force [sz] component, wheel L36
SV_FZ_SM_L37        0 ; N ! Tire force force [sz] component, wheel L37
SV_FZ_SM_L38        0 ; N ! Tire force force [sz] component, wheel L38
SV_FZ_SM_L39        0 ; N ! Tire force force [sz] component, wheel L39
SV_FZ_SM_L4 5574.396536 ; N ! Tire force force [sz] component, wheel L4
SV_FZ_SM_L40        0 ; N ! Tire force force [sz] component, wheel L40
SV_FZ_SM_L41 15.91593673 ; N ! Tire force force [sz] component, wheel L41
SV_FZ_SM_L42 1417.476298 ; N ! Tire force force [sz] component, wheel L42
SV_FZ_SM_L43 9650.233415 ; N ! Tire force force [sz] component, wheel L43
SV_FZ_SM_L44 10142.56749 ; N ! Tire force force [sz] component, wheel L44
SV_FZ_SM_L45 10637.91551 ; N ! Tire force force [sz] component, wheel L45
SV_FZ_SM_L46 18435.45252 ; N ! Tire force force [sz] component, wheel L46
SV_FZ_SM_L47 18715.8298 ; N ! Tire force force [sz] component, wheel L47
SV_FZ_SM_L5 5353.07052 ; N ! Tire force force [sz] component, wheel L5
SV_FZ_SM_L6 11254.04492 ; N ! Tire force force [sz] component, wheel L6
SV_FZ_SM_L7 11274.71632 ; N ! Tire force force [sz] component, wheel L7
SV_FZ_SM_L8 11295.51912 ; N ! Tire force force [sz] component, wheel L8
SV_FZ_SM_L9 10743.6246 ; N ! Tire force force [sz] component, wheel L9
SV_FZ_SM_R1 14666.82912 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R10 10820.45052 ; N ! Tire force force [sz] component, wheel R10
SV_FZ_SM_R11 9527.679131 ; N ! Tire force force [sz] component, wheel R11
SV_FZ_SM_R12 10023.45227 ; N ! Tire force force [sz] component, wheel R12
SV_FZ_SM_R13 9111.614018 ; N ! Tire force force [sz] component, wheel R13
SV_FZ_SM_R14 10512.59614 ; N ! Tire force force [sz] component, wheel R14
SV_FZ_SM_R15 9746.488791 ; N ! Tire force force [sz] component, wheel R15
SV_FZ_SM_R16 9989.336487 ; N ! Tire force force [sz] component, wheel R16
SV_FZ_SM_R17 11718.28491 ; N ! Tire force force [sz] component, wheel R17
SV_FZ_SM_R18 9194.135724 ; N ! Tire force force [sz] component, wheel R18
SV_FZ_SM_R19 9245.134749 ; N ! Tire force force [sz] component, wheel R19
SV_FZ_SM_R2 14652.80739 ; N ! Tire force force [sz] component, wheel R2
SV_FZ_SM_R20        0 ; N ! Tire force force [sz] component, wheel R20
SV_FZ_SM_R21        0 ; N ! Tire force force [sz] component, wheel R21
SV_FZ_SM_R22 2168.237039 ; N ! Tire force force [sz] component, wheel R22
SV_FZ_SM_R23 5666.066006 ; N ! Tire force force [sz] component, wheel R23
SV_FZ_SM_R24 3736.138067 ; N ! Tire force force [sz] component, wheel R24
SV_FZ_SM_R25 4779.039012 ; N ! Tire force force [sz] component, wheel R25
SV_FZ_SM_R26 18054.39587 ; N ! Tire force force [sz] component, wheel R26
SV_FZ_SM_R27 24606.01458 ; N ! Tire force force [sz] component, wheel R27
SV_FZ_SM_R28 19012.94655 ; N ! Tire force force [sz] component, wheel R28
SV_FZ_SM_R29        0 ; N ! Tire force force [sz] component, wheel R29
SV_FZ_SM_R3 5800.576922 ; N ! Tire force force [sz] component, wheel R3
SV_FZ_SM_R30       -0 ; N ! Tire force force [sz] component, wheel R30
SV_FZ_SM_R31        0 ; N ! Tire force force [sz] component, wheel R31
SV_FZ_SM_R32 42206.70117 ; N ! Tire force force [sz] component, wheel R32
SV_FZ_SM_R33 24270.14046 ; N ! Tire force force [sz] component, wheel R33
SV_FZ_SM_R34        0 ; N ! Tire force force [sz] component, wheel R34
SV_FZ_SM_R35        0 ; N ! Tire force force [sz] component, wheel R35
SV_FZ_SM_R36        0 ; N ! Tire force force [sz] component, wheel R36
SV_FZ_SM_R37        0 ; N ! Tire force force [sz] component, wheel R37
SV_FZ_SM_R38        0 ; N ! Tire force force [sz] component, wheel R38
SV_FZ_SM_R39        0 ; N ! Tire force force [sz] component, wheel R39
SV_FZ_SM_R4 5578.699266 ; N ! Tire force force [sz] component, wheel R4
SV_FZ_SM_R40        0 ; N ! Tire force force [sz] component, wheel R40
SV_FZ_SM_R41 2307.930176 ; N ! Tire force force [sz] component, wheel R41
SV_FZ_SM_R42 997.88642 ; N ! Tire force force [sz] component, wheel R42
SV_FZ_SM_R43 9573.566012 ; N ! Tire force force [sz] component, wheel R43
SV_FZ_SM_R44 10066.64896 ; N ! Tire force force [sz] component, wheel R44
SV_FZ_SM_R45 10556.71915 ; N ! Tire force force [sz] component, wheel R45
SV_FZ_SM_R46 18354.25037 ; N ! Tire force force [sz] component, wheel R46
SV_FZ_SM_R47 18637.80594 ; N ! Tire force force [sz] component, wheel R47
SV_FZ_SM_R5 5356.091981 ; N ! Tire force force [sz] component, wheel R5
SV_FZ_SM_R6 10998.9177 ; N ! Tire force force [sz] component, wheel R6
SV_FZ_SM_R7 11011.86097 ; N ! Tire force force [sz] component, wheel R7
SV_FZ_SM_R8 11025.36549 ; N ! Tire force force [sz] component, wheel R8
SV_FZ_SM_R9 10538.75223 ; N ! Tire force force [sz] component, wheel R9
SV_F_HYS_RACK_A1    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A10   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A11   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A12   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A13   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A14   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A15   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A16   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A17   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A18   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A19   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A20   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A21   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A22   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A23   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A24   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A25   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A26   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A27   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A28   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A29   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A3    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A30   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A31   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A32   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A33   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A34   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A35   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A36   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A37   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A38   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A39   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A4    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A40   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A41   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A42   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A43   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A44   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A45   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A46   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A47   0 ; N ! Friction force at rack
SV_F_HYS_RACK_A5    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A6    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A7    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A8    0 ; N ! Friction force at rack
SV_F_HYS_RACK_A9    0 ; N ! Friction force at rack
SV_GEAR             6 ; - ! Automatic transmission gear {GearAuto}
SV_GEAR_DELAY       6 ; - ! Delayed transmission gear position
SV_GEAR_MEM         6 ; - ! Gear saved in memory, used for transition
SV_GEAR_STAT        6 ; - ! Transmission gear status {GearStat}
SV_IVERR -0.1928731641 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_I_GEAR_SHIFT   0.2 ; kg-m2 ! Transmission gear inertia modulated by shift
SV_I_GEAR_SHIFT_START 0 ; kg-m2 ! Gear spin inertia when automatic shift started
SV_JNCR_A1 0.0005058960658 ; m/s ! ODE: Jounce rate of axle 1
SV_JNCR_A10 0.06124154227 ; m/s ! ODE: Jounce rate of axle 10
SV_JNCR_A11 0.04510971484 ; m/s ! ODE: Jounce rate of axle 11
SV_JNCR_A12 0.07226157875 ; m/s ! ODE: Jounce rate of axle 12
SV_JNCR_A13 0.1261973178 ; m/s ! ODE: Jounce rate of axle 13
SV_JNCR_A14 0.1362097235 ; m/s ! ODE: Jounce rate of axle 14
SV_JNCR_A15 0.0881873926 ; m/s ! ODE: Jounce rate of axle 15
SV_JNCR_A16 0.184256666 ; m/s ! ODE: Jounce rate of axle 16
SV_JNCR_A17 0.1266902704 ; m/s ! ODE: Jounce rate of axle 17
SV_JNCR_A18 0.08903981896 ; m/s ! ODE: Jounce rate of axle 18
SV_JNCR_A19 0.03629948823 ; m/s ! ODE: Jounce rate of axle 19
SV_JNCR_A2 -0.003648193312 ; m/s ! ODE: Jounce rate of axle 2
SV_JNCR_A20 -0.06292725685 ; m/s ! ODE: Jounce rate of axle 20
SV_JNCR_A21 -0.05737956832 ; m/s ! ODE: Jounce rate of axle 21
SV_JNCR_A22 -0.04204878029 ; m/s ! ODE: Jounce rate of axle 22
SV_JNCR_A23 0.1529482264 ; m/s ! ODE: Jounce rate of axle 23
SV_JNCR_A24 -0.2357347529 ; m/s ! ODE: Jounce rate of axle 24
SV_JNCR_A25 -0.8900132111 ; m/s ! ODE: Jounce rate of axle 25
SV_JNCR_A26 -0.2939999868 ; m/s ! ODE: Jounce rate of axle 26
SV_JNCR_A27 -0.09269593768 ; m/s ! ODE: Jounce rate of axle 27
SV_JNCR_A28 -0.8746894908 ; m/s ! ODE: Jounce rate of axle 28
SV_JNCR_A29 0.4178514266 ; m/s ! ODE: Jounce rate of axle 29
SV_JNCR_A3 -0.01077687777 ; m/s ! ODE: Jounce rate of axle 3
SV_JNCR_A30 0.345122727 ; m/s ! ODE: Jounce rate of axle 30
SV_JNCR_A31 -0.2903645234 ; m/s ! ODE: Jounce rate of axle 31
SV_JNCR_A32 -0.7281431335 ; m/s ! ODE: Jounce rate of axle 32
SV_JNCR_A33 -0.6003640233 ; m/s ! ODE: Jounce rate of axle 33
SV_JNCR_A34 -0.1729579582 ; m/s ! ODE: Jounce rate of axle 34
SV_JNCR_A35 -0.1539056809 ; m/s ! ODE: Jounce rate of axle 35
SV_JNCR_A36 -0.1358009713 ; m/s ! ODE: Jounce rate of axle 36
SV_JNCR_A37 -0.06797887676 ; m/s ! ODE: Jounce rate of axle 37
SV_JNCR_A38 -0.04292339178 ; m/s ! ODE: Jounce rate of axle 38
SV_JNCR_A39 -0.06986294036 ; m/s ! ODE: Jounce rate of axle 39
SV_JNCR_A4 -0.01504424746 ; m/s ! ODE: Jounce rate of axle 4
SV_JNCR_A40 -0.03845776108 ; m/s ! ODE: Jounce rate of axle 40
SV_JNCR_A41 -0.07678155396 ; m/s ! ODE: Jounce rate of axle 41
SV_JNCR_A42 -0.03043474026 ; m/s ! ODE: Jounce rate of axle 42
SV_JNCR_A43 -0.003737526869 ; m/s ! ODE: Jounce rate of axle 43
SV_JNCR_A44 0.03052805244 ; m/s ! ODE: Jounce rate of axle 44
SV_JNCR_A45 0.06479366016 ; m/s ! ODE: Jounce rate of axle 45
SV_JNCR_A46 0.07948320079 ; m/s ! ODE: Jounce rate of axle 46
SV_JNCR_A47 0.114529763 ; m/s ! ODE: Jounce rate of axle 47
SV_JNCR_A5 -0.01931164033 ; m/s ! ODE: Jounce rate of axle 5
SV_JNCR_A6 0.008534268439 ; m/s ! ODE: Jounce rate of axle 6
SV_JNCR_A7 0.02126968977 ; m/s ! ODE: Jounce rate of axle 7
SV_JNCR_A8 0.03400132708 ; m/s ! ODE: Jounce rate of axle 8
SV_JNCR_A9 0.05748823542 ; m/s ! ODE: Jounce rate of axle 9
SV_JNC_A1 -0.007422760341 ; m ! ODE: Jounce of axle 1
SV_JNC_A10 0.01537465852 ; m ! ODE: Jounce of axle 10
SV_JNC_A11 0.01516592669 ; m ! ODE: Jounce of axle 11
SV_JNC_A12 0.01443136646 ; m ! ODE: Jounce of axle 12
SV_JNC_A13 0.0139015062 ; m ! ODE: Jounce of axle 13
SV_JNC_A14 0.01271717195 ; m ! ODE: Jounce of axle 14
SV_JNC_A15 0.01204881926 ; m ! ODE: Jounce of axle 15
SV_JNC_A16 0.01124770594 ; m ! ODE: Jounce of axle 16
SV_JNC_A17 0.009857609663 ; m ! ODE: Jounce of axle 17
SV_JNC_A18 0.009782249257 ; m ! ODE: Jounce of axle 18
SV_JNC_A19 0.009708656843 ; m ! ODE: Jounce of axle 19
SV_JNC_A2 0.0007124935997 ; m ! ODE: Jounce of axle 2
SV_JNC_A20 -0.01175487535 ; m ! ODE: Jounce of axle 20
SV_JNC_A21 -0.02508711618 ; m ! ODE: Jounce of axle 21
SV_JNC_A22 -0.04301014341 ; m ! ODE: Jounce of axle 22
SV_JNC_A23 -0.0567388967 ; m ! ODE: Jounce of axle 23
SV_JNC_A24 -0.06337434394 ; m ! ODE: Jounce of axle 24
SV_JNC_A25 0.1005192371 ; m ! ODE: Jounce of axle 25
SV_JNC_A26 0.2004951957 ; m ! ODE: Jounce of axle 26
SV_JNC_A27 0.04317848837 ; m ! ODE: Jounce of axle 27
SV_JNC_A28 -0.1225579504 ; m ! ODE: Jounce of axle 28
SV_JNC_A29 -0.02372137927 ; m ! ODE: Jounce of axle 29
SV_JNC_A3 -0.004352187279 ; m ! ODE: Jounce of axle 3
SV_JNC_A30 -0.0575080039 ; m ! ODE: Jounce of axle 30
SV_JNC_A31 0.01410786614 ; m ! ODE: Jounce of axle 31
SV_JNC_A32 0.07645124169 ; m ! ODE: Jounce of axle 32
SV_JNC_A33 0.08274349058 ; m ! ODE: Jounce of axle 33
SV_JNC_A34 -0.03339095155 ; m ! ODE: Jounce of axle 34
SV_JNC_A35 -0.02796732675 ; m ! ODE: Jounce of axle 35
SV_JNC_A36 -0.02254987789 ; m ! ODE: Jounce of axle 36
SV_JNC_A37 -0.03944934503 ; m ! ODE: Jounce of axle 37
SV_JNC_A38 -0.03525040375 ; m ! ODE: Jounce of axle 38
SV_JNC_A39 -0.005876436935 ; m ! ODE: Jounce of axle 39
SV_JNC_A4 0.003856938489 ; m ! ODE: Jounce of axle 4
SV_JNC_A40 -0.03558682581 ; m ! ODE: Jounce of axle 40
SV_JNC_A41 -0.02662844177 ; m ! ODE: Jounce of axle 41
SV_JNC_A42 -0.01303287912 ; m ! ODE: Jounce of axle 42
SV_JNC_A43 -0.003662424819 ; m ! ODE: Jounce of axle 43
SV_JNC_A44 0.009748834209 ; m ! ODE: Jounce of axle 44
SV_JNC_A45 0.02316009325 ; m ! ODE: Jounce of axle 45
SV_JNC_A46 0.03283409064 ; m ! ODE: Jounce of axle 46
SV_JNC_A47 0.04635327443 ; m ! ODE: Jounce of axle 47
SV_JNC_A5 0.01206602928 ; m ! ODE: Jounce of axle 5
SV_JNC_A6 0.01853894461 ; m ! ODE: Jounce of axle 6
SV_JNC_A7 0.01772699293 ; m ! ODE: Jounce of axle 7
SV_JNC_A8 0.01691486256 ; m ! ODE: Jounce of axle 8
SV_JNC_A9 0.01638181011 ; m ! ODE: Jounce of axle 9
SV_LK_WHL_L1        0 ; - ! Lockup state for wheel L1
SV_LK_WHL_L10       0 ; - ! Lockup state for wheel L10
SV_LK_WHL_L11       0 ; - ! Lockup state for wheel L11
SV_LK_WHL_L12       0 ; - ! Lockup state for wheel L12
SV_LK_WHL_L13       0 ; - ! Lockup state for wheel L13
SV_LK_WHL_L14       0 ; - ! Lockup state for wheel L14
SV_LK_WHL_L15       0 ; - ! Lockup state for wheel L15
SV_LK_WHL_L16       0 ; - ! Lockup state for wheel L16
SV_LK_WHL_L17       0 ; - ! Lockup state for wheel L17
SV_LK_WHL_L18       0 ; - ! Lockup state for wheel L18
SV_LK_WHL_L19       0 ; - ! Lockup state for wheel L19
SV_LK_WHL_L2        0 ; - ! Lockup state for wheel L2
SV_LK_WHL_L20       0 ; - ! Lockup state for wheel L20
SV_LK_WHL_L21       0 ; - ! Lockup state for wheel L21
SV_LK_WHL_L22       0 ; - ! Lockup state for wheel L22
SV_LK_WHL_L23       0 ; - ! Lockup state for wheel L23
SV_LK_WHL_L24       0 ; - ! Lockup state for wheel L24
SV_LK_WHL_L25       0 ; - ! Lockup state for wheel L25
SV_LK_WHL_L26       0 ; - ! Lockup state for wheel L26
SV_LK_WHL_L27       0 ; - ! Lockup state for wheel L27
SV_LK_WHL_L28       0 ; - ! Lockup state for wheel L28
SV_LK_WHL_L29       0 ; - ! Lockup state for wheel L29
SV_LK_WHL_L3        0 ; - ! Lockup state for wheel L3
SV_LK_WHL_L30       0 ; - ! Lockup state for wheel L30
SV_LK_WHL_L31       0 ; - ! Lockup state for wheel L31
SV_LK_WHL_L32       0 ; - ! Lockup state for wheel L32
SV_LK_WHL_L33       0 ; - ! Lockup state for wheel L33
SV_LK_WHL_L34       0 ; - ! Lockup state for wheel L34
SV_LK_WHL_L35       0 ; - ! Lockup state for wheel L35
SV_LK_WHL_L36       0 ; - ! Lockup state for wheel L36
SV_LK_WHL_L37       0 ; - ! Lockup state for wheel L37
SV_LK_WHL_L38       0 ; - ! Lockup state for wheel L38
SV_LK_WHL_L39       0 ; - ! Lockup state for wheel L39
SV_LK_WHL_L4        0 ; - ! Lockup state for wheel L4
SV_LK_WHL_L40       0 ; - ! Lockup state for wheel L40
SV_LK_WHL_L41       0 ; - ! Lockup state for wheel L41
SV_LK_WHL_L42       0 ; - ! Lockup state for wheel L42
SV_LK_WHL_L43       0 ; - ! Lockup state for wheel L43
SV_LK_WHL_L44       0 ; - ! Lockup state for wheel L44
SV_LK_WHL_L45       0 ; - ! Lockup state for wheel L45
SV_LK_WHL_L46       0 ; - ! Lockup state for wheel L46
SV_LK_WHL_L47       0 ; - ! Lockup state for wheel L47
SV_LK_WHL_L5        0 ; - ! Lockup state for wheel L5
SV_LK_WHL_L6        0 ; - ! Lockup state for wheel L6
SV_LK_WHL_L7        0 ; - ! Lockup state for wheel L7
SV_LK_WHL_L8        0 ; - ! Lockup state for wheel L8
SV_LK_WHL_L9        0 ; - ! Lockup state for wheel L9
SV_LK_WHL_R1        0 ; - ! Lockup state for wheel R1
SV_LK_WHL_R10       0 ; - ! Lockup state for wheel R10
SV_LK_WHL_R11       0 ; - ! Lockup state for wheel R11
SV_LK_WHL_R12       0 ; - ! Lockup state for wheel R12
SV_LK_WHL_R13       0 ; - ! Lockup state for wheel R13
SV_LK_WHL_R14       0 ; - ! Lockup state for wheel R14
SV_LK_WHL_R15       0 ; - ! Lockup state for wheel R15
SV_LK_WHL_R16       0 ; - ! Lockup state for wheel R16
SV_LK_WHL_R17       0 ; - ! Lockup state for wheel R17
SV_LK_WHL_R18       0 ; - ! Lockup state for wheel R18
SV_LK_WHL_R19       0 ; - ! Lockup state for wheel R19
SV_LK_WHL_R2        0 ; - ! Lockup state for wheel R2
SV_LK_WHL_R20       0 ; - ! Lockup state for wheel R20
SV_LK_WHL_R21       0 ; - ! Lockup state for wheel R21
SV_LK_WHL_R22       0 ; - ! Lockup state for wheel R22
SV_LK_WHL_R23       0 ; - ! Lockup state for wheel R23
SV_LK_WHL_R24       0 ; - ! Lockup state for wheel R24
SV_LK_WHL_R25       0 ; - ! Lockup state for wheel R25
SV_LK_WHL_R26       0 ; - ! Lockup state for wheel R26
SV_LK_WHL_R27       0 ; - ! Lockup state for wheel R27
SV_LK_WHL_R28       0 ; - ! Lockup state for wheel R28
SV_LK_WHL_R29       0 ; - ! Lockup state for wheel R29
SV_LK_WHL_R3        0 ; - ! Lockup state for wheel R3
SV_LK_WHL_R30       0 ; - ! Lockup state for wheel R30
SV_LK_WHL_R31       0 ; - ! Lockup state for wheel R31
SV_LK_WHL_R32       0 ; - ! Lockup state for wheel R32
SV_LK_WHL_R33       0 ; - ! Lockup state for wheel R33
SV_LK_WHL_R34       0 ; - ! Lockup state for wheel R34
SV_LK_WHL_R35       0 ; - ! Lockup state for wheel R35
SV_LK_WHL_R36       0 ; - ! Lockup state for wheel R36
SV_LK_WHL_R37       0 ; - ! Lockup state for wheel R37
SV_LK_WHL_R38       0 ; - ! Lockup state for wheel R38
SV_LK_WHL_R39       0 ; - ! Lockup state for wheel R39
SV_LK_WHL_R4        0 ; - ! Lockup state for wheel R4
SV_LK_WHL_R40       0 ; - ! Lockup state for wheel R40
SV_LK_WHL_R41       0 ; - ! Lockup state for wheel R41
SV_LK_WHL_R42       0 ; - ! Lockup state for wheel R42
SV_LK_WHL_R43       0 ; - ! Lockup state for wheel R43
SV_LK_WHL_R44       0 ; - ! Lockup state for wheel R44
SV_LK_WHL_R45       0 ; - ! Lockup state for wheel R45
SV_LK_WHL_R46       0 ; - ! Lockup state for wheel R46
SV_LK_WHL_R47       0 ; - ! Lockup state for wheel R47
SV_LK_WHL_R5        0 ; - ! Lockup state for wheel R5
SV_LK_WHL_R6        0 ; - ! Lockup state for wheel R6
SV_LK_WHL_R7        0 ; - ! Lockup state for wheel R7
SV_LK_WHL_R8        0 ; - ! Lockup state for wheel R8
SV_LK_WHL_R9        0 ; - ! Lockup state for wheel R9
SV_LOCKED_CLUTCH_NEUTRAL 0 ; - ! Is clutch locked while in neutral?
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MX_H1 -517.8984351 ; N-m ! Roll moment, hitch 1
SV_MX_H2 -414.4483119 ; N-m ! Roll moment, hitch 2
SV_MX_H3  16.98730656 ; N-m ! Roll moment, hitch 3
SV_MY_BRK_L1 -16.85637108 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L10 12.17814478 ; N-m ! Spin moment, wheel L10
SV_MY_BRK_L11 10.49977983 ; N-m ! Spin moment, wheel L11
SV_MY_BRK_L12 10.37126879 ; N-m ! Spin moment, wheel L12
SV_MY_BRK_L13 11.05488634 ; N-m ! Spin moment, wheel L13
SV_MY_BRK_L14 11.24282996 ; N-m ! Spin moment, wheel L14
SV_MY_BRK_L15 9.827582258 ; N-m ! Spin moment, wheel L15
SV_MY_BRK_L16 11.85809149 ; N-m ! Spin moment, wheel L16
SV_MY_BRK_L17 9.800619094 ; N-m ! Spin moment, wheel L17
SV_MY_BRK_L18 10.43257155 ; N-m ! Spin moment, wheel L18
SV_MY_BRK_L19 7.181132729 ; N-m ! Spin moment, wheel L19
SV_MY_BRK_L2 -17.19757231 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_L20       0 ; N-m ! Spin moment, wheel L20
SV_MY_BRK_L21       0 ; N-m ! Spin moment, wheel L21
SV_MY_BRK_L22 -8.142916726 ; N-m ! Spin moment, wheel L22
SV_MY_BRK_L23 19.3516866 ; N-m ! Spin moment, wheel L23
SV_MY_BRK_L24 22.81995881 ; N-m ! Spin moment, wheel L24
SV_MY_BRK_L25 9.651579926 ; N-m ! Spin moment, wheel L25
SV_MY_BRK_L26 29.79096587 ; N-m ! Spin moment, wheel L26
SV_MY_BRK_L27 -242.417208 ; N-m ! Spin moment, wheel L27
SV_MY_BRK_L28 -139.428636 ; N-m ! Spin moment, wheel L28
SV_MY_BRK_L29       0 ; N-m ! Spin moment, wheel L29
SV_MY_BRK_L3 -477.6534123 ; N-m ! Spin moment, wheel L3
SV_MY_BRK_L30       0 ; N-m ! Spin moment, wheel L30
SV_MY_BRK_L31       0 ; N-m ! Spin moment, wheel L31
SV_MY_BRK_L32 -218.6092893 ; N-m ! Spin moment, wheel L32
SV_MY_BRK_L33 -65.65068835 ; N-m ! Spin moment, wheel L33
SV_MY_BRK_L34       0 ; N-m ! Spin moment, wheel L34
SV_MY_BRK_L35       0 ; N-m ! Spin moment, wheel L35
SV_MY_BRK_L36       0 ; N-m ! Spin moment, wheel L36
SV_MY_BRK_L37       0 ; N-m ! Spin moment, wheel L37
SV_MY_BRK_L38       0 ; N-m ! Spin moment, wheel L38
SV_MY_BRK_L39       0 ; N-m ! Spin moment, wheel L39
SV_MY_BRK_L4 -472.2604724 ; N-m ! Spin moment, wheel L4
SV_MY_BRK_L40       0 ; N-m ! Spin moment, wheel L40
SV_MY_BRK_L41 0.217029982 ; N-m ! Spin moment, wheel L41
SV_MY_BRK_L42 27.81533731 ; N-m ! Spin moment, wheel L42
SV_MY_BRK_L43 0.2186472674 ; N-m ! Spin moment, wheel L43
SV_MY_BRK_L44 -0.4467102549 ; N-m ! Spin moment, wheel L44
SV_MY_BRK_L45 -0.9140469515 ; N-m ! Spin moment, wheel L45
SV_MY_BRK_L46 -15.47843927 ; N-m ! Spin moment, wheel L46
SV_MY_BRK_L47 -15.58517453 ; N-m ! Spin moment, wheel L47
SV_MY_BRK_L5 -471.7335232 ; N-m ! Spin moment, wheel L5
SV_MY_BRK_L6 12.95255223 ; N-m ! Spin moment, wheel L6
SV_MY_BRK_L7 12.87029579 ; N-m ! Spin moment, wheel L7
SV_MY_BRK_L8 12.80016672 ; N-m ! Spin moment, wheel L8
SV_MY_BRK_L9 12.22794364 ; N-m ! Spin moment, wheel L9
SV_MY_BRK_R1 -16.00229527 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R10 13.19781839 ; N-m ! Spin moment, wheel R10
SV_MY_BRK_R11 11.64250461 ; N-m ! Spin moment, wheel R11
SV_MY_BRK_R12 12.41703613 ; N-m ! Spin moment, wheel R12
SV_MY_BRK_R13 12.53822837 ; N-m ! Spin moment, wheel R13
SV_MY_BRK_R14 13.61756543 ; N-m ! Spin moment, wheel R14
SV_MY_BRK_R15 11.74850577 ; N-m ! Spin moment, wheel R15
SV_MY_BRK_R16 13.46696523 ; N-m ! Spin moment, wheel R16
SV_MY_BRK_R17 13.08298484 ; N-m ! Spin moment, wheel R17
SV_MY_BRK_R18 12.26265176 ; N-m ! Spin moment, wheel R18
SV_MY_BRK_R19 18.85757711 ; N-m ! Spin moment, wheel R19
SV_MY_BRK_R2 -14.9340903 ; N-m ! Spin moment, wheel R2
SV_MY_BRK_R20      -0 ; N-m ! Spin moment, wheel R20
SV_MY_BRK_R21      -0 ; N-m ! Spin moment, wheel R21
SV_MY_BRK_R22 -76.01228194 ; N-m ! Spin moment, wheel R22
SV_MY_BRK_R23 23.50834256 ; N-m ! Spin moment, wheel R23
SV_MY_BRK_R24 19.47963309 ; N-m ! Spin moment, wheel R24
SV_MY_BRK_R25 28.86600018 ; N-m ! Spin moment, wheel R25
SV_MY_BRK_R26 38.74160215 ; N-m ! Spin moment, wheel R26
SV_MY_BRK_R27 -83.21344774 ; N-m ! Spin moment, wheel R27
SV_MY_BRK_R28 -107.5084358 ; N-m ! Spin moment, wheel R28
SV_MY_BRK_R29      -0 ; N-m ! Spin moment, wheel R29
SV_MY_BRK_R3 -477.9947381 ; N-m ! Spin moment, wheel R3
SV_MY_BRK_R30      -0 ; N-m ! Spin moment, wheel R30
SV_MY_BRK_R31      -0 ; N-m ! Spin moment, wheel R31
SV_MY_BRK_R32 -193.70403 ; N-m ! Spin moment, wheel R32
SV_MY_BRK_R33 202.4796917 ; N-m ! Spin moment, wheel R33
SV_MY_BRK_R34      -0 ; N-m ! Spin moment, wheel R34
SV_MY_BRK_R35      -0 ; N-m ! Spin moment, wheel R35
SV_MY_BRK_R36      -0 ; N-m ! Spin moment, wheel R36
SV_MY_BRK_R37      -0 ; N-m ! Spin moment, wheel R37
SV_MY_BRK_R38      -0 ; N-m ! Spin moment, wheel R38
SV_MY_BRK_R39      -0 ; N-m ! Spin moment, wheel R39
SV_MY_BRK_R4 -472.6991323 ; N-m ! Spin moment, wheel R4
SV_MY_BRK_R40      -0 ; N-m ! Spin moment, wheel R40
SV_MY_BRK_R41 28.01665286 ; N-m ! Spin moment, wheel R41
SV_MY_BRK_R42 18.53641831 ; N-m ! Spin moment, wheel R42
SV_MY_BRK_R43 -0.6085518584 ; N-m ! Spin moment, wheel R43
SV_MY_BRK_R44 -1.109464813 ; N-m ! Spin moment, wheel R44
SV_MY_BRK_R45 -1.75281148 ; N-m ! Spin moment, wheel R45
SV_MY_BRK_R46 -15.81833234 ; N-m ! Spin moment, wheel R46
SV_MY_BRK_R47 -16.25722441 ; N-m ! Spin moment, wheel R47
SV_MY_BRK_R5 -472.2650035 ; N-m ! Spin moment, wheel R5
SV_MY_BRK_R6 13.8722863 ; N-m ! Spin moment, wheel R6
SV_MY_BRK_R7 13.7899754 ; N-m ! Spin moment, wheel R7
SV_MY_BRK_R8 13.7233939 ; N-m ! Spin moment, wheel R8
SV_MY_BRK_R9 13.3854066 ; N-m ! Spin moment, wheel R9
SV_MY_H1            0 ; N-m ! Pitch moment, hitch 1
SV_MY_H2            0 ; N-m ! Pitch moment, hitch 2
SV_MY_H3            0 ; N-m ! Pitch moment, hitch 3
SV_MZ_H1            0 ; N-m ! Articulation moment, hitch 1
SV_MZ_H2            0 ; N-m ! Articulation moment, hitch 2
SV_MZ_H3            0 ; N-m ! Articulation moment, hitch 3
SV_MZ_WHEEL_L1 8.851871466 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L10 -1.418738811 ; N-m ! Tire Mz, wheel L10
SV_MZ_WHEEL_L11 -1.842481025 ; N-m ! Tire Mz, wheel L11
SV_MZ_WHEEL_L12 2.04500712 ; N-m ! Tire Mz, wheel L12
SV_MZ_WHEEL_L13 -0.797413029 ; N-m ! Tire Mz, wheel L13
SV_MZ_WHEEL_L14 3.027372319 ; N-m ! Tire Mz, wheel L14
SV_MZ_WHEEL_L15 1.170356479 ; N-m ! Tire Mz, wheel L15
SV_MZ_WHEEL_L16 2.275781869 ; N-m ! Tire Mz, wheel L16
SV_MZ_WHEEL_L17 5.035733433 ; N-m ! Tire Mz, wheel L17
SV_MZ_WHEEL_L18 -0.8321349565 ; N-m ! Tire Mz, wheel L18
SV_MZ_WHEEL_L19 3.431452774 ; N-m ! Tire Mz, wheel L19
SV_MZ_WHEEL_L2 4.753653549 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_L20     0 ; N-m ! Tire Mz, wheel L20
SV_MZ_WHEEL_L21     0 ; N-m ! Tire Mz, wheel L21
SV_MZ_WHEEL_L22 3.093094283 ; N-m ! Tire Mz, wheel L22
SV_MZ_WHEEL_L23 0.1935717214 ; N-m ! Tire Mz, wheel L23
SV_MZ_WHEEL_L24 0.3523827223 ; N-m ! Tire Mz, wheel L24
SV_MZ_WHEEL_L25 2.276341029 ; N-m ! Tire Mz, wheel L25
SV_MZ_WHEEL_L26 3.083015617 ; N-m ! Tire Mz, wheel L26
SV_MZ_WHEEL_L27 3.380832627 ; N-m ! Tire Mz, wheel L27
SV_MZ_WHEEL_L28 -0.8068702553 ; N-m ! Tire Mz, wheel L28
SV_MZ_WHEEL_L29     0 ; N-m ! Tire Mz, wheel L29
SV_MZ_WHEEL_L3 0.06098841225 ; N-m ! Tire Mz, wheel L3
SV_MZ_WHEEL_L30     0 ; N-m ! Tire Mz, wheel L30
SV_MZ_WHEEL_L31     0 ; N-m ! Tire Mz, wheel L31
SV_MZ_WHEEL_L32 3.002701093 ; N-m ! Tire Mz, wheel L32
SV_MZ_WHEEL_L33 1.04094405 ; N-m ! Tire Mz, wheel L33
SV_MZ_WHEEL_L34     0 ; N-m ! Tire Mz, wheel L34
SV_MZ_WHEEL_L35     0 ; N-m ! Tire Mz, wheel L35
SV_MZ_WHEEL_L36     0 ; N-m ! Tire Mz, wheel L36
SV_MZ_WHEEL_L37     0 ; N-m ! Tire Mz, wheel L37
SV_MZ_WHEEL_L38     0 ; N-m ! Tire Mz, wheel L38
SV_MZ_WHEEL_L39     0 ; N-m ! Tire Mz, wheel L39
SV_MZ_WHEEL_L4 -0.04324509856 ; N-m ! Tire Mz, wheel L4
SV_MZ_WHEEL_L40     0 ; N-m ! Tire Mz, wheel L40
SV_MZ_WHEEL_L41 0.0008589798211 ; N-m ! Tire Mz, wheel L41
SV_MZ_WHEEL_L42 -0.7220790008 ; N-m ! Tire Mz, wheel L42
SV_MZ_WHEEL_L43 -1.101809352 ; N-m ! Tire Mz, wheel L43
SV_MZ_WHEEL_L44 -1.387692598 ; N-m ! Tire Mz, wheel L44
SV_MZ_WHEEL_L45 -1.722058244 ; N-m ! Tire Mz, wheel L45
SV_MZ_WHEEL_L46 -2.805779346 ; N-m ! Tire Mz, wheel L46
SV_MZ_WHEEL_L47 -3.214615061 ; N-m ! Tire Mz, wheel L47
SV_MZ_WHEEL_L5 -0.1353534808 ; N-m ! Tire Mz, wheel L5
SV_MZ_WHEEL_L6 -1.166275948 ; N-m ! Tire Mz, wheel L6
SV_MZ_WHEEL_L7 -1.096672796 ; N-m ! Tire Mz, wheel L7
SV_MZ_WHEEL_L8 -1.025307541 ; N-m ! Tire Mz, wheel L8
SV_MZ_WHEEL_L9 -0.7938575136 ; N-m ! Tire Mz, wheel L9
SV_MZ_WHEEL_R1 -3.30194645 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R10 -1.304224079 ; N-m ! Tire Mz, wheel R10
SV_MZ_WHEEL_R11 -1.659763175 ; N-m ! Tire Mz, wheel R11
SV_MZ_WHEEL_R12 2.288011481 ; N-m ! Tire Mz, wheel R12
SV_MZ_WHEEL_R13 -0.6469777358 ; N-m ! Tire Mz, wheel R13
SV_MZ_WHEEL_R14 3.915732832 ; N-m ! Tire Mz, wheel R14
SV_MZ_WHEEL_R15 1.238156662 ; N-m ! Tire Mz, wheel R15
SV_MZ_WHEEL_R16 2.508298109 ; N-m ! Tire Mz, wheel R16
SV_MZ_WHEEL_R17 7.687047765 ; N-m ! Tire Mz, wheel R17
SV_MZ_WHEEL_R18 -0.06851592779 ; N-m ! Tire Mz, wheel R18
SV_MZ_WHEEL_R19 11.67188774 ; N-m ! Tire Mz, wheel R19
SV_MZ_WHEEL_R2 -6.765594502 ; N-m ! Tire Mz, wheel R2
SV_MZ_WHEEL_R20     0 ; N-m ! Tire Mz, wheel R20
SV_MZ_WHEEL_R21     0 ; N-m ! Tire Mz, wheel R21
SV_MZ_WHEEL_R22 3.815001962 ; N-m ! Tire Mz, wheel R22
SV_MZ_WHEEL_R23 0.2956337969 ; N-m ! Tire Mz, wheel R23
SV_MZ_WHEEL_R24 0.3835965525 ; N-m ! Tire Mz, wheel R24
SV_MZ_WHEEL_R25 2.302076764 ; N-m ! Tire Mz, wheel R25
SV_MZ_WHEEL_R26 3.084846736 ; N-m ! Tire Mz, wheel R26
SV_MZ_WHEEL_R27 2.823749264 ; N-m ! Tire Mz, wheel R27
SV_MZ_WHEEL_R28 -0.5011381333 ; N-m ! Tire Mz, wheel R28
SV_MZ_WHEEL_R29     0 ; N-m ! Tire Mz, wheel R29
SV_MZ_WHEEL_R3 0.06226503013 ; N-m ! Tire Mz, wheel R3
SV_MZ_WHEEL_R30     0 ; N-m ! Tire Mz, wheel R30
SV_MZ_WHEEL_R31     0 ; N-m ! Tire Mz, wheel R31
SV_MZ_WHEEL_R32 3.743730967 ; N-m ! Tire Mz, wheel R32
SV_MZ_WHEEL_R33 1.40080426 ; N-m ! Tire Mz, wheel R33
SV_MZ_WHEEL_R34     0 ; N-m ! Tire Mz, wheel R34
SV_MZ_WHEEL_R35     0 ; N-m ! Tire Mz, wheel R35
SV_MZ_WHEEL_R36     0 ; N-m ! Tire Mz, wheel R36
SV_MZ_WHEEL_R37     0 ; N-m ! Tire Mz, wheel R37
SV_MZ_WHEEL_R38     0 ; N-m ! Tire Mz, wheel R38
SV_MZ_WHEEL_R39     0 ; N-m ! Tire Mz, wheel R39
SV_MZ_WHEEL_R4 -0.04214688304 ; N-m ! Tire Mz, wheel R4
SV_MZ_WHEEL_R40     0 ; N-m ! Tire Mz, wheel R40
SV_MZ_WHEEL_R41 3.757128432 ; N-m ! Tire Mz, wheel R41
SV_MZ_WHEEL_R42 -0.4535057584 ; N-m ! Tire Mz, wheel R42
SV_MZ_WHEEL_R43 -1.088689819 ; N-m ! Tire Mz, wheel R43
SV_MZ_WHEEL_R44 -1.36754399 ; N-m ! Tire Mz, wheel R44
SV_MZ_WHEEL_R45 -1.695965463 ; N-m ! Tire Mz, wheel R45
SV_MZ_WHEEL_R46 -2.780801213 ; N-m ! Tire Mz, wheel R46
SV_MZ_WHEEL_R47 -3.185627642 ; N-m ! Tire Mz, wheel R47
SV_MZ_WHEEL_R5 -0.1342773963 ; N-m ! Tire Mz, wheel R5
SV_MZ_WHEEL_R6 -1.118541735 ; N-m ! Tire Mz, wheel R6
SV_MZ_WHEEL_R7 -1.049641526 ; N-m ! Tire Mz, wheel R7
SV_MZ_WHEEL_R8 -0.9788509729 ; N-m ! Tire Mz, wheel R8
SV_MZ_WHEEL_R9 -0.7371223368 ; N-m ! Tire Mz, wheel R9
SV_M_CL2_CAP_D4_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 3rd drive axle diff
SV_M_CL2_CAP_D5_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 4th drive axle diff
SV_M_CL2_CAP_D6_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for inter-axle diff for drive
                      ! axles 3,4,5
SV_M_CL2_CAP_D7_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for master transfer case
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! ODE: 2nd Clutch capacity for 1st drive axle diff
SV_M_CLUTCH_DEL     0 ; N-m ! ODE: Time delayed clutch torque capacity
SV_M_CL_CAP_D4_DYN  0 ; N-m ! ODE: Clutch capacity for 3rd drive axle diff
SV_M_CL_CAP_D5_DYN  0 ; N-m ! ODE: Clutch capacity for 4th drive axle diff
SV_M_CL_CAP_D6_DYN  0 ; N-m ! ODE: Clutch capacity for inter-axle diff for drive
                      ! axles 3,4,5
SV_M_CL_CAP_D7_DYN  0 ; N-m ! ODE: Clutch capacity for master transfer case
SV_M_CL_CAP_FD_DYN  0 ; N-m ! ODE: Clutch capacity for 1st drive axle diff
SV_M_CL_LF_CAP_DYN  0 ; N-m ! ODE: Left twin clutch capacity for 1st drive axle diff
SV_M_CL_L_D4_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for 3rd drive axle
                       ! diff
SV_M_CL_L_D5_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for 4th drive axle
                       ! diff
SV_M_CL_L_D6_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for inter-axle diff
                       ! for drive axles 3,4,5
SV_M_CL_L_D7_CAP_DYN 0 ; N-m ! ODE: Left twin clutch capacity for master transfer
                       ! case
SV_M_CL_RF_CAP_DYN  0 ; N-m ! ODE: Right twin clutch capacity for 1st drive axle
                      ! diff
SV_M_CL_R_D4_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for 3rd drive axle
                       ! diff
SV_M_CL_R_D5_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for 4th drive axle
                       ! diff
SV_M_CL_R_D6_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for inter-axle diff
                       ! for drive axles 3,4,5
SV_M_CL_R_D7_CAP_DYN 0 ; N-m ! ODE: Right twin clutch capacity for master transfer
                       ! case
SV_M_ENG_ESC_APPLY  0 ; N-m ! ODE: Applied engine torque from ESC/TCS
SV_M_ENG_ESC_ERROR  0 ; N-m-s ! ODE: Integral of error from ESC request
SV_M_HYS_COL        0 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A10   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A11   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A12   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A13   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A14   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A15   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A16   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A17   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A18   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A19   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A20   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A21   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A22   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A23   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A24   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A25   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A26   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A27   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A28   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A29   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A3    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A30   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A31   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A32   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A33   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A34   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A35   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A36   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A37   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A38   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A39   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A4    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A40   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A41   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A42   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A43   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A44   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A45   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A46   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A47   0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A5    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A6    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A7    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A8    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A9    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -113.1254481 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L10         0 ; N-m ! Kingpin moment, wheel L10
SV_M_KP_L11         0 ; N-m ! Kingpin moment, wheel L11
SV_M_KP_L12         0 ; N-m ! Kingpin moment, wheel L12
SV_M_KP_L13         0 ; N-m ! Kingpin moment, wheel L13
SV_M_KP_L14         0 ; N-m ! Kingpin moment, wheel L14
SV_M_KP_L15         0 ; N-m ! Kingpin moment, wheel L15
SV_M_KP_L16         0 ; N-m ! Kingpin moment, wheel L16
SV_M_KP_L17         0 ; N-m ! Kingpin moment, wheel L17
SV_M_KP_L18         0 ; N-m ! Kingpin moment, wheel L18
SV_M_KP_L19         0 ; N-m ! Kingpin moment, wheel L19
SV_M_KP_L2 -119.3383231 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_L20         0 ; N-m ! Kingpin moment, wheel L20
SV_M_KP_L21         0 ; N-m ! Kingpin moment, wheel L21
SV_M_KP_L22         0 ; N-m ! Kingpin moment, wheel L22
SV_M_KP_L23         0 ; N-m ! Kingpin moment, wheel L23
SV_M_KP_L24         0 ; N-m ! Kingpin moment, wheel L24
SV_M_KP_L25         0 ; N-m ! Kingpin moment, wheel L25
SV_M_KP_L26         0 ; N-m ! Kingpin moment, wheel L26
SV_M_KP_L27         0 ; N-m ! Kingpin moment, wheel L27
SV_M_KP_L28         0 ; N-m ! Kingpin moment, wheel L28
SV_M_KP_L29         0 ; N-m ! Kingpin moment, wheel L29
SV_M_KP_L3          0 ; N-m ! Kingpin moment, wheel L3
SV_M_KP_L30         0 ; N-m ! Kingpin moment, wheel L30
SV_M_KP_L31         0 ; N-m ! Kingpin moment, wheel L31
SV_M_KP_L32         0 ; N-m ! Kingpin moment, wheel L32
SV_M_KP_L33         0 ; N-m ! Kingpin moment, wheel L33
SV_M_KP_L34         0 ; N-m ! Kingpin moment, wheel L34
SV_M_KP_L35         0 ; N-m ! Kingpin moment, wheel L35
SV_M_KP_L36         0 ; N-m ! Kingpin moment, wheel L36
SV_M_KP_L37         0 ; N-m ! Kingpin moment, wheel L37
SV_M_KP_L38         0 ; N-m ! Kingpin moment, wheel L38
SV_M_KP_L39         0 ; N-m ! Kingpin moment, wheel L39
SV_M_KP_L4          0 ; N-m ! Kingpin moment, wheel L4
SV_M_KP_L40         0 ; N-m ! Kingpin moment, wheel L40
SV_M_KP_L41         0 ; N-m ! Kingpin moment, wheel L41
SV_M_KP_L42         0 ; N-m ! Kingpin moment, wheel L42
SV_M_KP_L43         0 ; N-m ! Kingpin moment, wheel L43
SV_M_KP_L44         0 ; N-m ! Kingpin moment, wheel L44
SV_M_KP_L45         0 ; N-m ! Kingpin moment, wheel L45
SV_M_KP_L46         0 ; N-m ! Kingpin moment, wheel L46
SV_M_KP_L47         0 ; N-m ! Kingpin moment, wheel L47
SV_M_KP_L5          0 ; N-m ! Kingpin moment, wheel L5
SV_M_KP_L6          0 ; N-m ! Kingpin moment, wheel L6
SV_M_KP_L7          0 ; N-m ! Kingpin moment, wheel L7
SV_M_KP_L8          0 ; N-m ! Kingpin moment, wheel L8
SV_M_KP_L9          0 ; N-m ! Kingpin moment, wheel L9
SV_M_KP_R1 121.3653936 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R10         0 ; N-m ! Kingpin moment, wheel R10
SV_M_KP_R11         0 ; N-m ! Kingpin moment, wheel R11
SV_M_KP_R12         0 ; N-m ! Kingpin moment, wheel R12
SV_M_KP_R13         0 ; N-m ! Kingpin moment, wheel R13
SV_M_KP_R14         0 ; N-m ! Kingpin moment, wheel R14
SV_M_KP_R15         0 ; N-m ! Kingpin moment, wheel R15
SV_M_KP_R16         0 ; N-m ! Kingpin moment, wheel R16
SV_M_KP_R17         0 ; N-m ! Kingpin moment, wheel R17
SV_M_KP_R18         0 ; N-m ! Kingpin moment, wheel R18
SV_M_KP_R19         0 ; N-m ! Kingpin moment, wheel R19
SV_M_KP_R2 115.3049912 ; N-m ! Kingpin moment, wheel R2
SV_M_KP_R20         0 ; N-m ! Kingpin moment, wheel R20
SV_M_KP_R21         0 ; N-m ! Kingpin moment, wheel R21
SV_M_KP_R22         0 ; N-m ! Kingpin moment, wheel R22
SV_M_KP_R23         0 ; N-m ! Kingpin moment, wheel R23
SV_M_KP_R24         0 ; N-m ! Kingpin moment, wheel R24
SV_M_KP_R25         0 ; N-m ! Kingpin moment, wheel R25
SV_M_KP_R26         0 ; N-m ! Kingpin moment, wheel R26
SV_M_KP_R27         0 ; N-m ! Kingpin moment, wheel R27
SV_M_KP_R28         0 ; N-m ! Kingpin moment, wheel R28
SV_M_KP_R29         0 ; N-m ! Kingpin moment, wheel R29
SV_M_KP_R3          0 ; N-m ! Kingpin moment, wheel R3
SV_M_KP_R30         0 ; N-m ! Kingpin moment, wheel R30
SV_M_KP_R31         0 ; N-m ! Kingpin moment, wheel R31
SV_M_KP_R32         0 ; N-m ! Kingpin moment, wheel R32
SV_M_KP_R33         0 ; N-m ! Kingpin moment, wheel R33
SV_M_KP_R34         0 ; N-m ! Kingpin moment, wheel R34
SV_M_KP_R35         0 ; N-m ! Kingpin moment, wheel R35
SV_M_KP_R36         0 ; N-m ! Kingpin moment, wheel R36
SV_M_KP_R37         0 ; N-m ! Kingpin moment, wheel R37
SV_M_KP_R38         0 ; N-m ! Kingpin moment, wheel R38
SV_M_KP_R39         0 ; N-m ! Kingpin moment, wheel R39
SV_M_KP_R4          0 ; N-m ! Kingpin moment, wheel R4
SV_M_KP_R40         0 ; N-m ! Kingpin moment, wheel R40
SV_M_KP_R41         0 ; N-m ! Kingpin moment, wheel R41
SV_M_KP_R42         0 ; N-m ! Kingpin moment, wheel R42
SV_M_KP_R43         0 ; N-m ! Kingpin moment, wheel R43
SV_M_KP_R44         0 ; N-m ! Kingpin moment, wheel R44
SV_M_KP_R45         0 ; N-m ! Kingpin moment, wheel R45
SV_M_KP_R46         0 ; N-m ! Kingpin moment, wheel R46
SV_M_KP_R47         0 ; N-m ! Kingpin moment, wheel R47
SV_M_KP_R5          0 ; N-m ! Kingpin moment, wheel R5
SV_M_KP_R6          0 ; N-m ! Kingpin moment, wheel R6
SV_M_KP_R7          0 ; N-m ! Kingpin moment, wheel R7
SV_M_KP_R8          0 ; N-m ! Kingpin moment, wheel R8
SV_M_KP_R9          0 ; N-m ! Kingpin moment, wheel R9
SV_M_PARK_L1        0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L10       0 ; N-m ! Kingpin steer park torque, wheel L10
SV_M_PARK_L11       0 ; N-m ! Kingpin steer park torque, wheel L11
SV_M_PARK_L12       0 ; N-m ! Kingpin steer park torque, wheel L12
SV_M_PARK_L13       0 ; N-m ! Kingpin steer park torque, wheel L13
SV_M_PARK_L14       0 ; N-m ! Kingpin steer park torque, wheel L14
SV_M_PARK_L15       0 ; N-m ! Kingpin steer park torque, wheel L15
SV_M_PARK_L16       0 ; N-m ! Kingpin steer park torque, wheel L16
SV_M_PARK_L17       0 ; N-m ! Kingpin steer park torque, wheel L17
SV_M_PARK_L18       0 ; N-m ! Kingpin steer park torque, wheel L18
SV_M_PARK_L19       0 ; N-m ! Kingpin steer park torque, wheel L19
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_L20       0 ; N-m ! Kingpin steer park torque, wheel L20
SV_M_PARK_L21       0 ; N-m ! Kingpin steer park torque, wheel L21
SV_M_PARK_L22       0 ; N-m ! Kingpin steer park torque, wheel L22
SV_M_PARK_L23       0 ; N-m ! Kingpin steer park torque, wheel L23
SV_M_PARK_L24       0 ; N-m ! Kingpin steer park torque, wheel L24
SV_M_PARK_L25       0 ; N-m ! Kingpin steer park torque, wheel L25
SV_M_PARK_L26       0 ; N-m ! Kingpin steer park torque, wheel L26
SV_M_PARK_L27       0 ; N-m ! Kingpin steer park torque, wheel L27
SV_M_PARK_L28       0 ; N-m ! Kingpin steer park torque, wheel L28
SV_M_PARK_L29       0 ; N-m ! Kingpin steer park torque, wheel L29
SV_M_PARK_L3        0 ; N-m ! Kingpin steer park torque, wheel L3
SV_M_PARK_L30       0 ; N-m ! Kingpin steer park torque, wheel L30
SV_M_PARK_L31       0 ; N-m ! Kingpin steer park torque, wheel L31
SV_M_PARK_L32       0 ; N-m ! Kingpin steer park torque, wheel L32
SV_M_PARK_L33       0 ; N-m ! Kingpin steer park torque, wheel L33
SV_M_PARK_L34       0 ; N-m ! Kingpin steer park torque, wheel L34
SV_M_PARK_L35       0 ; N-m ! Kingpin steer park torque, wheel L35
SV_M_PARK_L36       0 ; N-m ! Kingpin steer park torque, wheel L36
SV_M_PARK_L37       0 ; N-m ! Kingpin steer park torque, wheel L37
SV_M_PARK_L38       0 ; N-m ! Kingpin steer park torque, wheel L38
SV_M_PARK_L39       0 ; N-m ! Kingpin steer park torque, wheel L39
SV_M_PARK_L4        0 ; N-m ! Kingpin steer park torque, wheel L4
SV_M_PARK_L40       0 ; N-m ! Kingpin steer park torque, wheel L40
SV_M_PARK_L41       0 ; N-m ! Kingpin steer park torque, wheel L41
SV_M_PARK_L42       0 ; N-m ! Kingpin steer park torque, wheel L42
SV_M_PARK_L43       0 ; N-m ! Kingpin steer park torque, wheel L43
SV_M_PARK_L44       0 ; N-m ! Kingpin steer park torque, wheel L44
SV_M_PARK_L45       0 ; N-m ! Kingpin steer park torque, wheel L45
SV_M_PARK_L46       0 ; N-m ! Kingpin steer park torque, wheel L46
SV_M_PARK_L47       0 ; N-m ! Kingpin steer park torque, wheel L47
SV_M_PARK_L5        0 ; N-m ! Kingpin steer park torque, wheel L5
SV_M_PARK_L6        0 ; N-m ! Kingpin steer park torque, wheel L6
SV_M_PARK_L7        0 ; N-m ! Kingpin steer park torque, wheel L7
SV_M_PARK_L8        0 ; N-m ! Kingpin steer park torque, wheel L8
SV_M_PARK_L9        0 ; N-m ! Kingpin steer park torque, wheel L9
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R10       0 ; N-m ! Kingpin steer park torque, wheel R10
SV_M_PARK_R11       0 ; N-m ! Kingpin steer park torque, wheel R11
SV_M_PARK_R12       0 ; N-m ! Kingpin steer park torque, wheel R12
SV_M_PARK_R13       0 ; N-m ! Kingpin steer park torque, wheel R13
SV_M_PARK_R14       0 ; N-m ! Kingpin steer park torque, wheel R14
SV_M_PARK_R15       0 ; N-m ! Kingpin steer park torque, wheel R15
SV_M_PARK_R16       0 ; N-m ! Kingpin steer park torque, wheel R16
SV_M_PARK_R17       0 ; N-m ! Kingpin steer park torque, wheel R17
SV_M_PARK_R18       0 ; N-m ! Kingpin steer park torque, wheel R18
SV_M_PARK_R19       0 ; N-m ! Kingpin steer park torque, wheel R19
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_M_PARK_R20       0 ; N-m ! Kingpin steer park torque, wheel R20
SV_M_PARK_R21       0 ; N-m ! Kingpin steer park torque, wheel R21
SV_M_PARK_R22       0 ; N-m ! Kingpin steer park torque, wheel R22
SV_M_PARK_R23       0 ; N-m ! Kingpin steer park torque, wheel R23
SV_M_PARK_R24       0 ; N-m ! Kingpin steer park torque, wheel R24
SV_M_PARK_R25       0 ; N-m ! Kingpin steer park torque, wheel R25
SV_M_PARK_R26       0 ; N-m ! Kingpin steer park torque, wheel R26
SV_M_PARK_R27       0 ; N-m ! Kingpin steer park torque, wheel R27
SV_M_PARK_R28       0 ; N-m ! Kingpin steer park torque, wheel R28
SV_M_PARK_R29       0 ; N-m ! Kingpin steer park torque, wheel R29
SV_M_PARK_R3        0 ; N-m ! Kingpin steer park torque, wheel R3
SV_M_PARK_R30       0 ; N-m ! Kingpin steer park torque, wheel R30
SV_M_PARK_R31       0 ; N-m ! Kingpin steer park torque, wheel R31
SV_M_PARK_R32       0 ; N-m ! Kingpin steer park torque, wheel R32
SV_M_PARK_R33       0 ; N-m ! Kingpin steer park torque, wheel R33
SV_M_PARK_R34       0 ; N-m ! Kingpin steer park torque, wheel R34
SV_M_PARK_R35       0 ; N-m ! Kingpin steer park torque, wheel R35
SV_M_PARK_R36       0 ; N-m ! Kingpin steer park torque, wheel R36
SV_M_PARK_R37       0 ; N-m ! Kingpin steer park torque, wheel R37
SV_M_PARK_R38       0 ; N-m ! Kingpin steer park torque, wheel R38
SV_M_PARK_R39       0 ; N-m ! Kingpin steer park torque, wheel R39
SV_M_PARK_R4        0 ; N-m ! Kingpin steer park torque, wheel R4
SV_M_PARK_R40       0 ; N-m ! Kingpin steer park torque, wheel R40
SV_M_PARK_R41       0 ; N-m ! Kingpin steer park torque, wheel R41
SV_M_PARK_R42       0 ; N-m ! Kingpin steer park torque, wheel R42
SV_M_PARK_R43       0 ; N-m ! Kingpin steer park torque, wheel R43
SV_M_PARK_R44       0 ; N-m ! Kingpin steer park torque, wheel R44
SV_M_PARK_R45       0 ; N-m ! Kingpin steer park torque, wheel R45
SV_M_PARK_R46       0 ; N-m ! Kingpin steer park torque, wheel R46
SV_M_PARK_R47       0 ; N-m ! Kingpin steer park torque, wheel R47
SV_M_PARK_R5        0 ; N-m ! Kingpin steer park torque, wheel R5
SV_M_PARK_R6        0 ; N-m ! Kingpin steer park torque, wheel R6
SV_M_PARK_R7        0 ; N-m ! Kingpin steer park torque, wheel R7
SV_M_PARK_R8        0 ; N-m ! Kingpin steer park torque, wheel R8
SV_M_PARK_R9        0 ; N-m ! Kingpin steer park torque, wheel R9
SV_M_TC    687.147609 ; N-m ! Transmission input shaft torque
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1           0 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L10          0 ; MPa ! ODE: Brake actuator pressure for wheel L10
SV_PBK_L11          0 ; MPa ! ODE: Brake actuator pressure for wheel L11
SV_PBK_L12          0 ; MPa ! ODE: Brake actuator pressure for wheel L12
SV_PBK_L13          0 ; MPa ! ODE: Brake actuator pressure for wheel L13
SV_PBK_L14          0 ; MPa ! ODE: Brake actuator pressure for wheel L14
SV_PBK_L15          0 ; MPa ! ODE: Brake actuator pressure for wheel L15
SV_PBK_L16          0 ; MPa ! ODE: Brake actuator pressure for wheel L16
SV_PBK_L17          0 ; MPa ! ODE: Brake actuator pressure for wheel L17
SV_PBK_L18          0 ; MPa ! ODE: Brake actuator pressure for wheel L18
SV_PBK_L19          0 ; MPa ! ODE: Brake actuator pressure for wheel L19
SV_PBK_L2           0 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_L20          0 ; MPa ! ODE: Brake actuator pressure for wheel L20
SV_PBK_L21          0 ; MPa ! ODE: Brake actuator pressure for wheel L21
SV_PBK_L22          0 ; MPa ! ODE: Brake actuator pressure for wheel L22
SV_PBK_L23          0 ; MPa ! ODE: Brake actuator pressure for wheel L23
SV_PBK_L24          0 ; MPa ! ODE: Brake actuator pressure for wheel L24
SV_PBK_L25          0 ; MPa ! ODE: Brake actuator pressure for wheel L25
SV_PBK_L26          0 ; MPa ! ODE: Brake actuator pressure for wheel L26
SV_PBK_L27          0 ; MPa ! ODE: Brake actuator pressure for wheel L27
SV_PBK_L28          0 ; MPa ! ODE: Brake actuator pressure for wheel L28
SV_PBK_L29          0 ; MPa ! ODE: Brake actuator pressure for wheel L29
SV_PBK_L3           0 ; MPa ! ODE: Brake actuator pressure for wheel L3
SV_PBK_L30          0 ; MPa ! ODE: Brake actuator pressure for wheel L30
SV_PBK_L31          0 ; MPa ! ODE: Brake actuator pressure for wheel L31
SV_PBK_L32          0 ; MPa ! ODE: Brake actuator pressure for wheel L32
SV_PBK_L33          0 ; MPa ! ODE: Brake actuator pressure for wheel L33
SV_PBK_L34          0 ; MPa ! ODE: Brake actuator pressure for wheel L34
SV_PBK_L35          0 ; MPa ! ODE: Brake actuator pressure for wheel L35
SV_PBK_L36          0 ; MPa ! ODE: Brake actuator pressure for wheel L36
SV_PBK_L37          0 ; MPa ! ODE: Brake actuator pressure for wheel L37
SV_PBK_L38          0 ; MPa ! ODE: Brake actuator pressure for wheel L38
SV_PBK_L39          0 ; MPa ! ODE: Brake actuator pressure for wheel L39
SV_PBK_L4           0 ; MPa ! ODE: Brake actuator pressure for wheel L4
SV_PBK_L40          0 ; MPa ! ODE: Brake actuator pressure for wheel L40
SV_PBK_L41          0 ; MPa ! ODE: Brake actuator pressure for wheel L41
SV_PBK_L42          0 ; MPa ! ODE: Brake actuator pressure for wheel L42
SV_PBK_L43          0 ; MPa ! ODE: Brake actuator pressure for wheel L43
SV_PBK_L44          0 ; MPa ! ODE: Brake actuator pressure for wheel L44
SV_PBK_L45          0 ; MPa ! ODE: Brake actuator pressure for wheel L45
SV_PBK_L46          0 ; MPa ! ODE: Brake actuator pressure for wheel L46
SV_PBK_L47          0 ; MPa ! ODE: Brake actuator pressure for wheel L47
SV_PBK_L5           0 ; MPa ! ODE: Brake actuator pressure for wheel L5
SV_PBK_L6           0 ; MPa ! ODE: Brake actuator pressure for wheel L6
SV_PBK_L7           0 ; MPa ! ODE: Brake actuator pressure for wheel L7
SV_PBK_L8           0 ; MPa ! ODE: Brake actuator pressure for wheel L8
SV_PBK_L9           0 ; MPa ! ODE: Brake actuator pressure for wheel L9
SV_PBK_R1           0 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R10          0 ; MPa ! ODE: Brake actuator pressure for wheel R10
SV_PBK_R11          0 ; MPa ! ODE: Brake actuator pressure for wheel R11
SV_PBK_R12          0 ; MPa ! ODE: Brake actuator pressure for wheel R12
SV_PBK_R13          0 ; MPa ! ODE: Brake actuator pressure for wheel R13
SV_PBK_R14          0 ; MPa ! ODE: Brake actuator pressure for wheel R14
SV_PBK_R15          0 ; MPa ! ODE: Brake actuator pressure for wheel R15
SV_PBK_R16          0 ; MPa ! ODE: Brake actuator pressure for wheel R16
SV_PBK_R17          0 ; MPa ! ODE: Brake actuator pressure for wheel R17
SV_PBK_R18          0 ; MPa ! ODE: Brake actuator pressure for wheel R18
SV_PBK_R19          0 ; MPa ! ODE: Brake actuator pressure for wheel R19
SV_PBK_R2           0 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PBK_R20          0 ; MPa ! ODE: Brake actuator pressure for wheel R20
SV_PBK_R21          0 ; MPa ! ODE: Brake actuator pressure for wheel R21
SV_PBK_R22          0 ; MPa ! ODE: Brake actuator pressure for wheel R22
SV_PBK_R23          0 ; MPa ! ODE: Brake actuator pressure for wheel R23
SV_PBK_R24          0 ; MPa ! ODE: Brake actuator pressure for wheel R24
SV_PBK_R25          0 ; MPa ! ODE: Brake actuator pressure for wheel R25
SV_PBK_R26          0 ; MPa ! ODE: Brake actuator pressure for wheel R26
SV_PBK_R27          0 ; MPa ! ODE: Brake actuator pressure for wheel R27
SV_PBK_R28          0 ; MPa ! ODE: Brake actuator pressure for wheel R28
SV_PBK_R29          0 ; MPa ! ODE: Brake actuator pressure for wheel R29
SV_PBK_R3           0 ; MPa ! ODE: Brake actuator pressure for wheel R3
SV_PBK_R30          0 ; MPa ! ODE: Brake actuator pressure for wheel R30
SV_PBK_R31          0 ; MPa ! ODE: Brake actuator pressure for wheel R31
SV_PBK_R32          0 ; MPa ! ODE: Brake actuator pressure for wheel R32
SV_PBK_R33          0 ; MPa ! ODE: Brake actuator pressure for wheel R33
SV_PBK_R34          0 ; MPa ! ODE: Brake actuator pressure for wheel R34
SV_PBK_R35          0 ; MPa ! ODE: Brake actuator pressure for wheel R35
SV_PBK_R36          0 ; MPa ! ODE: Brake actuator pressure for wheel R36
SV_PBK_R37          0 ; MPa ! ODE: Brake actuator pressure for wheel R37
SV_PBK_R38          0 ; MPa ! ODE: Brake actuator pressure for wheel R38
SV_PBK_R39          0 ; MPa ! ODE: Brake actuator pressure for wheel R39
SV_PBK_R4           0 ; MPa ! ODE: Brake actuator pressure for wheel R4
SV_PBK_R40          0 ; MPa ! ODE: Brake actuator pressure for wheel R40
SV_PBK_R41          0 ; MPa ! ODE: Brake actuator pressure for wheel R41
SV_PBK_R42          0 ; MPa ! ODE: Brake actuator pressure for wheel R42
SV_PBK_R43          0 ; MPa ! ODE: Brake actuator pressure for wheel R43
SV_PBK_R44          0 ; MPa ! ODE: Brake actuator pressure for wheel R44
SV_PBK_R45          0 ; MPa ! ODE: Brake actuator pressure for wheel R45
SV_PBK_R46          0 ; MPa ! ODE: Brake actuator pressure for wheel R46
SV_PBK_R47          0 ; MPa ! ODE: Brake actuator pressure for wheel R47
SV_PBK_R5           0 ; MPa ! ODE: Brake actuator pressure for wheel R5
SV_PBK_R6           0 ; MPa ! ODE: Brake actuator pressure for wheel R6
SV_PBK_R7           0 ; MPa ! ODE: Brake actuator pressure for wheel R7
SV_PBK_R8           0 ; MPa ! ODE: Brake actuator pressure for wheel R8
SV_PBK_R9           0 ; MPa ! ODE: Brake actuator pressure for wheel R9
SV_PITCH -0.4216969562 ; deg ! ODE: Pitch of sprung mass, unit 1 {Pitch}
SV_PITCH_H1 0.4600602166 ; deg ! ODE: Relative pitch for unit 2
SV_PITCH_H1_OLD 0.4604540653 ; deg ! Relative pitch for hitch 1
SV_PITCH_H2 0.5272036554 ; deg ! ODE: Relative pitch for unit 3
SV_PITCH_H2_OLD 0.5260086986 ; deg ! Relative pitch for hitch 2
SV_PITCH_H3 -1.217876053 ; deg ! ODE: Relative pitch for unit 4
SV_PITCH_H3_OLD -1.216166136 ; deg ! Relative pitch for hitch 3
SV_RGEAR_CVT        0 ; - ! ODE: Delayed CVT gear ratio
SV_ROLL 0.01261146047 ; deg ! ODE: Roll (Euler) of sprung mass, unit 1 {Roll_E}
SV_ROLL_A1 -0.01225650935 ; deg ! ODE: Roll of axle 1
SV_ROLL_A10 -0.01431664807 ; deg ! ODE: Roll of axle 10
SV_ROLL_A11 -0.01719529524 ; deg ! ODE: Roll of axle 11
SV_ROLL_A12 0.002469262111 ; deg ! ODE: Roll of axle 12
SV_ROLL_A13 -0.01162747309 ; deg ! ODE: Roll of axle 13
SV_ROLL_A14 0.009441065216 ; deg ! ODE: Roll of axle 14
SV_ROLL_A15 -0.003817618114 ; deg ! ODE: Roll of axle 15
SV_ROLL_A16 0.001376232559 ; deg ! ODE: Roll of axle 16
SV_ROLL_A17 0.02108253522 ; deg ! ODE: Roll of axle 17
SV_ROLL_A18 -0.01299004367 ; deg ! ODE: Roll of axle 18
SV_ROLL_A19 0.04127574654 ; deg ! ODE: Roll of axle 19
SV_ROLL_A2 -0.01071574079 ; deg ! ODE: Roll of axle 2
SV_ROLL_A20 0.01185453815 ; deg ! ODE: Roll of axle 20
SV_ROLL_A21 0.02269152043 ; deg ! ODE: Roll of axle 21
SV_ROLL_A22 0.01687871711 ; deg ! ODE: Roll of axle 22
SV_ROLL_A23 -0.0002002887032 ; deg ! ODE: Roll of axle 23
SV_ROLL_A24 -0.003449203858 ; deg ! ODE: Roll of axle 24
SV_ROLL_A25 -0.004288198972 ; deg ! ODE: Roll of axle 25
SV_ROLL_A26 -0.002349997259 ; deg ! ODE: Roll of axle 26
SV_ROLL_A27 -0.004723127165 ; deg ! ODE: Roll of axle 27
SV_ROLL_A28 0.003287302144 ; deg ! ODE: Roll of axle 28
SV_ROLL_A29 0.008106979472 ; deg ! ODE: Roll of axle 29
SV_ROLL_A3 -0.01252364326 ; deg ! ODE: Roll of axle 3
SV_ROLL_A30 -0.002224448977 ; deg ! ODE: Roll of axle 30
SV_ROLL_A31 -0.00778072577 ; deg ! ODE: Roll of axle 31
SV_ROLL_A32 -0.0130542488 ; deg ! ODE: Roll of axle 32
SV_ROLL_A33 0.001884768859 ; deg ! ODE: Roll of axle 33
SV_ROLL_A34 0.007423688004 ; deg ! ODE: Roll of axle 34
SV_ROLL_A35 0.00584533536 ; deg ! ODE: Roll of axle 35
SV_ROLL_A36 0.007704030528 ; deg ! ODE: Roll of axle 36
SV_ROLL_A37 0.005274748491 ; deg ! ODE: Roll of axle 37
SV_ROLL_A38 0.006450509382 ; deg ! ODE: Roll of axle 38
SV_ROLL_A39 0.02742771536 ; deg ! ODE: Roll of axle 39
SV_ROLL_A4 -0.01251611921 ; deg ! ODE: Roll of axle 4
SV_ROLL_A40 -0.0177891979 ; deg ! ODE: Roll of axle 40
SV_ROLL_A41 0.03688616941 ; deg ! ODE: Roll of axle 41
SV_ROLL_A42 -0.009966242661 ; deg ! ODE: Roll of axle 42
SV_ROLL_A43 -0.00448567663 ; deg ! ODE: Roll of axle 43
SV_ROLL_A44 -0.004488140886 ; deg ! ODE: Roll of axle 44
SV_ROLL_A45 -0.004580220011 ; deg ! ODE: Roll of axle 45
SV_ROLL_A46 -0.004543531408 ; deg ! ODE: Roll of axle 46
SV_ROLL_A47 -0.004485440916 ; deg ! ODE: Roll of axle 47
SV_ROLL_A5 -0.01253183618 ; deg ! ODE: Roll of axle 5
SV_ROLL_A6 -0.01144321041 ; deg ! ODE: Roll of axle 6
SV_ROLL_A7 -0.01158795769 ; deg ! ODE: Roll of axle 7
SV_ROLL_A8 -0.01172663811 ; deg ! ODE: Roll of axle 8
SV_ROLL_A9 -0.01090080913 ; deg ! ODE: Roll of axle 9
SV_ROLL_H1 -0.005311334504 ; deg ! ODE: Relative roll for unit 2
SV_ROLL_H1_OLD -0.005178984351 ; deg ! Relative roll for hitch 1
SV_ROLL_H2 -0.004093973164 ; deg ! ODE: Relative roll for unit 3
SV_ROLL_H2_OLD -0.004144483119 ; deg ! Relative roll for hitch 2
SV_ROLL_H3 -0.0002005095459 ; deg ! ODE: Relative roll for unit 4
SV_ROLL_H3_OLD 0.0001698730656 ; deg ! Relative roll for hitch 3
SV_ROT_L1 42.08977841 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L10 42.14510474 ; rev ! ODE: Rotation of wheel L10
SV_ROT_L11 42.12678718 ; rev ! ODE: Rotation of wheel L11
SV_ROT_L12 42.11687913 ; rev ! ODE: Rotation of wheel L12
SV_ROT_L13 42.06183222 ; rev ! ODE: Rotation of wheel L13
SV_ROT_L14 42.11345587 ; rev ! ODE: Rotation of wheel L14
SV_ROT_L15 42.04507132 ; rev ! ODE: Rotation of wheel L15
SV_ROT_L16 42.00905084 ; rev ! ODE: Rotation of wheel L16
SV_ROT_L17 42.02249108 ; rev ! ODE: Rotation of wheel L17
SV_ROT_L18 41.90970421 ; rev ! ODE: Rotation of wheel L18
SV_ROT_L19 41.89951168 ; rev ! ODE: Rotation of wheel L19
SV_ROT_L2 42.08634592 ; rev ! ODE: Rotation of wheel L2
SV_ROT_L20 41.79356032 ; rev ! ODE: Rotation of wheel L20
SV_ROT_L21 41.76192013 ; rev ! ODE: Rotation of wheel L21
SV_ROT_L22 41.86820131 ; rev ! ODE: Rotation of wheel L22
SV_ROT_L23 41.76394114 ; rev ! ODE: Rotation of wheel L23
SV_ROT_L24 41.72479845 ; rev ! ODE: Rotation of wheel L24
SV_ROT_L25 41.89987613 ; rev ! ODE: Rotation of wheel L25
SV_ROT_L26 42.01981012 ; rev ! ODE: Rotation of wheel L26
SV_ROT_L27 42.00433146 ; rev ! ODE: Rotation of wheel L27
SV_ROT_L28 42.04503253 ; rev ! ODE: Rotation of wheel L28
SV_ROT_L29 42.05792522 ; rev ! ODE: Rotation of wheel L29
SV_ROT_L3 74.23631106 ; rev ! ODE: Rotation of wheel L3
SV_ROT_L30 42.05101691 ; rev ! ODE: Rotation of wheel L30
SV_ROT_L31 42.06055419 ; rev ! ODE: Rotation of wheel L31
SV_ROT_L32 42.04718819 ; rev ! ODE: Rotation of wheel L32
SV_ROT_L33 42.04964787 ; rev ! ODE: Rotation of wheel L33
SV_ROT_L34 42.01844695 ; rev ! ODE: Rotation of wheel L34
SV_ROT_L35 41.98984788 ; rev ! ODE: Rotation of wheel L35
SV_ROT_L36 42.02066019 ; rev ! ODE: Rotation of wheel L36
SV_ROT_L37 42.02807203 ; rev ! ODE: Rotation of wheel L37
SV_ROT_L38 42.00048277 ; rev ! ODE: Rotation of wheel L38
SV_ROT_L39 42.07876843 ; rev ! ODE: Rotation of wheel L39
SV_ROT_L4 67.17903095 ; rev ! ODE: Rotation of wheel L4
SV_ROT_L40 42.04098995 ; rev ! ODE: Rotation of wheel L40
SV_ROT_L41 42.02990107 ; rev ! ODE: Rotation of wheel L41
SV_ROT_L42 42.06289714 ; rev ! ODE: Rotation of wheel L42
SV_ROT_L43 42.05302204 ; rev ! ODE: Rotation of wheel L43
SV_ROT_L44 42.05755562 ; rev ! ODE: Rotation of wheel L44
SV_ROT_L45 42.04858244 ; rev ! ODE: Rotation of wheel L45
SV_ROT_L46 42.04208853 ; rev ! ODE: Rotation of wheel L46
SV_ROT_L47 42.04444794 ; rev ! ODE: Rotation of wheel L47
SV_ROT_L5 87.14832233 ; rev ! ODE: Rotation of wheel L5
SV_ROT_L6 42.15515742 ; rev ! ODE: Rotation of wheel L6
SV_ROT_L7 42.15461115 ; rev ! ODE: Rotation of wheel L7
SV_ROT_L8 42.14047257 ; rev ! ODE: Rotation of wheel L8
SV_ROT_L9 42.15762684 ; rev ! ODE: Rotation of wheel L9
SV_ROT_LK_L1        0 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L10       0 ; rev ! Rotation reference of wheel L10 in "locked" mode
SV_ROT_LK_L11       0 ; rev ! Rotation reference of wheel L11 in "locked" mode
SV_ROT_LK_L12       0 ; rev ! Rotation reference of wheel L12 in "locked" mode
SV_ROT_LK_L13       0 ; rev ! Rotation reference of wheel L13 in "locked" mode
SV_ROT_LK_L14       0 ; rev ! Rotation reference of wheel L14 in "locked" mode
SV_ROT_LK_L15       0 ; rev ! Rotation reference of wheel L15 in "locked" mode
SV_ROT_LK_L16       0 ; rev ! Rotation reference of wheel L16 in "locked" mode
SV_ROT_LK_L17       0 ; rev ! Rotation reference of wheel L17 in "locked" mode
SV_ROT_LK_L18       0 ; rev ! Rotation reference of wheel L18 in "locked" mode
SV_ROT_LK_L19       0 ; rev ! Rotation reference of wheel L19 in "locked" mode
SV_ROT_LK_L2        0 ; rev ! Rotation reference of wheel L2 in "locked" mode
SV_ROT_LK_L20       0 ; rev ! Rotation reference of wheel L20 in "locked" mode
SV_ROT_LK_L21       0 ; rev ! Rotation reference of wheel L21 in "locked" mode
SV_ROT_LK_L22       0 ; rev ! Rotation reference of wheel L22 in "locked" mode
SV_ROT_LK_L23       0 ; rev ! Rotation reference of wheel L23 in "locked" mode
SV_ROT_LK_L24       0 ; rev ! Rotation reference of wheel L24 in "locked" mode
SV_ROT_LK_L25       0 ; rev ! Rotation reference of wheel L25 in "locked" mode
SV_ROT_LK_L26       0 ; rev ! Rotation reference of wheel L26 in "locked" mode
SV_ROT_LK_L27       0 ; rev ! Rotation reference of wheel L27 in "locked" mode
SV_ROT_LK_L28       0 ; rev ! Rotation reference of wheel L28 in "locked" mode
SV_ROT_LK_L29       0 ; rev ! Rotation reference of wheel L29 in "locked" mode
SV_ROT_LK_L3        0 ; rev ! Rotation reference of wheel L3 in "locked" mode
SV_ROT_LK_L30       0 ; rev ! Rotation reference of wheel L30 in "locked" mode
SV_ROT_LK_L31       0 ; rev ! Rotation reference of wheel L31 in "locked" mode
SV_ROT_LK_L32       0 ; rev ! Rotation reference of wheel L32 in "locked" mode
SV_ROT_LK_L33       0 ; rev ! Rotation reference of wheel L33 in "locked" mode
SV_ROT_LK_L34       0 ; rev ! Rotation reference of wheel L34 in "locked" mode
SV_ROT_LK_L35       0 ; rev ! Rotation reference of wheel L35 in "locked" mode
SV_ROT_LK_L36       0 ; rev ! Rotation reference of wheel L36 in "locked" mode
SV_ROT_LK_L37       0 ; rev ! Rotation reference of wheel L37 in "locked" mode
SV_ROT_LK_L38       0 ; rev ! Rotation reference of wheel L38 in "locked" mode
SV_ROT_LK_L39       0 ; rev ! Rotation reference of wheel L39 in "locked" mode
SV_ROT_LK_L4        0 ; rev ! Rotation reference of wheel L4 in "locked" mode
SV_ROT_LK_L40       0 ; rev ! Rotation reference of wheel L40 in "locked" mode
SV_ROT_LK_L41       0 ; rev ! Rotation reference of wheel L41 in "locked" mode
SV_ROT_LK_L42       0 ; rev ! Rotation reference of wheel L42 in "locked" mode
SV_ROT_LK_L43       0 ; rev ! Rotation reference of wheel L43 in "locked" mode
SV_ROT_LK_L44       0 ; rev ! Rotation reference of wheel L44 in "locked" mode
SV_ROT_LK_L45       0 ; rev ! Rotation reference of wheel L45 in "locked" mode
SV_ROT_LK_L46       0 ; rev ! Rotation reference of wheel L46 in "locked" mode
SV_ROT_LK_L47       0 ; rev ! Rotation reference of wheel L47 in "locked" mode
SV_ROT_LK_L5        0 ; rev ! Rotation reference of wheel L5 in "locked" mode
SV_ROT_LK_L6        0 ; rev ! Rotation reference of wheel L6 in "locked" mode
SV_ROT_LK_L7        0 ; rev ! Rotation reference of wheel L7 in "locked" mode
SV_ROT_LK_L8        0 ; rev ! Rotation reference of wheel L8 in "locked" mode
SV_ROT_LK_L9        0 ; rev ! Rotation reference of wheel L9 in "locked" mode
SV_ROT_LK_R1        0 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R10       0 ; rev ! Rotation reference of wheel R10 in "locked" mode
SV_ROT_LK_R11       0 ; rev ! Rotation reference of wheel R11 in "locked" mode
SV_ROT_LK_R12       0 ; rev ! Rotation reference of wheel R12 in "locked" mode
SV_ROT_LK_R13       0 ; rev ! Rotation reference of wheel R13 in "locked" mode
SV_ROT_LK_R14       0 ; rev ! Rotation reference of wheel R14 in "locked" mode
SV_ROT_LK_R15       0 ; rev ! Rotation reference of wheel R15 in "locked" mode
SV_ROT_LK_R16       0 ; rev ! Rotation reference of wheel R16 in "locked" mode
SV_ROT_LK_R17       0 ; rev ! Rotation reference of wheel R17 in "locked" mode
SV_ROT_LK_R18       0 ; rev ! Rotation reference of wheel R18 in "locked" mode
SV_ROT_LK_R19       0 ; rev ! Rotation reference of wheel R19 in "locked" mode
SV_ROT_LK_R2        0 ; rev ! Rotation reference of wheel R2 in "locked" mode
SV_ROT_LK_R20       0 ; rev ! Rotation reference of wheel R20 in "locked" mode
SV_ROT_LK_R21       0 ; rev ! Rotation reference of wheel R21 in "locked" mode
SV_ROT_LK_R22       0 ; rev ! Rotation reference of wheel R22 in "locked" mode
SV_ROT_LK_R23       0 ; rev ! Rotation reference of wheel R23 in "locked" mode
SV_ROT_LK_R24       0 ; rev ! Rotation reference of wheel R24 in "locked" mode
SV_ROT_LK_R25       0 ; rev ! Rotation reference of wheel R25 in "locked" mode
SV_ROT_LK_R26       0 ; rev ! Rotation reference of wheel R26 in "locked" mode
SV_ROT_LK_R27       0 ; rev ! Rotation reference of wheel R27 in "locked" mode
SV_ROT_LK_R28       0 ; rev ! Rotation reference of wheel R28 in "locked" mode
SV_ROT_LK_R29       0 ; rev ! Rotation reference of wheel R29 in "locked" mode
SV_ROT_LK_R3        0 ; rev ! Rotation reference of wheel R3 in "locked" mode
SV_ROT_LK_R30       0 ; rev ! Rotation reference of wheel R30 in "locked" mode
SV_ROT_LK_R31       0 ; rev ! Rotation reference of wheel R31 in "locked" mode
SV_ROT_LK_R32       0 ; rev ! Rotation reference of wheel R32 in "locked" mode
SV_ROT_LK_R33       0 ; rev ! Rotation reference of wheel R33 in "locked" mode
SV_ROT_LK_R34       0 ; rev ! Rotation reference of wheel R34 in "locked" mode
SV_ROT_LK_R35       0 ; rev ! Rotation reference of wheel R35 in "locked" mode
SV_ROT_LK_R36       0 ; rev ! Rotation reference of wheel R36 in "locked" mode
SV_ROT_LK_R37       0 ; rev ! Rotation reference of wheel R37 in "locked" mode
SV_ROT_LK_R38       0 ; rev ! Rotation reference of wheel R38 in "locked" mode
SV_ROT_LK_R39       0 ; rev ! Rotation reference of wheel R39 in "locked" mode
SV_ROT_LK_R4        0 ; rev ! Rotation reference of wheel R4 in "locked" mode
SV_ROT_LK_R40       0 ; rev ! Rotation reference of wheel R40 in "locked" mode
SV_ROT_LK_R41       0 ; rev ! Rotation reference of wheel R41 in "locked" mode
SV_ROT_LK_R42       0 ; rev ! Rotation reference of wheel R42 in "locked" mode
SV_ROT_LK_R43       0 ; rev ! Rotation reference of wheel R43 in "locked" mode
SV_ROT_LK_R44       0 ; rev ! Rotation reference of wheel R44 in "locked" mode
SV_ROT_LK_R45       0 ; rev ! Rotation reference of wheel R45 in "locked" mode
SV_ROT_LK_R46       0 ; rev ! Rotation reference of wheel R46 in "locked" mode
SV_ROT_LK_R47       0 ; rev ! Rotation reference of wheel R47 in "locked" mode
SV_ROT_LK_R5        0 ; rev ! Rotation reference of wheel R5 in "locked" mode
SV_ROT_LK_R6        0 ; rev ! Rotation reference of wheel R6 in "locked" mode
SV_ROT_LK_R7        0 ; rev ! Rotation reference of wheel R7 in "locked" mode
SV_ROT_LK_R8        0 ; rev ! Rotation reference of wheel R8 in "locked" mode
SV_ROT_LK_R9        0 ; rev ! Rotation reference of wheel R9 in "locked" mode
SV_ROT_R1 42.08367755 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R10 42.14601175 ; rev ! ODE: Rotation of wheel R10
SV_ROT_R11 42.12752756 ; rev ! ODE: Rotation of wheel R11
SV_ROT_R12 42.11572901 ; rev ! ODE: Rotation of wheel R12
SV_ROT_R13 42.06297817 ; rev ! ODE: Rotation of wheel R13
SV_ROT_R14 42.11521527 ; rev ! ODE: Rotation of wheel R14
SV_ROT_R15 42.04017318 ; rev ! ODE: Rotation of wheel R15
SV_ROT_R16 42.00999937 ; rev ! ODE: Rotation of wheel R16
SV_ROT_R17 42.0218301 ; rev ! ODE: Rotation of wheel R17
SV_ROT_R18 41.90956254 ; rev ! ODE: Rotation of wheel R18
SV_ROT_R19 41.90243457 ; rev ! ODE: Rotation of wheel R19
SV_ROT_R2 42.08610092 ; rev ! ODE: Rotation of wheel R2
SV_ROT_R20 41.79167209 ; rev ! ODE: Rotation of wheel R20
SV_ROT_R21 41.76280543 ; rev ! ODE: Rotation of wheel R21
SV_ROT_R22 41.86737942 ; rev ! ODE: Rotation of wheel R22
SV_ROT_R23 41.7638295 ; rev ! ODE: Rotation of wheel R23
SV_ROT_R24 41.72538889 ; rev ! ODE: Rotation of wheel R24
SV_ROT_R25 41.90058567 ; rev ! ODE: Rotation of wheel R25
SV_ROT_R26 42.01758554 ; rev ! ODE: Rotation of wheel R26
SV_ROT_R27 42.00489042 ; rev ! ODE: Rotation of wheel R27
SV_ROT_R28 42.04643196 ; rev ! ODE: Rotation of wheel R28
SV_ROT_R29 42.05787599 ; rev ! ODE: Rotation of wheel R29
SV_ROT_R3 74.93836772 ; rev ! ODE: Rotation of wheel R3
SV_ROT_R30 42.05067443 ; rev ! ODE: Rotation of wheel R30
SV_ROT_R31 42.06059499 ; rev ! ODE: Rotation of wheel R31
SV_ROT_R32 42.04755342 ; rev ! ODE: Rotation of wheel R32
SV_ROT_R33 42.04949625 ; rev ! ODE: Rotation of wheel R33
SV_ROT_R34 42.01863647 ; rev ! ODE: Rotation of wheel R34
SV_ROT_R35 41.9908307 ; rev ! ODE: Rotation of wheel R35
SV_ROT_R36 42.01885023 ; rev ! ODE: Rotation of wheel R36
SV_ROT_R37 42.02862376 ; rev ! ODE: Rotation of wheel R37
SV_ROT_R38 42.0041495 ; rev ! ODE: Rotation of wheel R38
SV_ROT_R39 42.07956432 ; rev ! ODE: Rotation of wheel R39
SV_ROT_R4 67.52081744 ; rev ! ODE: Rotation of wheel R4
SV_ROT_R40 42.04095873 ; rev ! ODE: Rotation of wheel R40
SV_ROT_R41 42.0291647 ; rev ! ODE: Rotation of wheel R41
SV_ROT_R42 42.06315779 ; rev ! ODE: Rotation of wheel R42
SV_ROT_R43 42.05248769 ; rev ! ODE: Rotation of wheel R43
SV_ROT_R44 42.05844267 ; rev ! ODE: Rotation of wheel R44
SV_ROT_R45 42.04866639 ; rev ! ODE: Rotation of wheel R45
SV_ROT_R46 42.04199021 ; rev ! ODE: Rotation of wheel R46
SV_ROT_R47 42.04392801 ; rev ! ODE: Rotation of wheel R47
SV_ROT_R5 87.64078284 ; rev ! ODE: Rotation of wheel R5
SV_ROT_R6 42.15554105 ; rev ! ODE: Rotation of wheel R6
SV_ROT_R7 42.15563805 ; rev ! ODE: Rotation of wheel R7
SV_ROT_R8 42.14163204 ; rev ! ODE: Rotation of wheel R8
SV_ROT_R9 42.15764004 ; rev ! ODE: Rotation of wheel R9
SV_ROT_SHAFT_1 480.3424657 ; rev ! ODE: 1st drive axle diff input shaft rotation
SV_ROT_SHAFT_4 433.7335118 ; rev ! ODE: 3rd drive axle diff input shaft rotation
SV_ROT_SHAFT_5 562.8209186 ; rev ! ODE: 4th drive axle diff input shaft rotation
SV_ROT_SHAFT_6 498.2772152 ; rev ! ODE: Inter-axle diff for drive axles 3,4,5 input
                           ! shaft rotation
SV_ROT_SHAFT_7 492.2989654 ; rev ! ODE: Master transfer case input shaft rotation
SV_ROT_SHAFT_L_D1 74.23631106 ; rev ! ODE: Diff1 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D4 67.17903095 ; rev ! ODE: Diff4 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D5 87.14832233 ; rev ! ODE: Diff5 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D6 433.7335118 ; rev ! ODE: Diff6 Left (first) output shaft rotation
SV_ROT_SHAFT_L_D7 480.3424657 ; rev ! ODE: Diff7 Left (first) output shaft rotation
SV_ROT_SHAFT_R_D1 74.93836772 ; rev ! ODE: Diff1 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D4 67.52081744 ; rev ! ODE: Diff4 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D5 87.64078284 ; rev ! ODE: Diff5 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D6 562.8209186 ; rev ! ODE: Diff6 Right (second) output shaft
                              ! rotation
SV_ROT_SHAFT_R_D7 498.2772152 ; rev ! ODE: Diff7 Right (second) output shaft
                              ! rotation
SV_ROT_TC  364.416485 ; rev ! ODE: Torque coupling output shaft rotation
SV_ROT_TR_OUT 492.4547095 ; rev ! ODE: Transmission output shaft rotation
SV_R_GEAR_SHIFT  0.74 ; - ! Transmission gear ratio modulated by gear shift
SV_R_GEAR_SHIFT_START 0 ; - ! Gear ratio when automatic shift started
SV_R_GEAR_TOTAL_SC 4.7656 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.01204838 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L10     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L11     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L12     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L13     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L14     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L15     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L16     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L17     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L18     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L19     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2 -1.012052388 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L20     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L21     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L22     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L23     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L24     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L25     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L26     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L27     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L28     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L29     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L3      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L30     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L31     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L32     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L33     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L34     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L35     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L36     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L37     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L38     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L39     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L40     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L41     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L42     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L43     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L44     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L45     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L46     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L47     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L6      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L7      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L8      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L9      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.012051502 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R10     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R11     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R12     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R13     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R14     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R15     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R16     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R17     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R18     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R19     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2 -1.012047863 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R20     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R21     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R22     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R23     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R24     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R25     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R26     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R27     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R28     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R29     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R3      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R30     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R31     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R32     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R33     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R34     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R35     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R36     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R37     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R38     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R39     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R4      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R40     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R41     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R42     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R43     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R44     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R45     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R46     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R47     0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R5      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R6      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R7      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R8      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R9      0 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L10I 0.5142822731 ; m ! Deflected radius for tire L10i
SV_R_L10O 0.5142454727 ; m ! Deflected radius for tire L10o
SV_R_L11I 0.5148490343 ; m ! Deflected radius for tire L11i
SV_R_L11O 0.5147949003 ; m ! Deflected radius for tire L11o
SV_R_L12I 0.5151715868 ; m ! Deflected radius for tire L12i
SV_R_L12O 0.5152249245 ; m ! Deflected radius for tire L12o
SV_R_L13I 0.5152481627 ; m ! Deflected radius for tire L13i
SV_R_L13O 0.5152289222 ; m ! Deflected radius for tire L13o
SV_R_L14I 0.5151468628 ; m ! Deflected radius for tire L14i
SV_R_L14O 0.5152421883 ; m ! Deflected radius for tire L14o
SV_R_L15I 0.5151254625 ; m ! Deflected radius for tire L15i
SV_R_L15O 0.5151437979 ; m ! Deflected radius for tire L15o
SV_R_L16I 0.5151560285 ; m ! Deflected radius for tire L16i
SV_R_L16O 0.5152032102 ; m ! Deflected radius for tire L16o
SV_R_L17I 0.5148792219 ; m ! Deflected radius for tire L17i
SV_R_L17O 0.5150394426 ; m ! Deflected radius for tire L17o
SV_R_L18I 0.5151885782 ; m ! Deflected radius for tire L18i
SV_R_L18O 0.5151660729 ; m ! Deflected radius for tire L18o
SV_R_L19I 0.5166047687 ; m ! Deflected radius for tire L19i
SV_R_L19O 0.5168515893 ; m ! Deflected radius for tire L19o
SV_R_L1I 0.5050487729 ; m ! Deflected radius for tire L1i
SV_R_L1O 0.5050487729 ; m ! Deflected radius for tire L1o
SV_R_L20I 0.5269806947 ; m ! Deflected radius for tire L20i
SV_R_L20O 0.5270636674 ; m ! Deflected radius for tire L20o
SV_R_L21I 0.5256151548 ; m ! Deflected radius for tire L21i
SV_R_L21O 0.5257567894 ; m ! Deflected radius for tire L21o
SV_R_L22I 0.5193953433 ; m ! Deflected radius for tire L22i
SV_R_L22O 0.5194888917 ; m ! Deflected radius for tire L22o
SV_R_L23I 0.5172184842 ; m ! Deflected radius for tire L23i
SV_R_L23O 0.5172389954 ; m ! Deflected radius for tire L23o
SV_R_L24I 0.5181059467 ; m ! Deflected radius for tire L24i
SV_R_L24O 0.5181082232 ; m ! Deflected radius for tire L24o
SV_R_L25I 0.5175263179 ; m ! Deflected radius for tire L25i
SV_R_L25O 0.5175249842 ; m ! Deflected radius for tire L25o
SV_R_L26I 0.5107979729 ; m ! Deflected radius for tire L26i
SV_R_L26O  0.51080062 ; m ! Deflected radius for tire L26o
SV_R_L27I 0.507157882 ; m ! Deflected radius for tire L27i
SV_R_L27O 0.507147898 ; m ! Deflected radius for tire L27o
SV_R_L28I 0.5105038699 ; m ! Deflected radius for tire L28i
SV_R_L28O 0.5105421958 ; m ! Deflected radius for tire L28o
SV_R_L29I 0.6211596286 ; m ! Deflected radius for tire L29i
SV_R_L29O 0.6212214121 ; m ! Deflected radius for tire L29o
SV_R_L2I 0.5051125587 ; m ! Deflected radius for tire L2i
SV_R_L2O 0.5051125587 ; m ! Deflected radius for tire L2o
SV_R_L30I 0.5991013885 ; m ! Deflected radius for tire L30i
SV_R_L30O 0.5991071012 ; m ! Deflected radius for tire L30o
SV_R_L31I 0.6251984286 ; m ! Deflected radius for tire L31i
SV_R_L31O 0.6251787828 ; m ! Deflected radius for tire L31o
SV_R_L32I 0.4980911812 ; m ! Deflected radius for tire L32i
SV_R_L32O 0.4980458537 ; m ! Deflected radius for tire L32o
SV_R_L33I 0.507696907 ; m ! Deflected radius for tire L33i
SV_R_L33O 0.5077318012 ; m ! Deflected radius for tire L33o
SV_R_L34I 0.6083954869 ; m ! Deflected radius for tire L34i
SV_R_L34O 0.6084528675 ; m ! Deflected radius for tire L34o
SV_R_L35I 0.6001437526 ; m ! Deflected radius for tire L35i
SV_R_L35O 0.6001925832 ; m ! Deflected radius for tire L35o
SV_R_L36I 0.5919314026 ; m ! Deflected radius for tire L36i
SV_R_L36O 0.5919902537 ; m ! Deflected radius for tire L36o
SV_R_L37I 0.5613208263 ; m ! Deflected radius for tire L37i
SV_R_L37O 0.5613658547 ; m ! Deflected radius for tire L37o
SV_R_L38I 0.5518775436 ; m ! Deflected radius for tire L38i
SV_R_L38O 0.5519288735 ; m ! Deflected radius for tire L38o
SV_R_L39I 0.5678963712 ; m ! Deflected radius for tire L39i
SV_R_L39O 0.5680622239 ; m ! Deflected radius for tire L39o
SV_R_L3I 0.5170389528 ; m ! Deflected radius for tire L3i
SV_R_L3O 0.5170393037 ; m ! Deflected radius for tire L3o
SV_R_L40I 0.5239367234 ; m ! Deflected radius for tire L40i
SV_R_L40O 0.5238592304 ; m ! Deflected radius for tire L40o
SV_R_L41I 0.519983764 ; m ! Deflected radius for tire L41i
SV_R_L41O 0.5202005724 ; m ! Deflected radius for tire L41o
SV_R_L42I 0.5192953773 ; m ! Deflected radius for tire L42i
SV_R_L42O 0.5192588308 ; m ! Deflected radius for tire L42o
SV_R_L43I 0.5150796869 ; m ! Deflected radius for tire L43i
SV_R_L43O 0.5150730075 ; m ! Deflected radius for tire L43o
SV_R_L44I 0.5148284525 ; m ! Deflected radius for tire L44i
SV_R_L44O 0.514821838 ; m ! Deflected radius for tire L44o
SV_R_L45I 0.5145759448 ; m ! Deflected radius for tire L45i
SV_R_L45O 0.5145688707 ; m ! Deflected radius for tire L45o
SV_R_L46I 0.5105973908 ; m ! Deflected radius for tire L46i
SV_R_L46O 0.5105903152 ; m ! Deflected radius for tire L46o
SV_R_L47I 0.510454199 ; m ! Deflected radius for tire L47i
SV_R_L47O 0.510447401 ; m ! Deflected radius for tire L47o
SV_R_L4I 0.5171522762 ; m ! Deflected radius for tire L4i
SV_R_L4O  0.517152642 ; m ! Deflected radius for tire L4o
SV_R_L5I  0.517265255 ; m ! Deflected radius for tire L5i
SV_R_L5O 0.5172655121 ; m ! Deflected radius for tire L5o
SV_R_L6I 0.5142692272 ; m ! Deflected radius for tire L6i
SV_R_L6O 0.5142469949 ; m ! Deflected radius for tire L6o
SV_R_L7I 0.5142590175 ; m ! Deflected radius for tire L7i
SV_R_L7O 0.5142361117 ; m ! Deflected radius for tire L7o
SV_R_L8I 0.5142487219 ; m ! Deflected radius for tire L8i
SV_R_L8O 0.5142251801 ; m ! Deflected radius for tire L8o
SV_R_L9I  0.514527458 ; m ! Deflected radius for tire L9i
SV_R_L9O  0.514509605 ; m ! Deflected radius for tire L9o
SV_R_R10I 0.5144609329 ; m ! Deflected radius for tire R10i
SV_R_R10O 0.5144977332 ; m ! Deflected radius for tire R10o
SV_R_R11I 0.5151118459 ; m ! Deflected radius for tire R11i
SV_R_R11O 0.5151659798 ; m ! Deflected radius for tire R11o
SV_R_R12I 0.514912641 ; m ! Deflected radius for tire R12i
SV_R_R12O 0.5148593034 ; m ! Deflected radius for tire R12o
SV_R_R13I 0.5153415724 ; m ! Deflected radius for tire R13i
SV_R_R13O 0.5153608129 ; m ! Deflected radius for tire R13o
SV_R_R14I 0.5146840726 ; m ! Deflected radius for tire R14i
SV_R_R14O 0.514588747 ; m ! Deflected radius for tire R14o
SV_R_R15I 0.5150364471 ; m ! Deflected radius for tire R15i
SV_R_R15O 0.5150181117 ; m ! Deflected radius for tire R15o
SV_R_R16I 0.5149269688 ; m ! Deflected radius for tire R16i
SV_R_R16O 0.514879787 ; m ! Deflected radius for tire R16o
SV_R_R17I 0.5141013764 ; m ! Deflected radius for tire R17i
SV_R_R17O 0.5139411558 ; m ! Deflected radius for tire R17o
SV_R_R18I 0.515297838 ; m ! Deflected radius for tire R18i
SV_R_R18O 0.5153203434 ; m ! Deflected radius for tire R18o
SV_R_R19I 0.515406495 ; m ! Deflected radius for tire R19i
SV_R_R19O 0.5151596745 ; m ! Deflected radius for tire R19o
SV_R_R1I 0.5050336913 ; m ! Deflected radius for tire R1i
SV_R_R1O 0.5050336913 ; m ! Deflected radius for tire R1o
SV_R_R20I 0.5265778758 ; m ! Deflected radius for tire R20i
SV_R_R20O 0.5264949031 ; m ! Deflected radius for tire R20o
SV_R_R21I 0.5249275416 ; m ! Deflected radius for tire R21i
SV_R_R21O 0.524785907 ; m ! Deflected radius for tire R21o
SV_R_R22I 0.5189411806 ; m ! Deflected radius for tire R22i
SV_R_R22O 0.5188476321 ; m ! Deflected radius for tire R22o
SV_R_R23I 0.5171189055 ; m ! Deflected radius for tire R23i
SV_R_R23O 0.5170983943 ; m ! Deflected radius for tire R23o
SV_R_R24I 0.518094895 ; m ! Deflected radius for tire R24i
SV_R_R24O 0.5180926186 ; m ! Deflected radius for tire R24o
SV_R_R25I 0.5175327927 ; m ! Deflected radius for tire R25i
SV_R_R25O 0.5175341263 ; m ! Deflected radius for tire R25o
SV_R_R26I 0.5107851215 ; m ! Deflected radius for tire R26i
SV_R_R26O 0.5107824743 ; m ! Deflected radius for tire R26o
SV_R_R27I 0.5072063527 ; m ! Deflected radius for tire R27i
SV_R_R27O 0.5072163367 ; m ! Deflected radius for tire R27o
SV_R_R28I 0.5103178038 ; m ! Deflected radius for tire R28i
SV_R_R28O 0.5102794778 ; m ! Deflected radius for tire R28o
SV_R_R29I 0.6208596795 ; m ! Deflected radius for tire R29i
SV_R_R29O 0.620797896 ; m ! Deflected radius for tire R29o
SV_R_R2I 0.5050480037 ; m ! Deflected radius for tire R2i
SV_R_R2O 0.5050480037 ; m ! Deflected radius for tire R2o
SV_R_R30I 0.5990736545 ; m ! Deflected radius for tire R30i
SV_R_R30O 0.5990679419 ; m ! Deflected radius for tire R30o
SV_R_R31I 0.6252938058 ; m ! Deflected radius for tire R31i
SV_R_R31O 0.6253134516 ; m ! Deflected radius for tire R31o
SV_R_R32I 0.498311239 ; m ! Deflected radius for tire R32i
SV_R_R32O 0.4983565665 ; m ! Deflected radius for tire R32o
SV_R_R33I 0.5075275017 ; m ! Deflected radius for tire R33i
SV_R_R33O 0.5074926075 ; m ! Deflected radius for tire R33o
SV_R_R34I 0.6081169132 ; m ! Deflected radius for tire R34i
SV_R_R34O 0.6080595326 ; m ! Deflected radius for tire R34o
SV_R_R35I 0.5999066878 ; m ! Deflected radius for tire R35i
SV_R_R35O 0.5998578572 ; m ! Deflected radius for tire R35o
SV_R_R36I 0.5916456898 ; m ! Deflected radius for tire R36i
SV_R_R36O 0.5915868386 ; m ! Deflected radius for tire R36o
SV_R_R37I 0.5611022211 ; m ! Deflected radius for tire R37i
SV_R_R37O 0.5610571927 ; m ! Deflected radius for tire R37o
SV_R_R38I 0.5516283452 ; m ! Deflected radius for tire R38i
SV_R_R38O 0.5515770153 ; m ! Deflected radius for tire R38o
SV_R_R39I 0.5670911831 ; m ! Deflected radius for tire R39i
SV_R_R39O 0.5669253304 ; m ! Deflected radius for tire R39o
SV_R_R3I 0.5170371951 ; m ! Deflected radius for tire R3i
SV_R_R3O 0.5170368443 ; m ! Deflected radius for tire R3o
SV_R_R40I 0.5243129393 ; m ! Deflected radius for tire R40i
SV_R_R40O 0.5243904322 ; m ! Deflected radius for tire R40o
SV_R_R41I 0.518931194 ; m ! Deflected radius for tire R41i
SV_R_R41O 0.5187143855 ; m ! Deflected radius for tire R41o
SV_R_R42I 0.5194728048 ; m ! Deflected radius for tire R42i
SV_R_R42O 0.5195093513 ; m ! Deflected radius for tire R42o
SV_R_R43I 0.5151121146 ; m ! Deflected radius for tire R43i
SV_R_R43O 0.5151187941 ; m ! Deflected radius for tire R43o
SV_R_R44I 0.5148605649 ; m ! Deflected radius for tire R44i
SV_R_R44O 0.5148671794 ; m ! Deflected radius for tire R44o
SV_R_R45I 0.5146102884 ; m ! Deflected radius for tire R45i
SV_R_R45O 0.5146173625 ; m ! Deflected radius for tire R45o
SV_R_R46I 0.5106317416 ; m ! Deflected radius for tire R46i
SV_R_R46O 0.5106388172 ; m ! Deflected radius for tire R46o
SV_R_R47I 0.510487202 ; m ! Deflected radius for tire R47i
SV_R_R47O    0.510494 ; m ! Deflected radius for tire R47o
SV_R_R4I 0.5171504436 ; m ! Deflected radius for tire R4i
SV_R_R4O 0.5171500777 ; m ! Deflected radius for tire R4o
SV_R_R5I 0.5172639667 ; m ! Deflected radius for tire R5i
SV_R_R5O 0.5172637095 ; m ! Deflected radius for tire R5o
SV_R_R6I 0.5143771617 ; m ! Deflected radius for tire R6i
SV_R_R6O 0.5143993941 ; m ! Deflected radius for tire R6o
SV_R_R7I 0.5143702214 ; m ! Deflected radius for tire R7i
SV_R_R7O 0.5143931272 ; m ! Deflected radius for tire R7o
SV_R_R8I 0.5143630135 ; m ! Deflected radius for tire R8i
SV_R_R8O 0.5143865553 ; m ! Deflected radius for tire R8o
SV_R_R9I 0.5146141313 ; m ! Deflected radius for tire R9i
SV_R_R9O 0.5146319843 ; m ! Deflected radius for tire R9o
SV_SHIFT_DELAY      0 ; - ! Is shifting delay in T.C. active?
SV_SLIP_LAT_L10I -0.0002777760257 ; - ! ODE: Lagged tan of lateral slip, tire L10i
SV_SLIP_LAT_L10O -0.0002792779733 ; - ! ODE: Lagged tan of lateral slip, tire L10o
SV_SLIP_LAT_L11I -0.0004032000575 ; - ! ODE: Lagged tan of lateral slip, tire L11i
SV_SLIP_LAT_L11O -0.0004053212203 ; - ! ODE: Lagged tan of lateral slip, tire L11o
SV_SLIP_LAT_L12I 0.0005002912029 ; - ! ODE: Lagged tan of lateral slip, tire L12i
SV_SLIP_LAT_L12O 0.0004967593223 ; - ! ODE: Lagged tan of lateral slip, tire L12o
SV_SLIP_LAT_L13I -0.0002277363635 ; - ! ODE: Lagged tan of lateral slip, tire L13i
SV_SLIP_LAT_L13O -0.0002334551099 ; - ! ODE: Lagged tan of lateral slip, tire L13o
SV_SLIP_LAT_L14I 0.0007154716039 ; - ! ODE: Lagged tan of lateral slip, tire L14i
SV_SLIP_LAT_L14O 0.0006971963229 ; - ! ODE: Lagged tan of lateral slip, tire L14o
SV_SLIP_LAT_L15I 0.0002862466363 ; - ! ODE: Lagged tan of lateral slip, tire L15i
SV_SLIP_LAT_L15O 0.0002845393829 ; - ! ODE: Lagged tan of lateral slip, tire L15o
SV_SLIP_LAT_L16I 0.0005584604954 ; - ! ODE: Lagged tan of lateral slip, tire L16i
SV_SLIP_LAT_L16O 0.0005555195386 ; - ! ODE: Lagged tan of lateral slip, tire L16o
SV_SLIP_LAT_L17I 0.001157453296 ; - ! ODE: Lagged tan of lateral slip, tire L17i
SV_SLIP_LAT_L17O 0.001112024883 ; - ! ODE: Lagged tan of lateral slip, tire L17o
SV_SLIP_LAT_L18I -0.0002575309501 ; - ! ODE: Lagged tan of lateral slip, tire L18i
SV_SLIP_LAT_L18O -0.0002893307183 ; - ! ODE: Lagged tan of lateral slip, tire L18o
SV_SLIP_LAT_L19I 0.001453955017 ; - ! ODE: Lagged tan of lateral slip, tire L19i
SV_SLIP_LAT_L19O 0.001362427725 ; - ! ODE: Lagged tan of lateral slip, tire L19o
SV_SLIP_LAT_L1I 0.0009181927052 ; - ! ODE: Lagged tan of lateral slip, tire L1i
SV_SLIP_LAT_L1O     0 ; - ! ODE: Lagged tan of lateral slip, tire L1o
SV_SLIP_LAT_L20I    0 ; - ! ODE: Lagged tan of lateral slip, tire L20i
SV_SLIP_LAT_L20O    0 ; - ! ODE: Lagged tan of lateral slip, tire L20o
SV_SLIP_LAT_L21I    0 ; - ! ODE: Lagged tan of lateral slip, tire L21i
SV_SLIP_LAT_L21O    0 ; - ! ODE: Lagged tan of lateral slip, tire L21o
SV_SLIP_LAT_L22I 0.008163967109 ; - ! ODE: Lagged tan of lateral slip, tire L22i
SV_SLIP_LAT_L22O 0.007940170719 ; - ! ODE: Lagged tan of lateral slip, tire L22o
SV_SLIP_LAT_L23I 4.637643892e-05 ; - ! ODE: Lagged tan of lateral slip, tire L23i
SV_SLIP_LAT_L23O 3.87714125e-05 ; - ! ODE: Lagged tan of lateral slip, tire L23o
SV_SLIP_LAT_L24I 0.0001333268944 ; - ! ODE: Lagged tan of lateral slip, tire L24i
SV_SLIP_LAT_L24O 0.0001311282761 ; - ! ODE: Lagged tan of lateral slip, tire L24o
SV_SLIP_LAT_L25I 0.0003738127012 ; - ! ODE: Lagged tan of lateral slip, tire L25i
SV_SLIP_LAT_L25O 0.0003735362355 ; - ! ODE: Lagged tan of lateral slip, tire L25o
SV_SLIP_LAT_L26I 0.0004483429136 ; - ! ODE: Lagged tan of lateral slip, tire L26i
SV_SLIP_LAT_L26O 0.0004479050098 ; - ! ODE: Lagged tan of lateral slip, tire L26o
SV_SLIP_LAT_L27I -0.0003698837733 ; - ! ODE: Lagged tan of lateral slip, tire L27i
SV_SLIP_LAT_L27O -0.0003709100134 ; - ! ODE: Lagged tan of lateral slip, tire L27o
SV_SLIP_LAT_L28I -0.0001327153878 ; - ! ODE: Lagged tan of lateral slip, tire L28i
SV_SLIP_LAT_L28O -0.0001322129827 ; - ! ODE: Lagged tan of lateral slip, tire L28o
SV_SLIP_LAT_L29I    0 ; - ! ODE: Lagged tan of lateral slip, tire L29i
SV_SLIP_LAT_L29O    0 ; - ! ODE: Lagged tan of lateral slip, tire L29o
SV_SLIP_LAT_L2I 0.0004917474998 ; - ! ODE: Lagged tan of lateral slip, tire L2i
SV_SLIP_LAT_L2O     0 ; - ! ODE: Lagged tan of lateral slip, tire L2o
SV_SLIP_LAT_L30I    0 ; - ! ODE: Lagged tan of lateral slip, tire L30i
SV_SLIP_LAT_L30O    0 ; - ! ODE: Lagged tan of lateral slip, tire L30o
SV_SLIP_LAT_L31I    0 ; - ! ODE: Lagged tan of lateral slip, tire L31i
SV_SLIP_LAT_L31O    0 ; - ! ODE: Lagged tan of lateral slip, tire L31o
SV_SLIP_LAT_L32I 5.256760776e-05 ; - ! ODE: Lagged tan of lateral slip, tire L32i
SV_SLIP_LAT_L32O 5.015277925e-05 ; - ! ODE: Lagged tan of lateral slip, tire L32o
SV_SLIP_LAT_L33I 0.001462276426 ; - ! ODE: Lagged tan of lateral slip, tire L33i
SV_SLIP_LAT_L33O 0.001443984554 ; - ! ODE: Lagged tan of lateral slip, tire L33o
SV_SLIP_LAT_L34I    0 ; - ! ODE: Lagged tan of lateral slip, tire L34i
SV_SLIP_LAT_L34O    0 ; - ! ODE: Lagged tan of lateral slip, tire L34o
SV_SLIP_LAT_L35I    0 ; - ! ODE: Lagged tan of lateral slip, tire L35i
SV_SLIP_LAT_L35O    0 ; - ! ODE: Lagged tan of lateral slip, tire L35o
SV_SLIP_LAT_L36I    0 ; - ! ODE: Lagged tan of lateral slip, tire L36i
SV_SLIP_LAT_L36O    0 ; - ! ODE: Lagged tan of lateral slip, tire L36o
SV_SLIP_LAT_L37I    0 ; - ! ODE: Lagged tan of lateral slip, tire L37i
SV_SLIP_LAT_L37O    0 ; - ! ODE: Lagged tan of lateral slip, tire L37o
SV_SLIP_LAT_L38I    0 ; - ! ODE: Lagged tan of lateral slip, tire L38i
SV_SLIP_LAT_L38O    0 ; - ! ODE: Lagged tan of lateral slip, tire L38o
SV_SLIP_LAT_L39I    0 ; - ! ODE: Lagged tan of lateral slip, tire L39i
SV_SLIP_LAT_L39O    0 ; - ! ODE: Lagged tan of lateral slip, tire L39o
SV_SLIP_LAT_L3I 2.588985115e-05 ; - ! ODE: Lagged tan of lateral slip, tire L3i
SV_SLIP_LAT_L3O 2.581639449e-05 ; - ! ODE: Lagged tan of lateral slip, tire L3o
SV_SLIP_LAT_L40I    0 ; - ! ODE: Lagged tan of lateral slip, tire L40i
SV_SLIP_LAT_L40O    0 ; - ! ODE: Lagged tan of lateral slip, tire L40o
SV_SLIP_LAT_L41I 7.581220812e-05 ; - ! ODE: Lagged tan of lateral slip, tire L41i
SV_SLIP_LAT_L41O    0 ; - ! ODE: Lagged tan of lateral slip, tire L41o
SV_SLIP_LAT_L42I -0.001015286577 ; - ! ODE: Lagged tan of lateral slip, tire L42i
SV_SLIP_LAT_L42O -0.0009930367293 ; - ! ODE: Lagged tan of lateral slip, tire L42o
SV_SLIP_LAT_L43I -0.0002329055654 ; - ! ODE: Lagged tan of lateral slip, tire L43i
SV_SLIP_LAT_L43O -0.0002330322785 ; - ! ODE: Lagged tan of lateral slip, tire L43o
SV_SLIP_LAT_L44I -0.0002777998753 ; - ! ODE: Lagged tan of lateral slip, tire L44i
SV_SLIP_LAT_L44O -0.0002779667106 ; - ! ODE: Lagged tan of lateral slip, tire L44o
SV_SLIP_LAT_L45I -0.0003248196197 ; - ! ODE: Lagged tan of lateral slip, tire L45i
SV_SLIP_LAT_L45O -0.0003250351072 ; - ! ODE: Lagged tan of lateral slip, tire L45o
SV_SLIP_LAT_L46I -0.0002667415195 ; - ! ODE: Lagged tan of lateral slip, tire L46i
SV_SLIP_LAT_L46O -0.0002668973451 ; - ! ODE: Lagged tan of lateral slip, tire L46o
SV_SLIP_LAT_L47I -0.0003013370602 ; - ! ODE: Lagged tan of lateral slip, tire L47i
SV_SLIP_LAT_L47O -0.0003015174259 ; - ! ODE: Lagged tan of lateral slip, tire L47o
SV_SLIP_LAT_L4I -1.189401381e-05 ; - ! ODE: Lagged tan of lateral slip, tire L4i
SV_SLIP_LAT_L4O -1.196396631e-05 ; - ! ODE: Lagged tan of lateral slip, tire L4o
SV_SLIP_LAT_L5I -4.808171459e-05 ; - ! ODE: Lagged tan of lateral slip, tire L5i
SV_SLIP_LAT_L5O -4.815596228e-05 ; - ! ODE: Lagged tan of lateral slip, tire L5o
SV_SLIP_LAT_L6I -0.0002216860666 ; - ! ODE: Lagged tan of lateral slip, tire L6i
SV_SLIP_LAT_L6O -0.0002221091761 ; - ! ODE: Lagged tan of lateral slip, tire L6o
SV_SLIP_LAT_L7I -0.0002084708853 ; - ! ODE: Lagged tan of lateral slip, tire L7i
SV_SLIP_LAT_L7O -0.0002089052984 ; - ! ODE: Lagged tan of lateral slip, tire L7o
SV_SLIP_LAT_L8I -0.0001950429328 ; - ! ODE: Lagged tan of lateral slip, tire L8i
SV_SLIP_LAT_L8O -0.0001955008769 ; - ! ODE: Lagged tan of lateral slip, tire L8o
SV_SLIP_LAT_L9I -0.0001718367674 ; - ! ODE: Lagged tan of lateral slip, tire L9i
SV_SLIP_LAT_L9O -0.000173127487 ; - ! ODE: Lagged tan of lateral slip, tire L9o
SV_SLIP_LAT_R10I -0.0002705620427 ; - ! ODE: Lagged tan of lateral slip, tire R10i
SV_SLIP_LAT_R10O -0.0002690912482 ; - ! ODE: Lagged tan of lateral slip, tire R10o
SV_SLIP_LAT_R11I -0.0003931638763 ; - ! ODE: Lagged tan of lateral slip, tire R11i
SV_SLIP_LAT_R11O -0.000391148028 ; - ! ODE: Lagged tan of lateral slip, tire R11o
SV_SLIP_LAT_R12I 0.0005178772058 ; - ! ODE: Lagged tan of lateral slip, tire R12i
SV_SLIP_LAT_R12O 0.0005212746582 ; - ! ODE: Lagged tan of lateral slip, tire R12o
SV_SLIP_LAT_R13I -0.000200158855 ; - ! ODE: Lagged tan of lateral slip, tire R13i
SV_SLIP_LAT_R13O -0.0001945032382 ; - ! ODE: Lagged tan of lateral slip, tire R13o
SV_SLIP_LAT_R14I 0.0007986079784 ; - ! ODE: Lagged tan of lateral slip, tire R14i
SV_SLIP_LAT_R14O 0.0008157698454 ; - ! ODE: Lagged tan of lateral slip, tire R14o
SV_SLIP_LAT_R15I 0.0002943467028 ; - ! ODE: Lagged tan of lateral slip, tire R15i
SV_SLIP_LAT_R15O 0.0002962822257 ; - ! ODE: Lagged tan of lateral slip, tire R15o
SV_SLIP_LAT_R16I 0.0005735546494 ; - ! ODE: Lagged tan of lateral slip, tire R16i
SV_SLIP_LAT_R16O 0.0005799478042 ; - ! ODE: Lagged tan of lateral slip, tire R16o
SV_SLIP_LAT_R17I 0.00136092297 ; - ! ODE: Lagged tan of lateral slip, tire R17i
SV_SLIP_LAT_R17O 0.001429800221 ; - ! ODE: Lagged tan of lateral slip, tire R17o
SV_SLIP_LAT_R18I -0.0001039211112 ; - ! ODE: Lagged tan of lateral slip, tire R18i
SV_SLIP_LAT_R18O -7.205634466e-05 ; - ! ODE: Lagged tan of lateral slip, tire R18o
SV_SLIP_LAT_R19I 0.003047567514 ; - ! ODE: Lagged tan of lateral slip, tire R19i
SV_SLIP_LAT_R19O 0.003272255242 ; - ! ODE: Lagged tan of lateral slip, tire R19o
SV_SLIP_LAT_R1I -0.0003358939904 ; - ! ODE: Lagged tan of lateral slip, tire R1i
SV_SLIP_LAT_R1O     0 ; - ! ODE: Lagged tan of lateral slip, tire R1o
SV_SLIP_LAT_R20I    0 ; - ! ODE: Lagged tan of lateral slip, tire R20i
SV_SLIP_LAT_R20O    0 ; - ! ODE: Lagged tan of lateral slip, tire R20o
SV_SLIP_LAT_R21I    0 ; - ! ODE: Lagged tan of lateral slip, tire R21i
SV_SLIP_LAT_R21O    0 ; - ! ODE: Lagged tan of lateral slip, tire R21o
SV_SLIP_LAT_R22I 0.005365924741 ; - ! ODE: Lagged tan of lateral slip, tire R22i
SV_SLIP_LAT_R22O 0.004580918362 ; - ! ODE: Lagged tan of lateral slip, tire R22o
SV_SLIP_LAT_R23I 8.262717095e-05 ; - ! ODE: Lagged tan of lateral slip, tire R23i
SV_SLIP_LAT_R23O 8.995873031e-05 ; - ! ODE: Lagged tan of lateral slip, tire R23o
SV_SLIP_LAT_R24I 0.0001438829642 ; - ! ODE: Lagged tan of lateral slip, tire R24i
SV_SLIP_LAT_R24O 0.0001460502795 ; - ! ODE: Lagged tan of lateral slip, tire R24o
SV_SLIP_LAT_R25I 0.0003752680176 ; - ! ODE: Lagged tan of lateral slip, tire R25i
SV_SLIP_LAT_R25O 0.0003755688195 ; - ! ODE: Lagged tan of lateral slip, tire R25o
SV_SLIP_LAT_R26I 0.0004459013064 ; - ! ODE: Lagged tan of lateral slip, tire R26i
SV_SLIP_LAT_R26O 0.0004463311029 ; - ! ODE: Lagged tan of lateral slip, tire R26o
SV_SLIP_LAT_R27I -0.0003258622678 ; - ! ODE: Lagged tan of lateral slip, tire R27i
SV_SLIP_LAT_R27O -0.0003255571901 ; - ! ODE: Lagged tan of lateral slip, tire R27o
SV_SLIP_LAT_R28I -0.0001055640366 ; - ! ODE: Lagged tan of lateral slip, tire R28i
SV_SLIP_LAT_R28O -7.596084825e-05 ; - ! ODE: Lagged tan of lateral slip, tire R28o
SV_SLIP_LAT_R29I    0 ; - ! ODE: Lagged tan of lateral slip, tire R29i
SV_SLIP_LAT_R29O    0 ; - ! ODE: Lagged tan of lateral slip, tire R29o
SV_SLIP_LAT_R2I -0.0006998719846 ; - ! ODE: Lagged tan of lateral slip, tire R2i
SV_SLIP_LAT_R2O     0 ; - ! ODE: Lagged tan of lateral slip, tire R2o
SV_SLIP_LAT_R30I    0 ; - ! ODE: Lagged tan of lateral slip, tire R30i
SV_SLIP_LAT_R30O    0 ; - ! ODE: Lagged tan of lateral slip, tire R30o
SV_SLIP_LAT_R31I    0 ; - ! ODE: Lagged tan of lateral slip, tire R31i
SV_SLIP_LAT_R31O    0 ; - ! ODE: Lagged tan of lateral slip, tire R31o
SV_SLIP_LAT_R32I 6.460805928e-05 ; - ! ODE: Lagged tan of lateral slip, tire R32i
SV_SLIP_LAT_R32O 6.744549679e-05 ; - ! ODE: Lagged tan of lateral slip, tire R32o
SV_SLIP_LAT_R33I 0.00162793309 ; - ! ODE: Lagged tan of lateral slip, tire R33i
SV_SLIP_LAT_R33O 0.001665624323 ; - ! ODE: Lagged tan of lateral slip, tire R33o
SV_SLIP_LAT_R34I    0 ; - ! ODE: Lagged tan of lateral slip, tire R34i
SV_SLIP_LAT_R34O    0 ; - ! ODE: Lagged tan of lateral slip, tire R34o
SV_SLIP_LAT_R35I    0 ; - ! ODE: Lagged tan of lateral slip, tire R35i
SV_SLIP_LAT_R35O    0 ; - ! ODE: Lagged tan of lateral slip, tire R35o
SV_SLIP_LAT_R36I    0 ; - ! ODE: Lagged tan of lateral slip, tire R36i
SV_SLIP_LAT_R36O    0 ; - ! ODE: Lagged tan of lateral slip, tire R36o
SV_SLIP_LAT_R37I    0 ; - ! ODE: Lagged tan of lateral slip, tire R37i
SV_SLIP_LAT_R37O    0 ; - ! ODE: Lagged tan of lateral slip, tire R37o
SV_SLIP_LAT_R38I    0 ; - ! ODE: Lagged tan of lateral slip, tire R38i
SV_SLIP_LAT_R38O    0 ; - ! ODE: Lagged tan of lateral slip, tire R38o
SV_SLIP_LAT_R39I    0 ; - ! ODE: Lagged tan of lateral slip, tire R39i
SV_SLIP_LAT_R39O    0 ; - ! ODE: Lagged tan of lateral slip, tire R39o
SV_SLIP_LAT_R3I 2.626240404e-05 ; - ! ODE: Lagged tan of lateral slip, tire R3i
SV_SLIP_LAT_R3O 2.633769226e-05 ; - ! ODE: Lagged tan of lateral slip, tire R3o
SV_SLIP_LAT_R40I    0 ; - ! ODE: Lagged tan of lateral slip, tire R40i
SV_SLIP_LAT_R40O    0 ; - ! ODE: Lagged tan of lateral slip, tire R40o
SV_SLIP_LAT_R41I 0.003428531144 ; - ! ODE: Lagged tan of lateral slip, tire R41i
SV_SLIP_LAT_R41O 0.003240511368 ; - ! ODE: Lagged tan of lateral slip, tire R41o
SV_SLIP_LAT_R42I -0.0008949469421 ; - ! ODE: Lagged tan of lateral slip, tire R42i
SV_SLIP_LAT_R42O -0.0008918876684 ; - ! ODE: Lagged tan of lateral slip, tire R42o
SV_SLIP_LAT_R43I -0.0002322945672 ; - ! ODE: Lagged tan of lateral slip, tire R43i
SV_SLIP_LAT_R43O -0.0002321695691 ; - ! ODE: Lagged tan of lateral slip, tire R43o
SV_SLIP_LAT_R44I -0.0002769958574 ; - ! ODE: Lagged tan of lateral slip, tire R44i
SV_SLIP_LAT_R44O -0.0002768314624 ; - ! ODE: Lagged tan of lateral slip, tire R44o
SV_SLIP_LAT_R45I -0.000323782013 ; - ! ODE: Lagged tan of lateral slip, tire R45i
SV_SLIP_LAT_R45O -0.0003235700366 ; - ! ODE: Lagged tan of lateral slip, tire R45o
SV_SLIP_LAT_R46I -0.0002659892801 ; - ! ODE: Lagged tan of lateral slip, tire R46i
SV_SLIP_LAT_R46O -0.0002658352079 ; - ! ODE: Lagged tan of lateral slip, tire R46o
SV_SLIP_LAT_R47I -0.0003004666338 ; - ! ODE: Lagged tan of lateral slip, tire R47i
SV_SLIP_LAT_R47O -0.000300288412 ; - ! ODE: Lagged tan of lateral slip, tire R47o
SV_SLIP_LAT_R4I -1.153918052e-05 ; - ! ODE: Lagged tan of lateral slip, tire R4i
SV_SLIP_LAT_R4O -1.146746238e-05 ; - ! ODE: Lagged tan of lateral slip, tire R4o
SV_SLIP_LAT_R5I -4.770540453e-05 ; - ! ODE: Lagged tan of lateral slip, tire R5i
SV_SLIP_LAT_R5O -4.762940744e-05 ; - ! ODE: Lagged tan of lateral slip, tire R5o
SV_SLIP_LAT_R6I -0.0002196521641 ; - ! ODE: Lagged tan of lateral slip, tire R6i
SV_SLIP_LAT_R6O -0.0002192373164 ; - ! ODE: Lagged tan of lateral slip, tire R6o
SV_SLIP_LAT_R7I -0.0002063835907 ; - ! ODE: Lagged tan of lateral slip, tire R7i
SV_SLIP_LAT_R7O -0.000205958047 ; - ! ODE: Lagged tan of lateral slip, tire R7o
SV_SLIP_LAT_R8I -0.0001928426939 ; - ! ODE: Lagged tan of lateral slip, tire R8i
SV_SLIP_LAT_R8O -0.0001923941441 ; - ! ODE: Lagged tan of lateral slip, tire R8o
SV_SLIP_LAT_R9I -0.0001655888327 ; - ! ODE: Lagged tan of lateral slip, tire R9i
SV_SLIP_LAT_R9O -0.0001643052189 ; - ! ODE: Lagged tan of lateral slip, tire R9o
SV_SLIP_LONG_L10I -0.0005591078875 ; - ! ODE: Lagged long. slip, tire L10i
SV_SLIP_LONG_L10O -0.0005465629195 ; - ! ODE: Lagged long. slip, tire L10o
SV_SLIP_LONG_L11I -0.0005577674652 ; - ! ODE: Lagged long. slip, tire L11i
SV_SLIP_LONG_L11O -0.0005447914772 ; - ! ODE: Lagged long. slip, tire L11o
SV_SLIP_LONG_L12I -0.000570868092 ; - ! ODE: Lagged long. slip, tire L12i
SV_SLIP_LONG_L12O -0.0005599938724 ; - ! ODE: Lagged long. slip, tire L12o
SV_SLIP_LONG_L13I -0.0005719339245 ; - ! ODE: Lagged long. slip, tire L13i
SV_SLIP_LONG_L13O -0.000559098473 ; - ! ODE: Lagged long. slip, tire L13o
SV_SLIP_LONG_L14I -0.0005920224178 ; - ! ODE: Lagged long. slip, tire L14i
SV_SLIP_LONG_L14O -0.0005817961264 ; - ! ODE: Lagged long. slip, tire L14o
SV_SLIP_LONG_L15I -0.0005509440256 ; - ! ODE: Lagged long. slip, tire L15i
SV_SLIP_LONG_L15O -0.0005393769214 ; - ! ODE: Lagged long. slip, tire L15o
SV_SLIP_LONG_L16I -0.0005968718307 ; - ! ODE: Lagged long. slip, tire L16i
SV_SLIP_LONG_L16O -0.0005861686638 ; - ! ODE: Lagged long. slip, tire L16o
SV_SLIP_LONG_L17I -0.0005655657806 ; - ! ODE: Lagged long. slip, tire L17i
SV_SLIP_LONG_L17O -0.0005562223895 ; - ! ODE: Lagged long. slip, tire L17o
SV_SLIP_LONG_L18I -0.0005561504325 ; - ! ODE: Lagged long. slip, tire L18i
SV_SLIP_LONG_L18O -0.0005421070795 ; - ! ODE: Lagged long. slip, tire L18o
SV_SLIP_LONG_L19I -0.0005808484992 ; - ! ODE: Lagged long. slip, tire L19i
SV_SLIP_LONG_L19O -0.0005751728149 ; - ! ODE: Lagged long. slip, tire L19o
SV_SLIP_LONG_L1I -0.0001876631967 ; - ! ODE: Lagged long. slip, tire L1i
SV_SLIP_LONG_L1O    0 ; - ! ODE: Lagged long. slip, tire L1o
SV_SLIP_LONG_L20I   0 ; - ! ODE: Lagged long. slip, tire L20i
SV_SLIP_LONG_L20O   0 ; - ! ODE: Lagged long. slip, tire L20o
SV_SLIP_LONG_L21I   0 ; - ! ODE: Lagged long. slip, tire L21i
SV_SLIP_LONG_L21O   0 ; - ! ODE: Lagged long. slip, tire L21o
SV_SLIP_LONG_L22I 0.0008407532077 ; - ! ODE: Lagged long. slip, tire L22i
SV_SLIP_LONG_L22O 0.0007496109927 ; - ! ODE: Lagged long. slip, tire L22o
SV_SLIP_LONG_L23I -0.0009393793331 ; - ! ODE: Lagged long. slip, tire L23i
SV_SLIP_LONG_L23O -0.0009505610172 ; - ! ODE: Lagged long. slip, tire L23o
SV_SLIP_LONG_L24I -0.001347501578 ; - ! ODE: Lagged long. slip, tire L24i
SV_SLIP_LONG_L24O -0.001395971933 ; - ! ODE: Lagged long. slip, tire L24o
SV_SLIP_LONG_L25I -0.0007082272038 ; - ! ODE: Lagged long. slip, tire L25i
SV_SLIP_LONG_L25O -0.0006498641388 ; - ! ODE: Lagged long. slip, tire L25o
SV_SLIP_LONG_L26I -0.0006183442487 ; - ! ODE: Lagged long. slip, tire L26i
SV_SLIP_LONG_L26O -0.0006511464825 ; - ! ODE: Lagged long. slip, tire L26o
SV_SLIP_LONG_L27I 0.000259404344 ; - ! ODE: Lagged long. slip, tire L27i
SV_SLIP_LONG_L27O 0.0003619754671 ; - ! ODE: Lagged long. slip, tire L27o
SV_SLIP_LONG_L28I 0.0005610172686 ; - ! ODE: Lagged long. slip, tire L28i
SV_SLIP_LONG_L28O 0.0005645452605 ; - ! ODE: Lagged long. slip, tire L28o
SV_SLIP_LONG_L29I   0 ; - ! ODE: Lagged long. slip, tire L29i
SV_SLIP_LONG_L29O   0 ; - ! ODE: Lagged long. slip, tire L29o
SV_SLIP_LONG_L2I -0.000184953794 ; - ! ODE: Lagged long. slip, tire L2i
SV_SLIP_LONG_L2O    0 ; - ! ODE: Lagged long. slip, tire L2o
SV_SLIP_LONG_L30I   0 ; - ! ODE: Lagged long. slip, tire L30i
SV_SLIP_LONG_L30O   0 ; - ! ODE: Lagged long. slip, tire L30o
SV_SLIP_LONG_L31I   0 ; - ! ODE: Lagged long. slip, tire L31i
SV_SLIP_LONG_L31O   0 ; - ! ODE: Lagged long. slip, tire L31o
SV_SLIP_LONG_L32I 0.0004727189908 ; - ! ODE: Lagged long. slip, tire L32i
SV_SLIP_LONG_L32O 0.0004295519568 ; - ! ODE: Lagged long. slip, tire L32o
SV_SLIP_LONG_L33I -0.000496131474 ; - ! ODE: Lagged long. slip, tire L33i
SV_SLIP_LONG_L33O -0.0003047593523 ; - ! ODE: Lagged long. slip, tire L33o
SV_SLIP_LONG_L34I   0 ; - ! ODE: Lagged long. slip, tire L34i
SV_SLIP_LONG_L34O   0 ; - ! ODE: Lagged long. slip, tire L34o
SV_SLIP_LONG_L35I   0 ; - ! ODE: Lagged long. slip, tire L35i
SV_SLIP_LONG_L35O   0 ; - ! ODE: Lagged long. slip, tire L35o
SV_SLIP_LONG_L36I   0 ; - ! ODE: Lagged long. slip, tire L36i
SV_SLIP_LONG_L36O   0 ; - ! ODE: Lagged long. slip, tire L36o
SV_SLIP_LONG_L37I   0 ; - ! ODE: Lagged long. slip, tire L37i
SV_SLIP_LONG_L37O   0 ; - ! ODE: Lagged long. slip, tire L37o
SV_SLIP_LONG_L38I   0 ; - ! ODE: Lagged long. slip, tire L38i
SV_SLIP_LONG_L38O   0 ; - ! ODE: Lagged long. slip, tire L38o
SV_SLIP_LONG_L39I   0 ; - ! ODE: Lagged long. slip, tire L39i
SV_SLIP_LONG_L39O   0 ; - ! ODE: Lagged long. slip, tire L39o
SV_SLIP_LONG_L3I 0.01269349695 ; - ! ODE: Lagged long. slip, tire L3i
SV_SLIP_LONG_L3O 0.01268299697 ; - ! ODE: Lagged long. slip, tire L3o
SV_SLIP_LONG_L40I   0 ; - ! ODE: Lagged long. slip, tire L40i
SV_SLIP_LONG_L40O   0 ; - ! ODE: Lagged long. slip, tire L40o
SV_SLIP_LONG_L41I -0.002674328896 ; - ! ODE: Lagged long. slip, tire L41i
SV_SLIP_LONG_L41O   0 ; - ! ODE: Lagged long. slip, tire L41o
SV_SLIP_LONG_L42I -0.003386022161 ; - ! ODE: Lagged long. slip, tire L42i
SV_SLIP_LONG_L42O -0.003379104544 ; - ! ODE: Lagged long. slip, tire L42o
SV_SLIP_LONG_L43I -0.000344328471 ; - ! ODE: Lagged long. slip, tire L43i
SV_SLIP_LONG_L43O -0.0003324561749 ; - ! ODE: Lagged long. slip, tire L43o
SV_SLIP_LONG_L44I -0.0003361982144 ; - ! ODE: Lagged long. slip, tire L44i
SV_SLIP_LONG_L44O -0.0003246666189 ; - ! ODE: Lagged long. slip, tire L44o
SV_SLIP_LONG_L45I -0.0003280678348 ; - ! ODE: Lagged long. slip, tire L45i
SV_SLIP_LONG_L45O -0.0003239377907 ; - ! ODE: Lagged long. slip, tire L45o
SV_SLIP_LONG_L46I -0.0002262115516 ; - ! ODE: Lagged long. slip, tire L46i
SV_SLIP_LONG_L46O -0.0002141360168 ; - ! ODE: Lagged long. slip, tire L46o
SV_SLIP_LONG_L47I -0.0002287524086 ; - ! ODE: Lagged long. slip, tire L47i
SV_SLIP_LONG_L47O -0.000216859441 ; - ! ODE: Lagged long. slip, tire L47o
SV_SLIP_LONG_L4I 0.01305987553 ; - ! ODE: Lagged long. slip, tire L4i
SV_SLIP_LONG_L4O 0.01304957442 ; - ! ODE: Lagged long. slip, tire L4o
SV_SLIP_LONG_L5I 0.01359854583 ; - ! ODE: Lagged long. slip, tire L5i
SV_SLIP_LONG_L5O 0.01358844837 ; - ! ODE: Lagged long. slip, tire L5o
SV_SLIP_LONG_L6I -0.0005679031429 ; - ! ODE: Lagged long. slip, tire L6i
SV_SLIP_LONG_L6O -0.0005557841692 ; - ! ODE: Lagged long. slip, tire L6o
SV_SLIP_LONG_L7I -0.0005659423391 ; - ! ODE: Lagged long. slip, tire L7i
SV_SLIP_LONG_L7O -0.0005538032804 ; - ! ODE: Lagged long. slip, tire L7o
SV_SLIP_LONG_L8I -0.0005641147011 ; - ! ODE: Lagged long. slip, tire L8i
SV_SLIP_LONG_L8O -0.0005519565427 ; - ! ODE: Lagged long. slip, tire L8o
SV_SLIP_LONG_L9I -0.0005634522612 ; - ! ODE: Lagged long. slip, tire L9i
SV_SLIP_LONG_L9O -0.0005511924206 ; - ! ODE: Lagged long. slip, tire L9o
SV_SLIP_LONG_R10I -0.0005633283054 ; - ! ODE: Lagged long. slip, tire R10i
SV_SLIP_LONG_R10O -0.0005758132902 ; - ! ODE: Lagged long. slip, tire R10o
SV_SLIP_LONG_R11I -0.0005694985718 ; - ! ODE: Lagged long. slip, tire R11i
SV_SLIP_LONG_R11O -0.0005824250129 ; - ! ODE: Lagged long. slip, tire R11o
SV_SLIP_LONG_R12I -0.0005770933221 ; - ! ODE: Lagged long. slip, tire R12i
SV_SLIP_LONG_R12O -0.0005879858739 ; - ! ODE: Lagged long. slip, tire R12o
SV_SLIP_LONG_R13I -0.0005839739976 ; - ! ODE: Lagged long. slip, tire R13i
SV_SLIP_LONG_R13O -0.0005966911198 ; - ! ODE: Lagged long. slip, tire R13o
SV_SLIP_LONG_R14I -0.0005948491687 ; - ! ODE: Lagged long. slip, tire R14i
SV_SLIP_LONG_R14O -0.0006051430034 ; - ! ODE: Lagged long. slip, tire R14o
SV_SLIP_LONG_R15I -0.0005622101225 ; - ! ODE: Lagged long. slip, tire R15i
SV_SLIP_LONG_R15O -0.0005737704282 ; - ! ODE: Lagged long. slip, tire R15o
SV_SLIP_LONG_R16I -0.0005966939569 ; - ! ODE: Lagged long. slip, tire R16i
SV_SLIP_LONG_R16O -0.0006074002275 ; - ! ODE: Lagged long. slip, tire R16o
SV_SLIP_LONG_R17I -0.0005724253028 ; - ! ODE: Lagged long. slip, tire R17i
SV_SLIP_LONG_R17O -0.0005820011515 ; - ! ODE: Lagged long. slip, tire R17o
SV_SLIP_LONG_R18I -0.0005720816018 ; - ! ODE: Lagged long. slip, tire R18i
SV_SLIP_LONG_R18O -0.0005858998103 ; - ! ODE: Lagged long. slip, tire R18o
SV_SLIP_LONG_R19I -0.0007190964171 ; - ! ODE: Lagged long. slip, tire R19i
SV_SLIP_LONG_R19O -0.0007246736754 ; - ! ODE: Lagged long. slip, tire R19o
SV_SLIP_LONG_R1I -0.0001881101981 ; - ! ODE: Lagged long. slip, tire R1i
SV_SLIP_LONG_R1O    0 ; - ! ODE: Lagged long. slip, tire R1o
SV_SLIP_LONG_R20I   0 ; - ! ODE: Lagged long. slip, tire R20i
SV_SLIP_LONG_R20O   0 ; - ! ODE: Lagged long. slip, tire R20o
SV_SLIP_LONG_R21I   0 ; - ! ODE: Lagged long. slip, tire R21i
SV_SLIP_LONG_R21O   0 ; - ! ODE: Lagged long. slip, tire R21o
SV_SLIP_LONG_R22I 0.005100753094 ; - ! ODE: Lagged long. slip, tire R22i
SV_SLIP_LONG_R22O 0.005194881022 ; - ! ODE: Lagged long. slip, tire R22o
SV_SLIP_LONG_R23I -0.001043675862 ; - ! ODE: Lagged long. slip, tire R23i
SV_SLIP_LONG_R23O -0.001032160597 ; - ! ODE: Lagged long. slip, tire R23o
SV_SLIP_LONG_R24I -0.001268165062 ; - ! ODE: Lagged long. slip, tire R24i
SV_SLIP_LONG_R24O -0.001218289084 ; - ! ODE: Lagged long. slip, tire R24o
SV_SLIP_LONG_R25I -0.001260182823 ; - ! ODE: Lagged long. slip, tire R25i
SV_SLIP_LONG_R25O -0.001318461943 ; - ! ODE: Lagged long. slip, tire R25o
SV_SLIP_LONG_R26I -0.0007372601635 ; - ! ODE: Lagged long. slip, tire R26i
SV_SLIP_LONG_R26O -0.0007042951651 ; - ! ODE: Lagged long. slip, tire R26o
SV_SLIP_LONG_R27I -0.0005769104535 ; - ! ODE: Lagged long. slip, tire R27i
SV_SLIP_LONG_R27O -0.0007296627422 ; - ! ODE: Lagged long. slip, tire R27o
SV_SLIP_LONG_R28I 0.0002637595404 ; - ! ODE: Lagged long. slip, tire R28i
SV_SLIP_LONG_R28O 0.000306780593 ; - ! ODE: Lagged long. slip, tire R28o
SV_SLIP_LONG_R29I   0 ; - ! ODE: Lagged long. slip, tire R29i
SV_SLIP_LONG_R29O   0 ; - ! ODE: Lagged long. slip, tire R29o
SV_SLIP_LONG_R2I -0.0002142742737 ; - ! ODE: Lagged long. slip, tire R2i
SV_SLIP_LONG_R2O    0 ; - ! ODE: Lagged long. slip, tire R2o
SV_SLIP_LONG_R30I   0 ; - ! ODE: Lagged long. slip, tire R30i
SV_SLIP_LONG_R30O   0 ; - ! ODE: Lagged long. slip, tire R30o
SV_SLIP_LONG_R31I   0 ; - ! ODE: Lagged long. slip, tire R31i
SV_SLIP_LONG_R31O   0 ; - ! ODE: Lagged long. slip, tire R31o
SV_SLIP_LONG_R32I 0.0003204101481 ; - ! ODE: Lagged long. slip, tire R32i
SV_SLIP_LONG_R32O 0.0004182073647 ; - ! ODE: Lagged long. slip, tire R32o
SV_SLIP_LONG_R33I -0.002039036387 ; - ! ODE: Lagged long. slip, tire R33i
SV_SLIP_LONG_R33O -0.002197439696 ; - ! ODE: Lagged long. slip, tire R33o
SV_SLIP_LONG_R34I   0 ; - ! ODE: Lagged long. slip, tire R34i
SV_SLIP_LONG_R34O   0 ; - ! ODE: Lagged long. slip, tire R34o
SV_SLIP_LONG_R35I   0 ; - ! ODE: Lagged long. slip, tire R35i
SV_SLIP_LONG_R35O   0 ; - ! ODE: Lagged long. slip, tire R35o
SV_SLIP_LONG_R36I   0 ; - ! ODE: Lagged long. slip, tire R36i
SV_SLIP_LONG_R36O   0 ; - ! ODE: Lagged long. slip, tire R36o
SV_SLIP_LONG_R37I   0 ; - ! ODE: Lagged long. slip, tire R37i
SV_SLIP_LONG_R37O   0 ; - ! ODE: Lagged long. slip, tire R37o
SV_SLIP_LONG_R38I   0 ; - ! ODE: Lagged long. slip, tire R38i
SV_SLIP_LONG_R38O   0 ; - ! ODE: Lagged long. slip, tire R38o
SV_SLIP_LONG_R39I   0 ; - ! ODE: Lagged long. slip, tire R39i
SV_SLIP_LONG_R39O   0 ; - ! ODE: Lagged long. slip, tire R39o
SV_SLIP_LONG_R3I 0.01267520618 ; - ! ODE: Lagged long. slip, tire R3i
SV_SLIP_LONG_R3O 0.01268569193 ; - ! ODE: Lagged long. slip, tire R3o
SV_SLIP_LONG_R40I   0 ; - ! ODE: Lagged long. slip, tire R40i
SV_SLIP_LONG_R40O   0 ; - ! ODE: Lagged long. slip, tire R40o
SV_SLIP_LONG_R41I -0.002244978857 ; - ! ODE: Lagged long. slip, tire R41i
SV_SLIP_LONG_R41O -0.002303622625 ; - ! ODE: Lagged long. slip, tire R41o
SV_SLIP_LONG_R42I -0.00322829869 ; - ! ODE: Lagged long. slip, tire R42i
SV_SLIP_LONG_R42O -0.003236340693 ; - ! ODE: Lagged long. slip, tire R42o
SV_SLIP_LONG_R43I -0.000319429812 ; - ! ODE: Lagged long. slip, tire R43i
SV_SLIP_LONG_R43O -0.0003312911644 ; - ! ODE: Lagged long. slip, tire R43o
SV_SLIP_LONG_R44I -0.0003178202083 ; - ! ODE: Lagged long. slip, tire R44i
SV_SLIP_LONG_R44O -0.000322898281 ; - ! ODE: Lagged long. slip, tire R44o
SV_SLIP_LONG_R45I -0.0003119031655 ; - ! ODE: Lagged long. slip, tire R45i
SV_SLIP_LONG_R45O -0.0003162703015 ; - ! ODE: Lagged long. slip, tire R45o
SV_SLIP_LONG_R46I -0.0002110806219 ; - ! ODE: Lagged long. slip, tire R46i
SV_SLIP_LONG_R46O -0.0002231568281 ; - ! ODE: Lagged long. slip, tire R46o
SV_SLIP_LONG_R47I -0.0002160193408 ; - ! ODE: Lagged long. slip, tire R47i
SV_SLIP_LONG_R47O -0.0002189536202 ; - ! ODE: Lagged long. slip, tire R47o
SV_SLIP_LONG_R4I 0.01304362297 ; - ! ODE: Lagged long. slip, tire R4i
SV_SLIP_LONG_R4O 0.01305391173 ; - ! ODE: Lagged long. slip, tire R4o
SV_SLIP_LONG_R5I 0.01358799142 ; - ! ODE: Lagged long. slip, tire R5i
SV_SLIP_LONG_R5O 0.01359807751 ; - ! ODE: Lagged long. slip, tire R5o
SV_SLIP_LONG_R6I -0.0005686312132 ; - ! ODE: Lagged long. slip, tire R6i
SV_SLIP_LONG_R6O -0.0005806819002 ; - ! ODE: Lagged long. slip, tire R6o
SV_SLIP_LONG_R7I -0.0005667326127 ; - ! ODE: Lagged long. slip, tire R7i
SV_SLIP_LONG_R7O -0.000578802749 ; - ! ODE: Lagged long. slip, tire R7o
SV_SLIP_LONG_R8I -0.0005650079165 ; - ! ODE: Lagged long. slip, tire R8i
SV_SLIP_LONG_R8O -0.0005771022282 ; - ! ODE: Lagged long. slip, tire R8o
SV_SLIP_LONG_R9I -0.0005673799969 ; - ! ODE: Lagged long. slip, tire R9i
SV_SLIP_LONG_R9O -0.0005795593727 ; - ! ODE: Lagged long. slip, tire R9o
SV_SO_DIST 134.8927691 ; m ! ODE: Distance  used for tire "wandering profiles"
                       ! {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION 134.7638489 ; m ! Station of vehicle on driver path PATH_ID_DM {Station}
SV_STA_ROAD 134.7638489 ; m ! Vehicle station on road CURRENT_ROAD_ID {Sta_Road}
SV_STR_DM -0.02183489556 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD -0.02182369491 ; deg ! Road-wheel steer from driver model (prev. time
                             ! step)
SV_STR_IN_DGR_A1 -0.009591390583 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A10   0 ; - ! ODE: Steering gear input rate, axle 10
SV_STR_IN_DGR_A11   0 ; - ! ODE: Steering gear input rate, axle 11
SV_STR_IN_DGR_A12   0 ; - ! ODE: Steering gear input rate, axle 12
SV_STR_IN_DGR_A13   0 ; - ! ODE: Steering gear input rate, axle 13
SV_STR_IN_DGR_A14   0 ; - ! ODE: Steering gear input rate, axle 14
SV_STR_IN_DGR_A15   0 ; - ! ODE: Steering gear input rate, axle 15
SV_STR_IN_DGR_A16   0 ; - ! ODE: Steering gear input rate, axle 16
SV_STR_IN_DGR_A17   0 ; - ! ODE: Steering gear input rate, axle 17
SV_STR_IN_DGR_A18   0 ; - ! ODE: Steering gear input rate, axle 18
SV_STR_IN_DGR_A19   0 ; - ! ODE: Steering gear input rate, axle 19
SV_STR_IN_DGR_A2 -0.009591390583 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_DGR_A20   0 ; - ! ODE: Steering gear input rate, axle 20
SV_STR_IN_DGR_A21   0 ; - ! ODE: Steering gear input rate, axle 21
SV_STR_IN_DGR_A22   0 ; - ! ODE: Steering gear input rate, axle 22
SV_STR_IN_DGR_A23   0 ; - ! ODE: Steering gear input rate, axle 23
SV_STR_IN_DGR_A24   0 ; - ! ODE: Steering gear input rate, axle 24
SV_STR_IN_DGR_A25   0 ; - ! ODE: Steering gear input rate, axle 25
SV_STR_IN_DGR_A26   0 ; - ! ODE: Steering gear input rate, axle 26
SV_STR_IN_DGR_A27   0 ; - ! ODE: Steering gear input rate, axle 27
SV_STR_IN_DGR_A28   0 ; - ! ODE: Steering gear input rate, axle 28
SV_STR_IN_DGR_A29   0 ; - ! ODE: Steering gear input rate, axle 29
SV_STR_IN_DGR_A3    0 ; - ! ODE: Steering gear input rate, axle 3
SV_STR_IN_DGR_A30   0 ; - ! ODE: Steering gear input rate, axle 30
SV_STR_IN_DGR_A31   0 ; - ! ODE: Steering gear input rate, axle 31
SV_STR_IN_DGR_A32   0 ; - ! ODE: Steering gear input rate, axle 32
SV_STR_IN_DGR_A33   0 ; - ! ODE: Steering gear input rate, axle 33
SV_STR_IN_DGR_A34   0 ; - ! ODE: Steering gear input rate, axle 34
SV_STR_IN_DGR_A35   0 ; - ! ODE: Steering gear input rate, axle 35
SV_STR_IN_DGR_A36   0 ; - ! ODE: Steering gear input rate, axle 36
SV_STR_IN_DGR_A37   0 ; - ! ODE: Steering gear input rate, axle 37
SV_STR_IN_DGR_A38   0 ; - ! ODE: Steering gear input rate, axle 38
SV_STR_IN_DGR_A39   0 ; - ! ODE: Steering gear input rate, axle 39
SV_STR_IN_DGR_A4    0 ; - ! ODE: Steering gear input rate, axle 4
SV_STR_IN_DGR_A40   0 ; - ! ODE: Steering gear input rate, axle 40
SV_STR_IN_DGR_A41   0 ; - ! ODE: Steering gear input rate, axle 41
SV_STR_IN_DGR_A42   0 ; - ! ODE: Steering gear input rate, axle 42
SV_STR_IN_DGR_A43   0 ; - ! ODE: Steering gear input rate, axle 43
SV_STR_IN_DGR_A44   0 ; - ! ODE: Steering gear input rate, axle 44
SV_STR_IN_DGR_A45   0 ; - ! ODE: Steering gear input rate, axle 45
SV_STR_IN_DGR_A46   0 ; - ! ODE: Steering gear input rate, axle 46
SV_STR_IN_DGR_A47   0 ; - ! ODE: Steering gear input rate, axle 47
SV_STR_IN_DGR_A5    0 ; - ! ODE: Steering gear input rate, axle 5
SV_STR_IN_DGR_A6    0 ; - ! ODE: Steering gear input rate, axle 6
SV_STR_IN_DGR_A7    0 ; - ! ODE: Steering gear input rate, axle 7
SV_STR_IN_DGR_A8    0 ; - ! ODE: Steering gear input rate, axle 8
SV_STR_IN_DGR_A9    0 ; - ! ODE: Steering gear input rate, axle 9
SV_STR_IN_GR_A1 -0.009536418795 ; - ! ODE: Steering gear input position, axle 1
                                ! {A_StrIn1}
SV_STR_IN_GR_A10    0 ; - ! ODE: Steering gear input position, axle 10 {A_StrIn10}
SV_STR_IN_GR_A11    0 ; - ! ODE: Steering gear input position, axle 11 {A_StrIn11}
SV_STR_IN_GR_A12    0 ; - ! ODE: Steering gear input position, axle 12 {A_StrIn12}
SV_STR_IN_GR_A13    0 ; - ! ODE: Steering gear input position, axle 13 {A_StrIn13}
SV_STR_IN_GR_A14    0 ; - ! ODE: Steering gear input position, axle 14 {A_StrIn14}
SV_STR_IN_GR_A15    0 ; - ! ODE: Steering gear input position, axle 15 {A_StrIn15}
SV_STR_IN_GR_A16    0 ; - ! ODE: Steering gear input position, axle 16 {A_StrIn16}
SV_STR_IN_GR_A17    0 ; - ! ODE: Steering gear input position, axle 17 {A_StrIn17}
SV_STR_IN_GR_A18    0 ; - ! ODE: Steering gear input position, axle 18 {A_StrIn18}
SV_STR_IN_GR_A19    0 ; - ! ODE: Steering gear input position, axle 19 {A_StrIn19}
SV_STR_IN_GR_A2 -0.009536418795 ; - ! ODE: Steering gear input position, axle 2
                                ! {A_StrIn2}
SV_STR_IN_GR_A20    0 ; - ! ODE: Steering gear input position, axle 20 {A_StrIn20}
SV_STR_IN_GR_A21    0 ; - ! ODE: Steering gear input position, axle 21 {A_StrIn21}
SV_STR_IN_GR_A22    0 ; - ! ODE: Steering gear input position, axle 22 {A_StrIn22}
SV_STR_IN_GR_A23    0 ; - ! ODE: Steering gear input position, axle 23 {A_StrIn23}
SV_STR_IN_GR_A24    0 ; - ! ODE: Steering gear input position, axle 24 {A_StrIn24}
SV_STR_IN_GR_A25    0 ; - ! ODE: Steering gear input position, axle 25 {A_StrIn25}
SV_STR_IN_GR_A26    0 ; - ! ODE: Steering gear input position, axle 26 {A_StrIn26}
SV_STR_IN_GR_A27    0 ; - ! ODE: Steering gear input position, axle 27 {A_StrIn27}
SV_STR_IN_GR_A28    0 ; - ! ODE: Steering gear input position, axle 28 {A_StrIn28}
SV_STR_IN_GR_A29    0 ; - ! ODE: Steering gear input position, axle 29 {A_StrIn29}
SV_STR_IN_GR_A3     0 ; - ! ODE: Steering gear input position, axle 3 {A_StrIn3}
SV_STR_IN_GR_A30    0 ; - ! ODE: Steering gear input position, axle 30 {A_StrIn30}
SV_STR_IN_GR_A31    0 ; - ! ODE: Steering gear input position, axle 31 {A_StrIn31}
SV_STR_IN_GR_A32    0 ; - ! ODE: Steering gear input position, axle 32 {A_StrIn32}
SV_STR_IN_GR_A33    0 ; - ! ODE: Steering gear input position, axle 33 {A_StrIn33}
SV_STR_IN_GR_A34    0 ; - ! ODE: Steering gear input position, axle 34 {A_StrIn34}
SV_STR_IN_GR_A35    0 ; - ! ODE: Steering gear input position, axle 35 {A_StrIn35}
SV_STR_IN_GR_A36    0 ; - ! ODE: Steering gear input position, axle 36 {A_StrIn36}
SV_STR_IN_GR_A37    0 ; - ! ODE: Steering gear input position, axle 37 {A_StrIn37}
SV_STR_IN_GR_A38    0 ; - ! ODE: Steering gear input position, axle 38 {A_StrIn38}
SV_STR_IN_GR_A39    0 ; - ! ODE: Steering gear input position, axle 39 {A_StrIn39}
SV_STR_IN_GR_A4     0 ; - ! ODE: Steering gear input position, axle 4 {A_StrIn4}
SV_STR_IN_GR_A40    0 ; - ! ODE: Steering gear input position, axle 40 {A_StrIn40}
SV_STR_IN_GR_A41    0 ; - ! ODE: Steering gear input position, axle 41 {A_StrIn41}
SV_STR_IN_GR_A42    0 ; - ! ODE: Steering gear input position, axle 42 {A_StrIn42}
SV_STR_IN_GR_A43    0 ; - ! ODE: Steering gear input position, axle 43 {A_StrIn43}
SV_STR_IN_GR_A44    0 ; - ! ODE: Steering gear input position, axle 44 {A_StrIn44}
SV_STR_IN_GR_A45    0 ; - ! ODE: Steering gear input position, axle 45 {A_StrIn45}
SV_STR_IN_GR_A46    0 ; - ! ODE: Steering gear input position, axle 46 {A_StrIn46}
SV_STR_IN_GR_A47    0 ; - ! ODE: Steering gear input position, axle 47 {A_StrIn47}
SV_STR_IN_GR_A5     0 ; - ! ODE: Steering gear input position, axle 5 {A_StrIn5}
SV_STR_IN_GR_A6     0 ; - ! ODE: Steering gear input position, axle 6 {A_StrIn6}
SV_STR_IN_GR_A7     0 ; - ! ODE: Steering gear input position, axle 7 {A_StrIn7}
SV_STR_IN_GR_A8     0 ; - ! ODE: Steering gear input position, axle 8 {A_StrIn8}
SV_STR_IN_GR_A9     0 ; - ! ODE: Steering gear input position, axle 9 {A_StrIn9}
SV_STR_KP_L1 -0.04495881562 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L10_OLD   0 ; deg ! Kingpin steer angle, wheel L10 (previous time step)
SV_STR_KP_L11_OLD   0 ; deg ! Kingpin steer angle, wheel L11 (previous time step)
SV_STR_KP_L12_OLD   0 ; deg ! Kingpin steer angle, wheel L12 (previous time step)
SV_STR_KP_L13_OLD   0 ; deg ! Kingpin steer angle, wheel L13 (previous time step)
SV_STR_KP_L14_OLD   0 ; deg ! Kingpin steer angle, wheel L14 (previous time step)
SV_STR_KP_L15_OLD   0 ; deg ! Kingpin steer angle, wheel L15 (previous time step)
SV_STR_KP_L16_OLD   0 ; deg ! Kingpin steer angle, wheel L16 (previous time step)
SV_STR_KP_L17_OLD   0 ; deg ! Kingpin steer angle, wheel L17 (previous time step)
SV_STR_KP_L18_OLD   0 ; deg ! Kingpin steer angle, wheel L18 (previous time step)
SV_STR_KP_L19_OLD   0 ; deg ! Kingpin steer angle, wheel L19 (previous time step)
SV_STR_KP_L1_OLD -0.04476952562 ; deg ! Kingpin steer angle, wheel L1 (previous time
                                ! step)
SV_STR_KP_L2 -0.02396821598 ; deg ! Kingpin steer angle, wheel L2
SV_STR_KP_L20_OLD   0 ; deg ! Kingpin steer angle, wheel L20 (previous time step)
SV_STR_KP_L21_OLD   0 ; deg ! Kingpin steer angle, wheel L21 (previous time step)
SV_STR_KP_L22_OLD   0 ; deg ! Kingpin steer angle, wheel L22 (previous time step)
SV_STR_KP_L23_OLD   0 ; deg ! Kingpin steer angle, wheel L23 (previous time step)
SV_STR_KP_L24_OLD   0 ; deg ! Kingpin steer angle, wheel L24 (previous time step)
SV_STR_KP_L25_OLD   0 ; deg ! Kingpin steer angle, wheel L25 (previous time step)
SV_STR_KP_L26_OLD   0 ; deg ! Kingpin steer angle, wheel L26 (previous time step)
SV_STR_KP_L27_OLD   0 ; deg ! Kingpin steer angle, wheel L27 (previous time step)
SV_STR_KP_L28_OLD   0 ; deg ! Kingpin steer angle, wheel L28 (previous time step)
SV_STR_KP_L29_OLD   0 ; deg ! Kingpin steer angle, wheel L29 (previous time step)
SV_STR_KP_L2_OLD -0.02386497165 ; deg ! Kingpin steer angle, wheel L2 (previous time
                                ! step)
SV_STR_KP_L30_OLD   0 ; deg ! Kingpin steer angle, wheel L30 (previous time step)
SV_STR_KP_L31_OLD   0 ; deg ! Kingpin steer angle, wheel L31 (previous time step)
SV_STR_KP_L32_OLD   0 ; deg ! Kingpin steer angle, wheel L32 (previous time step)
SV_STR_KP_L33_OLD   0 ; deg ! Kingpin steer angle, wheel L33 (previous time step)
SV_STR_KP_L34_OLD   0 ; deg ! Kingpin steer angle, wheel L34 (previous time step)
SV_STR_KP_L35_OLD   0 ; deg ! Kingpin steer angle, wheel L35 (previous time step)
SV_STR_KP_L36_OLD   0 ; deg ! Kingpin steer angle, wheel L36 (previous time step)
SV_STR_KP_L37_OLD   0 ; deg ! Kingpin steer angle, wheel L37 (previous time step)
SV_STR_KP_L38_OLD   0 ; deg ! Kingpin steer angle, wheel L38 (previous time step)
SV_STR_KP_L39_OLD   0 ; deg ! Kingpin steer angle, wheel L39 (previous time step)
SV_STR_KP_L3_OLD    0 ; deg ! Kingpin steer angle, wheel L3 (previous time step)
SV_STR_KP_L40_OLD   0 ; deg ! Kingpin steer angle, wheel L40 (previous time step)
SV_STR_KP_L41_OLD   0 ; deg ! Kingpin steer angle, wheel L41 (previous time step)
SV_STR_KP_L42_OLD   0 ; deg ! Kingpin steer angle, wheel L42 (previous time step)
SV_STR_KP_L43_OLD   0 ; deg ! Kingpin steer angle, wheel L43 (previous time step)
SV_STR_KP_L44_OLD   0 ; deg ! Kingpin steer angle, wheel L44 (previous time step)
SV_STR_KP_L45_OLD   0 ; deg ! Kingpin steer angle, wheel L45 (previous time step)
SV_STR_KP_L46_OLD   0 ; deg ! Kingpin steer angle, wheel L46 (previous time step)
SV_STR_KP_L47_OLD   0 ; deg ! Kingpin steer angle, wheel L47 (previous time step)
SV_STR_KP_L4_OLD    0 ; deg ! Kingpin steer angle, wheel L4 (previous time step)
SV_STR_KP_L5_OLD    0 ; deg ! Kingpin steer angle, wheel L5 (previous time step)
SV_STR_KP_L6_OLD    0 ; deg ! Kingpin steer angle, wheel L6 (previous time step)
SV_STR_KP_L7_OLD    0 ; deg ! Kingpin steer angle, wheel L7 (previous time step)
SV_STR_KP_L8_OLD    0 ; deg ! Kingpin steer angle, wheel L8 (previous time step)
SV_STR_KP_L9_OLD    0 ; deg ! Kingpin steer angle, wheel L9 (previous time step)
SV_STR_KP_R1 0.02873011843 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R10_OLD   0 ; deg ! Kingpin steer angle, wheel R10 (previous time step)
SV_STR_KP_R11_OLD   0 ; deg ! Kingpin steer angle, wheel R11 (previous time step)
SV_STR_KP_R12_OLD   0 ; deg ! Kingpin steer angle, wheel R12 (previous time step)
SV_STR_KP_R13_OLD   0 ; deg ! Kingpin steer angle, wheel R13 (previous time step)
SV_STR_KP_R14_OLD   0 ; deg ! Kingpin steer angle, wheel R14 (previous time step)
SV_STR_KP_R15_OLD   0 ; deg ! Kingpin steer angle, wheel R15 (previous time step)
SV_STR_KP_R16_OLD   0 ; deg ! Kingpin steer angle, wheel R16 (previous time step)
SV_STR_KP_R17_OLD   0 ; deg ! Kingpin steer angle, wheel R17 (previous time step)
SV_STR_KP_R18_OLD   0 ; deg ! Kingpin steer angle, wheel R18 (previous time step)
SV_STR_KP_R19_OLD   0 ; deg ! Kingpin steer angle, wheel R19 (previous time step)
SV_STR_KP_R1_OLD 0.02897732564 ; deg ! Kingpin steer angle, wheel R1 (previous time
                               ! step)
SV_STR_KP_R2 0.04604522688 ; deg ! Kingpin steer angle, wheel R2
SV_STR_KP_R20_OLD   0 ; deg ! Kingpin steer angle, wheel R20 (previous time step)
SV_STR_KP_R21_OLD   0 ; deg ! Kingpin steer angle, wheel R21 (previous time step)
SV_STR_KP_R22_OLD   0 ; deg ! Kingpin steer angle, wheel R22 (previous time step)
SV_STR_KP_R23_OLD   0 ; deg ! Kingpin steer angle, wheel R23 (previous time step)
SV_STR_KP_R24_OLD   0 ; deg ! Kingpin steer angle, wheel R24 (previous time step)
SV_STR_KP_R25_OLD   0 ; deg ! Kingpin steer angle, wheel R25 (previous time step)
SV_STR_KP_R26_OLD   0 ; deg ! Kingpin steer angle, wheel R26 (previous time step)
SV_STR_KP_R27_OLD   0 ; deg ! Kingpin steer angle, wheel R27 (previous time step)
SV_STR_KP_R28_OLD   0 ; deg ! Kingpin steer angle, wheel R28 (previous time step)
SV_STR_KP_R29_OLD   0 ; deg ! Kingpin steer angle, wheel R29 (previous time step)
SV_STR_KP_R2_OLD 0.04618552397 ; deg ! Kingpin steer angle, wheel R2 (previous time
                               ! step)
SV_STR_KP_R30_OLD   0 ; deg ! Kingpin steer angle, wheel R30 (previous time step)
SV_STR_KP_R31_OLD   0 ; deg ! Kingpin steer angle, wheel R31 (previous time step)
SV_STR_KP_R32_OLD   0 ; deg ! Kingpin steer angle, wheel R32 (previous time step)
SV_STR_KP_R33_OLD   0 ; deg ! Kingpin steer angle, wheel R33 (previous time step)
SV_STR_KP_R34_OLD   0 ; deg ! Kingpin steer angle, wheel R34 (previous time step)
SV_STR_KP_R35_OLD   0 ; deg ! Kingpin steer angle, wheel R35 (previous time step)
SV_STR_KP_R36_OLD   0 ; deg ! Kingpin steer angle, wheel R36 (previous time step)
SV_STR_KP_R37_OLD   0 ; deg ! Kingpin steer angle, wheel R37 (previous time step)
SV_STR_KP_R38_OLD   0 ; deg ! Kingpin steer angle, wheel R38 (previous time step)
SV_STR_KP_R39_OLD   0 ; deg ! Kingpin steer angle, wheel R39 (previous time step)
SV_STR_KP_R3_OLD    0 ; deg ! Kingpin steer angle, wheel R3 (previous time step)
SV_STR_KP_R40_OLD   0 ; deg ! Kingpin steer angle, wheel R40 (previous time step)
SV_STR_KP_R41_OLD   0 ; deg ! Kingpin steer angle, wheel R41 (previous time step)
SV_STR_KP_R42_OLD   0 ; deg ! Kingpin steer angle, wheel R42 (previous time step)
SV_STR_KP_R43_OLD   0 ; deg ! Kingpin steer angle, wheel R43 (previous time step)
SV_STR_KP_R44_OLD   0 ; deg ! Kingpin steer angle, wheel R44 (previous time step)
SV_STR_KP_R45_OLD   0 ; deg ! Kingpin steer angle, wheel R45 (previous time step)
SV_STR_KP_R46_OLD   0 ; deg ! Kingpin steer angle, wheel R46 (previous time step)
SV_STR_KP_R47_OLD   0 ; deg ! Kingpin steer angle, wheel R47 (previous time step)
SV_STR_KP_R4_OLD    0 ; deg ! Kingpin steer angle, wheel R4 (previous time step)
SV_STR_KP_R5_OLD    0 ; deg ! Kingpin steer angle, wheel R5 (previous time step)
SV_STR_KP_R6_OLD    0 ; deg ! Kingpin steer angle, wheel R6 (previous time step)
SV_STR_KP_R7_OLD    0 ; deg ! Kingpin steer angle, wheel R7 (previous time step)
SV_STR_KP_R8_OLD    0 ; deg ! Kingpin steer angle, wheel R8 (previous time step)
SV_STR_KP_R9_OLD    0 ; deg ! Kingpin steer angle, wheel R9 (previous time step)
SV_STR_OUT_GR_A1 -0.000381264924 ; - ! Steering gear output
SV_STR_OUT_GR_A10   0 ; - ! Steering gear output
SV_STR_OUT_GR_A11   0 ; - ! Steering gear output
SV_STR_OUT_GR_A12   0 ; - ! Steering gear output
SV_STR_OUT_GR_A13   0 ; - ! Steering gear output
SV_STR_OUT_GR_A14   0 ; - ! Steering gear output
SV_STR_OUT_GR_A15   0 ; - ! Steering gear output
SV_STR_OUT_GR_A16   0 ; - ! Steering gear output
SV_STR_OUT_GR_A17   0 ; - ! Steering gear output
SV_STR_OUT_GR_A18   0 ; - ! Steering gear output
SV_STR_OUT_GR_A19   0 ; - ! Steering gear output
SV_STR_OUT_GR_A2 -0.000381264924 ; - ! Steering gear output
SV_STR_OUT_GR_A20   0 ; - ! Steering gear output
SV_STR_OUT_GR_A21   0 ; - ! Steering gear output
SV_STR_OUT_GR_A22   0 ; - ! Steering gear output
SV_STR_OUT_GR_A23   0 ; - ! Steering gear output
SV_STR_OUT_GR_A24   0 ; - ! Steering gear output
SV_STR_OUT_GR_A25   0 ; - ! Steering gear output
SV_STR_OUT_GR_A26   0 ; - ! Steering gear output
SV_STR_OUT_GR_A27   0 ; - ! Steering gear output
SV_STR_OUT_GR_A28   0 ; - ! Steering gear output
SV_STR_OUT_GR_A29   0 ; - ! Steering gear output
SV_STR_OUT_GR_A3    0 ; - ! Steering gear output
SV_STR_OUT_GR_A30   0 ; - ! Steering gear output
SV_STR_OUT_GR_A31   0 ; - ! Steering gear output
SV_STR_OUT_GR_A32   0 ; - ! Steering gear output
SV_STR_OUT_GR_A33   0 ; - ! Steering gear output
SV_STR_OUT_GR_A34   0 ; - ! Steering gear output
SV_STR_OUT_GR_A35   0 ; - ! Steering gear output
SV_STR_OUT_GR_A36   0 ; - ! Steering gear output
SV_STR_OUT_GR_A37   0 ; - ! Steering gear output
SV_STR_OUT_GR_A38   0 ; - ! Steering gear output
SV_STR_OUT_GR_A39   0 ; - ! Steering gear output
SV_STR_OUT_GR_A4    0 ; - ! Steering gear output
SV_STR_OUT_GR_A40   0 ; - ! Steering gear output
SV_STR_OUT_GR_A41   0 ; - ! Steering gear output
SV_STR_OUT_GR_A42   0 ; - ! Steering gear output
SV_STR_OUT_GR_A43   0 ; - ! Steering gear output
SV_STR_OUT_GR_A44   0 ; - ! Steering gear output
SV_STR_OUT_GR_A45   0 ; - ! Steering gear output
SV_STR_OUT_GR_A46   0 ; - ! Steering gear output
SV_STR_OUT_GR_A47   0 ; - ! Steering gear output
SV_STR_OUT_GR_A5    0 ; - ! Steering gear output
SV_STR_OUT_GR_A6    0 ; - ! Steering gear output
SV_STR_OUT_GR_A7    0 ; - ! Steering gear output
SV_STR_OUT_GR_A8    0 ; - ! Steering gear output
SV_STR_OUT_GR_A9    0 ; - ! Steering gear output
SV_SWA  -0.5463965486 ; deg ! ODE: Steering wheel angle
SV_SWA_DM -0.5461217755 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD -0.5461217755 ; deg ! Steering wheel angle (previous time step)
SV_THROTTLE 6.906309995e-09 ; - ! ODE: Time delayed engine throttle
SV_THR_REQ          0 ; - ! Requested Throttle
SV_TH_AUTO_SHIFT    0 ; - ! Boolean: 1 if auto throttle for a gear shift
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L10         0 ; C ! ODE: Brake rotor L10 temperature {T_Rtr_L10}
SV_TROT_L11         0 ; C ! ODE: Brake rotor L11 temperature {T_Rtr_L11}
SV_TROT_L12         0 ; C ! ODE: Brake rotor L12 temperature {T_Rtr_L12}
SV_TROT_L13         0 ; C ! ODE: Brake rotor L13 temperature {T_Rtr_L13}
SV_TROT_L14         0 ; C ! ODE: Brake rotor L14 temperature {T_Rtr_L14}
SV_TROT_L15         0 ; C ! ODE: Brake rotor L15 temperature {T_Rtr_L15}
SV_TROT_L16         0 ; C ! ODE: Brake rotor L16 temperature {T_Rtr_L16}
SV_TROT_L17         0 ; C ! ODE: Brake rotor L17 temperature {T_Rtr_L17}
SV_TROT_L18         0 ; C ! ODE: Brake rotor L18 temperature {T_Rtr_L18}
SV_TROT_L19         0 ; C ! ODE: Brake rotor L19 temperature {T_Rtr_L19}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_L20         0 ; C ! ODE: Brake rotor L20 temperature {T_Rtr_L20}
SV_TROT_L21         0 ; C ! ODE: Brake rotor L21 temperature {T_Rtr_L21}
SV_TROT_L22         0 ; C ! ODE: Brake rotor L22 temperature {T_Rtr_L22}
SV_TROT_L23         0 ; C ! ODE: Brake rotor L23 temperature {T_Rtr_L23}
SV_TROT_L24         0 ; C ! ODE: Brake rotor L24 temperature {T_Rtr_L24}
SV_TROT_L25         0 ; C ! ODE: Brake rotor L25 temperature {T_Rtr_L25}
SV_TROT_L26         0 ; C ! ODE: Brake rotor L26 temperature {T_Rtr_L26}
SV_TROT_L27         0 ; C ! ODE: Brake rotor L27 temperature {T_Rtr_L27}
SV_TROT_L28         0 ; C ! ODE: Brake rotor L28 temperature {T_Rtr_L28}
SV_TROT_L29         0 ; C ! ODE: Brake rotor L29 temperature {T_Rtr_L29}
SV_TROT_L3          0 ; C ! ODE: Brake rotor L3 temperature {T_Rtr_L3}
SV_TROT_L30         0 ; C ! ODE: Brake rotor L30 temperature {T_Rtr_L30}
SV_TROT_L31         0 ; C ! ODE: Brake rotor L31 temperature {T_Rtr_L31}
SV_TROT_L32         0 ; C ! ODE: Brake rotor L32 temperature {T_Rtr_L32}
SV_TROT_L33         0 ; C ! ODE: Brake rotor L33 temperature {T_Rtr_L33}
SV_TROT_L34         0 ; C ! ODE: Brake rotor L34 temperature {T_Rtr_L34}
SV_TROT_L35         0 ; C ! ODE: Brake rotor L35 temperature {T_Rtr_L35}
SV_TROT_L36         0 ; C ! ODE: Brake rotor L36 temperature {T_Rtr_L36}
SV_TROT_L37         0 ; C ! ODE: Brake rotor L37 temperature {T_Rtr_L37}
SV_TROT_L38         0 ; C ! ODE: Brake rotor L38 temperature {T_Rtr_L38}
SV_TROT_L39         0 ; C ! ODE: Brake rotor L39 temperature {T_Rtr_L39}
SV_TROT_L4          0 ; C ! ODE: Brake rotor L4 temperature {T_Rtr_L4}
SV_TROT_L40         0 ; C ! ODE: Brake rotor L40 temperature {T_Rtr_L40}
SV_TROT_L41         0 ; C ! ODE: Brake rotor L41 temperature {T_Rtr_L41}
SV_TROT_L42         0 ; C ! ODE: Brake rotor L42 temperature {T_Rtr_L42}
SV_TROT_L43         0 ; C ! ODE: Brake rotor L43 temperature {T_Rtr_L43}
SV_TROT_L44         0 ; C ! ODE: Brake rotor L44 temperature {T_Rtr_L44}
SV_TROT_L45         0 ; C ! ODE: Brake rotor L45 temperature {T_Rtr_L45}
SV_TROT_L46         0 ; C ! ODE: Brake rotor L46 temperature {T_Rtr_L46}
SV_TROT_L47         0 ; C ! ODE: Brake rotor L47 temperature {T_Rtr_L47}
SV_TROT_L5          0 ; C ! ODE: Brake rotor L5 temperature {T_Rtr_L5}
SV_TROT_L6          0 ; C ! ODE: Brake rotor L6 temperature {T_Rtr_L6}
SV_TROT_L7          0 ; C ! ODE: Brake rotor L7 temperature {T_Rtr_L7}
SV_TROT_L8          0 ; C ! ODE: Brake rotor L8 temperature {T_Rtr_L8}
SV_TROT_L9          0 ; C ! ODE: Brake rotor L9 temperature {T_Rtr_L9}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R10         0 ; C ! ODE: Brake rotor R10 temperature {T_Rtr_R10}
SV_TROT_R11         0 ; C ! ODE: Brake rotor R11 temperature {T_Rtr_R11}
SV_TROT_R12         0 ; C ! ODE: Brake rotor R12 temperature {T_Rtr_R12}
SV_TROT_R13         0 ; C ! ODE: Brake rotor R13 temperature {T_Rtr_R13}
SV_TROT_R14         0 ; C ! ODE: Brake rotor R14 temperature {T_Rtr_R14}
SV_TROT_R15         0 ; C ! ODE: Brake rotor R15 temperature {T_Rtr_R15}
SV_TROT_R16         0 ; C ! ODE: Brake rotor R16 temperature {T_Rtr_R16}
SV_TROT_R17         0 ; C ! ODE: Brake rotor R17 temperature {T_Rtr_R17}
SV_TROT_R18         0 ; C ! ODE: Brake rotor R18 temperature {T_Rtr_R18}
SV_TROT_R19         0 ; C ! ODE: Brake rotor R19 temperature {T_Rtr_R19}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_TROT_R20         0 ; C ! ODE: Brake rotor R20 temperature {T_Rtr_R20}
SV_TROT_R21         0 ; C ! ODE: Brake rotor R21 temperature {T_Rtr_R21}
SV_TROT_R22         0 ; C ! ODE: Brake rotor R22 temperature {T_Rtr_R22}
SV_TROT_R23         0 ; C ! ODE: Brake rotor R23 temperature {T_Rtr_R23}
SV_TROT_R24         0 ; C ! ODE: Brake rotor R24 temperature {T_Rtr_R24}
SV_TROT_R25         0 ; C ! ODE: Brake rotor R25 temperature {T_Rtr_R25}
SV_TROT_R26         0 ; C ! ODE: Brake rotor R26 temperature {T_Rtr_R26}
SV_TROT_R27         0 ; C ! ODE: Brake rotor R27 temperature {T_Rtr_R27}
SV_TROT_R28         0 ; C ! ODE: Brake rotor R28 temperature {T_Rtr_R28}
SV_TROT_R29         0 ; C ! ODE: Brake rotor R29 temperature {T_Rtr_R29}
SV_TROT_R3          0 ; C ! ODE: Brake rotor R3 temperature {T_Rtr_R3}
SV_TROT_R30         0 ; C ! ODE: Brake rotor R30 temperature {T_Rtr_R30}
SV_TROT_R31         0 ; C ! ODE: Brake rotor R31 temperature {T_Rtr_R31}
SV_TROT_R32         0 ; C ! ODE: Brake rotor R32 temperature {T_Rtr_R32}
SV_TROT_R33         0 ; C ! ODE: Brake rotor R33 temperature {T_Rtr_R33}
SV_TROT_R34         0 ; C ! ODE: Brake rotor R34 temperature {T_Rtr_R34}
SV_TROT_R35         0 ; C ! ODE: Brake rotor R35 temperature {T_Rtr_R35}
SV_TROT_R36         0 ; C ! ODE: Brake rotor R36 temperature {T_Rtr_R36}
SV_TROT_R37         0 ; C ! ODE: Brake rotor R37 temperature {T_Rtr_R37}
SV_TROT_R38         0 ; C ! ODE: Brake rotor R38 temperature {T_Rtr_R38}
SV_TROT_R39         0 ; C ! ODE: Brake rotor R39 temperature {T_Rtr_R39}
SV_TROT_R4          0 ; C ! ODE: Brake rotor R4 temperature {T_Rtr_R4}
SV_TROT_R40         0 ; C ! ODE: Brake rotor R40 temperature {T_Rtr_R40}
SV_TROT_R41         0 ; C ! ODE: Brake rotor R41 temperature {T_Rtr_R41}
SV_TROT_R42         0 ; C ! ODE: Brake rotor R42 temperature {T_Rtr_R42}
SV_TROT_R43         0 ; C ! ODE: Brake rotor R43 temperature {T_Rtr_R43}
SV_TROT_R44         0 ; C ! ODE: Brake rotor R44 temperature {T_Rtr_R44}
SV_TROT_R45         0 ; C ! ODE: Brake rotor R45 temperature {T_Rtr_R45}
SV_TROT_R46         0 ; C ! ODE: Brake rotor R46 temperature {T_Rtr_R46}
SV_TROT_R47         0 ; C ! ODE: Brake rotor R47 temperature {T_Rtr_R47}
SV_TROT_R5          0 ; C ! ODE: Brake rotor R5 temperature {T_Rtr_R5}
SV_TROT_R6          0 ; C ! ODE: Brake rotor R6 temperature {T_Rtr_R6}
SV_TROT_R7          0 ; C ! ODE: Brake rotor R7 temperature {T_Rtr_R7}
SV_TROT_R8          0 ; C ! ODE: Brake rotor R8 temperature {T_Rtr_R8}
SV_TROT_R9          0 ; C ! ODE: Brake rotor R9 temperature {T_Rtr_R9}
SV_T_ESC_STATE_CHANGE -10000000 ; s ! Time of ESC control status changed
SV_T_SHIFT_START    0 ; s ! Time when automatic gear shift started
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L10          0 ; mm3 ! ODE: Brake caliper L10 volume
SV_VBK_L11          0 ; mm3 ! ODE: Brake caliper L11 volume
SV_VBK_L12          0 ; mm3 ! ODE: Brake caliper L12 volume
SV_VBK_L13          0 ; mm3 ! ODE: Brake caliper L13 volume
SV_VBK_L14          0 ; mm3 ! ODE: Brake caliper L14 volume
SV_VBK_L15          0 ; mm3 ! ODE: Brake caliper L15 volume
SV_VBK_L16          0 ; mm3 ! ODE: Brake caliper L16 volume
SV_VBK_L17          0 ; mm3 ! ODE: Brake caliper L17 volume
SV_VBK_L18          0 ; mm3 ! ODE: Brake caliper L18 volume
SV_VBK_L19          0 ; mm3 ! ODE: Brake caliper L19 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_L20          0 ; mm3 ! ODE: Brake caliper L20 volume
SV_VBK_L21          0 ; mm3 ! ODE: Brake caliper L21 volume
SV_VBK_L22          0 ; mm3 ! ODE: Brake caliper L22 volume
SV_VBK_L23          0 ; mm3 ! ODE: Brake caliper L23 volume
SV_VBK_L24          0 ; mm3 ! ODE: Brake caliper L24 volume
SV_VBK_L25          0 ; mm3 ! ODE: Brake caliper L25 volume
SV_VBK_L26          0 ; mm3 ! ODE: Brake caliper L26 volume
SV_VBK_L27          0 ; mm3 ! ODE: Brake caliper L27 volume
SV_VBK_L28          0 ; mm3 ! ODE: Brake caliper L28 volume
SV_VBK_L29          0 ; mm3 ! ODE: Brake caliper L29 volume
SV_VBK_L3           0 ; mm3 ! ODE: Brake caliper L3 volume
SV_VBK_L30          0 ; mm3 ! ODE: Brake caliper L30 volume
SV_VBK_L31          0 ; mm3 ! ODE: Brake caliper L31 volume
SV_VBK_L32          0 ; mm3 ! ODE: Brake caliper L32 volume
SV_VBK_L33          0 ; mm3 ! ODE: Brake caliper L33 volume
SV_VBK_L34          0 ; mm3 ! ODE: Brake caliper L34 volume
SV_VBK_L35          0 ; mm3 ! ODE: Brake caliper L35 volume
SV_VBK_L36          0 ; mm3 ! ODE: Brake caliper L36 volume
SV_VBK_L37          0 ; mm3 ! ODE: Brake caliper L37 volume
SV_VBK_L38          0 ; mm3 ! ODE: Brake caliper L38 volume
SV_VBK_L39          0 ; mm3 ! ODE: Brake caliper L39 volume
SV_VBK_L4           0 ; mm3 ! ODE: Brake caliper L4 volume
SV_VBK_L40          0 ; mm3 ! ODE: Brake caliper L40 volume
SV_VBK_L41          0 ; mm3 ! ODE: Brake caliper L41 volume
SV_VBK_L42          0 ; mm3 ! ODE: Brake caliper L42 volume
SV_VBK_L43          0 ; mm3 ! ODE: Brake caliper L43 volume
SV_VBK_L44          0 ; mm3 ! ODE: Brake caliper L44 volume
SV_VBK_L45          0 ; mm3 ! ODE: Brake caliper L45 volume
SV_VBK_L46          0 ; mm3 ! ODE: Brake caliper L46 volume
SV_VBK_L47          0 ; mm3 ! ODE: Brake caliper L47 volume
SV_VBK_L5           0 ; mm3 ! ODE: Brake caliper L5 volume
SV_VBK_L6           0 ; mm3 ! ODE: Brake caliper L6 volume
SV_VBK_L7           0 ; mm3 ! ODE: Brake caliper L7 volume
SV_VBK_L8           0 ; mm3 ! ODE: Brake caliper L8 volume
SV_VBK_L9           0 ; mm3 ! ODE: Brake caliper L9 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R10          0 ; mm3 ! ODE: Brake caliper R10 volume
SV_VBK_R11          0 ; mm3 ! ODE: Brake caliper R11 volume
SV_VBK_R12          0 ; mm3 ! ODE: Brake caliper R12 volume
SV_VBK_R13          0 ; mm3 ! ODE: Brake caliper R13 volume
SV_VBK_R14          0 ; mm3 ! ODE: Brake caliper R14 volume
SV_VBK_R15          0 ; mm3 ! ODE: Brake caliper R15 volume
SV_VBK_R16          0 ; mm3 ! ODE: Brake caliper R16 volume
SV_VBK_R17          0 ; mm3 ! ODE: Brake caliper R17 volume
SV_VBK_R18          0 ; mm3 ! ODE: Brake caliper R18 volume
SV_VBK_R19          0 ; mm3 ! ODE: Brake caliper R19 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VBK_R20          0 ; mm3 ! ODE: Brake caliper R20 volume
SV_VBK_R21          0 ; mm3 ! ODE: Brake caliper R21 volume
SV_VBK_R22          0 ; mm3 ! ODE: Brake caliper R22 volume
SV_VBK_R23          0 ; mm3 ! ODE: Brake caliper R23 volume
SV_VBK_R24          0 ; mm3 ! ODE: Brake caliper R24 volume
SV_VBK_R25          0 ; mm3 ! ODE: Brake caliper R25 volume
SV_VBK_R26          0 ; mm3 ! ODE: Brake caliper R26 volume
SV_VBK_R27          0 ; mm3 ! ODE: Brake caliper R27 volume
SV_VBK_R28          0 ; mm3 ! ODE: Brake caliper R28 volume
SV_VBK_R29          0 ; mm3 ! ODE: Brake caliper R29 volume
SV_VBK_R3           0 ; mm3 ! ODE: Brake caliper R3 volume
SV_VBK_R30          0 ; mm3 ! ODE: Brake caliper R30 volume
SV_VBK_R31          0 ; mm3 ! ODE: Brake caliper R31 volume
SV_VBK_R32          0 ; mm3 ! ODE: Brake caliper R32 volume
SV_VBK_R33          0 ; mm3 ! ODE: Brake caliper R33 volume
SV_VBK_R34          0 ; mm3 ! ODE: Brake caliper R34 volume
SV_VBK_R35          0 ; mm3 ! ODE: Brake caliper R35 volume
SV_VBK_R36          0 ; mm3 ! ODE: Brake caliper R36 volume
SV_VBK_R37          0 ; mm3 ! ODE: Brake caliper R37 volume
SV_VBK_R38          0 ; mm3 ! ODE: Brake caliper R38 volume
SV_VBK_R39          0 ; mm3 ! ODE: Brake caliper R39 volume
SV_VBK_R4           0 ; mm3 ! ODE: Brake caliper R4 volume
SV_VBK_R40          0 ; mm3 ! ODE: Brake caliper R40 volume
SV_VBK_R41          0 ; mm3 ! ODE: Brake caliper R41 volume
SV_VBK_R42          0 ; mm3 ! ODE: Brake caliper R42 volume
SV_VBK_R43          0 ; mm3 ! ODE: Brake caliper R43 volume
SV_VBK_R44          0 ; mm3 ! ODE: Brake caliper R44 volume
SV_VBK_R45          0 ; mm3 ! ODE: Brake caliper R45 volume
SV_VBK_R46          0 ; mm3 ! ODE: Brake caliper R46 volume
SV_VBK_R47          0 ; mm3 ! ODE: Brake caliper R47 volume
SV_VBK_R5           0 ; mm3 ! ODE: Brake caliper R5 volume
SV_VBK_R6           0 ; mm3 ! ODE: Brake caliper R6 volume
SV_VBK_R7           0 ; mm3 ! ODE: Brake caliper R7 volume
SV_VBK_R8           0 ; mm3 ! ODE: Brake caliper R8 volume
SV_VBK_R9           0 ; mm3 ! ODE: Brake caliper R9 volume
SV_VERR_OLD -0.6049483673 ; km/h ! Speed controller error at previous time step
SV_VXS    15.60490497 ; km/h ! ODE: Body-X speed of laden sprung-mass CG, unit 1
SV_VX_SM2 15.61335832 ; km/h ! ODE: Body X velocity at hitch for trailer 2
SV_VX_SM3 15.59992154 ; km/h ! ODE: Body X velocity at hitch for trailer 3
SV_VX_SM4 15.66632896 ; km/h ! ODE: Body X velocity at hitch for trailer 4
SV_VYS -0.0002477703232 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG, unit 1
SV_VY_SM2 -0.0005310725108 ; m/s ! ODE: Body Y velocity at hitch for trailer 2
SV_VY_SM3 0.001732849495 ; m/s ! ODE: Body Y velocity at hitch for trailer 3
SV_VY_SM4 0.001632338759 ; m/s ! ODE: Body Y velocity at hitch for trailer 4
SV_VZS -0.02565612671 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG, unit 1
SV_VZ_SM2 -0.02919710036 ; m/s ! ODE: Body Z velocity at hitch for trailer 2
SV_VZ_SM3 0.03934340615 ; m/s ! ODE: Body Z velocity at hitch for trailer 3
SV_VZ_SM4 0.1940401396 ; m/s ! ODE: Body Z velocity at hitch for trailer 4
SV_XO     134.7638489 ; m ! ODE: Global X coord. of sprung-mass origin, unit 1 {Xo}
SV_X_GND  131.7617645 ; m ! X coord, ground, unit 1 aero ref. pt
SV_X_GND_2 128.752995 ; m ! X coord, ground, unit 2 aero ref. pt
SV_X_GND_3 110.942896 ; m ! X coord, ground, unit 3 aero ref. pt
SV_X_GND_4 93.17794133 ; m ! X coord, ground, unit 4 aero ref. pt
SV_X_H1 -0.008629795958 ; mm ! ODE: X translation for hitch 1
SV_X_H2 -0.004759618962 ; mm ! ODE: X translation for hitch 2
SV_X_H3 0.02591993612 ; mm ! ODE: X translation for hitch 3
SV_YAW 0.0005524915088 ; deg ! ODE: Yaw of sprung mass, unit 1 {Yaw}
SV_YAW_H1 -0.008548395309 ; deg ! ODE: Relative yaw for unit 2
SV_YAW_H2 0.002211741894 ; deg ! ODE: Relative yaw for unit 3
SV_YAW_H3 0.01489297427 ; deg ! ODE: Relative yaw for unit 4
SV_YO    -1.648792393 ; m ! ODE: Global Y coord. of sprung-mass origin, unit 1 {Yo}
SV_Y_GND -1.648822436 ; m ! Y coord, ground, unit 1 aero ref. pt
SV_Y_GND_2 -1.648955959 ; m ! Y coord, ground, unit 2 aero ref. pt
SV_Y_GND_3 -1.64659609 ; m ! Y coord, ground, unit 3 aero ref. pt
SV_Y_GND_4 -1.644850822 ; m ! Y coord, ground, unit 4 aero ref. pt
SV_Y_H1 -0.0050477999 ; mm ! ODE: Y translation for hitch 1
SV_Y_H2 -0.01423339166 ; mm ! ODE: Y translation for hitch 2
SV_Y_H3 0.001401653695 ; mm ! ODE: Y translation for hitch 3
SV_ZO   0.02747173133 ; m ! ODE: Global Z coord. of sprung-mass origin, unit 1 {Zo}
SV_Z_CTC_L10I      -0 ; m ! Center of tire contact L10i {Zgnd_L10i}
SV_Z_CTC_L10O -1.110223025e-16 ; m ! Center of tire contact L10o {Zgnd_L10o}
SV_Z_CTC_L11I -1.110223025e-16 ; m ! Center of tire contact L11i {Zgnd_L11i}
SV_Z_CTC_L11O -1.110223025e-16 ; m ! Center of tire contact L11o {Zgnd_L11o}
SV_Z_CTC_L12I      -0 ; m ! Center of tire contact L12i {Zgnd_L12i}
SV_Z_CTC_L12O      -0 ; m ! Center of tire contact L12o {Zgnd_L12o}
SV_Z_CTC_L13I      -0 ; m ! Center of tire contact L13i {Zgnd_L13i}
SV_Z_CTC_L13O      -0 ; m ! Center of tire contact L13o {Zgnd_L13o}
SV_Z_CTC_L14I 1.110223025e-16 ; m ! Center of tire contact L14i {Zgnd_L14i}
SV_Z_CTC_L14O -1.110223025e-16 ; m ! Center of tire contact L14o {Zgnd_L14o}
SV_Z_CTC_L15I -1.110223025e-16 ; m ! Center of tire contact L15i {Zgnd_L15i}
SV_Z_CTC_L15O      -0 ; m ! Center of tire contact L15o {Zgnd_L15o}
SV_Z_CTC_L16I      -0 ; m ! Center of tire contact L16i {Zgnd_L16i}
SV_Z_CTC_L16O      -0 ; m ! Center of tire contact L16o {Zgnd_L16o}
SV_Z_CTC_L17I      -0 ; m ! Center of tire contact L17i {Zgnd_L17i}
SV_Z_CTC_L17O -1.110223025e-16 ; m ! Center of tire contact L17o {Zgnd_L17o}
SV_Z_CTC_L18I      -0 ; m ! Center of tire contact L18i {Zgnd_L18i}
SV_Z_CTC_L18O      -0 ; m ! Center of tire contact L18o {Zgnd_L18o}
SV_Z_CTC_L19I -1.110223025e-16 ; m ! Center of tire contact L19i {Zgnd_L19i}
SV_Z_CTC_L19O      -0 ; m ! Center of tire contact L19o {Zgnd_L19o}
SV_Z_CTC_L1I       -0 ; m ! Center of tire contact L1i {Zgnd_L1i}
SV_Z_CTC_L1O       -0 ; m ! Center of tire contact L1o {Zgnd_L1o}
SV_Z_CTC_L20I      -0 ; m ! Center of tire contact L20i {Zgnd_L20i}
SV_Z_CTC_L20O      -0 ; m ! Center of tire contact L20o {Zgnd_L20o}
SV_Z_CTC_L21I      -0 ; m ! Center of tire contact L21i {Zgnd_L21i}
SV_Z_CTC_L21O 1.110223025e-16 ; m ! Center of tire contact L21o {Zgnd_L21o}
SV_Z_CTC_L22I      -0 ; m ! Center of tire contact L22i {Zgnd_L22i}
SV_Z_CTC_L22O      -0 ; m ! Center of tire contact L22o {Zgnd_L22o}
SV_Z_CTC_L23I -1.110223025e-16 ; m ! Center of tire contact L23i {Zgnd_L23i}
SV_Z_CTC_L23O      -0 ; m ! Center of tire contact L23o {Zgnd_L23o}
SV_Z_CTC_L24I 0.004797503244 ; m ! Center of tire contact L24i {Zgnd_L24i}
SV_Z_CTC_L24O 0.004796258041 ; m ! Center of tire contact L24o {Zgnd_L24o}
SV_Z_CTC_L25I 0.1888783739 ; m ! Center of tire contact L25i {Zgnd_L25i}
SV_Z_CTC_L25O 0.1888729036 ; m ! Center of tire contact L25o {Zgnd_L25o}
SV_Z_CTC_L26I 0.2993900702 ; m ! Center of tire contact L26i {Zgnd_L26i}
SV_Z_CTC_L26O 0.2993905216 ; m ! Center of tire contact L26o {Zgnd_L26o}
SV_Z_CTC_L27I 0.1662930264 ; m ! Center of tire contact L27i {Zgnd_L27i}
SV_Z_CTC_L27O 0.1662982137 ; m ! Center of tire contact L27o {Zgnd_L27o}
SV_Z_CTC_L28I 0.0006501158229 ; m ! Center of tire contact L28i {Zgnd_L28i}
SV_Z_CTC_L28O 0.000650480276 ; m ! Center of tire contact L28o {Zgnd_L28o}
SV_Z_CTC_L29I      -0 ; m ! Center of tire contact L29i {Zgnd_L29i}
SV_Z_CTC_L29O 1.110223025e-16 ; m ! Center of tire contact L29o {Zgnd_L29o}
SV_Z_CTC_L2I       -0 ; m ! Center of tire contact L2i {Zgnd_L2i}
SV_Z_CTC_L2O       -0 ; m ! Center of tire contact L2o {Zgnd_L2o}
SV_Z_CTC_L30I      -0 ; m ! Center of tire contact L30i {Zgnd_L30i}
SV_Z_CTC_L30O      -0 ; m ! Center of tire contact L30o {Zgnd_L30o}
SV_Z_CTC_L31I 0.06460437154 ; m ! Center of tire contact L31i {Zgnd_L31i}
SV_Z_CTC_L31O 0.06459924996 ; m ! Center of tire contact L31o {Zgnd_L31o}
SV_Z_CTC_L32I 0.2621183294 ; m ! Center of tire contact L32i {Zgnd_L32i}
SV_Z_CTC_L32O 0.2621141893 ; m ! Center of tire contact L32o {Zgnd_L32o}
SV_Z_CTC_L33I 0.2705463918 ; m ! Center of tire contact L33i {Zgnd_L33i}
SV_Z_CTC_L33O 0.2705497927 ; m ! Center of tire contact L33o {Zgnd_L33o}
SV_Z_CTC_L34I      -0 ; m ! Center of tire contact L34i {Zgnd_L34i}
SV_Z_CTC_L34O      -0 ; m ! Center of tire contact L34o {Zgnd_L34o}
SV_Z_CTC_L35I      -0 ; m ! Center of tire contact L35i {Zgnd_L35i}
SV_Z_CTC_L35O      -0 ; m ! Center of tire contact L35o {Zgnd_L35o}
SV_Z_CTC_L36I      -0 ; m ! Center of tire contact L36i {Zgnd_L36i}
SV_Z_CTC_L36O 1.110223025e-16 ; m ! Center of tire contact L36o {Zgnd_L36o}
SV_Z_CTC_L37I      -0 ; m ! Center of tire contact L37i {Zgnd_L37i}
SV_Z_CTC_L37O      -0 ; m ! Center of tire contact L37o {Zgnd_L37o}
SV_Z_CTC_L38I      -0 ; m ! Center of tire contact L38i {Zgnd_L38i}
SV_Z_CTC_L38O      -0 ; m ! Center of tire contact L38o {Zgnd_L38o}
SV_Z_CTC_L39I 1.110223025e-16 ; m ! Center of tire contact L39i {Zgnd_L39i}
SV_Z_CTC_L39O -1.110223025e-16 ; m ! Center of tire contact L39o {Zgnd_L39o}
SV_Z_CTC_L3I       -0 ; m ! Center of tire contact L3i {Zgnd_L3i}
SV_Z_CTC_L3O       -0 ; m ! Center of tire contact L3o {Zgnd_L3o}
SV_Z_CTC_L40I -1.110223025e-16 ; m ! Center of tire contact L40i {Zgnd_L40i}
SV_Z_CTC_L40O      -0 ; m ! Center of tire contact L40o {Zgnd_L40o}
SV_Z_CTC_L41I -1.110223025e-16 ; m ! Center of tire contact L41i {Zgnd_L41i}
SV_Z_CTC_L41O 1.110223025e-16 ; m ! Center of tire contact L41o {Zgnd_L41o}
SV_Z_CTC_L42I      -0 ; m ! Center of tire contact L42i {Zgnd_L42i}
SV_Z_CTC_L42O      -0 ; m ! Center of tire contact L42o {Zgnd_L42o}
SV_Z_CTC_L43I      -0 ; m ! Center of tire contact L43i {Zgnd_L43i}
SV_Z_CTC_L43O 1.110223025e-16 ; m ! Center of tire contact L43o {Zgnd_L43o}
SV_Z_CTC_L44I      -0 ; m ! Center of tire contact L44i {Zgnd_L44i}
SV_Z_CTC_L44O 1.110223025e-16 ; m ! Center of tire contact L44o {Zgnd_L44o}
SV_Z_CTC_L45I -1.110223025e-16 ; m ! Center of tire contact L45i {Zgnd_L45i}
SV_Z_CTC_L45O      -0 ; m ! Center of tire contact L45o {Zgnd_L45o}
SV_Z_CTC_L46I      -0 ; m ! Center of tire contact L46i {Zgnd_L46i}
SV_Z_CTC_L46O      -0 ; m ! Center of tire contact L46o {Zgnd_L46o}
SV_Z_CTC_L47I      -0 ; m ! Center of tire contact L47i {Zgnd_L47i}
SV_Z_CTC_L47O      -0 ; m ! Center of tire contact L47o {Zgnd_L47o}
SV_Z_CTC_L4I       -0 ; m ! Center of tire contact L4i {Zgnd_L4i}
SV_Z_CTC_L4O       -0 ; m ! Center of tire contact L4o {Zgnd_L4o}
SV_Z_CTC_L5I       -0 ; m ! Center of tire contact L5i {Zgnd_L5i}
SV_Z_CTC_L5O       -0 ; m ! Center of tire contact L5o {Zgnd_L5o}
SV_Z_CTC_L6I 1.110223025e-16 ; m ! Center of tire contact L6i {Zgnd_L6i}
SV_Z_CTC_L6O       -0 ; m ! Center of tire contact L6o {Zgnd_L6o}
SV_Z_CTC_L7I       -0 ; m ! Center of tire contact L7i {Zgnd_L7i}
SV_Z_CTC_L7O       -0 ; m ! Center of tire contact L7o {Zgnd_L7o}
SV_Z_CTC_L8I       -0 ; m ! Center of tire contact L8i {Zgnd_L8i}
SV_Z_CTC_L8O       -0 ; m ! Center of tire contact L8o {Zgnd_L8o}
SV_Z_CTC_L9I 1.110223025e-16 ; m ! Center of tire contact L9i {Zgnd_L9i}
SV_Z_CTC_L9O       -0 ; m ! Center of tire contact L9o {Zgnd_L9o}
SV_Z_CTC_R10I      -0 ; m ! Center of tire contact R10i {Zgnd_R10i}
SV_Z_CTC_R10O -1.110223025e-16 ; m ! Center of tire contact R10o {Zgnd_R10o}
SV_Z_CTC_R11I      -0 ; m ! Center of tire contact R11i {Zgnd_R11i}
SV_Z_CTC_R11O      -0 ; m ! Center of tire contact R11o {Zgnd_R11o}
SV_Z_CTC_R12I      -0 ; m ! Center of tire contact R12i {Zgnd_R12i}
SV_Z_CTC_R12O      -0 ; m ! Center of tire contact R12o {Zgnd_R12o}
SV_Z_CTC_R13I      -0 ; m ! Center of tire contact R13i {Zgnd_R13i}
SV_Z_CTC_R13O      -0 ; m ! Center of tire contact R13o {Zgnd_R13o}
SV_Z_CTC_R14I      -0 ; m ! Center of tire contact R14i {Zgnd_R14i}
SV_Z_CTC_R14O      -0 ; m ! Center of tire contact R14o {Zgnd_R14o}
SV_Z_CTC_R15I      -0 ; m ! Center of tire contact R15i {Zgnd_R15i}
SV_Z_CTC_R15O      -0 ; m ! Center of tire contact R15o {Zgnd_R15o}
SV_Z_CTC_R16I      -0 ; m ! Center of tire contact R16i {Zgnd_R16i}
SV_Z_CTC_R16O 1.110223025e-16 ; m ! Center of tire contact R16o {Zgnd_R16o}
SV_Z_CTC_R17I      -0 ; m ! Center of tire contact R17i {Zgnd_R17i}
SV_Z_CTC_R17O      -0 ; m ! Center of tire contact R17o {Zgnd_R17o}
SV_Z_CTC_R18I      -0 ; m ! Center of tire contact R18i {Zgnd_R18i}
SV_Z_CTC_R18O      -0 ; m ! Center of tire contact R18o {Zgnd_R18o}
SV_Z_CTC_R19I      -0 ; m ! Center of tire contact R19i {Zgnd_R19i}
SV_Z_CTC_R19O      -0 ; m ! Center of tire contact R19o {Zgnd_R19o}
SV_Z_CTC_R1I       -0 ; m ! Center of tire contact R1i {Zgnd_R1i}
SV_Z_CTC_R1O       -0 ; m ! Center of tire contact R1o {Zgnd_R1o}
SV_Z_CTC_R20I      -0 ; m ! Center of tire contact R20i {Zgnd_R20i}
SV_Z_CTC_R20O 1.110223025e-16 ; m ! Center of tire contact R20o {Zgnd_R20o}
SV_Z_CTC_R21I 1.110223025e-16 ; m ! Center of tire contact R21i {Zgnd_R21i}
SV_Z_CTC_R21O -1.110223025e-16 ; m ! Center of tire contact R21o {Zgnd_R21o}
SV_Z_CTC_R22I      -0 ; m ! Center of tire contact R22i {Zgnd_R22i}
SV_Z_CTC_R22O      -0 ; m ! Center of tire contact R22o {Zgnd_R22o}
SV_Z_CTC_R23I      -0 ; m ! Center of tire contact R23i {Zgnd_R23i}
SV_Z_CTC_R23O      -0 ; m ! Center of tire contact R23o {Zgnd_R23o}
SV_Z_CTC_R24I 0.0048035485 ; m ! Center of tire contact R24i {Zgnd_R24i}
SV_Z_CTC_R24O 0.004804793702 ; m ! Center of tire contact R24o {Zgnd_R24o}
SV_Z_CTC_R25I 0.1889049311 ; m ! Center of tire contact R25i {Zgnd_R25i}
SV_Z_CTC_R25O 0.1889104014 ; m ! Center of tire contact R25o {Zgnd_R25o}
SV_Z_CTC_R26I 0.2993878791 ; m ! Center of tire contact R26i {Zgnd_R26i}
SV_Z_CTC_R26O 0.2993874277 ; m ! Center of tire contact R26o {Zgnd_R26o}
SV_Z_CTC_R27I 0.1662678427 ; m ! Center of tire contact R27i {Zgnd_R27i}
SV_Z_CTC_R27O 0.1662626554 ; m ! Center of tire contact R27o {Zgnd_R27o}
SV_Z_CTC_R28I 0.0006483464617 ; m ! Center of tire contact R28i {Zgnd_R28i}
SV_Z_CTC_R28O 0.0006479820086 ; m ! Center of tire contact R28o {Zgnd_R28o}
SV_Z_CTC_R29I      -0 ; m ! Center of tire contact R29i {Zgnd_R29i}
SV_Z_CTC_R29O      -0 ; m ! Center of tire contact R29o {Zgnd_R29o}
SV_Z_CTC_R2I       -0 ; m ! Center of tire contact R2i {Zgnd_R2i}
SV_Z_CTC_R2O       -0 ; m ! Center of tire contact R2o {Zgnd_R2o}
SV_Z_CTC_R30I 1.110223025e-16 ; m ! Center of tire contact R30i {Zgnd_R30i}
SV_Z_CTC_R30O      -0 ; m ! Center of tire contact R30o {Zgnd_R30o}
SV_Z_CTC_R31I 0.06462923598 ; m ! Center of tire contact R31i {Zgnd_R31i}
SV_Z_CTC_R31O 0.06463435756 ; m ! Center of tire contact R31o {Zgnd_R31o}
SV_Z_CTC_R32I 0.262138429 ; m ! Center of tire contact R32i {Zgnd_R32i}
SV_Z_CTC_R32O 0.2621425692 ; m ! Center of tire contact R32o {Zgnd_R32o}
SV_Z_CTC_R33I 0.2705298813 ; m ! Center of tire contact R33i {Zgnd_R33i}
SV_Z_CTC_R33O 0.2705264805 ; m ! Center of tire contact R33o {Zgnd_R33o}
SV_Z_CTC_R34I      -0 ; m ! Center of tire contact R34i {Zgnd_R34i}
SV_Z_CTC_R34O      -0 ; m ! Center of tire contact R34o {Zgnd_R34o}
SV_Z_CTC_R35I      -0 ; m ! Center of tire contact R35i {Zgnd_R35i}
SV_Z_CTC_R35O      -0 ; m ! Center of tire contact R35o {Zgnd_R35o}
SV_Z_CTC_R36I      -0 ; m ! Center of tire contact R36i {Zgnd_R36i}
SV_Z_CTC_R36O -1.110223025e-16 ; m ! Center of tire contact R36o {Zgnd_R36o}
SV_Z_CTC_R37I 1.110223025e-16 ; m ! Center of tire contact R37i {Zgnd_R37i}
SV_Z_CTC_R37O      -0 ; m ! Center of tire contact R37o {Zgnd_R37o}
SV_Z_CTC_R38I      -0 ; m ! Center of tire contact R38i {Zgnd_R38i}
SV_Z_CTC_R38O      -0 ; m ! Center of tire contact R38o {Zgnd_R38o}
SV_Z_CTC_R39I -1.110223025e-16 ; m ! Center of tire contact R39i {Zgnd_R39i}
SV_Z_CTC_R39O 1.110223025e-16 ; m ! Center of tire contact R39o {Zgnd_R39o}
SV_Z_CTC_R3I       -0 ; m ! Center of tire contact R3i {Zgnd_R3i}
SV_Z_CTC_R3O       -0 ; m ! Center of tire contact R3o {Zgnd_R3o}
SV_Z_CTC_R40I      -0 ; m ! Center of tire contact R40i {Zgnd_R40i}
SV_Z_CTC_R40O      -0 ; m ! Center of tire contact R40o {Zgnd_R40o}
SV_Z_CTC_R41I      -0 ; m ! Center of tire contact R41i {Zgnd_R41i}
SV_Z_CTC_R41O 1.110223025e-16 ; m ! Center of tire contact R41o {Zgnd_R41o}
SV_Z_CTC_R42I      -0 ; m ! Center of tire contact R42i {Zgnd_R42i}
SV_Z_CTC_R42O      -0 ; m ! Center of tire contact R42o {Zgnd_R42o}
SV_Z_CTC_R43I      -0 ; m ! Center of tire contact R43i {Zgnd_R43i}
SV_Z_CTC_R43O      -0 ; m ! Center of tire contact R43o {Zgnd_R43o}
SV_Z_CTC_R44I      -0 ; m ! Center of tire contact R44i {Zgnd_R44i}
SV_Z_CTC_R44O      -0 ; m ! Center of tire contact R44o {Zgnd_R44o}
SV_Z_CTC_R45I 1.110223025e-16 ; m ! Center of tire contact R45i {Zgnd_R45i}
SV_Z_CTC_R45O      -0 ; m ! Center of tire contact R45o {Zgnd_R45o}
SV_Z_CTC_R46I      -0 ; m ! Center of tire contact R46i {Zgnd_R46i}
SV_Z_CTC_R46O -1.110223025e-16 ; m ! Center of tire contact R46o {Zgnd_R46o}
SV_Z_CTC_R47I      -0 ; m ! Center of tire contact R47i {Zgnd_R47i}
SV_Z_CTC_R47O      -0 ; m ! Center of tire contact R47o {Zgnd_R47o}
SV_Z_CTC_R4I       -0 ; m ! Center of tire contact R4i {Zgnd_R4i}
SV_Z_CTC_R4O       -0 ; m ! Center of tire contact R4o {Zgnd_R4o}
SV_Z_CTC_R5I       -0 ; m ! Center of tire contact R5i {Zgnd_R5i}
SV_Z_CTC_R5O       -0 ; m ! Center of tire contact R5o {Zgnd_R5o}
SV_Z_CTC_R6I       -0 ; m ! Center of tire contact R6i {Zgnd_R6i}
SV_Z_CTC_R6O       -0 ; m ! Center of tire contact R6o {Zgnd_R6o}
SV_Z_CTC_R7I       -0 ; m ! Center of tire contact R7i {Zgnd_R7i}
SV_Z_CTC_R7O       -0 ; m ! Center of tire contact R7o {Zgnd_R7o}
SV_Z_CTC_R8I       -0 ; m ! Center of tire contact R8i {Zgnd_R8i}
SV_Z_CTC_R8O       -0 ; m ! Center of tire contact R8o {Zgnd_R8o}
SV_Z_CTC_R9I       -0 ; m ! Center of tire contact R9i {Zgnd_R9i}
SV_Z_CTC_R9O       -0 ; m ! Center of tire contact R9o {Zgnd_R9o}
SV_Z_GND            0 ; m ! Z coord, ground, unit 1 aero ref. pt
SV_Z_GND_2          0 ; m ! Z coord, ground, unit 2 aero ref. pt
SV_Z_GND_3          0 ; m ! Z coord, ground, unit 3 aero ref. pt
SV_Z_GND_4 0.2510002144 ; m ! Z coord, ground, unit 4 aero ref. pt
SV_Z_H1  0.2228808265 ; mm ! ODE: Z translation for hitch 1
SV_Z_H2 -0.5415783903 ; mm ! ODE: Z translation for hitch 2
SV_Z_H3 -0.2081517769 ; mm ! ODE: Z translation for hitch 3


END
