PARSFILE
! CarSim 2020.0
! Vehicle Configuration: I_I
! Revision 125462, December 17, 2019

DATASET_TITLE Half Throttle Acceleration: CVT
CATEGORY Powertrain Tests
TITLE Half Throttle Acceleration: CVT <Powertrain Tests>

! Echo: Results\Run_ce1a4375-b123-4a2e-a680-b57337010b90\LastRun_echo.par
! This run was made 16:45 on December 18, 2019.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    64 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE       95 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? -> 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [I]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS,3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              28 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
OPT_INIT_CONFIG     1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Stop the run if the absolute vehicle speed drops to
                      ! this value; specify -1 to disable this feature
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 549.7827314 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1290.030098 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL           0 ; mm ! CALC -- Y coordinate of TL CG
! M_TL         2126.4 ; kg ! CALC -- TL mass
! IXX_TL  1251.902475 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  4373.812822 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  5067.232921 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           590 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1265 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             1820 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU         1023.8 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU         3567.2 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU           4095 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO           3 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       3160 ; mm ! Aerodynamic reference length
X_REF_AERO      -1580 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)      -1 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)      -1 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         320 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         320 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)     3.23 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,2)     3.23 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1) 1.72 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,2) 1.72 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1)          1.23 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)          1.23 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)     0.62 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)     0.62 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1605 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)   17.29 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)   17.29 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)   41.16 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)   41.16 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)       166.9 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.7928100659 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)    -1.5 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)    -1.5 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_WC(2,1)         300 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         300 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(2,1)     3.23 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(2,2)     3.23 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(2,1) 1.72 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(2,2) 1.72 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(2,1)          1.23 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)          1.23 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)     0.62 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)     0.62 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1605 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       3160 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(2,1)   44.75 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(2,2)   44.75 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)       139.5 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.3584229391 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 105.5100487 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 105.5100487 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 10703.21367 ; N ! CALC -- Design Load (suspension, unladen), axle 1
! FSA_L(1) 10703.21367 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 8757.334042 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 8757.334042 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 12339.94355 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 12339.94355 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 6169.971776 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 6169.971776 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 2249.844891 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> Use as is [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 101.871925 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 101.871925 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(2) 7144.889334 ; N ! CALC -- Design Load (suspension, unladen), axle 2
! FSA_L(2) 7144.889334 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 4482.364701 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 4482.364701 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 8512.917009 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 8512.917009 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 4256.458504 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 4256.458504 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 1333.122593 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       1 ! Reaction torque wheel with angle input (OPT_STEER = 0): 0 ->
                      ! from table, 1 -> calculated (see the steering Help document
                      ! for details) [I]
OPT_POWER           1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! Define steer angles of knuckles: 1 -> with respect to the
                      ! sprung-mass X-Y plane, 0 -> as rotation angle about a
                      ! kingpin axis [L]
BETA_COL          0.5 ; deg ! Ref hysteretic angle for steering column friction
D_COL            0.01 ; N-m-s/deg ! Steering column viscous damping
D_TBAR              0 ; N-m-s/deg ! [D] Torsion bar viscous damping
HYS_COL           0.1 ; N-m ! Steering column friction torque
I_GEAR_IN     0.00015 ; kg-m2 ! Steering system inertia
F_BOOST_MAX      2500 ; N ! Maximum power steering boost force
TC_BOOST         0.02 ; s ! Time constant for power steering boost
A_STR_STOP_L      -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           0 ! [D] Compliance steer option, axle 1: 1 -> control L wheel, 2
                      ! -> control R wheel, 0 -> symmetric
OPT_RACK(1)         1 ! Steering gear type for axle 1: 0 -> Recirculating ball, 1 ->
                      ! Rack and pinion [I]
A_CASTER(1,1)     3.5 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     3.5 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)          8 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)          8 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)      0 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)      0 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_RACK(1)      0.5 ; mm ! Ref hys. displ. for steering rack friction, axle 1
D_RACK(1)           4 ; N-s/mm ! Steering rack viscous damping, axle 1
HYS_RACK(1)         0 ; N ! Steering rack hysteresis, axle 1
L_KPO(1,1)       39.5 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)       39.5 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)         -1 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)         -1 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1) 1 ! Internal tire shear-model option, tire L1: 1 -> original
                      ! tabular model; 0 -> fully external model; 2 -> built-in
                      ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular with
                      ! camber extensions; 7 -> built-in Pacejka 5.2; 8 -> TNO
                      ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI tire
                      ! model [I]
OPT_TIRE_COMB(1,1)  1 ! Option for combined slip calculation: 0 -> use only
                      ! theoretical combined slip; 1 -> use transition between the
                      ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in tire alpha: 1 -> transition
                          ! to using instant slip when the time constant is less
                          ! than 12*TSTEP, 0 -> use fixed time constant 12*TSTEP at
                          ! high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in tire kappa: 2 -> use instant
                          ! slip when absolute kappa is decreasing and transition
                          ! to instant slip when the time constant is less than
                          ! 12*TSTEP; 1 -> transition to instant slip when the time
                          ! constant is less than 12*TSTEP; 0 -> use fixed time
                          ! constant 12*TSTEP at high speeds
FZ_MAX(1,1)    100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1)      8000 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1)             2 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1)      1.1 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1)        25 ; kg ! Mass of tire L1
MU_REF_X(1,1)       1 ; - ! Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1)       1 ; - ! Ground friction during meas. of Fy data, tire L1
R0(1,1)           364 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1)          353 ; mm ! Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1)      0.0041 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1)          1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1)       3e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
R_TIRE_COMB(1,1)  1.1 ; - ! Combined slip transition factor: Factor used to
                      ! transition from normalized to theoretical combined slip
VLOW_ALPHA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 1 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,2)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2)    100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,2)      8000 ; N ! Reference vertical force
IT(1,2)             2 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,2)      1.1 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,2)        25 ; kg ! Mass of tire R1
MU_REF_X(1,2)       1 ; - ! Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,2)       1 ; - ! Ground friction during meas. of Fy data, tire R1
R0(1,2)           364 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2)          353 ; mm ! Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,2)      0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2)       3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(1,2)  1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 1 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(2,1)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1)    100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(2,1)      8000 ; N ! Reference vertical force
IT(2,1)             2 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(2,1)      1.1 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(2,1)        25 ; kg ! Mass of tire L2
MU_REF_X(2,1)       1 ; - ! Ground friction during meas. of Fx data, tire L2
MU_REF_Y(2,1)       1 ; - ! Ground friction during meas. of Fy data, tire L2
R0(2,1)           364 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1)          353 ; mm ! Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(2,1)      0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1)       3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,1)  1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 1 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(2,2)  1 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2)    100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(2,2)      8000 ; N ! Reference vertical force
IT(2,2)             2 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(2,2)      1.1 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(2,2)        25 ; kg ! Mass of tire R2
MU_REF_X(2,2)       1 ; - ! Ground friction during meas. of Fx data, tire R2
MU_REF_Y(2,2)       1 ; - ! Ground friction during meas. of Fy data, tire R2
R0(2,2)           364 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2)          353 ; mm ! Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(2,2)      0.0041 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2)       3e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
R_TIRE_COMB(2,2)  1.1 ; - ! Combined slip transition factor
VLOW_ALPHA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)  0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)  0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)  0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)  0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              3 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(1) 1 ! Front differential model: 1 -> internal, 0 -> external [I]
OPT_DIFF_INTERNAL(2) 1 ! Rear differential model: 1 -> internal, 0 -> external [I]
OPT_DIFF_INTERNAL(3) 1 ! Transfer case model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(1)  0 ! Is the front differential locked? 0 -> no, 1 -> yes [I]
OPT_LOCKED_DIFF(2)  0 ! Is the rear differential locked? 0 -> no, 1 -> yes [I]
OPT_LOCKED_DIFF(3)  0 ! Is the transfer case locked? 0 -> no, 1 -> yes [I]
R_REAR_BIAS(3)    0.5 ; - ! Fraction: transfer case torque on rear driveshaft [I]
LOCKED_DIFF_DAMP(1) 1 ; N-m-s/deg ! Torsional damping for locked front diff [I]
LOCKED_DIFF_K(1)  100 ; N-m/deg ! Torsional spring rate for locked front diff [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked rear diff [I]
LOCKED_DIFF_DAMP(3) 0.8 ; N-m-s/deg ! Torsional damping for locked transfer case [I]
LOCKED_DIFF_K(3)   80 ; N-m/deg ! Torsional spring rate for locked transfer case [I]
R_EFF_F_DIFF(1)  0.99 ; - ! Forward efficiency of front differential [I]
R_EFF_R_DIFF(1)  0.99 ; - ! Reverse efficiency of front differential [I]
R_GEAR_DIFF(1)   2.65 ; - ! Gear ratio of front differential [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of rear differential [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of rear differential [I]
R_GEAR_DIFF(2)   2.65 ; - ! Gear ratio of 2nd rear differential [I]
R_EFF_F_DIFF(3)  0.99 ; - ! Forward efficiency of transfer case [I]
R_EFF_R_DIFF(3)  0.99 ; - ! Reverse efficiency of transfer case [I]
R_GEAR_DIFF(3)      1 ; - ! Gear ratio of transfer case [I]
IDS(1)          0.013 ; kg-m2 ! Spin inertia of front driveshaft [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of rear driveshaft [I]
IDS(3)              0 ; kg-m2 ! [D] Spin inertia of transfer case input shaft [I]
IHS_L(1)        0.009 ; kg-m2 ! Spin inertia of half left shaft, front diff [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of half left shaft, 2nd rear diff [I]
IHS_R(1)        0.009 ; kg-m2 ! Spin inertia of half right shaft, front diff [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of half right shaft, rear diff [I]

OPT_CLUTCH_DIFF(1)  0 ! [D] Clutch control for front differential: 0 -> table lookup
                      ! or external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TWIN_CLUTCH(1)  0 ! [D] Twin clutches on front differential? 0 -> no, 1 -> yes
                      ! [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for rear differential: 0 -> table lookup
                      ! or external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on rear differential? 0 -> no, 1 -> yes
                      ! [I]
OPT_CLUTCH_DIFF(3)  0 ! [D] Clutch control for transfer case: 0 -> table lookup or
                      ! external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TWIN_CLUTCH(3)  0 ! [D] Twin clutches on transfer case? 0 -> no, 1 -> yes [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE       750 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG              0.4 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter
OPT_CLUTCH          0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 2 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              1 ! Number of gears in transmission [I]
OPT_CVT_REVERSE     0 ! Extend CVT to reverse?: 0 -> no, 1 -> yes [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
TC_RGEAR_CVT     0.25 ; s ! Time constant for transmission gear ratio (CVT)
ITC_OUTPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ICVT_INPUT_PULLEY 0.02 ; kg-m2 ! Spin inertia of CVT input pulley
ICVT_OUTPUT_PULLEY 0.02 ; kg-m2 ! Spin inertia of CVT output pulley
ITR_NEUTRAL     0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE     0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -2.176 ; - ! Reverse-gear ratio of trans. (should be negative)


DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z and MU values for a road surface are provided with
! Configurable Functions MU_ROAD, ROAD_DZ, and ROAD_ZS. Boundaries that control
! automatic switching from one road surface to another make use of the Configurable
! Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID for the vehicle during initialization [I]

ROAD_ID(1)          1 ; 1200 m, One Lane, Mu = 0.9
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX boundary, -1 -> stop if S > ROAD_SMAX, > 0
                      ! -> switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN boundary, -1 -> stop if S < ROAD_SMIN, > 0
                      ! -> switch to road with this ID if S < ROAD_SMIN
RR_SURF(1)          1 ; - ! Tire rolling resistance surface-effect coefficient
ROAD_N_DZ(1)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run
PATH_ID_DM          1 ! PATH_ID of reference path for the driver and vehicle [I]
LTARG_ID_DM         1 ! LTARG_ID of reference LTARG for the driver model (0 -> no
                      ! reference LTARG)
OPT_INIT_PATH       1 ! [D] Set Xo, Yo, and Yaw to match path PATH_ID_DM and target
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTART              0 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for the steer controller
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for the steer controller
VLOW_DM            10 ; km/h ! Speed for switching the steering controller between
                      ! time preview (high speed) and distance preview (low speed)
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM reference point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      0 ! [D] Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              0 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)    0.1 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)   0.2 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         3 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)  0.075 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)  0.15 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         3 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 2, right
                                           ! side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, left side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, right side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 2.9e-05 ! Coefficient: inclination displacement per unit
                               ! force (deg/N), axle 2, left side
CI_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 2.9e-05 ! Coefficient: inclination displacement per unit
                               ! force (deg/N), axle 2, right side
CI_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(1) 1 ; - ! [D] Constant normalized clutch input, front
                                  ! differential
CLUTCH_CONTROL_DIFF_GAIN(1) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(1) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, rear
                                  ! differential
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

CLUTCH_CONTROL_DIFF_CONSTANT(3) 1 ; - ! [D] Constant normalized clutch input,
                                  ! transfer case
CLUTCH_CONTROL_DIFF_GAIN(3) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(3) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 3 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(1) 0 ; N-m ! [D] Constant available torque, front
                                 ! differential
CLUTCH_TORQUE_DIFF_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, rear
                                 ! differential
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

CLUTCH_TORQUE_DIFF_CONSTANT(3) 0 ; N-m ! [D] Constant available torque, transfer
                                 ! case
CLUTCH_TORQUE_DIFF_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.614 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.614 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.614 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.614 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.614 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.614 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.6111 ! Coefficient: lower spring seat movement per
                                     ! unit jounce at wheel (mm/mm), axle 1, left
                                     ! side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.6111 ! Coefficient: lower spring seat movement per
                                     ! unit jounce at wheel (mm/mm), axle 1, right
                                     ! side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, left
                                    ! side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, right
                                    ! side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -2.7e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -2.7e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) -1e-07 ! Coefficient: Steer displacement per unit force
                              ! (deg/N), axle 2, left side
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) -1e-07 ! Coefficient: Steer displacement per unit force
                              ! (deg/N), axle 2, right side
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 3.8e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 3.8e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 2e-05 ! Coefficient: steer displacement per unit moment
                             ! (deg/N-m), axle 2, left side
CS_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 2e-05 ! Coefficient: steer displacement per unit moment
                             ! (deg/N-m), axle 2, right side
CS_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1) 3.8e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 2, left side
C_LAT_GAIN(2,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,2) 3.8e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 2, right side
C_LAT_GAIN(2,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1) 7e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 2, left side
C_LONG_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,2) 7e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 2, right side
C_LONG_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 83 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 83 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 44 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 44 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 83 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 83 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 44 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 44 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

! 2D table: row 1 has "0" (place holder) followed by 26 values of throttle position
! (-). Other rows have engine speed (rpm) followed by 26 values of fuel rate (kg/s).
FUEL_RATE_CARPET 2D_LINEAR
 0, 0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.36, 0.4, 0.44, 0.48, 0.52, 0.56, 0.6, 0.64, 0.68, 0.72, 0.76, 0.8, 0.84, 0.88, 0.92, 0.96, 1
 600, 0.00016, 0.0004, 0.0006, 0.00064, 0.00068, 0.00074, 0.00078, 0.00082, 0.00086, 0.00092, 0.00096, 0.001, 0.00104, 0.0011, 0.00114, 0.00118, 0.00122, 0.00128, 0.00132, 0.00136, 0.0014, 0.00146, 0.0015, 0.00154, 0.00158, 0.00164
 800, 0.00026, 0.0004, 0.0008, 0.00118, 0.00142, 0.0016, 0.00166, 0.0017, 0.00172, 0.00174, 0.00176, 0.00178, 0.0018, 0.00182, 0.00184, 0.00186, 0.00188, 0.00192, 0.00194, 0.00196, 0.00198, 0.002, 0.00202, 0.00204, 0.00206, 0.00208
 1000, 0.00032, 0.0004, 0.00078, 0.00124, 0.00158, 0.00182, 0.00198, 0.00208, 0.00214, 0.00216, 0.00218, 0.00222, 0.00224, 0.00226, 0.00228, 0.0023, 0.00234, 0.00236, 0.00238, 0.0024, 0.00242, 0.00246, 0.00248, 0.0025, 0.00252, 0.00254
 1200, 0.00032, 0.00042, 0.00078, 0.00128, 0.00176, 0.00208, 0.00228, 0.00246, 0.00256, 0.00262, 0.00266, 0.00268, 0.0027, 0.00274, 0.00276, 0.0028, 0.00282, 0.00284, 0.00288, 0.0029, 0.00294, 0.00296, 0.00298, 0.00302, 0.00304, 0.00308
 1400, 0.00034, 0.00046, 0.00078, 0.00132, 0.00182, 0.00226, 0.0026, 0.0028, 0.00296, 0.00306, 0.00312, 0.00316, 0.0032, 0.00322, 0.00326, 0.0033, 0.00334, 0.00336, 0.0034, 0.00344, 0.00348, 0.0035, 0.00354, 0.00358, 0.00362, 0.00364
 1600, 0.0004, 0.00052, 0.0008, 0.00132, 0.0019, 0.00238, 0.00278, 0.00308, 0.00328, 0.00346, 0.00356, 0.00362, 0.00366, 0.00368, 0.00372, 0.00376, 0.0038, 0.00384, 0.00388, 0.0039, 0.00394, 0.00398, 0.00402, 0.00406, 0.0041, 0.00414
 1800, 0.00042, 0.00056, 0.00078, 0.00134, 0.0019, 0.00248, 0.00294, 0.00332, 0.00356, 0.00378, 0.0039, 0.004, 0.00406, 0.00412, 0.00418, 0.00424, 0.0043, 0.00436, 0.00444, 0.0045, 0.00456, 0.00462, 0.00468, 0.00474, 0.0048, 0.00486
 2000, 0.00046, 0.0006, 0.00076, 0.0013, 0.00192, 0.00258, 0.00312, 0.00356, 0.0039, 0.00414, 0.0043, 0.00442, 0.00454, 0.00462, 0.00468, 0.00476, 0.00482, 0.0049, 0.00498, 0.00504, 0.00512, 0.00518, 0.00526, 0.00534, 0.0054, 0.00548
 2200, 0.0005, 0.00066, 0.00082, 0.0013, 0.00196, 0.0026, 0.00324, 0.00378, 0.00424, 0.00452, 0.00478, 0.00492, 0.00504, 0.00514, 0.00522, 0.00528, 0.00536, 0.00544, 0.0055, 0.00558, 0.00564, 0.00572, 0.0058, 0.00586, 0.00594, 0.006
 2400, 0.00054, 0.00072, 0.00088, 0.0013, 0.0019, 0.00266, 0.00336, 0.00398, 0.00446, 0.0048, 0.0051, 0.0053, 0.00544, 0.00556, 0.00568, 0.0058, 0.00592, 0.00604, 0.00616, 0.00628, 0.00638, 0.0065, 0.00662, 0.00674, 0.00686, 0.00698
 2800, 0.00066, 0.00078, 0.00092, 0.0013, 0.00194, 0.00268, 0.00348, 0.00414, 0.00478, 0.0053, 0.0056, 0.00592, 0.00614, 0.00626, 0.0064, 0.00652, 0.00662, 0.00672, 0.00684, 0.00694, 0.00704, 0.00714, 0.00726, 0.00736, 0.00746, 0.00758
 3200, 0.00076, 0.0009, 0.00106, 0.00128, 0.00194, 0.00272, 0.0035, 0.00432, 0.00512, 0.00574, 0.0062, 0.00652, 0.00686, 0.0073, 0.00776, 0.0082, 0.00848, 0.0085, 0.00854, 0.00858, 0.0086, 0.00864, 0.00868, 0.0087, 0.00874, 0.00878
 3600, 0.00086, 0.00104, 0.00122, 0.0014, 0.0019, 0.00274, 0.00358, 0.00442, 0.00544, 0.0063, 0.00694, 0.00768, 0.00846, 0.00926, 0.00974, 0.0099, 0.01004, 0.01018, 0.01026, 0.01028, 0.01032, 0.01034, 0.01038, 0.0104, 0.01042, 0.01046
 4000, 0.00094, 0.00118, 0.00166, 0.00236, 0.00324, 0.0042, 0.00518, 0.00634, 0.00734, 0.00806, 0.00872, 0.00974, 0.01074, 0.01174, 0.01206, 0.01216, 0.01228, 0.0124, 0.01248, 0.0125, 0.01252, 0.01254, 0.01258, 0.0126, 0.01262, 0.01266
 4400, 0.00102, 0.00128, 0.0017, 0.00244, 0.0033, 0.00436, 0.0054, 0.00666, 0.00784, 0.00886, 0.00954, 0.01028, 0.01136, 0.01242, 0.0135, 0.01406, 0.01418, 0.0143, 0.01442, 0.01452, 0.01462, 0.01464, 0.01466, 0.0147, 0.01472, 0.01476
 4800, 0.00104, 0.00148, 0.0019, 0.00242, 0.00334, 0.00436, 0.00544, 0.00672, 0.00808, 0.00918, 0.01076, 0.0128, 0.01402, 0.0145, 0.015, 0.01548, 0.01586, 0.01598, 0.0161, 0.01622, 0.01634, 0.01644, 0.01656, 0.01658, 0.0166, 0.01662
 5200, 0.00118, 0.00156, 0.00196, 0.00234, 0.00328, 0.00432, 0.00544, 0.0068, 0.0082, 0.0101, 0.01266, 0.0138, 0.01494, 0.01558, 0.01614, 0.0167, 0.01726, 0.0176, 0.01772, 0.01782, 0.01794, 0.01806, 0.01818, 0.01828, 0.0184, 0.01852
 5600, 0.0013, 0.00166, 0.002, 0.00238, 0.0032, 0.00424, 0.00546, 0.00712, 0.00924, 0.01102, 0.01276, 0.01408, 0.01524, 0.01606, 0.0166, 0.01714, 0.0177, 0.01824, 0.0185, 0.01862, 0.01874, 0.01886, 0.01898, 0.0191, 0.01922, 0.01934
 5800, 0.00152, 0.0018, 0.00206, 0.00238, 0.00324, 0.00422, 0.00542, 0.00714, 0.0092, 0.01096, 0.01284, 0.01424, 0.01544, 0.01632, 0.01682, 0.01734, 0.01784, 0.01836, 0.0186, 0.0187, 0.0188, 0.0189, 0.01902, 0.01912, 0.01922, 0.01932
ENDTABLE
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
SPIN_START_FUEL_RATE 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_FUEL_RATE 1 ! Scale factor divided into (engine speed -
                       ! SPIN_START_FUEL_RATE)
THROTTLE_START_FUEL_RATE 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_FUEL_RATE 1 ! Scale factor divided into (throttle position -
                           ! THROTTLE_START_FUEL_RATE)

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

FX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 862.81, 1783.13, 2762.04, 3794.59, 4873.05, 5988.03, 7129.14, 8285.48
 0.04, 1405.11, 2856.38, 4345.65, 5859.21, 7381.77, 8898.09, 10393.74, 11855.5
 0.06, 1683.96, 3384.43, 5089.04, 6782.93, 8451.6, 10081.79, 11661.81, 13181.59
 0.08, 1827.85, 3649.23, 5451.02, 7219.83, 8943.43, 10611.08, 12213.62, 13743.29
 0.1, 1906.98, 3792.03, 5642.2, 7445.59, 9191.77, 10871.81, 12478.17, 14004.57
 0.12, 1953.08, 3873.7, 5749.19, 7568.78, 9323.31, 11005.08, 12607.67, 14125.76
 0.14, 1980.9, 3921.81, 5810.31, 7636.48, 9392.07, 11070.27, 12665.46, 14173.03
 0.16, 1997.79, 3949.97, 5844.33, 7671.56, 9424.12, 11095.9, 12681.88, 14178.04
 0.18, 2007.75, 3965.55, 5861.32, 7686.27, 9433.43, 11097.23, 12673.18, 14157.7
 0.2, 2013.13, 3972.81, 5867.14, 7687.73, 9428.09, 11083.11, 12648.74, 14121.81
 0.22, 2015.35, 3974.42, 5865.42, 7680.34, 9413.11, 11059, 12614.36, 14076.35
 0.24, 2015.35, 3972.07, 5858.5, 7666.95, 9391.71, 11028.42, 12573.74, 14025.16
 0.26, 2013.76, 3966.92, 5847.96, 7649.47, 9366.06, 10993.69, 12529.34, 13970.72
 0.28, 2011.02, 3959.8, 5834.91, 7629.22, 9337.64, 10956.43, 12482.8, 13914.72
 0.3, 2007.45, 3951.26, 5820.11, 7607.14, 9307.51, 10917.73, 12435.27, 13858.28
 0.32, 2003.28, 3941.72, 5804.15, 7583.9, 9276.39, 10878.38, 12387.52, 13802.18
 0.34, 1998.68, 3931.51, 5787.42, 7559.98, 9244.83, 10838.92, 12340.11, 13746.92
 0.36, 1993.78, 3920.84, 5770.24, 7535.74, 9213.2, 10799.74, 12293.41, 13692.85
 0.38, 1988.68, 3909.89, 5752.83, 7511.45, 9181.77, 10761.12, 12247.67, 13640.2
 0.4, 1983.44, 3898.79, 5735.37, 7487.29, 9150.75, 10723.23, 12203.05, 13589.1
 0.42, 1978.13, 3887.65, 5717.98, 7463.4, 9120.27, 10686.22, 12159.68, 13539.63
 0.44, 1972.79, 3876.53, 5700.76, 7439.89, 9090.44, 10650.16, 12117.59, 13491.82
 0.46, 1967.46, 3865.5, 5683.77, 7416.82, 9061.31, 10615.11, 12076.84, 13445.67
 0.48, 1962.16, 3854.6, 5667.07, 7394.26, 9032.94, 10581.08, 12037.42, 13401.17
 0.5, 1956.92, 3843.87, 5650.7, 7372.23, 9005.34, 10548.1, 11999.32, 13358.28
 0.52, 1951.74, 3833.32, 5634.68, 7350.75, 8978.52, 10516.16, 11962.53, 13316.96
 0.54, 1946.64, 3822.97, 5619.03, 7329.84, 8952.5, 10485.24, 11927, 13277.16
 0.56, 1941.64, 3812.84, 5603.75, 7309.5, 8927.25, 10455.32, 11892.7, 13238.82
 0.58, 1936.72, 3802.94, 5588.86, 7289.72, 8902.77, 10426.39, 11859.61, 13201.89
 0.6, 1931.91, 3793.26, 5574.36, 7270.51, 8879.05, 10398.4, 11827.66, 13166.31
 0.62, 1927.2, 3783.82, 5560.24, 7251.85, 8856.06, 10371.34, 11796.82, 13132.02
 0.64, 1922.59, 3774.61, 5546.5, 7233.73, 8833.78, 10345.16, 11767.05, 13098.97
 0.66, 1918.09, 3765.62, 5533.13, 7216.15, 8812.19, 10319.85, 11738.3, 13067.1
 0.68, 1913.69, 3756.87, 5520.13, 7199.08, 8791.28, 10295.36, 11710.53, 13036.36
 0.7, 1909.4, 3748.34, 5507.49, 7182.5, 8771.01, 10271.67, 11683.7, 13006.7
 0.72, 1905.21, 3740.03, 5495.19, 7166.42, 8751.37, 10248.74, 11657.77, 12978.07
 0.74, 1901.12, 3731.93, 5483.24, 7150.8, 8732.33, 10226.54, 11632.7, 12950.42
 0.76, 1897.13, 3724.05, 5471.61, 7135.64, 8713.87, 10205.05, 11608.46, 12923.72
 0.78, 1893.24, 3716.37, 5460.31, 7120.91, 8695.97, 10184.23, 11585, 12897.9
 0.8, 1889.45, 3708.9, 5449.31, 7106.61, 8678.6, 10164.06, 11562.3, 12872.95
 0.82, 1885.74, 3701.61, 5438.62, 7092.72, 8661.76, 10144.52, 11540.33, 12848.81
 0.84, 1882.13, 3694.52, 5428.22, 7079.23, 8645.4, 10125.56, 11519.04, 12825.45
 0.86, 1878.61, 3687.6, 5418.09, 7066.11, 8629.53, 10107.19, 11498.41, 12802.83
 0.88, 1875.18, 3680.87, 5408.24, 7053.36, 8614.12, 10089.36, 11478.42, 12780.93
 0.9, 1871.82, 3674.31, 5398.66, 7040.96, 8599.14, 10072.05, 11459.04, 12759.71
 0.92, 1868.55, 3667.91, 5389.32, 7028.9, 8584.6, 10055.26, 11440.24, 12739.14
 0.94, 1865.36, 3661.68, 5380.23, 7017.17, 8570.46, 10038.95, 11421.99, 12719.2
 0.96, 1862.25, 3655.6, 5371.38, 7005.76, 8556.71, 10023.1, 11404.28, 12699.85
 0.98, 1859.21, 3649.67, 5362.76, 6994.65, 8543.34, 10007.7, 11387.08, 12681.07
 1, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
 1.02, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 862.81, 1783.13, 2762.04, 3794.59, 4873.05, 5988.03, 7129.14, 8285.48
 0.04, 1405.11, 2856.38, 4345.65, 5859.21, 7381.77, 8898.09, 10393.74, 11855.5
 0.06, 1683.96, 3384.43, 5089.04, 6782.93, 8451.6, 10081.79, 11661.81, 13181.59
 0.08, 1827.85, 3649.23, 5451.02, 7219.83, 8943.43, 10611.08, 12213.62, 13743.29
 0.1, 1906.98, 3792.03, 5642.2, 7445.59, 9191.77, 10871.81, 12478.17, 14004.57
 0.12, 1953.08, 3873.7, 5749.19, 7568.78, 9323.31, 11005.08, 12607.67, 14125.76
 0.14, 1980.9, 3921.81, 5810.31, 7636.48, 9392.07, 11070.27, 12665.46, 14173.03
 0.16, 1997.79, 3949.97, 5844.33, 7671.56, 9424.12, 11095.9, 12681.88, 14178.04
 0.18, 2007.75, 3965.55, 5861.32, 7686.27, 9433.43, 11097.23, 12673.18, 14157.7
 0.2, 2013.13, 3972.81, 5867.14, 7687.73, 9428.09, 11083.11, 12648.74, 14121.81
 0.22, 2015.35, 3974.42, 5865.42, 7680.34, 9413.11, 11059, 12614.36, 14076.35
 0.24, 2015.35, 3972.07, 5858.5, 7666.95, 9391.71, 11028.42, 12573.74, 14025.16
 0.26, 2013.76, 3966.92, 5847.96, 7649.47, 9366.06, 10993.69, 12529.34, 13970.72
 0.28, 2011.02, 3959.8, 5834.91, 7629.22, 9337.64, 10956.43, 12482.8, 13914.72
 0.3, 2007.45, 3951.26, 5820.11, 7607.14, 9307.51, 10917.73, 12435.27, 13858.28
 0.32, 2003.28, 3941.72, 5804.15, 7583.9, 9276.39, 10878.38, 12387.52, 13802.18
 0.34, 1998.68, 3931.51, 5787.42, 7559.98, 9244.83, 10838.92, 12340.11, 13746.92
 0.36, 1993.78, 3920.84, 5770.24, 7535.74, 9213.2, 10799.74, 12293.41, 13692.85
 0.38, 1988.68, 3909.89, 5752.83, 7511.45, 9181.77, 10761.12, 12247.67, 13640.2
 0.4, 1983.44, 3898.79, 5735.37, 7487.29, 9150.75, 10723.23, 12203.05, 13589.1
 0.42, 1978.13, 3887.65, 5717.98, 7463.4, 9120.27, 10686.22, 12159.68, 13539.63
 0.44, 1972.79, 3876.53, 5700.76, 7439.89, 9090.44, 10650.16, 12117.59, 13491.82
 0.46, 1967.46, 3865.5, 5683.77, 7416.82, 9061.31, 10615.11, 12076.84, 13445.67
 0.48, 1962.16, 3854.6, 5667.07, 7394.26, 9032.94, 10581.08, 12037.42, 13401.17
 0.5, 1956.92, 3843.87, 5650.7, 7372.23, 9005.34, 10548.1, 11999.32, 13358.28
 0.52, 1951.74, 3833.32, 5634.68, 7350.75, 8978.52, 10516.16, 11962.53, 13316.96
 0.54, 1946.64, 3822.97, 5619.03, 7329.84, 8952.5, 10485.24, 11927, 13277.16
 0.56, 1941.64, 3812.84, 5603.75, 7309.5, 8927.25, 10455.32, 11892.7, 13238.82
 0.58, 1936.72, 3802.94, 5588.86, 7289.72, 8902.77, 10426.39, 11859.61, 13201.89
 0.6, 1931.91, 3793.26, 5574.36, 7270.51, 8879.05, 10398.4, 11827.66, 13166.31
 0.62, 1927.2, 3783.82, 5560.24, 7251.85, 8856.06, 10371.34, 11796.82, 13132.02
 0.64, 1922.59, 3774.61, 5546.5, 7233.73, 8833.78, 10345.16, 11767.05, 13098.97
 0.66, 1918.09, 3765.62, 5533.13, 7216.15, 8812.19, 10319.85, 11738.3, 13067.1
 0.68, 1913.69, 3756.87, 5520.13, 7199.08, 8791.28, 10295.36, 11710.53, 13036.36
 0.7, 1909.4, 3748.34, 5507.49, 7182.5, 8771.01, 10271.67, 11683.7, 13006.7
 0.72, 1905.21, 3740.03, 5495.19, 7166.42, 8751.37, 10248.74, 11657.77, 12978.07
 0.74, 1901.12, 3731.93, 5483.24, 7150.8, 8732.33, 10226.54, 11632.7, 12950.42
 0.76, 1897.13, 3724.05, 5471.61, 7135.64, 8713.87, 10205.05, 11608.46, 12923.72
 0.78, 1893.24, 3716.37, 5460.31, 7120.91, 8695.97, 10184.23, 11585, 12897.9
 0.8, 1889.45, 3708.9, 5449.31, 7106.61, 8678.6, 10164.06, 11562.3, 12872.95
 0.82, 1885.74, 3701.61, 5438.62, 7092.72, 8661.76, 10144.52, 11540.33, 12848.81
 0.84, 1882.13, 3694.52, 5428.22, 7079.23, 8645.4, 10125.56, 11519.04, 12825.45
 0.86, 1878.61, 3687.6, 5418.09, 7066.11, 8629.53, 10107.19, 11498.41, 12802.83
 0.88, 1875.18, 3680.87, 5408.24, 7053.36, 8614.12, 10089.36, 11478.42, 12780.93
 0.9, 1871.82, 3674.31, 5398.66, 7040.96, 8599.14, 10072.05, 11459.04, 12759.71
 0.92, 1868.55, 3667.91, 5389.32, 7028.9, 8584.6, 10055.26, 11440.24, 12739.14
 0.94, 1865.36, 3661.68, 5380.23, 7017.17, 8570.46, 10038.95, 11421.99, 12719.2
 0.96, 1862.25, 3655.6, 5371.38, 7005.76, 8556.71, 10023.1, 11404.28, 12699.85
 0.98, 1859.21, 3649.67, 5362.76, 6994.65, 8543.34, 10007.7, 11387.08, 12681.07
 1, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
 1.02, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 862.81, 1783.13, 2762.04, 3794.59, 4873.05, 5988.03, 7129.14, 8285.48
 0.04, 1405.11, 2856.38, 4345.65, 5859.21, 7381.77, 8898.09, 10393.74, 11855.5
 0.06, 1683.96, 3384.43, 5089.04, 6782.93, 8451.6, 10081.79, 11661.81, 13181.59
 0.08, 1827.85, 3649.23, 5451.02, 7219.83, 8943.43, 10611.08, 12213.62, 13743.29
 0.1, 1906.98, 3792.03, 5642.2, 7445.59, 9191.77, 10871.81, 12478.17, 14004.57
 0.12, 1953.08, 3873.7, 5749.19, 7568.78, 9323.31, 11005.08, 12607.67, 14125.76
 0.14, 1980.9, 3921.81, 5810.31, 7636.48, 9392.07, 11070.27, 12665.46, 14173.03
 0.16, 1997.79, 3949.97, 5844.33, 7671.56, 9424.12, 11095.9, 12681.88, 14178.04
 0.18, 2007.75, 3965.55, 5861.32, 7686.27, 9433.43, 11097.23, 12673.18, 14157.7
 0.2, 2013.13, 3972.81, 5867.14, 7687.73, 9428.09, 11083.11, 12648.74, 14121.81
 0.22, 2015.35, 3974.42, 5865.42, 7680.34, 9413.11, 11059, 12614.36, 14076.35
 0.24, 2015.35, 3972.07, 5858.5, 7666.95, 9391.71, 11028.42, 12573.74, 14025.16
 0.26, 2013.76, 3966.92, 5847.96, 7649.47, 9366.06, 10993.69, 12529.34, 13970.72
 0.28, 2011.02, 3959.8, 5834.91, 7629.22, 9337.64, 10956.43, 12482.8, 13914.72
 0.3, 2007.45, 3951.26, 5820.11, 7607.14, 9307.51, 10917.73, 12435.27, 13858.28
 0.32, 2003.28, 3941.72, 5804.15, 7583.9, 9276.39, 10878.38, 12387.52, 13802.18
 0.34, 1998.68, 3931.51, 5787.42, 7559.98, 9244.83, 10838.92, 12340.11, 13746.92
 0.36, 1993.78, 3920.84, 5770.24, 7535.74, 9213.2, 10799.74, 12293.41, 13692.85
 0.38, 1988.68, 3909.89, 5752.83, 7511.45, 9181.77, 10761.12, 12247.67, 13640.2
 0.4, 1983.44, 3898.79, 5735.37, 7487.29, 9150.75, 10723.23, 12203.05, 13589.1
 0.42, 1978.13, 3887.65, 5717.98, 7463.4, 9120.27, 10686.22, 12159.68, 13539.63
 0.44, 1972.79, 3876.53, 5700.76, 7439.89, 9090.44, 10650.16, 12117.59, 13491.82
 0.46, 1967.46, 3865.5, 5683.77, 7416.82, 9061.31, 10615.11, 12076.84, 13445.67
 0.48, 1962.16, 3854.6, 5667.07, 7394.26, 9032.94, 10581.08, 12037.42, 13401.17
 0.5, 1956.92, 3843.87, 5650.7, 7372.23, 9005.34, 10548.1, 11999.32, 13358.28
 0.52, 1951.74, 3833.32, 5634.68, 7350.75, 8978.52, 10516.16, 11962.53, 13316.96
 0.54, 1946.64, 3822.97, 5619.03, 7329.84, 8952.5, 10485.24, 11927, 13277.16
 0.56, 1941.64, 3812.84, 5603.75, 7309.5, 8927.25, 10455.32, 11892.7, 13238.82
 0.58, 1936.72, 3802.94, 5588.86, 7289.72, 8902.77, 10426.39, 11859.61, 13201.89
 0.6, 1931.91, 3793.26, 5574.36, 7270.51, 8879.05, 10398.4, 11827.66, 13166.31
 0.62, 1927.2, 3783.82, 5560.24, 7251.85, 8856.06, 10371.34, 11796.82, 13132.02
 0.64, 1922.59, 3774.61, 5546.5, 7233.73, 8833.78, 10345.16, 11767.05, 13098.97
 0.66, 1918.09, 3765.62, 5533.13, 7216.15, 8812.19, 10319.85, 11738.3, 13067.1
 0.68, 1913.69, 3756.87, 5520.13, 7199.08, 8791.28, 10295.36, 11710.53, 13036.36
 0.7, 1909.4, 3748.34, 5507.49, 7182.5, 8771.01, 10271.67, 11683.7, 13006.7
 0.72, 1905.21, 3740.03, 5495.19, 7166.42, 8751.37, 10248.74, 11657.77, 12978.07
 0.74, 1901.12, 3731.93, 5483.24, 7150.8, 8732.33, 10226.54, 11632.7, 12950.42
 0.76, 1897.13, 3724.05, 5471.61, 7135.64, 8713.87, 10205.05, 11608.46, 12923.72
 0.78, 1893.24, 3716.37, 5460.31, 7120.91, 8695.97, 10184.23, 11585, 12897.9
 0.8, 1889.45, 3708.9, 5449.31, 7106.61, 8678.6, 10164.06, 11562.3, 12872.95
 0.82, 1885.74, 3701.61, 5438.62, 7092.72, 8661.76, 10144.52, 11540.33, 12848.81
 0.84, 1882.13, 3694.52, 5428.22, 7079.23, 8645.4, 10125.56, 11519.04, 12825.45
 0.86, 1878.61, 3687.6, 5418.09, 7066.11, 8629.53, 10107.19, 11498.41, 12802.83
 0.88, 1875.18, 3680.87, 5408.24, 7053.36, 8614.12, 10089.36, 11478.42, 12780.93
 0.9, 1871.82, 3674.31, 5398.66, 7040.96, 8599.14, 10072.05, 11459.04, 12759.71
 0.92, 1868.55, 3667.91, 5389.32, 7028.9, 8584.6, 10055.26, 11440.24, 12739.14
 0.94, 1865.36, 3661.68, 5380.23, 7017.17, 8570.46, 10038.95, 11421.99, 12719.2
 0.96, 1862.25, 3655.6, 5371.38, 7005.76, 8556.71, 10023.1, 11404.28, 12699.85
 0.98, 1859.21, 3649.67, 5362.76, 6994.65, 8543.34, 10007.7, 11387.08, 12681.07
 1, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
 1.02, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.02, 862.81, 1783.13, 2762.04, 3794.59, 4873.05, 5988.03, 7129.14, 8285.48
 0.04, 1405.11, 2856.38, 4345.65, 5859.21, 7381.77, 8898.09, 10393.74, 11855.5
 0.06, 1683.96, 3384.43, 5089.04, 6782.93, 8451.6, 10081.79, 11661.81, 13181.59
 0.08, 1827.85, 3649.23, 5451.02, 7219.83, 8943.43, 10611.08, 12213.62, 13743.29
 0.1, 1906.98, 3792.03, 5642.2, 7445.59, 9191.77, 10871.81, 12478.17, 14004.57
 0.12, 1953.08, 3873.7, 5749.19, 7568.78, 9323.31, 11005.08, 12607.67, 14125.76
 0.14, 1980.9, 3921.81, 5810.31, 7636.48, 9392.07, 11070.27, 12665.46, 14173.03
 0.16, 1997.79, 3949.97, 5844.33, 7671.56, 9424.12, 11095.9, 12681.88, 14178.04
 0.18, 2007.75, 3965.55, 5861.32, 7686.27, 9433.43, 11097.23, 12673.18, 14157.7
 0.2, 2013.13, 3972.81, 5867.14, 7687.73, 9428.09, 11083.11, 12648.74, 14121.81
 0.22, 2015.35, 3974.42, 5865.42, 7680.34, 9413.11, 11059, 12614.36, 14076.35
 0.24, 2015.35, 3972.07, 5858.5, 7666.95, 9391.71, 11028.42, 12573.74, 14025.16
 0.26, 2013.76, 3966.92, 5847.96, 7649.47, 9366.06, 10993.69, 12529.34, 13970.72
 0.28, 2011.02, 3959.8, 5834.91, 7629.22, 9337.64, 10956.43, 12482.8, 13914.72
 0.3, 2007.45, 3951.26, 5820.11, 7607.14, 9307.51, 10917.73, 12435.27, 13858.28
 0.32, 2003.28, 3941.72, 5804.15, 7583.9, 9276.39, 10878.38, 12387.52, 13802.18
 0.34, 1998.68, 3931.51, 5787.42, 7559.98, 9244.83, 10838.92, 12340.11, 13746.92
 0.36, 1993.78, 3920.84, 5770.24, 7535.74, 9213.2, 10799.74, 12293.41, 13692.85
 0.38, 1988.68, 3909.89, 5752.83, 7511.45, 9181.77, 10761.12, 12247.67, 13640.2
 0.4, 1983.44, 3898.79, 5735.37, 7487.29, 9150.75, 10723.23, 12203.05, 13589.1
 0.42, 1978.13, 3887.65, 5717.98, 7463.4, 9120.27, 10686.22, 12159.68, 13539.63
 0.44, 1972.79, 3876.53, 5700.76, 7439.89, 9090.44, 10650.16, 12117.59, 13491.82
 0.46, 1967.46, 3865.5, 5683.77, 7416.82, 9061.31, 10615.11, 12076.84, 13445.67
 0.48, 1962.16, 3854.6, 5667.07, 7394.26, 9032.94, 10581.08, 12037.42, 13401.17
 0.5, 1956.92, 3843.87, 5650.7, 7372.23, 9005.34, 10548.1, 11999.32, 13358.28
 0.52, 1951.74, 3833.32, 5634.68, 7350.75, 8978.52, 10516.16, 11962.53, 13316.96
 0.54, 1946.64, 3822.97, 5619.03, 7329.84, 8952.5, 10485.24, 11927, 13277.16
 0.56, 1941.64, 3812.84, 5603.75, 7309.5, 8927.25, 10455.32, 11892.7, 13238.82
 0.58, 1936.72, 3802.94, 5588.86, 7289.72, 8902.77, 10426.39, 11859.61, 13201.89
 0.6, 1931.91, 3793.26, 5574.36, 7270.51, 8879.05, 10398.4, 11827.66, 13166.31
 0.62, 1927.2, 3783.82, 5560.24, 7251.85, 8856.06, 10371.34, 11796.82, 13132.02
 0.64, 1922.59, 3774.61, 5546.5, 7233.73, 8833.78, 10345.16, 11767.05, 13098.97
 0.66, 1918.09, 3765.62, 5533.13, 7216.15, 8812.19, 10319.85, 11738.3, 13067.1
 0.68, 1913.69, 3756.87, 5520.13, 7199.08, 8791.28, 10295.36, 11710.53, 13036.36
 0.7, 1909.4, 3748.34, 5507.49, 7182.5, 8771.01, 10271.67, 11683.7, 13006.7
 0.72, 1905.21, 3740.03, 5495.19, 7166.42, 8751.37, 10248.74, 11657.77, 12978.07
 0.74, 1901.12, 3731.93, 5483.24, 7150.8, 8732.33, 10226.54, 11632.7, 12950.42
 0.76, 1897.13, 3724.05, 5471.61, 7135.64, 8713.87, 10205.05, 11608.46, 12923.72
 0.78, 1893.24, 3716.37, 5460.31, 7120.91, 8695.97, 10184.23, 11585, 12897.9
 0.8, 1889.45, 3708.9, 5449.31, 7106.61, 8678.6, 10164.06, 11562.3, 12872.95
 0.82, 1885.74, 3701.61, 5438.62, 7092.72, 8661.76, 10144.52, 11540.33, 12848.81
 0.84, 1882.13, 3694.52, 5428.22, 7079.23, 8645.4, 10125.56, 11519.04, 12825.45
 0.86, 1878.61, 3687.6, 5418.09, 7066.11, 8629.53, 10107.19, 11498.41, 12802.83
 0.88, 1875.18, 3680.87, 5408.24, 7053.36, 8614.12, 10089.36, 11478.42, 12780.93
 0.9, 1871.82, 3674.31, 5398.66, 7040.96, 8599.14, 10072.05, 11459.04, 12759.71
 0.92, 1868.55, 3667.91, 5389.32, 7028.9, 8584.6, 10055.26, 11440.24, 12739.14
 0.94, 1865.36, 3661.68, 5380.23, 7017.17, 8570.46, 10038.95, 11421.99, 12719.2
 0.96, 1862.25, 3655.6, 5371.38, 7005.76, 8556.71, 10023.1, 11404.28, 12699.85
 0.98, 1859.21, 3649.67, 5362.76, 6994.65, 8543.34, 10007.7, 11387.08, 12681.07
 1, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
 1.02, 1856.24, 3643.89, 5354.35, 6983.83, 8530.34, 9992.73, 11370.37, 12662.85
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 276.28, 542.17, 796.11, 1037.22, 1264.9, 1478.75, 1678.46, 1863.81
 1, 543.78, 1067.29, 1567.45, 2042.53, 2491.36, 2913.12, 3307.21, 3673.19
 1.5, 794.63, 1560.03, 2291.71, 2987.17, 3644.68, 4263.02, 4841.27, 5378.78
 2, 1022.61, 2008.24, 2951.2, 3848.24, 4697.14, 5496.28, 6244.46, 6940.76
 2.5, 1223.67, 2403.99, 3534.24, 4610.54, 5630.23, 6591.31, 7492.28, 8331.97
 3, 1396.06, 2743.8, 4035.64, 5267.18, 6435.36, 7537.86, 8572.88, 9539
 3.5, 1540.13, 3028.22, 4456.04, 5818.77, 7113, 8336.12, 9486.09, 10561.24
 4, 1657.77, 3260.87, 4800.56, 6271.72, 7670.65, 8994.49, 10240.97, 11408.22
 4.5, 1751.86, 3447.27, 5077.17, 6636.17, 8120.35, 9526.68, 10852.66, 12096.26
 5, 1825.68, 3593.81, 5295.1, 6923.97, 8476.36, 9949.04, 11339.39, 12645.19
 5.5, 1882.54, 3706.94, 5463.74, 7147.24, 8753.26, 10278.46, 11720.06, 13075.75
 6, 1925.52, 3792.65, 5591.84, 7317.32, 8964.81, 10530.87, 12012.67, 13407.74
 6.5, 1957.31, 3856.21, 5687.13, 7444.25, 9123.23, 10720.57, 12233.34, 13659.03
 7, 1980.19, 3902.12, 5756.22, 7536.65, 9239.02, 10859.81, 12396.02, 13845.08
 7.5, 1996.04, 3934.07, 5804.56, 7601.65, 9320.93, 10958.85, 12512.39, 13978.92
 8, 2006.38, 3955.09, 5836.61, 7645.08, 9376.12, 11026.13, 12592.07, 14071.29
 8.5, 2012.44, 3967.57, 5855.92, 7671.64, 9410.35, 11068.44, 12642.86, 14130.95
 9, 2015.19, 3973.45, 5865.35, 7685.08, 9428.24, 11091.25, 12671.03, 14164.92
 9.5, 2015.4, 3974.24, 5867.15, 7688.35, 9433.46, 11098.89, 12681.58, 14178.84
 10, 2013.65, 3971.12, 5863.1, 7683.82, 9428.92, 11094.83, 12678.48, 14177.19
 10.5, 2010.43, 3965.04, 5854.58, 7673.31, 9416.9, 11081.77, 12664.87, 14163.51
 11, 2006.09, 3956.73, 5842.69, 7658.29, 9399.2, 11061.86, 12643.23, 14140.62
 11.5, 2000.94, 3946.76, 5828.3, 7639.9, 9377.24, 11036.8, 12615.52, 14110.74
 12, 1995.19, 3935.59, 5812.08, 7619.02, 9352.14, 11007.91, 12583.3, 14075.63
 12.5, 1989.02, 3923.55, 5794.54, 7596.36, 9324.76, 10976.24, 12547.76, 14036.68
 13, 1982.57, 3910.94, 5776.1, 7572.47, 9295.8, 10942.61, 12509.88, 13994.97
 13.5, 1975.94, 3897.96, 5757.09, 7547.77, 9265.79, 10907.67, 12470.41, 13951.37
 14, 1969.22, 3884.77, 5737.75, 7522.61, 9235.15, 10871.92, 12429.93, 13906.55
 14.5, 1962.46, 3871.51, 5718.27, 7497.23, 9204.21, 10835.75, 12388.91, 13861.05
 15, 1955.73, 3858.28, 5698.81, 7471.85, 9173.21, 10799.49, 12347.71, 13815.27
 15.5, 1949.05, 3845.15, 5679.48, 7446.61, 9142.37, 10763.35, 12306.61, 13769.55
 16, 1942.46, 3832.17, 5660.38, 7421.64, 9111.82, 10727.53, 12265.82, 13724.13
 16.5, 1935.97, 3819.4, 5641.55, 7397.02, 9081.68, 10692.16, 12225.52, 13679.2
 17, 1929.6, 3806.86, 5623.06, 7372.82, 9052.04, 10657.35, 12185.83, 13634.92
 17.5, 1923.37, 3794.57, 5604.94, 7349.1, 9022.96, 10623.17, 12146.83, 13591.38
 18, 1917.28, 3782.56, 5587.21, 7325.88, 8994.48, 10589.68, 12108.6, 13548.67
 18.5, 1911.33, 3770.83, 5569.89, 7303.18, 8966.64, 10556.93, 12071.18, 13506.85
 19, 1905.53, 3759.38, 5552.99, 7281.02, 8939.44, 10524.92, 12034.6, 13465.95
 19.5, 1899.87, 3748.23, 5536.51, 7259.41, 8912.91, 10493.68, 11998.88, 13425.99
 20, 1894.37, 3737.36, 5520.45, 7238.35, 8887.04, 10463.21, 11964.03, 13386.99
 20.5, 1889.01, 3726.78, 5504.81, 7217.83, 8861.82, 10433.51, 11930.05, 13348.95
 21, 1883.79, 3716.48, 5489.59, 7197.84, 8837.27, 10404.57, 11896.93, 13311.86
 21.5, 1878.72, 3706.46, 5474.77, 7178.39, 8813.35, 10376.38, 11864.66, 13275.71
 22, 1873.78, 3696.71, 5460.34, 7159.45, 8790.07, 10348.93, 11833.23, 13240.49
 22.5, 1868.98, 3687.23, 5446.31, 7141.02, 8767.4, 10322.2, 11802.62, 13206.18
 23, 1864.31, 3677.99, 5432.65, 7123.08, 8745.34, 10296.17, 11772.8, 13172.75
 23.5, 1859.76, 3669.01, 5419.36, 7105.62, 8723.86, 10270.83, 11743.76, 13140.19
 24, 1855.34, 3660.27, 5406.42, 7088.63, 8702.94, 10246.15, 11715.48, 13108.47
 24.5, 1851.04, 3651.76, 5393.83, 7072.08, 8682.58, 10222.12, 11687.93, 13077.57
 25, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
 26, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 276.28, 542.17, 796.11, 1037.22, 1264.9, 1478.75, 1678.46, 1863.81
 1, 543.78, 1067.29, 1567.45, 2042.53, 2491.36, 2913.12, 3307.21, 3673.19
 1.5, 794.63, 1560.03, 2291.71, 2987.17, 3644.68, 4263.02, 4841.27, 5378.78
 2, 1022.61, 2008.24, 2951.2, 3848.24, 4697.14, 5496.28, 6244.46, 6940.76
 2.5, 1223.67, 2403.99, 3534.24, 4610.54, 5630.23, 6591.31, 7492.28, 8331.97
 3, 1396.06, 2743.8, 4035.64, 5267.18, 6435.36, 7537.86, 8572.88, 9539
 3.5, 1540.13, 3028.22, 4456.04, 5818.77, 7113, 8336.12, 9486.09, 10561.24
 4, 1657.77, 3260.87, 4800.56, 6271.72, 7670.65, 8994.49, 10240.97, 11408.22
 4.5, 1751.86, 3447.27, 5077.17, 6636.17, 8120.35, 9526.68, 10852.66, 12096.26
 5, 1825.68, 3593.81, 5295.1, 6923.97, 8476.36, 9949.04, 11339.39, 12645.19
 5.5, 1882.54, 3706.94, 5463.74, 7147.24, 8753.26, 10278.46, 11720.06, 13075.75
 6, 1925.52, 3792.65, 5591.84, 7317.32, 8964.81, 10530.87, 12012.67, 13407.74
 6.5, 1957.31, 3856.21, 5687.13, 7444.25, 9123.23, 10720.57, 12233.34, 13659.03
 7, 1980.19, 3902.12, 5756.22, 7536.65, 9239.02, 10859.81, 12396.02, 13845.08
 7.5, 1996.04, 3934.07, 5804.56, 7601.65, 9320.93, 10958.85, 12512.39, 13978.92
 8, 2006.38, 3955.09, 5836.61, 7645.08, 9376.12, 11026.13, 12592.07, 14071.29
 8.5, 2012.44, 3967.57, 5855.92, 7671.64, 9410.35, 11068.44, 12642.86, 14130.95
 9, 2015.19, 3973.45, 5865.35, 7685.08, 9428.24, 11091.25, 12671.03, 14164.92
 9.5, 2015.4, 3974.24, 5867.15, 7688.35, 9433.46, 11098.89, 12681.58, 14178.84
 10, 2013.65, 3971.12, 5863.1, 7683.82, 9428.92, 11094.83, 12678.48, 14177.19
 10.5, 2010.43, 3965.04, 5854.58, 7673.31, 9416.9, 11081.77, 12664.87, 14163.51
 11, 2006.09, 3956.73, 5842.69, 7658.29, 9399.2, 11061.86, 12643.23, 14140.62
 11.5, 2000.94, 3946.76, 5828.3, 7639.9, 9377.24, 11036.8, 12615.52, 14110.74
 12, 1995.19, 3935.59, 5812.08, 7619.02, 9352.14, 11007.91, 12583.3, 14075.63
 12.5, 1989.02, 3923.55, 5794.54, 7596.36, 9324.76, 10976.24, 12547.76, 14036.68
 13, 1982.57, 3910.94, 5776.1, 7572.47, 9295.8, 10942.61, 12509.88, 13994.97
 13.5, 1975.94, 3897.96, 5757.09, 7547.77, 9265.79, 10907.67, 12470.41, 13951.37
 14, 1969.22, 3884.77, 5737.75, 7522.61, 9235.15, 10871.92, 12429.93, 13906.55
 14.5, 1962.46, 3871.51, 5718.27, 7497.23, 9204.21, 10835.75, 12388.91, 13861.05
 15, 1955.73, 3858.28, 5698.81, 7471.85, 9173.21, 10799.49, 12347.71, 13815.27
 15.5, 1949.05, 3845.15, 5679.48, 7446.61, 9142.37, 10763.35, 12306.61, 13769.55
 16, 1942.46, 3832.17, 5660.38, 7421.64, 9111.82, 10727.53, 12265.82, 13724.13
 16.5, 1935.97, 3819.4, 5641.55, 7397.02, 9081.68, 10692.16, 12225.52, 13679.2
 17, 1929.6, 3806.86, 5623.06, 7372.82, 9052.04, 10657.35, 12185.83, 13634.92
 17.5, 1923.37, 3794.57, 5604.94, 7349.1, 9022.96, 10623.17, 12146.83, 13591.38
 18, 1917.28, 3782.56, 5587.21, 7325.88, 8994.48, 10589.68, 12108.6, 13548.67
 18.5, 1911.33, 3770.83, 5569.89, 7303.18, 8966.64, 10556.93, 12071.18, 13506.85
 19, 1905.53, 3759.38, 5552.99, 7281.02, 8939.44, 10524.92, 12034.6, 13465.95
 19.5, 1899.87, 3748.23, 5536.51, 7259.41, 8912.91, 10493.68, 11998.88, 13425.99
 20, 1894.37, 3737.36, 5520.45, 7238.35, 8887.04, 10463.21, 11964.03, 13386.99
 20.5, 1889.01, 3726.78, 5504.81, 7217.83, 8861.82, 10433.51, 11930.05, 13348.95
 21, 1883.79, 3716.48, 5489.59, 7197.84, 8837.27, 10404.57, 11896.93, 13311.86
 21.5, 1878.72, 3706.46, 5474.77, 7178.39, 8813.35, 10376.38, 11864.66, 13275.71
 22, 1873.78, 3696.71, 5460.34, 7159.45, 8790.07, 10348.93, 11833.23, 13240.49
 22.5, 1868.98, 3687.23, 5446.31, 7141.02, 8767.4, 10322.2, 11802.62, 13206.18
 23, 1864.31, 3677.99, 5432.65, 7123.08, 8745.34, 10296.17, 11772.8, 13172.75
 23.5, 1859.76, 3669.01, 5419.36, 7105.62, 8723.86, 10270.83, 11743.76, 13140.19
 24, 1855.34, 3660.27, 5406.42, 7088.63, 8702.94, 10246.15, 11715.48, 13108.47
 24.5, 1851.04, 3651.76, 5393.83, 7072.08, 8682.58, 10222.12, 11687.93, 13077.57
 25, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
 26, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 276.28, 542.17, 796.11, 1037.22, 1264.9, 1478.75, 1678.46, 1863.81
 1, 543.78, 1067.29, 1567.45, 2042.53, 2491.36, 2913.12, 3307.21, 3673.19
 1.5, 794.63, 1560.03, 2291.71, 2987.17, 3644.68, 4263.02, 4841.27, 5378.78
 2, 1022.61, 2008.24, 2951.2, 3848.24, 4697.14, 5496.28, 6244.46, 6940.76
 2.5, 1223.67, 2403.99, 3534.24, 4610.54, 5630.23, 6591.31, 7492.28, 8331.97
 3, 1396.06, 2743.8, 4035.64, 5267.18, 6435.36, 7537.86, 8572.88, 9539
 3.5, 1540.13, 3028.22, 4456.04, 5818.77, 7113, 8336.12, 9486.09, 10561.24
 4, 1657.77, 3260.87, 4800.56, 6271.72, 7670.65, 8994.49, 10240.97, 11408.22
 4.5, 1751.86, 3447.27, 5077.17, 6636.17, 8120.35, 9526.68, 10852.66, 12096.26
 5, 1825.68, 3593.81, 5295.1, 6923.97, 8476.36, 9949.04, 11339.39, 12645.19
 5.5, 1882.54, 3706.94, 5463.74, 7147.24, 8753.26, 10278.46, 11720.06, 13075.75
 6, 1925.52, 3792.65, 5591.84, 7317.32, 8964.81, 10530.87, 12012.67, 13407.74
 6.5, 1957.31, 3856.21, 5687.13, 7444.25, 9123.23, 10720.57, 12233.34, 13659.03
 7, 1980.19, 3902.12, 5756.22, 7536.65, 9239.02, 10859.81, 12396.02, 13845.08
 7.5, 1996.04, 3934.07, 5804.56, 7601.65, 9320.93, 10958.85, 12512.39, 13978.92
 8, 2006.38, 3955.09, 5836.61, 7645.08, 9376.12, 11026.13, 12592.07, 14071.29
 8.5, 2012.44, 3967.57, 5855.92, 7671.64, 9410.35, 11068.44, 12642.86, 14130.95
 9, 2015.19, 3973.45, 5865.35, 7685.08, 9428.24, 11091.25, 12671.03, 14164.92
 9.5, 2015.4, 3974.24, 5867.15, 7688.35, 9433.46, 11098.89, 12681.58, 14178.84
 10, 2013.65, 3971.12, 5863.1, 7683.82, 9428.92, 11094.83, 12678.48, 14177.19
 10.5, 2010.43, 3965.04, 5854.58, 7673.31, 9416.9, 11081.77, 12664.87, 14163.51
 11, 2006.09, 3956.73, 5842.69, 7658.29, 9399.2, 11061.86, 12643.23, 14140.62
 11.5, 2000.94, 3946.76, 5828.3, 7639.9, 9377.24, 11036.8, 12615.52, 14110.74
 12, 1995.19, 3935.59, 5812.08, 7619.02, 9352.14, 11007.91, 12583.3, 14075.63
 12.5, 1989.02, 3923.55, 5794.54, 7596.36, 9324.76, 10976.24, 12547.76, 14036.68
 13, 1982.57, 3910.94, 5776.1, 7572.47, 9295.8, 10942.61, 12509.88, 13994.97
 13.5, 1975.94, 3897.96, 5757.09, 7547.77, 9265.79, 10907.67, 12470.41, 13951.37
 14, 1969.22, 3884.77, 5737.75, 7522.61, 9235.15, 10871.92, 12429.93, 13906.55
 14.5, 1962.46, 3871.51, 5718.27, 7497.23, 9204.21, 10835.75, 12388.91, 13861.05
 15, 1955.73, 3858.28, 5698.81, 7471.85, 9173.21, 10799.49, 12347.71, 13815.27
 15.5, 1949.05, 3845.15, 5679.48, 7446.61, 9142.37, 10763.35, 12306.61, 13769.55
 16, 1942.46, 3832.17, 5660.38, 7421.64, 9111.82, 10727.53, 12265.82, 13724.13
 16.5, 1935.97, 3819.4, 5641.55, 7397.02, 9081.68, 10692.16, 12225.52, 13679.2
 17, 1929.6, 3806.86, 5623.06, 7372.82, 9052.04, 10657.35, 12185.83, 13634.92
 17.5, 1923.37, 3794.57, 5604.94, 7349.1, 9022.96, 10623.17, 12146.83, 13591.38
 18, 1917.28, 3782.56, 5587.21, 7325.88, 8994.48, 10589.68, 12108.6, 13548.67
 18.5, 1911.33, 3770.83, 5569.89, 7303.18, 8966.64, 10556.93, 12071.18, 13506.85
 19, 1905.53, 3759.38, 5552.99, 7281.02, 8939.44, 10524.92, 12034.6, 13465.95
 19.5, 1899.87, 3748.23, 5536.51, 7259.41, 8912.91, 10493.68, 11998.88, 13425.99
 20, 1894.37, 3737.36, 5520.45, 7238.35, 8887.04, 10463.21, 11964.03, 13386.99
 20.5, 1889.01, 3726.78, 5504.81, 7217.83, 8861.82, 10433.51, 11930.05, 13348.95
 21, 1883.79, 3716.48, 5489.59, 7197.84, 8837.27, 10404.57, 11896.93, 13311.86
 21.5, 1878.72, 3706.46, 5474.77, 7178.39, 8813.35, 10376.38, 11864.66, 13275.71
 22, 1873.78, 3696.71, 5460.34, 7159.45, 8790.07, 10348.93, 11833.23, 13240.49
 22.5, 1868.98, 3687.23, 5446.31, 7141.02, 8767.4, 10322.2, 11802.62, 13206.18
 23, 1864.31, 3677.99, 5432.65, 7123.08, 8745.34, 10296.17, 11772.8, 13172.75
 23.5, 1859.76, 3669.01, 5419.36, 7105.62, 8723.86, 10270.83, 11743.76, 13140.19
 24, 1855.34, 3660.27, 5406.42, 7088.63, 8702.94, 10246.15, 11715.48, 13108.47
 24.5, 1851.04, 3651.76, 5393.83, 7072.08, 8682.58, 10222.12, 11687.93, 13077.57
 25, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
 26, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 276.28, 542.17, 796.11, 1037.22, 1264.9, 1478.75, 1678.46, 1863.81
 1, 543.78, 1067.29, 1567.45, 2042.53, 2491.36, 2913.12, 3307.21, 3673.19
 1.5, 794.63, 1560.03, 2291.71, 2987.17, 3644.68, 4263.02, 4841.27, 5378.78
 2, 1022.61, 2008.24, 2951.2, 3848.24, 4697.14, 5496.28, 6244.46, 6940.76
 2.5, 1223.67, 2403.99, 3534.24, 4610.54, 5630.23, 6591.31, 7492.28, 8331.97
 3, 1396.06, 2743.8, 4035.64, 5267.18, 6435.36, 7537.86, 8572.88, 9539
 3.5, 1540.13, 3028.22, 4456.04, 5818.77, 7113, 8336.12, 9486.09, 10561.24
 4, 1657.77, 3260.87, 4800.56, 6271.72, 7670.65, 8994.49, 10240.97, 11408.22
 4.5, 1751.86, 3447.27, 5077.17, 6636.17, 8120.35, 9526.68, 10852.66, 12096.26
 5, 1825.68, 3593.81, 5295.1, 6923.97, 8476.36, 9949.04, 11339.39, 12645.19
 5.5, 1882.54, 3706.94, 5463.74, 7147.24, 8753.26, 10278.46, 11720.06, 13075.75
 6, 1925.52, 3792.65, 5591.84, 7317.32, 8964.81, 10530.87, 12012.67, 13407.74
 6.5, 1957.31, 3856.21, 5687.13, 7444.25, 9123.23, 10720.57, 12233.34, 13659.03
 7, 1980.19, 3902.12, 5756.22, 7536.65, 9239.02, 10859.81, 12396.02, 13845.08
 7.5, 1996.04, 3934.07, 5804.56, 7601.65, 9320.93, 10958.85, 12512.39, 13978.92
 8, 2006.38, 3955.09, 5836.61, 7645.08, 9376.12, 11026.13, 12592.07, 14071.29
 8.5, 2012.44, 3967.57, 5855.92, 7671.64, 9410.35, 11068.44, 12642.86, 14130.95
 9, 2015.19, 3973.45, 5865.35, 7685.08, 9428.24, 11091.25, 12671.03, 14164.92
 9.5, 2015.4, 3974.24, 5867.15, 7688.35, 9433.46, 11098.89, 12681.58, 14178.84
 10, 2013.65, 3971.12, 5863.1, 7683.82, 9428.92, 11094.83, 12678.48, 14177.19
 10.5, 2010.43, 3965.04, 5854.58, 7673.31, 9416.9, 11081.77, 12664.87, 14163.51
 11, 2006.09, 3956.73, 5842.69, 7658.29, 9399.2, 11061.86, 12643.23, 14140.62
 11.5, 2000.94, 3946.76, 5828.3, 7639.9, 9377.24, 11036.8, 12615.52, 14110.74
 12, 1995.19, 3935.59, 5812.08, 7619.02, 9352.14, 11007.91, 12583.3, 14075.63
 12.5, 1989.02, 3923.55, 5794.54, 7596.36, 9324.76, 10976.24, 12547.76, 14036.68
 13, 1982.57, 3910.94, 5776.1, 7572.47, 9295.8, 10942.61, 12509.88, 13994.97
 13.5, 1975.94, 3897.96, 5757.09, 7547.77, 9265.79, 10907.67, 12470.41, 13951.37
 14, 1969.22, 3884.77, 5737.75, 7522.61, 9235.15, 10871.92, 12429.93, 13906.55
 14.5, 1962.46, 3871.51, 5718.27, 7497.23, 9204.21, 10835.75, 12388.91, 13861.05
 15, 1955.73, 3858.28, 5698.81, 7471.85, 9173.21, 10799.49, 12347.71, 13815.27
 15.5, 1949.05, 3845.15, 5679.48, 7446.61, 9142.37, 10763.35, 12306.61, 13769.55
 16, 1942.46, 3832.17, 5660.38, 7421.64, 9111.82, 10727.53, 12265.82, 13724.13
 16.5, 1935.97, 3819.4, 5641.55, 7397.02, 9081.68, 10692.16, 12225.52, 13679.2
 17, 1929.6, 3806.86, 5623.06, 7372.82, 9052.04, 10657.35, 12185.83, 13634.92
 17.5, 1923.37, 3794.57, 5604.94, 7349.1, 9022.96, 10623.17, 12146.83, 13591.38
 18, 1917.28, 3782.56, 5587.21, 7325.88, 8994.48, 10589.68, 12108.6, 13548.67
 18.5, 1911.33, 3770.83, 5569.89, 7303.18, 8966.64, 10556.93, 12071.18, 13506.85
 19, 1905.53, 3759.38, 5552.99, 7281.02, 8939.44, 10524.92, 12034.6, 13465.95
 19.5, 1899.87, 3748.23, 5536.51, 7259.41, 8912.91, 10493.68, 11998.88, 13425.99
 20, 1894.37, 3737.36, 5520.45, 7238.35, 8887.04, 10463.21, 11964.03, 13386.99
 20.5, 1889.01, 3726.78, 5504.81, 7217.83, 8861.82, 10433.51, 11930.05, 13348.95
 21, 1883.79, 3716.48, 5489.59, 7197.84, 8837.27, 10404.57, 11896.93, 13311.86
 21.5, 1878.72, 3706.46, 5474.77, 7178.39, 8813.35, 10376.38, 11864.66, 13275.71
 22, 1873.78, 3696.71, 5460.34, 7159.45, 8790.07, 10348.93, 11833.23, 13240.49
 22.5, 1868.98, 3687.23, 5446.31, 7141.02, 8767.4, 10322.2, 11802.62, 13206.18
 23, 1864.31, 3677.99, 5432.65, 7123.08, 8745.34, 10296.17, 11772.8, 13172.75
 23.5, 1859.76, 3669.01, 5419.36, 7105.62, 8723.86, 10270.83, 11743.76, 13140.19
 24, 1855.34, 3660.27, 5406.42, 7088.63, 8702.94, 10246.15, 11715.48, 13108.47
 24.5, 1851.04, 3651.76, 5393.83, 7072.08, 8682.58, 10222.12, 11687.93, 13077.57
 25, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
 26, 1846.85, 3643.48, 5381.57, 7055.96, 8662.75, 10198.71, 11661.1, 13047.47
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1) 278 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2) 278 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1) 278 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2) 278 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST.

! 2D table: row 1 has "0" (place holder) followed by 6 values of speed (km/h). Other
! rows have torsion bar torque (N-m) followed by 6 values of boost force (N).
F_BOOST_R_CARPET 2D_SPLINE
 0, 0, 20, 50, 80, 120, 200
 -16, -2500, -2500, -2500, -2500, -2500, -2500
 -15, -2500, -2500, -2500, -2500, -2500, -2500
 -14.5, -2500, -2500, -2500, -2500, -2500, -2500
 -14, -2500, -2500, -2500, -2500, -2500, -2500
 -13.5, -2500, -2500, -2500, -2500, -2500, -2500
 -13, -2500, -2500, -2500, -2500, -2500, -2500
 -12.5, -2500, -2500, -2500, -2500, -2500, -2500
 -12, -2500, -2500, -2500, -2500, -2500, -2500
 -11.5, -2500, -2500, -2500, -2500, -2266.8, -2141.32
 -11, -2500, -2420, -2427.94, -2280.85, -1736.13, -1500.51
 -10.5, -2500, -2205, -2063.12, -1815.93, -1313.29, -1034.22
 -10, -2500, -2000, -1739.25, -1429.79, -980, -700
 -9.5, -2500, -1805, -1453.43, -1112.03, -720.39, -464.39
 -9, -2500, -1620, -1202.85, -853.22, -520.81, -301.33
 -8.5, -2500, -1445, -984.76, -644.8, -369.61, -190.74
 -8, -2500, -1280, -796.49, -479.09, -256.9, -117.44
 -7.5, -2500, -1125, -635.44, -349.2, -174.42, -70.08
 -7, -2500, -980, -499.12, -249.03, -115.3, -40.35
 -6.5, -2500, -845, -385.09, -173.2, -73.91, -22.31
 -6, -2500, -720, -291, -117.01, -45.72, -11.76
 -5.5, -2500, -605, -214.6, -76.39, -27.13, -5.86
 -5, -2500, -500, -153.73, -47.89, -15.31, -2.73
 -4.5, -2278.13, -405, -106.32, -28.58, -8.14, -1.18
 -4, -1600, -320, -70.4, -16.05, -4.01, -0.46
 -3.5, -1071.88, -245, -44.12, -8.34, -1.8, -0.16
 -3, -675, -180, -25.72, -3.92, -0.71, -0.05
 -2.5, -390.63, -125, -13.59, -1.6, -0.24, -0.01
 -2, -200, -80, -6.22, -0.54, -0.06, 0
 -1.5, -84.38, -45, -2.27, -0.13, -0.01, 0
 -1, -25, -20, -0.55, -0.02, 0, 0
 -0.5, -3.13, -5, -0.05, 0, 0, 0
 0, 0, 0, 0, 0, 0, 0
 0.5, 3.13, 5, 0.05, 0, 0, 0
 1, 25, 20, 0.55, 0.02, 0, 0
 1.5, 84.38, 45, 2.27, 0.13, 0.01, 0
 2, 200, 80, 6.22, 0.54, 0.06, 0
 2.5, 390.63, 125, 13.59, 1.6, 0.24, 0.01
 3, 675, 180, 25.72, 3.92, 0.71, 0.05
 3.5, 1071.88, 245, 44.12, 8.34, 1.8, 0.16
 4, 1600, 320, 70.4, 16.05, 4.01, 0.46
 4.5, 2278.13, 405, 106.32, 28.58, 8.14, 1.18
 5, 2500, 500, 153.73, 47.89, 15.31, 2.73
 5.5, 2500, 605, 214.6, 76.39, 27.13, 5.86
 6, 2500, 720, 291, 117.01, 45.72, 11.76
 6.5, 2500, 845, 385.09, 173.2, 73.91, 22.31
 7, 2500, 980, 499.12, 249.03, 115.3, 40.35
 7.5, 2500, 1125, 635.44, 349.2, 174.42, 70.08
 8, 2500, 1280, 796.49, 479.09, 256.9, 117.44
 8.5, 2500, 1445, 984.76, 644.8, 369.61, 190.74
 9, 2500, 1620, 1202.85, 853.22, 520.81, 301.33
 9.5, 2500, 1805, 1453.43, 1112.03, 720.39, 464.39
 10, 2500, 2000, 1739.25, 1429.79, 980, 700
 10.5, 2500, 2205, 2063.12, 1815.93, 1313.29, 1034.22
 11, 2500, 2420, 2427.94, 2280.85, 1736.13, 1500.51
 11.5, 2500, 2500, 2500, 2500, 2266.8, 2141.32
 12, 2500, 2500, 2500, 2500, 2500, 2500
 12.5, 2500, 2500, 2500, 2500, 2500, 2500
 13, 2500, 2500, 2500, 2500, 2500, 2500
 13.5, 2500, 2500, 2500, 2500, 2500, 2500
 14, 2500, 2500, 2500, 2500, 2500, 2500
 14.5, 2500, 2500, 2500, 2500, 2500, 2500
 15, 2500, 2500, 2500, 2500, 2500, 2500
 16, 2500, 2500, 2500, 2500, 2500, 2500
ENDTABLE
F_BOOST_R_GAIN      1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET    0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST  0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST  1 ! Scale factor divided into (torsion bar torque -
                      ! M_TB_START_F_BOOST)
VX_TB_START_F_BOOST 0 ; km/h ! Offset subtracted from speed
VX_TB_SCALE_F_BOOST 1 ! Scale factor divided into (speed - VX_TB_START_F_BOOST)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 68, 0
 69, 0
 70, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 78, 0
 79, 0
 80, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 78, 0
 79, 0
 80, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -50, -10000
 -49, 0
 -48, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.00995992
 0.1, 0.00995992
 0.2, 0.00995992
 0.3, 0.00995986
 0.4, 0.00995888
 0.5, 0.00995019
 0.6, 0.0098997
 0.7, 0.00967858
 0.8, 0.00889048
 0.9, 0.00648711
 0.95, 0.00399655
 0.99, 0.000952347
 1.01, -0.000952347
 1.05, -0.00399655
 1.1, -0.00648711
 1.2, -0.00889048
 1.3, -0.00967858
 1.4, -0.0098997
 1.5, -0.00995019
 1.6, -0.00995888
 1.7, -0.00995986
 1.8, -0.00995992
 1.9, -0.00995992
 2, -0.00995992
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                      ! converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         ! RSPIN_START_INV_CAP_TC)

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0
 784.532, -2.7453
 1569.064, -6.7216
 2353.596, -11.0497
 3138.128, -15.5865
 3922.66, -20.2695
 4707.192, -25.0638
 5491.724, -29.9472
 6276.256, -34.9047
 7060.788, -39.925
 7845.32, -45
 8629.852, -50.1231
 9414.384, -55.2891
 10198.916, -60.4937
 10983.448, -65.7334
 11767.98, -71.0051
 12552.512, -76.3065
 13337.044, -81.6351
 14121.576, -86.9892
 14906.108, -92.3669
 15690.64, -97.767
ENDTABLE
KGAMMA_GAIN(1,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0
 784.532, -2.7453
 1569.064, -6.7216
 2353.596, -11.0497
 3138.128, -15.5865
 3922.66, -20.2695
 4707.192, -25.0638
 5491.724, -29.9472
 6276.256, -34.9047
 7060.788, -39.925
 7845.32, -45
 8629.852, -50.1231
 9414.384, -55.2891
 10198.916, -60.4937
 10983.448, -65.7334
 11767.98, -71.0051
 12552.512, -76.3065
 13337.044, -81.6351
 14121.576, -86.9892
 14906.108, -92.3669
 15690.64, -97.767
ENDTABLE
KGAMMA_GAIN(1,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0
 784.532, -2.7453
 1569.064, -6.7216
 2353.596, -11.0497
 3138.128, -15.5865
 3922.66, -20.2695
 4707.192, -25.0638
 5491.724, -29.9472
 6276.256, -34.9047
 7060.788, -39.925
 7845.32, -45
 8629.852, -50.1231
 9414.384, -55.2891
 10198.916, -60.4937
 10983.448, -65.7334
 11767.98, -71.0051
 12552.512, -76.3065
 13337.044, -81.6351
 14121.576, -86.9892
 14906.108, -92.3669
 15690.64, -97.767
ENDTABLE
KGAMMA_GAIN(2,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0
 784.532, -2.7453
 1569.064, -6.7216
 2353.596, -11.0497
 3138.128, -15.5865
 3922.66, -20.2695
 4707.192, -25.0638
 5491.724, -29.9472
 6276.256, -34.9047
 7060.788, -39.925
 7845.32, -45
 8629.852, -50.1231
 9414.384, -55.2891
 10198.916, -60.4937
 10983.448, -65.7334
 11767.98, -71.0051
 12552.512, -76.3065
 13337.044, -81.6351
 14121.576, -86.9892
 14906.108, -92.3669
 15690.64, -97.767
ENDTABLE
KGAMMA_GAIN(2,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc.. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.4 sec. Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 105 ; mm ! Constant tire contact length, axle 1, left side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 105 ; mm ! Constant tire contact length, axle 1, right
                              ! side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 105 ; mm ! Constant tire contact length, axle 2, left side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 105 ; mm ! Constant tire contact length, axle 2, right
                              ! side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 225 ; mm ! Constant tire contact width, axle 1, left side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 225 ; mm ! Constant tire contact width, axle 1, right side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 225 ; mm ! Constant tire contact width, axle 2, left side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 225 ; mm ! Constant tire contact width, axle 2, right side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_X from the calculation can be
! adjusted with L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the
! calculation can be adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_X. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_X_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1) 0.0706 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1) LINEAR ! axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2) 0.0706 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2) LINEAR ! axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1) 0.0706 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1) LINEAR ! axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2) 0.0706 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2) LINEAR ! axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2) 8000 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_Y from the calculation can be
! adjusted with L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the
! calculation can be adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_Y. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_Y_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1) 0.706 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2) 0.706 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1) 0.706 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1) 8000 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2) 0.706 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2) 8000 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 646.25, 49.5, 152.22, 202.74, 206.86, 209.2, 210.36, 210.76, 210.86, 210.91, 210.86
 791.25, 59.4, 185.75, 279.32, 298.29, 301.33, 302.57, 303.01, 303.04, 303.04, 303.04
 937.5, 0, 174.78, 296.05, 322.7, 329.9, 332.51, 333.46, 333.55, 333.54, 333.49
 1383.8, -19.8, 141.25, 347.18, 397.32, 417.23, 424.03, 426.58, 426.8, 426.75, 426.58
 1828.8, -29.7, 94.23, 334.62, 415.8, 442.3, 454.3, 460.17, 461.54, 462.44, 471.24
 2275, -33.66, 51.48, 297, 423.19, 467.37, 484.57, 493.77, 496.28, 498.12, 510.84
 2721.2, -40.33, 19.8, 235.3, 407.34, 475.2, 514.8, 520.74, 526.68, 532.62, 545.76
 3166.2, -50.64, -12.81, 162.59, 364.16, 479.16, 533.99, 548.46, 558.47, 564.3, 574.2
 3612.5, -60.27, -30.32, 112.81, 307, 466.25, 539.81, 570.45, 578.16, 590.04, 599.94
 4058.8, -68.77, -44.12, 75.33, 244.98, 446.9, 534.6, 574.2, 590.04, 601.92, 613.8
 4503.8, -77.13, -56.21, 46.97, 193.06, 402.08, 518.76, 576.18, 594, 607.86, 619.74
 4950, -85.54, -67.42, 23.61, 152.84, 348.7, 497.25, 570.24, 592.02, 605.88, 613.8
 5396.2, -94.41, -78.75, 0.55, 114.9, 300.48, 474.59, 560.34, 580.14, 594, 605.77
 5841.2, -103.65, -90.02, -19.94, 82.38, 250.13, 440.63, 544.5, 564.3, 584.1, 594
 6287.5, -113.48, -101.14, -38.17, 53.98, 205.31, 397.91, 524.7, 544.5, 564.3, 574.2
 6733.8, -123.34, -112.49, -55.07, 28.89, 167.04, 353.17, 493.68, 512.82, 539.28, 544.98
 7178.8, -134.39, -124.33, -71.43, 5.65, 132.39, 306.56, 442.83, 473.03, 487.21, 492.82
 7625, -146.42, -136.82, -87.76, -16.33, 100.76, 261.32, 387.73, 415.84, 429.05, 434.11
 8125, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38
 8375, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 1 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function MU_ROAD_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. MU from the
! calculation can be adjusted with MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral
! position used in the calculation can be adjusted with L_SCALE_MU_ROAD and
! L_START_MU_ROAD. This configurable function supports 200 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IROAD is used to
! identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.9 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 384 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 344 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

MY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 400 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 400 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 150 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 150 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 13.74, 26.59, 38.42, 49.18, 58.84, 67.4, 74.85, 81.2
 1, 27.52, 53.29, 77.08, 98.77, 118.28, 135.59, 150.69, 163.58
 1.5, 38.52, 75, 109.07, 140.54, 169.23, 195.05, 217.91, 237.76
 2, 42.77, 84.07, 123.55, 160.94, 195.99, 228.45, 258.1, 284.74
 2.5, 40.05, 79.6, 118.43, 156.31, 192.98, 228.18, 261.6, 292.94
 3, 33.77, 67.76, 101.91, 136.11, 170.21, 203.99, 237.23, 269.64
 3.5, 26.96, 54.52, 82.71, 111.52, 140.91, 170.77, 200.97, 231.34
 4, 21, 42.71, 65.25, 88.66, 112.96, 138.12, 164.12, 190.86
 4.5, 16.15, 33.03, 50.78, 69.47, 89.15, 109.84, 131.57, 154.32
 5, 12.31, 25.32, 39.18, 53.96, 69.73, 86.54, 104.45, 123.47
 5.5, 9.27, 19.2, 29.94, 41.55, 54.11, 67.68, 82.33, 98.09
 6, 6.85, 14.32, 22.54, 31.58, 41.53, 52.43, 64.36, 77.37
 6.5, 4.9, 10.38, 16.56, 23.52, 31.32, 40.03, 49.71, 60.42
 7, 3.3, 7.16, 11.68, 16.92, 22.96, 29.86, 37.67, 46.45
 7.5, 1.99, 4.5, 7.63, 11.46, 16.04, 21.43, 27.68, 34.85
 8, 0.89, 2.27, 4.25, 6.89, 10.24, 14.36, 19.3, 25.11
 8.5, -0.04, 0.39, 1.39, 3.03, 5.34, 8.39, 12.21, 16.87
 9, -0.84, -1.22, -1.05, -0.28, 1.15, 3.28, 6.16, 9.83
 9.5, -1.52, -2.6, -3.15, -3.12, -2.46, -1.12, 0.94, 3.76
 10, -2.12, -3.81, -4.98, -5.59, -5.59, -4.94, -3.59, -1.51
 10.5, -2.64, -4.86, -6.59, -7.76, -8.33, -8.28, -7.55, -6.12
 11, -3.1, -5.79, -8, -9.66, -10.75, -11.23, -11.05, -10.18
 11.5, -3.51, -6.62, -9.25, -11.36, -12.9, -13.84, -14.14, -13.77
 12, -3.88, -7.36, -10.37, -12.87, -14.81, -16.17, -16.9, -16.98
 12.5, -4.21, -8.02, -11.38, -14.22, -16.53, -18.26, -19.38, -19.86
 13, -4.5, -8.62, -12.28, -15.45, -18.08, -20.14, -21.6, -22.44
 13.5, -4.77, -9.16, -13.1, -16.55, -19.48, -21.84, -23.62, -24.78
 14, -5.02, -9.65, -13.85, -17.56, -20.75, -23.39, -25.45, -26.91
 14.5, -5.24, -10.1, -14.53, -18.48, -21.91, -24.81, -27.13, -28.85
 15, -5.44, -10.52, -15.16, -19.32, -22.98, -26.1, -28.66, -30.62
 15.5, -5.63, -10.9, -15.73, -20.1, -23.96, -27.29, -30.06, -32.25
 16, -5.8, -11.25, -16.26, -20.81, -24.86, -28.38, -31.36, -33.75
 16.5, -5.97, -11.57, -16.75, -21.47, -25.69, -29.4, -32.55, -35.14
 17, -6.11, -11.87, -17.21, -22.08, -26.47, -30.34, -33.66, -36.42
 17.5, -6.25, -12.15, -17.63, -22.65, -27.19, -31.21, -34.69, -37.62
 18, -6.38, -12.41, -18.02, -23.18, -27.86, -32.02, -35.65, -38.73
 18.5, -6.5, -12.65, -18.39, -23.68, -28.48, -32.78, -36.55, -39.76
 19, -6.62, -12.88, -18.74, -24.14, -29.07, -33.49, -37.39, -40.73
 19.5, -6.72, -13.1, -19.06, -24.58, -29.62, -34.16, -38.17, -41.64
 20, -6.82, -13.3, -19.36, -24.99, -30.13, -34.78, -38.91, -42.49
 20.5, -6.92, -13.49, -19.65, -25.37, -30.62, -35.37, -39.6, -43.29
 21, -7.01, -13.67, -19.92, -25.73, -31.08, -35.92, -40.25, -44.05
 21.5, -7.09, -13.83, -20.18, -26.08, -31.51, -36.45, -40.87, -44.76
 22, -7.17, -13.99, -20.42, -26.4, -31.92, -36.94, -41.45, -45.44
 22.5, -7.24, -14.15, -20.64, -26.71, -32.3, -37.41, -42.01, -46.07
 23, -7.32, -14.29, -20.86, -27, -32.67, -37.85, -42.53, -46.68
 23.5, -7.38, -14.42, -21.07, -27.27, -33.02, -38.28, -43.03, -47.25
 24, -7.45, -14.55, -21.26, -27.54, -33.35, -38.68, -43.5, -47.8
 24.5, -7.51, -14.68, -21.45, -27.79, -33.66, -39.06, -43.95, -48.31
 25, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
 26, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 13.74, 26.59, 38.42, 49.18, 58.84, 67.4, 74.85, 81.2
 1, 27.52, 53.29, 77.08, 98.77, 118.28, 135.59, 150.69, 163.58
 1.5, 38.52, 75, 109.07, 140.54, 169.23, 195.05, 217.91, 237.76
 2, 42.77, 84.07, 123.55, 160.94, 195.99, 228.45, 258.1, 284.74
 2.5, 40.05, 79.6, 118.43, 156.31, 192.98, 228.18, 261.6, 292.94
 3, 33.77, 67.76, 101.91, 136.11, 170.21, 203.99, 237.23, 269.64
 3.5, 26.96, 54.52, 82.71, 111.52, 140.91, 170.77, 200.97, 231.34
 4, 21, 42.71, 65.25, 88.66, 112.96, 138.12, 164.12, 190.86
 4.5, 16.15, 33.03, 50.78, 69.47, 89.15, 109.84, 131.57, 154.32
 5, 12.31, 25.32, 39.18, 53.96, 69.73, 86.54, 104.45, 123.47
 5.5, 9.27, 19.2, 29.94, 41.55, 54.11, 67.68, 82.33, 98.09
 6, 6.85, 14.32, 22.54, 31.58, 41.53, 52.43, 64.36, 77.37
 6.5, 4.9, 10.38, 16.56, 23.52, 31.32, 40.03, 49.71, 60.42
 7, 3.3, 7.16, 11.68, 16.92, 22.96, 29.86, 37.67, 46.45
 7.5, 1.99, 4.5, 7.63, 11.46, 16.04, 21.43, 27.68, 34.85
 8, 0.89, 2.27, 4.25, 6.89, 10.24, 14.36, 19.3, 25.11
 8.5, -0.04, 0.39, 1.39, 3.03, 5.34, 8.39, 12.21, 16.87
 9, -0.84, -1.22, -1.05, -0.28, 1.15, 3.28, 6.16, 9.83
 9.5, -1.52, -2.6, -3.15, -3.12, -2.46, -1.12, 0.94, 3.76
 10, -2.12, -3.81, -4.98, -5.59, -5.59, -4.94, -3.59, -1.51
 10.5, -2.64, -4.86, -6.59, -7.76, -8.33, -8.28, -7.55, -6.12
 11, -3.1, -5.79, -8, -9.66, -10.75, -11.23, -11.05, -10.18
 11.5, -3.51, -6.62, -9.25, -11.36, -12.9, -13.84, -14.14, -13.77
 12, -3.88, -7.36, -10.37, -12.87, -14.81, -16.17, -16.9, -16.98
 12.5, -4.21, -8.02, -11.38, -14.22, -16.53, -18.26, -19.38, -19.86
 13, -4.5, -8.62, -12.28, -15.45, -18.08, -20.14, -21.6, -22.44
 13.5, -4.77, -9.16, -13.1, -16.55, -19.48, -21.84, -23.62, -24.78
 14, -5.02, -9.65, -13.85, -17.56, -20.75, -23.39, -25.45, -26.91
 14.5, -5.24, -10.1, -14.53, -18.48, -21.91, -24.81, -27.13, -28.85
 15, -5.44, -10.52, -15.16, -19.32, -22.98, -26.1, -28.66, -30.62
 15.5, -5.63, -10.9, -15.73, -20.1, -23.96, -27.29, -30.06, -32.25
 16, -5.8, -11.25, -16.26, -20.81, -24.86, -28.38, -31.36, -33.75
 16.5, -5.97, -11.57, -16.75, -21.47, -25.69, -29.4, -32.55, -35.14
 17, -6.11, -11.87, -17.21, -22.08, -26.47, -30.34, -33.66, -36.42
 17.5, -6.25, -12.15, -17.63, -22.65, -27.19, -31.21, -34.69, -37.62
 18, -6.38, -12.41, -18.02, -23.18, -27.86, -32.02, -35.65, -38.73
 18.5, -6.5, -12.65, -18.39, -23.68, -28.48, -32.78, -36.55, -39.76
 19, -6.62, -12.88, -18.74, -24.14, -29.07, -33.49, -37.39, -40.73
 19.5, -6.72, -13.1, -19.06, -24.58, -29.62, -34.16, -38.17, -41.64
 20, -6.82, -13.3, -19.36, -24.99, -30.13, -34.78, -38.91, -42.49
 20.5, -6.92, -13.49, -19.65, -25.37, -30.62, -35.37, -39.6, -43.29
 21, -7.01, -13.67, -19.92, -25.73, -31.08, -35.92, -40.25, -44.05
 21.5, -7.09, -13.83, -20.18, -26.08, -31.51, -36.45, -40.87, -44.76
 22, -7.17, -13.99, -20.42, -26.4, -31.92, -36.94, -41.45, -45.44
 22.5, -7.24, -14.15, -20.64, -26.71, -32.3, -37.41, -42.01, -46.07
 23, -7.32, -14.29, -20.86, -27, -32.67, -37.85, -42.53, -46.68
 23.5, -7.38, -14.42, -21.07, -27.27, -33.02, -38.28, -43.03, -47.25
 24, -7.45, -14.55, -21.26, -27.54, -33.35, -38.68, -43.5, -47.8
 24.5, -7.51, -14.68, -21.45, -27.79, -33.66, -39.06, -43.95, -48.31
 25, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
 26, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 13.74, 26.59, 38.42, 49.18, 58.84, 67.4, 74.85, 81.2
 1, 27.52, 53.29, 77.08, 98.77, 118.28, 135.59, 150.69, 163.58
 1.5, 38.52, 75, 109.07, 140.54, 169.23, 195.05, 217.91, 237.76
 2, 42.77, 84.07, 123.55, 160.94, 195.99, 228.45, 258.1, 284.74
 2.5, 40.05, 79.6, 118.43, 156.31, 192.98, 228.18, 261.6, 292.94
 3, 33.77, 67.76, 101.91, 136.11, 170.21, 203.99, 237.23, 269.64
 3.5, 26.96, 54.52, 82.71, 111.52, 140.91, 170.77, 200.97, 231.34
 4, 21, 42.71, 65.25, 88.66, 112.96, 138.12, 164.12, 190.86
 4.5, 16.15, 33.03, 50.78, 69.47, 89.15, 109.84, 131.57, 154.32
 5, 12.31, 25.32, 39.18, 53.96, 69.73, 86.54, 104.45, 123.47
 5.5, 9.27, 19.2, 29.94, 41.55, 54.11, 67.68, 82.33, 98.09
 6, 6.85, 14.32, 22.54, 31.58, 41.53, 52.43, 64.36, 77.37
 6.5, 4.9, 10.38, 16.56, 23.52, 31.32, 40.03, 49.71, 60.42
 7, 3.3, 7.16, 11.68, 16.92, 22.96, 29.86, 37.67, 46.45
 7.5, 1.99, 4.5, 7.63, 11.46, 16.04, 21.43, 27.68, 34.85
 8, 0.89, 2.27, 4.25, 6.89, 10.24, 14.36, 19.3, 25.11
 8.5, -0.04, 0.39, 1.39, 3.03, 5.34, 8.39, 12.21, 16.87
 9, -0.84, -1.22, -1.05, -0.28, 1.15, 3.28, 6.16, 9.83
 9.5, -1.52, -2.6, -3.15, -3.12, -2.46, -1.12, 0.94, 3.76
 10, -2.12, -3.81, -4.98, -5.59, -5.59, -4.94, -3.59, -1.51
 10.5, -2.64, -4.86, -6.59, -7.76, -8.33, -8.28, -7.55, -6.12
 11, -3.1, -5.79, -8, -9.66, -10.75, -11.23, -11.05, -10.18
 11.5, -3.51, -6.62, -9.25, -11.36, -12.9, -13.84, -14.14, -13.77
 12, -3.88, -7.36, -10.37, -12.87, -14.81, -16.17, -16.9, -16.98
 12.5, -4.21, -8.02, -11.38, -14.22, -16.53, -18.26, -19.38, -19.86
 13, -4.5, -8.62, -12.28, -15.45, -18.08, -20.14, -21.6, -22.44
 13.5, -4.77, -9.16, -13.1, -16.55, -19.48, -21.84, -23.62, -24.78
 14, -5.02, -9.65, -13.85, -17.56, -20.75, -23.39, -25.45, -26.91
 14.5, -5.24, -10.1, -14.53, -18.48, -21.91, -24.81, -27.13, -28.85
 15, -5.44, -10.52, -15.16, -19.32, -22.98, -26.1, -28.66, -30.62
 15.5, -5.63, -10.9, -15.73, -20.1, -23.96, -27.29, -30.06, -32.25
 16, -5.8, -11.25, -16.26, -20.81, -24.86, -28.38, -31.36, -33.75
 16.5, -5.97, -11.57, -16.75, -21.47, -25.69, -29.4, -32.55, -35.14
 17, -6.11, -11.87, -17.21, -22.08, -26.47, -30.34, -33.66, -36.42
 17.5, -6.25, -12.15, -17.63, -22.65, -27.19, -31.21, -34.69, -37.62
 18, -6.38, -12.41, -18.02, -23.18, -27.86, -32.02, -35.65, -38.73
 18.5, -6.5, -12.65, -18.39, -23.68, -28.48, -32.78, -36.55, -39.76
 19, -6.62, -12.88, -18.74, -24.14, -29.07, -33.49, -37.39, -40.73
 19.5, -6.72, -13.1, -19.06, -24.58, -29.62, -34.16, -38.17, -41.64
 20, -6.82, -13.3, -19.36, -24.99, -30.13, -34.78, -38.91, -42.49
 20.5, -6.92, -13.49, -19.65, -25.37, -30.62, -35.37, -39.6, -43.29
 21, -7.01, -13.67, -19.92, -25.73, -31.08, -35.92, -40.25, -44.05
 21.5, -7.09, -13.83, -20.18, -26.08, -31.51, -36.45, -40.87, -44.76
 22, -7.17, -13.99, -20.42, -26.4, -31.92, -36.94, -41.45, -45.44
 22.5, -7.24, -14.15, -20.64, -26.71, -32.3, -37.41, -42.01, -46.07
 23, -7.32, -14.29, -20.86, -27, -32.67, -37.85, -42.53, -46.68
 23.5, -7.38, -14.42, -21.07, -27.27, -33.02, -38.28, -43.03, -47.25
 24, -7.45, -14.55, -21.26, -27.54, -33.35, -38.68, -43.5, -47.8
 24.5, -7.51, -14.68, -21.45, -27.79, -33.66, -39.06, -43.95, -48.31
 25, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
 26, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1961.33, 3922.66, 5883.99, 7845.32, 9806.65, 11767.98, 13729.31, 15690.64
 0.5, 13.74, 26.59, 38.42, 49.18, 58.84, 67.4, 74.85, 81.2
 1, 27.52, 53.29, 77.08, 98.77, 118.28, 135.59, 150.69, 163.58
 1.5, 38.52, 75, 109.07, 140.54, 169.23, 195.05, 217.91, 237.76
 2, 42.77, 84.07, 123.55, 160.94, 195.99, 228.45, 258.1, 284.74
 2.5, 40.05, 79.6, 118.43, 156.31, 192.98, 228.18, 261.6, 292.94
 3, 33.77, 67.76, 101.91, 136.11, 170.21, 203.99, 237.23, 269.64
 3.5, 26.96, 54.52, 82.71, 111.52, 140.91, 170.77, 200.97, 231.34
 4, 21, 42.71, 65.25, 88.66, 112.96, 138.12, 164.12, 190.86
 4.5, 16.15, 33.03, 50.78, 69.47, 89.15, 109.84, 131.57, 154.32
 5, 12.31, 25.32, 39.18, 53.96, 69.73, 86.54, 104.45, 123.47
 5.5, 9.27, 19.2, 29.94, 41.55, 54.11, 67.68, 82.33, 98.09
 6, 6.85, 14.32, 22.54, 31.58, 41.53, 52.43, 64.36, 77.37
 6.5, 4.9, 10.38, 16.56, 23.52, 31.32, 40.03, 49.71, 60.42
 7, 3.3, 7.16, 11.68, 16.92, 22.96, 29.86, 37.67, 46.45
 7.5, 1.99, 4.5, 7.63, 11.46, 16.04, 21.43, 27.68, 34.85
 8, 0.89, 2.27, 4.25, 6.89, 10.24, 14.36, 19.3, 25.11
 8.5, -0.04, 0.39, 1.39, 3.03, 5.34, 8.39, 12.21, 16.87
 9, -0.84, -1.22, -1.05, -0.28, 1.15, 3.28, 6.16, 9.83
 9.5, -1.52, -2.6, -3.15, -3.12, -2.46, -1.12, 0.94, 3.76
 10, -2.12, -3.81, -4.98, -5.59, -5.59, -4.94, -3.59, -1.51
 10.5, -2.64, -4.86, -6.59, -7.76, -8.33, -8.28, -7.55, -6.12
 11, -3.1, -5.79, -8, -9.66, -10.75, -11.23, -11.05, -10.18
 11.5, -3.51, -6.62, -9.25, -11.36, -12.9, -13.84, -14.14, -13.77
 12, -3.88, -7.36, -10.37, -12.87, -14.81, -16.17, -16.9, -16.98
 12.5, -4.21, -8.02, -11.38, -14.22, -16.53, -18.26, -19.38, -19.86
 13, -4.5, -8.62, -12.28, -15.45, -18.08, -20.14, -21.6, -22.44
 13.5, -4.77, -9.16, -13.1, -16.55, -19.48, -21.84, -23.62, -24.78
 14, -5.02, -9.65, -13.85, -17.56, -20.75, -23.39, -25.45, -26.91
 14.5, -5.24, -10.1, -14.53, -18.48, -21.91, -24.81, -27.13, -28.85
 15, -5.44, -10.52, -15.16, -19.32, -22.98, -26.1, -28.66, -30.62
 15.5, -5.63, -10.9, -15.73, -20.1, -23.96, -27.29, -30.06, -32.25
 16, -5.8, -11.25, -16.26, -20.81, -24.86, -28.38, -31.36, -33.75
 16.5, -5.97, -11.57, -16.75, -21.47, -25.69, -29.4, -32.55, -35.14
 17, -6.11, -11.87, -17.21, -22.08, -26.47, -30.34, -33.66, -36.42
 17.5, -6.25, -12.15, -17.63, -22.65, -27.19, -31.21, -34.69, -37.62
 18, -6.38, -12.41, -18.02, -23.18, -27.86, -32.02, -35.65, -38.73
 18.5, -6.5, -12.65, -18.39, -23.68, -28.48, -32.78, -36.55, -39.76
 19, -6.62, -12.88, -18.74, -24.14, -29.07, -33.49, -37.39, -40.73
 19.5, -6.72, -13.1, -19.06, -24.58, -29.62, -34.16, -38.17, -41.64
 20, -6.82, -13.3, -19.36, -24.99, -30.13, -34.78, -38.91, -42.49
 20.5, -6.92, -13.49, -19.65, -25.37, -30.62, -35.37, -39.6, -43.29
 21, -7.01, -13.67, -19.92, -25.73, -31.08, -35.92, -40.25, -44.05
 21.5, -7.09, -13.83, -20.18, -26.08, -31.51, -36.45, -40.87, -44.76
 22, -7.17, -13.99, -20.42, -26.4, -31.92, -36.94, -41.45, -45.44
 22.5, -7.24, -14.15, -20.64, -26.71, -32.3, -37.41, -42.01, -46.07
 23, -7.32, -14.29, -20.86, -27, -32.67, -37.85, -42.53, -46.68
 23.5, -7.38, -14.42, -21.07, -27.27, -33.02, -38.28, -43.03, -47.25
 24, -7.45, -14.55, -21.26, -27.54, -33.35, -38.68, -43.5, -47.8
 24.5, -7.51, -14.68, -21.45, -27.79, -33.66, -39.06, -43.95, -48.31
 25, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
 26, -7.57, -14.8, -21.63, -28.03, -33.97, -39.42, -44.38, -48.81
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 3 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(1) SPLINE ! front differential
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(1) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(1) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(1) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(1) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2) SPLINE ! rear differential
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(3) SPLINE ! transfer case
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(3) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(3) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(3) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(3) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT  2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -29.94
 -67.2, -28.71
 -64.4, -27.5
 -61.6, -26.3
 -58.8, -25.11
 -56, -23.93
 -53.2, -22.76
 -50.4, -21.59
 -47.6, -20.42
 -44.8, -19.25
 -42, -18.09
 -39.2, -16.92
 -36.4, -15.76
 -33.6, -14.59
 -30.8, -13.41
 -28, -12.24
 -25.2, -11.05
 -22.4, -9.86
 -19.6, -8.66
 -16.8, -7.46
 -14, -6.24
 -11.2, -5.02
 -8.4, -3.78
 -5.6, -2.54
 -2.8, -1.27
 0, 0
 2.8, 1.29
 5.6, 2.59
 8.4, 3.91
 11.2, 5.25
 14, 6.61
 16.8, 7.98
 19.6, 9.38
 22.4, 10.8
 25.2, 12.23
 28, 13.7
 30.8, 15.18
 33.6, 16.69
 36.4, 18.23
 39.2, 19.79
 42, 21.38
 44.8, 23.01
 47.6, 24.66
 50.4, 26.34
 53.2, 28.06
 56, 29.81
 58.8, 31.6
 61.6, 33.43
 64.4, 35.29
 67.2, 37.2
 70, 39.14
ENDTABLE
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -39.14
 -67.2, -37.2
 -64.4, -35.29
 -61.6, -33.43
 -58.8, -31.6
 -56, -29.81
 -53.2, -28.06
 -50.4, -26.34
 -47.6, -24.66
 -44.8, -23.01
 -42, -21.38
 -39.2, -19.79
 -36.4, -18.23
 -33.6, -16.69
 -30.8, -15.18
 -28, -13.7
 -25.2, -12.23
 -22.4, -10.8
 -19.6, -9.38
 -16.8, -7.98
 -14, -6.61
 -11.2, -5.25
 -8.4, -3.91
 -5.6, -2.59
 -2.8, -1.29
 0, 0
 2.8, 1.27
 5.6, 2.54
 8.4, 3.78
 11.2, 5.02
 14, 6.24
 16.8, 7.46
 19.6, 8.66
 22.4, 9.86
 25.2, 11.05
 28, 12.24
 30.8, 13.41
 33.6, 14.59
 36.4, 15.76
 39.2, 16.92
 42, 18.09
 44.8, 19.25
 47.6, 20.42
 50.4, 21.59
 53.2, 22.76
 56, 23.93
 58.8, 25.11
 61.6, 26.3
 64.4, 27.5
 67.2, 28.71
 70, 29.94
ENDTABLE
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1) 0.1215277778 ! Coefficient: rack displacement per unit
                                        ! pinion angle (mm/deg), axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get rack displacement

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 1.864
 0.881, 1
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! R_EFF_CVT_F: CVT driving efficiency. Driving efficiency is a function of
! transmission gear ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Driving efficiency from the calculation can be
! adjusted with R_EFF_CVT_F_GAIN and R_EFF_CVT_F_OFFSET. Transmission gear ratio used
! in the calculation can be adjusted with R_SCALE_R_EFF_CVT_F and
! R_START_R_EFF_CVT_F. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index ICVT is used to
! identify the dataset when reading data.

! 1D table: col 1 = transmission gear ratio (-), col 2 = driving efficiency (-)
R_EFF_CVT_F_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0.685, 0.99
 0.824, 0.99
 1, 0.99
 1.231, 0.98
 1.464, 0.95
 1.864, 0.95
 2.724, 0.92
 4.596, 0.92
ENDTABLE
R_EFF_CVT_F_GAIN(1) 1 ! Gain multiplied with calculated value to get driving
                      ! efficiency
R_EFF_CVT_F_OFFSET(1) 0 ; - ! Offset added (after gain) to get driving efficiency
R_START_R_EFF_CVT_F(1) 0 ; - ! Offset subtracted from transmission gear ratio
R_SCALE_R_EFF_CVT_F(1) 1 ! Scale factor divided into (transmission gear ratio -
                         ! R_START_R_EFF_CVT_F)

! R_EFF_CVT_R: CVT coasting efficiency. Coasting efficiency is a function of
! transmission gear ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Coasting efficiency from the calculation can be
! adjusted with R_EFF_CVT_R_GAIN and R_EFF_CVT_R_OFFSET. Transmission gear ratio used
! in the calculation can be adjusted with R_SCALE_R_EFF_CVT_R and
! R_START_R_EFF_CVT_R. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index ICVT is used to
! identify the dataset when reading data.

! 1D table: col 1 = transmission gear ratio (-), col 2 = coasting efficiency (-)
R_EFF_CVT_R_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0.685, 0.99
 0.824, 0.99
 1, 0.99
 1.231, 0.98
 1.464, 0.95
 1.864, 0.95
 2.724, 0.92
 4.596, 0.92
ENDTABLE
R_EFF_CVT_R_GAIN(1) 1 ! Gain multiplied with calculated value to get coasting
                      ! efficiency
R_EFF_CVT_R_OFFSET(1) 0 ; - ! Offset added (after gain) to get coasting efficiency
R_START_R_EFF_CVT_R(1) 0 ; - ! Offset subtracted from transmission gear ratio
R_SCALE_R_EFF_CVT_R(1) 1 ! Scale factor divided into (transmission gear ratio -
                         ! R_START_R_EFF_CVT_R)

! R_GEAR_CVT: Transmission gear ratio (CVT). Transmission gear ratio can be a
! nonlinear CARPET function of throttle position and transmission speed or a function
! of transmission speed (CONSTANT, COEFFICIENT, or TABLE) multiplied by a function
! R_GEAR_CVT_THROTTLE of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission gear ratio
! from the calculation can be adjusted with R_GEAR_CVT_GAIN and R_GEAR_CVT_OFFSET.
! Transmission speed used in the calculation can be adjusted with
! SPIN_SCALE_R_GEAR_CVT and SPIN_START_R_GEAR_CVT. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_R_GEAR_CVT and
! THROTTLE_START_R_GEAR_CVT. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index ICVT is
! used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 4 values of throttle position
! (-). Other rows have transmission speed (rpm) followed by 4 values of transmission
! gear ratio (-).
R_GEAR_CVT_CARPET(1) 2D_LINEAR
 0, 0, 0.2, 0.8, 1
 0, 4.596, 4.596, 4.596, 4.596
 500, 4.596, 4.596, 4.596, 4.596
 750, 2.724, 4.2, 4.55, 4.596
 860, 1.864, 3.8, 4.45, 4.55
 960, 1.464, 3.2, 4.25, 4.5
 1050, 1.231, 2.8, 4, 4.4
 1180, 1, 2.4, 3.6, 4.2
 1325, 0.824, 2.1, 3, 3.9
 1490, 0.685, 1.8, 2.6, 3.5
 1700, 0.685, 1.5, 2.25, 3
 2500, 0.685, 0.95, 1.4, 1.864
 3500, 0.685, 0.7, 0.9, 1.3
 4300, 0.685, 0.685, 0.75, 1.1
 5000, 0.685, 0.685, 0.7, 1
 6100, 0.685, 0.685, 0.685, 0.8
 7200, 0.685, 0.685, 0.685, 0.685
ENDTABLE
R_GEAR_CVT_GAIN(1)  1 ! Gain multiplied with calculated value to get transmission
                      ! gear ratio
R_GEAR_CVT_OFFSET(1) 0 ; - ! Offset added (after gain) to get transmission gear
                       ! ratio
SPIN_START_R_GEAR_CVT(1) 0 ; rpm ! Offset subtracted from transmission speed
SPIN_SCALE_R_GEAR_CVT(1) 1 ! Scale factor divided into (transmission speed -
                           ! SPIN_START_R_GEAR_CVT)
THROTTLE_START_R_GEAR_CVT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_R_GEAR_CVT(1) 1 ! Scale factor divided into (throttle position -
                               ! THROTTLE_START_R_GEAR_CVT)

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                ! (deg/N-m), axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           ! M_KP_START_STEER_COMP)

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1,
                                         ! right side

SUSP_DIVE_COEFFICIENT(2,1) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, left side
SUSP_DIVE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,1) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,1) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 2, left side

SUSP_DIVE_COEFFICIENT(2,2) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, right side
SUSP_DIVE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(2,2) MULTIPLY ! How to combine the two components
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(2,2) 1 ; - ! [D] Constant suspension dive
                                         ! component due to jounce (other side),
                                         ! axle 2, right side

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(2,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 2, right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(2,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 2, right side

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

! 1D table: col 1 = time (s), col 2 = normalized throttle input (-)
THROTTLE_ENGINE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 0
 0.1, 0.5
 1, 0.5
ENDTABLE
THROTTLE_ENGINE_GAIN 1 ! Gain multiplied with calculated value to get normalized
                       ! throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input
TSTART_THROTTLE     0 ; s ! Offset subtracted from time
TSCALE_THROTTLE     1 ! Scale factor divided into (time - TSTART_THROTTLE)

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, right side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1) SPLINE ! axle 2, left side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 2, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,2) SPLINE ! axle 2, right side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(2,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(2,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 2, right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT    0.4 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment


END
