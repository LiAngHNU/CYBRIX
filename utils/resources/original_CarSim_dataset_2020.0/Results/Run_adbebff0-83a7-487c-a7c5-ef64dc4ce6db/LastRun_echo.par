PARSFILE
! CarSim 2020.0
! Vehicle Configuration: I_S
! Revision 125462, December 17, 2019

DATASET_TITLE Utility Truck
CATEGORY Vehicle Configurations
TITLE Utility Truck <Vehicle Configurations>

! Echo: Results\Run_adbebff0-83a7-487c-a7c5-ef64dc4ce6db\LastRun_echo.par
! This run was made 21:05 on December 18, 2019.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    73 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE       97 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? -> 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [I]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS,3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
TSTART              0 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE        0 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              23 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
OPT_INIT_CONFIG     1 ! [D] Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      1 ! [D] Initialize vehicle speed variables? 1 -> yes, 0 -> no,
                      ! start 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Stop the run if the absolute vehicle speed drops to
                      ! this value; specify -1 to disable this feature
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 629.8791457 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 795.3264269 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL 8.257502105e-16 ; mm ! CALC -- Y coordinate of TL CG
! M_TL         1036.9 ; kg ! CALC -- TL mass
! IXX_TL   770.783496 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  1191.540509 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  1290.729234 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           700 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU          550 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU              600 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU            384 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU            624 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU            686 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        3 ! No. of payloads attached to this sprung mass (read only)
! H_CG_SL 683.3333333 ; mm ! CALC -- Height of laden sprung mass CG (SL)
! LX_CG_SL 786.1111111 ; mm ! CALC -- X distance SL CG is behind origin
! Y_CG_SL           0 ; mm ! CALC -- Y coord. of laden sprung mass CG
! M_SL            900 ; kg ! CALC -- Mass of laden sprung mass (SL)
! IXX_SL      712.625 ; kg-m2 ! CALC -- Roll inertia for SL
! IYY_SL  1039.888889 ; kg-m2 ! CALC -- Pitch inertia for SL
! IZZ_SL  1129.513889 ; kg-m2 ! CALC -- Yaw inertia for SL
! IXY_SL            0 ; kg-m2 ! CALC -- XY product of inertia for SL
! IXZ_SL -7.083333333 ; kg-m2 ! CALC -- XZ product of inertia for SL
! IYZ_SL            0 ; kg-m2 ! CALC -- YZ product of inertia for SL

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             3 ! Number of installed payloads (read only)
DEFINE_PAYLOADS     3 ! VS Command to add payloads

PAYLOAD_NAME(1)     1 ; Large Barrel (Back, Utility Truck)
LX_CG_PL(1)      1575 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(1)          0 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(1)        650 ; mm ! Z coordinate of payload mass center [I]
M_PL(1)           100 ; kg ! Mass of payload [I]
IXX_PL(1)         100 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(1)         100 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(1)         100 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(1)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(1)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(1)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(2)     2 ; Large Barrel (FL, Utility Truck)
LX_CG_PL(2)      1100 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(2)        375 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(2)        650 ; mm ! Z coordinate of payload mass center [I]
M_PL(2)           100 ; kg ! Mass of payload [I]
IXX_PL(2)         100 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(2)         100 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(2)         100 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(2)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(2)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(2)           0 ; kg-m2 ! YZ product of inertia of payload [I]

PAYLOAD_NAME(3)     3 ; Large Barrel (FR, Utility Truck)
LX_CG_PL(3)      1100 ; mm ! Distance payload mass center is behind origin (-X) [I]
Y_CG_PL(3)       -375 ; mm ! Y coordinate of payload mass center [I]
Z_CG_PL(3)        650 ; mm ! Z coordinate of payload mass center [I]
M_PL(3)           100 ; kg ! Mass of payload [I]
IXX_PL(3)         100 ; kg-m2 ! Roll moment of inertia of payload [I]
IYY_PL(3)         100 ; kg-m2 ! Pitch moment of inertia of payload [I]
IZZ_PL(3)         100 ; kg-m2 ! Yaw moment of inertia of payload [I]
IXY_PL(3)           0 ; kg-m2 ! XY product of inertia of payload [I]
IXZ_PL(3)           0 ; kg-m2 ! XZ product of inertia of payload [I]
IYZ_PL(3)           0 ; kg-m2 ! YZ product of inertia of payload [I]

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO           0 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO          0 ; mm ! Aerodynamic reference length
X_REF_AERO          0 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. For solid-axle
! suspensions, these include the functions SUSP_AXLE_ROLL_STEER, SUSP_DIVE_AXLE,
! SUSP_X_AXLE, and SUSP_Y_AXLE_ROLL. All coordinate parameters are relative to the
! origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         263 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         263 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)     0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,2)     0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,2) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1)          0.04 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)          0.04 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)     0.02 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)     0.02 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1260 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)    8.43 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)    8.43 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)   14.52 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)   14.52 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)        75.9 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.7778656126 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Solid-axle suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_CG_AXLE(2)      263 ; mm ! Z coordinate of axle 2 CG [I]
H_WC(2,1)         263 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         263 ; mm ! Reference Z coordinate of wheel center R2 [I]
IA(2)               4 ; kg-m2 ! Yaw and roll moment of inertia, axle 2 [I]
! ISPIN(2,1)     0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(2,2)     0.74 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(2,1) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(2,2) 0.42 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(2,1)          0.04 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)          0.04 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)     0.02 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)     0.02 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1260 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       1923 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_AXLE(2)       31 ; kg ! Unsteered mass for axle 2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)          61 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.4918032787 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
Y_CG_AXLE(2)        0 ; mm ! [D] Y offset of M_US_AXLE CG from track center [I]
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG. Solid-axle suspensions also use the functions
! C_LAT_AXLE and C_LONG_AXLE.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 60.01573635 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 60.01573635 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 4201.101544 ; N ! CALC -- Design Load (suspension, unladen), axle 1
! FSA_L(1) 5217.974145 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 2608.987072 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 2608.987072 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 5962.29888 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 4945.426279 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 2981.14944 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 2981.14944 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 484.9048261 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 3 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 3 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 3 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 3 ; mm ! Ref. hysteretic extension, ride spring R1

! Solid-axle suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> Use as is [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) -78.03131574 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) -78.03131574 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
DMP_AX(2,1)         0 ; deg ! [D] Front-view inclination angle for damper L2 [I]
DMP_AX(2,2)         0 ; deg ! [D] Front-view inclination angle for damper R2 [I]
DMP_AY(2,1)         0 ; deg ! [D] Side-view inclination angle for damper L2 [I]
DMP_AY(2,2)         0 ; deg ! [D] Side-view inclination angle for damper R2 [I]
DMP_LEN(2,1)    10000 ; mm ! [D] Length at design for damper L2 [I]
DMP_LEN(2,2)    10000 ; mm ! [D] Length at design for damper R2 [I]
! FSA_DESIGN(2) 1682.888456 ; N ! CALC -- Design Load (suspension, unladen), axle 2
! FSA_L(2) 3608.010855 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 1804.005428 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 1804.005428 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 4206.216505 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 2281.094106 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 2103.108253 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 2103.108253 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 323.3197073 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_DAMPERS(2)      800 ; mm ! Distance between dampers on axle 2 [I]
Y_DAMPERS(2)        0 ; mm ! [D] Lateral (left) offset of dampers on axle 2 [I]
L_JNC_STOPS(2)    800 ; mm ! Distance between jounce stops on axle 2 [I]
L_REB_STOPS(2)    800 ; mm ! Distance between rebound stops on axle 2 [I]
L_SPRINGS(2)      800 ; mm ! Distance between springs on axle 2 [I]
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       1 ! Reaction torque wheel with angle input (OPT_STEER = 0): 0 ->
                      ! from table, 1 -> calculated (see the steering Help document
                      ! for details) [I]
OPT_POWER           1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! Define steer angles of knuckles: 1 -> with respect to the
                      ! sprung-mass X-Y plane, 0 -> as rotation angle about a
                      ! kingpin axis [L]
BETA_COL          0.5 ; deg ! Ref hysteretic angle for steering column friction
D_COL            0.01 ; N-m-s/deg ! Steering column viscous damping
D_TBAR              0 ; N-m-s/deg ! [D] Torsion bar viscous damping
HYS_COL           0.1 ; N-m ! Steering column friction torque
I_GEAR_IN      0.0008 ; kg-m2 ! Steering system inertia
M_BOOST_MAX      1200 ; N-m ! Maximum power steering boost torque
TC_BOOST         0.02 ; s ! Time constant for power steering boost
A_STR_STOP_L      -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           0 ! [D] Compliance steer option, axle 1: 1 -> control L wheel, 2
                      ! -> control R wheel, 0 -> symmetric
OPT_RACK(1)         0 ! Steering gear type for axle 1: 0 -> Recirculating ball, 1 ->
                      ! Rack and pinion [I]
A_CASTER(1,1)     3.5 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     3.5 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)          8 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)          8 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)      0 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)      0 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_GEAR(1)      0.5 ; deg ! Ref hys. angle for steering gear friction, axle 1
D_GEAR(1)           4 ; N-m-s/deg ! Steering gear viscous damping, axle 1
HYS_GEAR(1)       0.1 ; N-m ! Steering gear hysteresis, axle 1
L_KPO(1,1)       39.5 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)       39.5 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)         -1 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)         -1 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1) 7 ! Internal tire shear-model option, tire L1: 1 -> original
                      ! tabular model; 0 -> fully external model; 2 -> built-in
                      ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular with
                      ! camber extensions; 7 -> built-in Pacejka 5.2; 8 -> TNO
                      ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI tire
                      ! model [I]
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in tire alpha: 1 -> transition
                          ! to using instant slip when the time constant is less
                          ! than 12*TSTEP, 0 -> use fixed time constant 12*TSTEP at
                          ! high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in tire kappa: 2 -> use instant
                          ! slip when absolute kappa is decreasing and transition
                          ! to instant slip when the time constant is less than
                          ! 12*TSTEP; 1 -> transition to instant slip when the time
                          ! constant is less than 12*TSTEP; 0 -> use fixed time
                          ! constant 12*TSTEP at high speeds
FZ_MAX(1,1)    100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1)      4100 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1)           0.7 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1)      0.4 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1)        15 ; kg ! Mass of tire L1
VLOW_ALPHA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 7 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2)    100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,2)      4100 ; N ! Reference vertical force
IT(1,2)           0.7 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,2)      0.4 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,2)        15 ; kg ! Mass of tire R1
VLOW_ALPHA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 7 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1)    100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(2,1)      4100 ; N ! Reference vertical force
IT(2,1)           0.7 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(2,1)      0.4 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(2,1)        15 ; kg ! Mass of tire L2
VLOW_ALPHA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 7 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2)    100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(2,2)      4100 ; N ! Reference vertical force
IT(2,2)           0.7 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(2,2)      0.4 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(2,2)        15 ; kg ! Mass of tire R2
VLOW_ALPHA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! PACEJKA 5.2 TIRE MODEL
!------------------------------------------------------------------------------------
INSTALL_TIRE_PAC52    ! Command to install the built-in Pacejka 5.2 model

P52_R0(1,1)     0.287 ; m ! Unloaded radius, axle 1, left side [I]
P52_FZ0(1,1)     4100 ; N ! Nominal vertical load, axle 1, left side
P52_LONGVL(1,1)  16.5 ; m/s ! Reference forward velocity
P52_LFZ0(1,1)       1 ; - ! Nominal load scale factor
P52_LCX(1,1)        1 ; - ! Fx shape scale factor
P52_LMUX(1,1)       1 ; - ! Fx peak Mu scale factor
P52_LEX(1,1)        1 ; - ! Fx curvature scale factor
P52_LKX(1,1)        1 ; - ! Fx slip stiffness scale factor
P52_LHX(1,1)        0 ; - ! Fx horizontal shift scale factor
P52_LVX(1,1)        0 ; - ! Fx vertcal shift scale factor
P52_LGAX(1,1)       1 ; - ! Camber scale factor for Fx
P52_LCY(1,1)        1 ; - ! Fy shape scale factor
P52_LMUY(1,1)       1 ; - ! Fy peak Mu scale factor
P52_LEY(1,1)        1 ; - ! Fy curvature scale factor
P52_LKY(1,1)        1 ; - ! Fy cornering stiffness scale factor
P52_LHY(1,1)        0 ; - ! Fy horizontal shift scale factor
P52_LVY(1,1)        0 ; - ! Fy vertcal shift scale factor
P52_LGAY(1,1)       1 ; - ! Camber for Fy scale factor
P52_LTR(1,1)        1 ; - ! Peak pneumatic trail scale factor
P52_LRES(1,1)       0 ; - ! Residual Mz scale factor
P52_LGAZ(1,1)       0 ; - ! Camber for Mz scale factor
P52_LXAL(1,1)       0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(1,1)       0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(1,1)      0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(1,1)         0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(1,1)      1 ; - ! Fx relaxation length scale factor
P52_LSGAL(1,1)      1 ; - ! Fy relaxation length scale factor
P52_LGYR(1,1)       1 ; - ! Gyroscopic moment scale factor
P52_LMX(1,1)        0 ; - ! Overturning moment scale factor
P52_LVMX(1,1)       0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(1,1)        1 ; - ! Rolling resistance torque scale factor
P52_PCX1(1,1)    1.62 ; - ! Fx shape factor
P52_PDX1(1,1)   1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(1,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(1,1)   -2.27 ; - ! Change in friction with gamma
P52_PEX1(1,1)     0.5 ; - ! Fx curvature at Fz0
P52_PEX2(1,1)  -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(1,1)  -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(1,1)       0 ; - ! Curvature in Fx with kappa
P52_PKX1(1,1)    19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(1,1)   -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(1,1)   0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(1,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(1,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(1,1)       0 ; - ! Fx vertical shift at Fz0
P52_PVX2(1,1)       0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(1,1)       9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(1,1)   -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(1,1)   1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(1,1)   0.078 ; - ! Combined slip Fx curvature
P52_REX2(1,1)   -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(1,1)   -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(1,1)    1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(1,1)  0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(1,1)    -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(1,1)    1.29 ; - ! Fy shape factor
P52_PDY1(1,1)    -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(1,1)    0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(1,1)    -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(1,1)   -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(1,1)    0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(1,1)   -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(1,1)  -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(1,1)  -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(1,1)    1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(1,1)    0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(1,1)  0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(1,1)  -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(1,1)   0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(1,1)   0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(1,1)   -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(1,1)  -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(1,1)   -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(1,1)    6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(1,1)    7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(1,1)   -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(1,1)     1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(1,1)    0.23 ; - ! Combined slip Fy curvature
P52_REY2(1,1)    0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(1,1)  0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(1,1)   0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(1,1)       0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(1,1)       0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(1,1)       0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(1,1)      10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(1,1)    1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(1,1)     -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(1,1)    1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(1,1)     1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(1,1)    8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(1,1)   -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(1,1)    0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(1,1)   -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(1,1)   -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(1,1)    3.44 ; - ! Residual moment slope factor
P52_QBZ10(1,1)      0 ; - ! Residual moment slope factor
P52_QCZ1(1,1)    1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(1,1)    0.11 ; - ! Peak pneumatic trail
P52_QDZ2(1,1)  -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(1,1)   -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(1,1)     8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(1,1)  -0.003 ; - ! Peak residual moment
P52_QDZ7(1,1)   0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(1,1)   -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(1,1)    0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(1,1)    -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(1,1)   -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(1,1)       0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(1,1)   -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(1,1)   -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(1,1)   0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(1,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(1,1)   0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(1,1)    0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(1,1)       0 ; - ! Overturning moment due to Fz
P52_QSX2(1,1)       0 ; - ! Overturning moment due to gamma
P52_QSX3(1,1)       0 ; - ! Overturning moment due to Fy
P52_QSY1(1,1)    0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(1,1)       0 ; - ! Change in rolling resistance with Fx
P52_QSY3(1,1)       0 ; - ! Change in rolling resistance with Vx
P52_QSY4(1,1)       0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(1,1)   0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(1,1)       0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(1,1)     0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(1,1)   -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(1,1)     0.2 ; - ! Gyroscopic moment constant
P52_MBELT(1,1)    4.1 ; kg ! Belt mass
P52_MU_REF_X(1,1)   1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(1,1)   1 ; - ! Reference lateral friction

P52_R0(1,2)     0.287 ; m ! Unloaded radius, axle 1, right side [I]
P52_FZ0(1,2)     4100 ; N ! Nominal vertical load, axle 1, right side
P52_LONGVL(1,2)  16.5 ; m/s ! Reference forward velocity
P52_LFZ0(1,2)       1 ; - ! Nominal load scale factor
P52_LCX(1,2)        1 ; - ! Fx shape scale factor
P52_LMUX(1,2)       1 ; - ! Fx peak Mu scale factor
P52_LEX(1,2)        1 ; - ! Fx curvature scale factor
P52_LKX(1,2)        1 ; - ! Fx slip stiffness scale factor
P52_LHX(1,2)        0 ; - ! Fx horizontal shift scale factor
P52_LVX(1,2)        0 ; - ! Fx vertcal shift scale factor
P52_LGAX(1,2)       1 ; - ! Camber scale factor for Fx
P52_LCY(1,2)        1 ; - ! Fy shape scale factor
P52_LMUY(1,2)       1 ; - ! Fy peak Mu scale factor
P52_LEY(1,2)        1 ; - ! Fy curvature scale factor
P52_LKY(1,2)        1 ; - ! Fy cornering stiffness scale factor
P52_LHY(1,2)        0 ; - ! Fy horizontal shift scale factor
P52_LVY(1,2)        0 ; - ! Fy vertcal shift scale factor
P52_LGAY(1,2)       1 ; - ! Camber for Fy scale factor
P52_LTR(1,2)        1 ; - ! Peak pneumatic trail scale factor
P52_LRES(1,2)       0 ; - ! Residual Mz scale factor
P52_LGAZ(1,2)       0 ; - ! Camber for Mz scale factor
P52_LXAL(1,2)       0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(1,2)       0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(1,2)      0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(1,2)         0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(1,2)      1 ; - ! Fx relaxation length scale factor
P52_LSGAL(1,2)      1 ; - ! Fy relaxation length scale factor
P52_LGYR(1,2)       1 ; - ! Gyroscopic moment scale factor
P52_LMX(1,2)        0 ; - ! Overturning moment scale factor
P52_LVMX(1,2)       0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(1,2)        1 ; - ! Rolling resistance torque scale factor
P52_PCX1(1,2)    1.62 ; - ! Fx shape factor
P52_PDX1(1,2)   1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(1,2) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(1,2)   -2.27 ; - ! Change in friction with gamma
P52_PEX1(1,2)     0.5 ; - ! Fx curvature at Fz0
P52_PEX2(1,2)  -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(1,2)  -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(1,2)       0 ; - ! Curvature in Fx with kappa
P52_PKX1(1,2)    19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(1,2)   -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(1,2)   0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(1,2) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(1,2) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(1,2)       0 ; - ! Fx vertical shift at Fz0
P52_PVX2(1,2)       0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(1,2)       9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(1,2)   -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(1,2)   1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(1,2)   0.078 ; - ! Combined slip Fx curvature
P52_REX2(1,2)   -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(1,2)   -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(1,2)    1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(1,2)  0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(1,2)    -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(1,2)    1.29 ; - ! Fy shape factor
P52_PDY1(1,2)    -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(1,2)    0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(1,2)    -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(1,2)   -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(1,2)    0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(1,2)   -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(1,2)  -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(1,2)  -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(1,2)    1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(1,2)    0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(1,2)  0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(1,2)  -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(1,2)   0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(1,2)   0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(1,2)   -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(1,2)  -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(1,2)   -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(1,2)    6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(1,2)    7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(1,2)   -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(1,2)     1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(1,2)    0.23 ; - ! Combined slip Fy curvature
P52_REY2(1,2)    0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(1,2)  0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(1,2)   0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(1,2)       0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(1,2)       0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(1,2)       0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(1,2)      10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(1,2)    1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(1,2)     -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(1,2)    1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(1,2)     1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(1,2)    8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(1,2)   -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(1,2)    0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(1,2)   -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(1,2)   -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(1,2)    3.44 ; - ! Residual moment slope factor
P52_QBZ10(1,2)      0 ; - ! Residual moment slope factor
P52_QCZ1(1,2)    1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(1,2)    0.11 ; - ! Peak pneumatic trail
P52_QDZ2(1,2)  -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(1,2)   -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(1,2)     8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(1,2)  -0.003 ; - ! Peak residual moment
P52_QDZ7(1,2)   0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(1,2)   -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(1,2)    0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(1,2)    -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(1,2)   -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(1,2)       0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(1,2)   -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(1,2)   -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(1,2)   0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(1,2) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(1,2)   0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(1,2)    0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(1,2)       0 ; - ! Overturning moment due to Fz
P52_QSX2(1,2)       0 ; - ! Overturning moment due to gamma
P52_QSX3(1,2)       0 ; - ! Overturning moment due to Fy
P52_QSY1(1,2)    0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(1,2)       0 ; - ! Change in rolling resistance with Fx
P52_QSY3(1,2)       0 ; - ! Change in rolling resistance with Vx
P52_QSY4(1,2)       0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(1,2)   0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(1,2)       0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(1,2)     0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(1,2)   -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(1,2)     0.2 ; - ! Gyroscopic moment constant
P52_MBELT(1,2)    4.1 ; kg ! Belt mass
P52_MU_REF_X(1,2)   1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(1,2)   1 ; - ! Reference lateral friction

P52_R0(2,1)     0.287 ; m ! Unloaded radius, axle 2, left side [I]
P52_FZ0(2,1)     4100 ; N ! Nominal vertical load, axle 2, left side
P52_LONGVL(2,1)  16.5 ; m/s ! Reference forward velocity
P52_LFZ0(2,1)       1 ; - ! Nominal load scale factor
P52_LCX(2,1)        1 ; - ! Fx shape scale factor
P52_LMUX(2,1)       1 ; - ! Fx peak Mu scale factor
P52_LEX(2,1)        1 ; - ! Fx curvature scale factor
P52_LKX(2,1)        1 ; - ! Fx slip stiffness scale factor
P52_LHX(2,1)        0 ; - ! Fx horizontal shift scale factor
P52_LVX(2,1)        0 ; - ! Fx vertcal shift scale factor
P52_LGAX(2,1)       1 ; - ! Camber scale factor for Fx
P52_LCY(2,1)        1 ; - ! Fy shape scale factor
P52_LMUY(2,1)       1 ; - ! Fy peak Mu scale factor
P52_LEY(2,1)        1 ; - ! Fy curvature scale factor
P52_LKY(2,1)        1 ; - ! Fy cornering stiffness scale factor
P52_LHY(2,1)        0 ; - ! Fy horizontal shift scale factor
P52_LVY(2,1)        0 ; - ! Fy vertcal shift scale factor
P52_LGAY(2,1)       1 ; - ! Camber for Fy scale factor
P52_LTR(2,1)        1 ; - ! Peak pneumatic trail scale factor
P52_LRES(2,1)       0 ; - ! Residual Mz scale factor
P52_LGAZ(2,1)       0 ; - ! Camber for Mz scale factor
P52_LXAL(2,1)       0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(2,1)       0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(2,1)      0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(2,1)         0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(2,1)      1 ; - ! Fx relaxation length scale factor
P52_LSGAL(2,1)      1 ; - ! Fy relaxation length scale factor
P52_LGYR(2,1)       1 ; - ! Gyroscopic moment scale factor
P52_LMX(2,1)        0 ; - ! Overturning moment scale factor
P52_LVMX(2,1)       0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(2,1)        1 ; - ! Rolling resistance torque scale factor
P52_PCX1(2,1)    1.62 ; - ! Fx shape factor
P52_PDX1(2,1)   1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(2,1) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(2,1)   -2.27 ; - ! Change in friction with gamma
P52_PEX1(2,1)     0.5 ; - ! Fx curvature at Fz0
P52_PEX2(2,1)  -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(2,1)  -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(2,1)       0 ; - ! Curvature in Fx with kappa
P52_PKX1(2,1)    19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(2,1)   -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(2,1)   0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(2,1) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(2,1) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(2,1)       0 ; - ! Fx vertical shift at Fz0
P52_PVX2(2,1)       0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(2,1)       9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(2,1)   -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(2,1)   1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(2,1)   0.078 ; - ! Combined slip Fx curvature
P52_REX2(2,1)   -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(2,1)   -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(2,1)    1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(2,1)  0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(2,1)    -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(2,1)    1.29 ; - ! Fy shape factor
P52_PDY1(2,1)    -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(2,1)    0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(2,1)    -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(2,1)   -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(2,1)    0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(2,1)   -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(2,1)  -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(2,1)  -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(2,1)    1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(2,1)    0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(2,1)  0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(2,1)  -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(2,1)   0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(2,1)   0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(2,1)   -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(2,1)  -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(2,1)   -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(2,1)    6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(2,1)    7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(2,1)   -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(2,1)     1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(2,1)    0.23 ; - ! Combined slip Fy curvature
P52_REY2(2,1)    0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(2,1)  0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(2,1)   0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(2,1)       0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(2,1)       0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(2,1)       0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(2,1)      10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(2,1)    1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(2,1)     -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(2,1)    1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(2,1)     1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(2,1)    8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(2,1)   -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(2,1)    0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(2,1)   -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(2,1)   -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(2,1)    3.44 ; - ! Residual moment slope factor
P52_QBZ10(2,1)      0 ; - ! Residual moment slope factor
P52_QCZ1(2,1)    1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(2,1)    0.11 ; - ! Peak pneumatic trail
P52_QDZ2(2,1)  -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(2,1)   -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(2,1)     8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(2,1)  -0.003 ; - ! Peak residual moment
P52_QDZ7(2,1)   0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(2,1)   -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(2,1)    0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(2,1)    -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(2,1)   -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(2,1)       0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(2,1)   -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(2,1)   -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(2,1)   0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(2,1) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(2,1)   0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(2,1)    0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(2,1)       0 ; - ! Overturning moment due to Fz
P52_QSX2(2,1)       0 ; - ! Overturning moment due to gamma
P52_QSX3(2,1)       0 ; - ! Overturning moment due to Fy
P52_QSY1(2,1)    0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(2,1)       0 ; - ! Change in rolling resistance with Fx
P52_QSY3(2,1)       0 ; - ! Change in rolling resistance with Vx
P52_QSY4(2,1)       0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(2,1)   0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(2,1)       0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(2,1)     0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(2,1)   -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(2,1)     0.2 ; - ! Gyroscopic moment constant
P52_MBELT(2,1)    4.1 ; kg ! Belt mass
P52_MU_REF_X(2,1)   1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(2,1)   1 ; - ! Reference lateral friction

P52_R0(2,2)     0.287 ; m ! Unloaded radius, axle 2, right side [I]
P52_FZ0(2,2)     4100 ; N ! Nominal vertical load, axle 2, right side
P52_LONGVL(2,2)  16.5 ; m/s ! Reference forward velocity
P52_LFZ0(2,2)       1 ; - ! Nominal load scale factor
P52_LCX(2,2)        1 ; - ! Fx shape scale factor
P52_LMUX(2,2)       1 ; - ! Fx peak Mu scale factor
P52_LEX(2,2)        1 ; - ! Fx curvature scale factor
P52_LKX(2,2)        1 ; - ! Fx slip stiffness scale factor
P52_LHX(2,2)        0 ; - ! Fx horizontal shift scale factor
P52_LVX(2,2)        0 ; - ! Fx vertcal shift scale factor
P52_LGAX(2,2)       1 ; - ! Camber scale factor for Fx
P52_LCY(2,2)        1 ; - ! Fy shape scale factor
P52_LMUY(2,2)       1 ; - ! Fy peak Mu scale factor
P52_LEY(2,2)        1 ; - ! Fy curvature scale factor
P52_LKY(2,2)        1 ; - ! Fy cornering stiffness scale factor
P52_LHY(2,2)        0 ; - ! Fy horizontal shift scale factor
P52_LVY(2,2)        0 ; - ! Fy vertcal shift scale factor
P52_LGAY(2,2)       1 ; - ! Camber for Fy scale factor
P52_LTR(2,2)        1 ; - ! Peak pneumatic trail scale factor
P52_LRES(2,2)       0 ; - ! Residual Mz scale factor
P52_LGAZ(2,2)       0 ; - ! Camber for Mz scale factor
P52_LXAL(2,2)       0 ; - ! Slip angle influence on Fx scale factor
P52_LYKA(2,2)       0 ; - ! Slip angle influence on Fy scale factor
P52_LVYKA(2,2)      0 ; - ! Slip ratio induced ply-steer scale factor
P52_LS(2,2)         0 ; - ! Mz moment arm of Fx scale factor
P52_LSGKP(2,2)      1 ; - ! Fx relaxation length scale factor
P52_LSGAL(2,2)      1 ; - ! Fy relaxation length scale factor
P52_LGYR(2,2)       1 ; - ! Gyroscopic moment scale factor
P52_LMX(2,2)        0 ; - ! Overturning moment scale factor
P52_LVMX(2,2)       0 ; - ! Overturning moment vertical shift scale factor
P52_LMY(2,2)        1 ; - ! Rolling resistance torque scale factor
P52_PCX1(2,2)    1.62 ; - ! Fx shape factor
P52_PDX1(2,2)   1.035 ; - ! Longitudinal friction at Fz0
P52_PDX2(2,2) -0.0487 ; - ! Change in friction with Fz
P52_PDX3(2,2)   -2.27 ; - ! Change in friction with gamma
P52_PEX1(2,2)     0.5 ; - ! Fx curvature at Fz0
P52_PEX2(2,2)  -0.122 ; - ! Change in Fx curvature with Fz
P52_PEX3(2,2)  -0.063 ; - ! Change in Fx curvature with Fz^2
P52_PEX4(2,2)       0 ; - ! Curvature in Fx with kappa
P52_PKX1(2,2)    19.4 ; - ! Longitudinal slip stiffness at Fz0
P52_PKX2(2,2)   -0.13 ; - ! Change in slip stiffness with Fz
P52_PKX3(2,2)   0.171 ; - ! Exponent in slip stiffness with Fz
P52_PHX1(2,2) -0.0005 ; - ! Fx horizontal shift at Fz0
P52_PHX2(2,2) 8.42e-05 ; - ! Change in Fx horizontal shift with Fz
P52_PVX1(2,2)       0 ; - ! Fx vertical shift at Fz0
P52_PVX2(2,2)       0 ; - ! Change in Fx vertical shift with Fz
P52_RBX1(2,2)       9 ; - ! Fx loss function combined slip slope factor
P52_RBX2(2,2)   -8.75 ; - ! Change in Fx loss function combined slip slope factor
                      ! with kappa
P52_RCX1(2,2)   1.125 ; - ! Fx loss function combined slip shape factor
P52_REX1(2,2)   0.078 ; - ! Combined slip Fx curvature
P52_REX2(2,2)   -0.16 ; - ! Change in combined slip Fx curvature with Fz
P52_RHX1(2,2)   -0.03 ; - ! Fx loss function combined slip horizontal shift
P52_PTX1(2,2)    1.95 ; - ! Relaxation length for kappa at Fz0
P52_PTX2(2,2)  0.0003 ; - ! Change in relaxation length for kappa with Fz
P52_PTX3(2,2)    -0.3 ; - ! Change in relaxation length for kappa with exponent of
                      ! Fz
P52_PCY1(2,2)    1.29 ; - ! Fy shape factor
P52_PDY1(2,2)    -0.9 ; - ! Lateral friction at Fz0
P52_PDY2(2,2)    0.18 ; - ! Change in lateral friction with Fz
P52_PDY3(2,2)    -4.5 ; - ! Change in lateral friction with gamma^2
P52_PEY1(2,2)   -1.07 ; - ! Fy curvature at Fz0
P52_PEY2(2,2)    0.68 ; - ! Change in Fy curvature with Fz
P52_PEY3(2,2)   -0.63 ; - ! Fy curvature zero order gamma dependency
P52_PEY4(2,2)  -12.35 ; - ! Change in Fy curvature with gamma
P52_PKY1(2,2)  -12.95 ; - ! Peak cornering stiffness at Fz0
P52_PKY2(2,2)    1.72 ; - ! Fz for peak cornering stiffness
P52_PKY3(2,2)    0.22 ; - ! Change in cornering stiffness with gamma
P52_PHY1(2,2)  0.0035 ; - ! Fy horizontal shift at Fz0
P52_PHY2(2,2)  -0.003 ; - ! Change in Fy horizontal shift with Fz
P52_PHY3(2,2)   0.045 ; - ! Change in Fy horizontal shift with gamma
P52_PVY1(2,2)   0.045 ; - ! Fy vertical shift at Fz0
P52_PVY2(2,2)   -0.03 ; - ! Change in Fy vertical shift with Fz
P52_PVY3(2,2)  -0.174 ; - ! Change in Fy vertical shift with gamma
P52_PVY4(2,2)   -0.45 ; - ! Coupled change in Fy vertical shift with Fz and gamma
P52_RBY1(2,2)    6.38 ; - ! Fy loss function combined slip slope factor
P52_RBY2(2,2)    7.95 ; - ! Change in Fx loss function combined slip slope factor
                      ! with alpha
P52_RBY3(2,2)   -0.06 ; - ! Alpha shift for Fy loss function combined slip slope
P52_RCY1(2,2)     1.1 ; - ! Fy loss function combined slip shape factor
P52_REY1(2,2)    0.23 ; - ! Combined slip Fy curvature
P52_REY2(2,2)    0.41 ; - ! Change in combined slip Fy curvature with Fz
P52_RHY1(2,2)  0.0007 ; - ! Fy loss function combined slip horizontal shift
P52_RHY2(2,2)   0.024 ; - ! Change in Fy loss function combined slip horizontal
                      ! shift with Fz
P52_RVY1(2,2)       0 ; - ! Lateral force due to kappa at Fz0
P52_RVY2(2,2)       0 ; - ! Change in lateral force due to kappa with Fz
P52_RVY3(2,2)       0 ; - ! Change in lateral force due to kappa with gamma
P52_RVY4(2,2)      10 ; - ! Change in lateral force due to kappa with alpha
P52_RVY5(2,2)    1.95 ; - ! Change in lateral force due to kappa with kappa
P52_RVY6(2,2)     -50 ; - ! Change in lateral force due to kappa with atan(kappa)
P52_PTY1(2,2)    1.85 ; - ! Peak relaxation length for alpha
P52_PTY2(2,2)     1.8 ; - ! Peak relaxation length shape factor
P52_QBZ1(2,2)    8.37 ; - ! Pneumatic trail slope factor at Fz0
P52_QBZ2(2,2)   -2.92 ; - ! Change in trail slope factor with Fz
P52_QBZ3(2,2)    0.48 ; - ! Change in peak pneumatic trail with Fz^2
P52_QBZ4(2,2)   -0.45 ; - ! Change in trail slope factor with gamma
P52_QBZ5(2,2)   -0.44 ; - ! Change in trail slope factor with gamma magnitude
P52_QBZ9(2,2)    3.44 ; - ! Residual moment slope factor
P52_QBZ10(2,2)      0 ; - ! Residual moment slope factor
P52_QCZ1(2,2)    1.19 ; - ! Pneumatic trail shape factor
P52_QDZ1(2,2)    0.11 ; - ! Peak pneumatic trail
P52_QDZ2(2,2)  -0.003 ; - ! Change in peak pneumatic trail with Fz
P52_QDZ3(2,2)   -0.56 ; - ! Change in peak pneumatic trail with gamma
P52_QDZ4(2,2)     8.4 ; - ! Change in peak pneumatic trail with gamma^2
P52_QDZ6(2,2)  -0.003 ; - ! Peak residual moment
P52_QDZ7(2,2)   0.005 ; - ! Change in peak residual moment with Fz 
P52_QDZ8(2,2)   -0.12 ; - ! Change in peak residual moment with gamma
P52_QDZ9(2,2)    0.12 ; - ! Coupled change in peak residual moment with Fz and gamma
P52_QEZ1(2,2)    -2.9 ; - ! Pneumatic trail curvature at Fz0
P52_QEZ2(2,2)   -0.55 ; - ! Change in pneumatic trail curvature with Fz
P52_QEZ3(2,2)       0 ; - ! Change in pneumatic trail curvature with Fz^2
P52_QEZ4(2,2)   -0.13 ; - ! Change in pneumatic trail curvature with sign(alpha)
P52_QEZ5(2,2)   -3.68 ; - ! Coupled change in pneumatic trail curvature with gamma
                      ! and sign(alpha)
P52_QHZ1(2,2)   0.003 ; - ! Pneumatic trail horizontal shift at Fz0
P52_QHZ2(2,2) 0.00082 ; - ! Change in pneumatic trail horizontal shift with Fz
P52_QHZ3(2,2)   0.154 ; - ! Change in pneumatic trail horizontal shift with gamma
P52_QHZ4(2,2)    0.12 ; - ! Coupled change in pneumatic trail horizontal shift with
                      ! Fz and gamma
P52_QSX1(2,2)       0 ; - ! Overturning moment due to Fz
P52_QSX2(2,2)       0 ; - ! Overturning moment due to gamma
P52_QSX3(2,2)       0 ; - ! Overturning moment due to Fy
P52_QSY1(2,2)    0.01 ; - ! Rolling resistance due to Fz
P52_QSY2(2,2)       0 ; - ! Change in rolling resistance with Fx
P52_QSY3(2,2)       0 ; - ! Change in rolling resistance with Vx
P52_QSY4(2,2)       0 ; - ! Change in rolling resistance with Vx^4
P52_SSZ1(2,2)   0.025 ; - ! Effect on Mz moment arm due to Fx
P52_SSZ2(2,2)       0 ; - ! Change in Mz moment arm due to Fy
P52_SSZ3(2,2)     0.5 ; - ! Change in Mz moment arm due to gamma
P52_SSZ4(2,2)   -0.27 ; - ! Coupled change in Mz moment arm due to Fy and gamma
P52_QTZ1(2,2)     0.2 ; - ! Gyroscopic moment constant
P52_MBELT(2,2)    4.1 ; kg ! Belt mass
P52_MU_REF_X(2,2)   1 ; - ! Reference longitudinal friction
P52_MU_REF_Y(2,2)   1 ; - ! Reference lateral friction


!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)  0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)  0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)  0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)  0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
! The powertrain model is specified with the following parameters along with up to
! 25 nonlinear Configurable Functions. Open-loop throttle can be specified with the
! function THROTTLE_ENGINE. Engine behavior is specified in part with the functions
! MENGINE and FUEL_RATE.

OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise
OPT_HEV             0 ! Propulsion types: 0 -> internal-combustion engine, 1 ->
                      ! hybrid electric, 2 -> electric
R_MDRIVE            1 ; - ! Multiplier for driveshaft torque acting on sprung mass
                      ! from drive axle: +1 -> cause positive vehicle roll, -1 ->
                      ! cause negative vehicle roll, 0 -> no effect. [I]
VLOW_IW             0 ; km/h ! [D] Increase wheel spin inertia below this speed to
                      ! fix instability with some HIL systems; set 0 to disable

! The powertrain differentials are specified with the following parameters along
! with the functions M_DIFF_VISC, CLUTCH_CONTROL_DIFF, CLUTCH_TORQUE_DIFF,
! CLUTCH_TORQUE_DIFF2, CLUTCH_TWIN, and M_TWIN.

OPT_DIFF_INTERNAL(2) 1 ! Rear differential model: 1 -> internal, 0 -> external [I]
OPT_LOCKED_DIFF(2)  0 ! Is the rear differential locked? 0 -> no, 1 -> yes [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping for locked rear diff [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring rate for locked rear diff [I]
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of rear differential [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of rear differential [I]
R_GEAR_DIFF(2)  5.125 ; - ! Gear ratio of 2nd rear differential [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of rear driveshaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of half left shaft, 2nd rear diff [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of half right shaft, rear diff [I]

OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control for rear differential: 0 -> table lookup
                      ! or external, 1 -> Torsen parameters, 2 -> yaw control [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Twin clutches on rear differential? 0 -> no, 1 -> yes
                      ! [I]

!------------------------------------------------------------------------------------
! ENGINE
!------------------------------------------------------------------------------------
INSTALL_ENGINE        ! VS Command to install an engine

OPT_ENGINE_INTERNAL 1 ! Engine model: 1 -> internal, 0 -> external [I]
OPT_ENGINE_RUNNING  1 ! [D] Is engine running? 1 -> yes, 0 -> no
OPT_THROTTLE_DELAY  1 ! Use throttle time constants: 0 -> no, 1 -> yes
AV_ENG_IDLE      1000 ; rpm ! Engine idle speed [I]
ENGINE_ESC_PG       5 ; 1/s ! [D] P gain of ESC engine torque control
ENGINE_ESC_IG     0.5 ; 1/s2 ! [D] I gain of ESC engine torque control
ENGINE_STALL_DAMP 0.2 ; N-m-s/deg ! [D] Damping rate of the stalled engine
IENG             0.18 ; kg-m2 ! Spin inertia of engine crankshaft [I]
ITC_INPUT_SHAFT  0.01 ; kg-m2 ! Spin inertia of input shaft of torque converter
TC_TH_APP        0.05 ; s ! Time constant for engine throttle application
TC_TH_RELEASE     0.1 ; s ! Time constant for engine throttle release

!------------------------------------------------------------------------------------
! TORQUE TRANSFER DEVICE
!------------------------------------------------------------------------------------
! Transfer of power from the engine to the transmission is specified with the
! following parameters along with the functions CLUTCH_TORQUE, INV_CAP_TC, and
! RM_TC. Open-loop clutch control can be specified with the function
! CLUTCH_CONTROL.

INSTALL_TORQUE_TRANSFER_DEVICE  ! VS Command to install a clutch or torque converter
OPT_CLUTCH          1 ! Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch, 3 -> centrifugal clutch [I]
OPT_CLUTCH_MODE     1 ! [D] Clutch control mode: 0 -> open-loop, 1 -> closed-loop
                      ! (based on shifting) [I]
OPT_CLUTCH_DELAY    0 ! Use clutch torque time constants: 0 -> no, 1 -> yes
OPT_PWR_CPL_INTERNAL 1 ! Internal power coupling model (torque converter and
                       ! clutch): 1 -> internal, 0 -> external
T_CL_HALF_HOLD    0.1 ; s ! [D] Time spent holding the clutch at half pressure
                      ! during clutch release [I]
T_CL_HALF_TOTAL   0.2 ; s ! [D] Time spent releasing the clutch during gear shift
                      ! [I]
T_CL_PRESS_HOLD   0.2 ; s ! [D] Time spent holding the clutch at full pressure
                      ! during gear shift [I]
T_CL_PRESS_TOTAL  0.3 ; s ! [D] Time spent applying the clutch to full pressure
                      ! during gear shift [I]
T_GEAR_LAG        0.1 ; s ! [D] Time lag in shifting
T_TH_RETURN       0.1 ; s ! [D] Time spent returning to original throttle during
                      ! gear shift [I]
T_TH_ZERO_HOLD    0.2 ; s ! [D] Time spent holding zero throttle during gear shift
                      ! [I]
T_TH_ZERO_TOTAL   0.3 ; s ! [D] Time spent going to zero throttle and holding it
                      ! during gear shift [I]
VLOW_CLUTCH         5 ; km/h ! [D] Press the clutch pedal when average of wheel
                      ! speeds is below this speed while deccelerating with brake
                      ! during the simulation, or accelerating from stop when the
                      ! simulation starts. [I]

!------------------------------------------------------------------------------------
! TRANSMISSION
!------------------------------------------------------------------------------------
! The transmission is specified with the following parameters and the functions
! DOWNSHIFT_TRANS, UPSHIFT_TRANS, LOCK_AT, UNLOCK_AT, R_GEAR_CVT, R_EFF_CVT_F, and
! R_EFF_CVT_R. Transmission controller mode can be specified with the open-loop
! function MODE_TRANS and transmission gear can be specified with the open-loop
! function GEAR_TRANS.

INSTALL_TRANSMISSION  ! VS Command to install a transmission

OPT_TRANS_INTERNAL  1 ! Transmission model: 1 -> internal, 0 -> external [I]
OPT_TR_GEAR_INTERNAL 1 ! Transmission gear ratio and inertia: 1 -> up to 18 gears, 2
                       ! -> continuously variable (CVT), 0 -> external model [I]
NGEARS              5 ! Number of gears in transmission [I]
OPT_SHIFT_INTERNAL  1 ! Gear shift command model: 1 -> internal, 0 -> external [I]
ITC_OUTPUT_SHAFT 0.05 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR_NEUTRAL      0.03 ; kg-m2 ! Neutral-gear spin inertia of transmission
ITR_REVERSE      0.03 ; kg-m2 ! Reverse-gear spin inertia of transmission
R_EFF_TR_F_REVERSE 0.95 ; - ! Reverse-gear forward efficiency of transmission
R_EFF_TR_R_REVERSE 0.95 ; - ! Reverse-gear reverse efficiency of transmission
R_GEAR_TR_REVERSE -5.151 ; - ! Reverse-gear ratio of trans. (should be negative)
T_SHIFT           0.2 ; s ! Shift duration in closed-loop transmission control

ITR(1)           0.03 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft
                      ! (Transmission spin inertias do not include the torque
                      ! converter)
R_EFF_TR_F(1)    0.95 ; - ! 1st-gear forward efficiency of transmission
R_EFF_TR_R(1)    0.95 ; - ! 1st-gear reverse efficiency of transmission
R_GEAR_TR(1)    5.106 ; - ! 1st-gear ratio of transmission
T_SHIFT_UP(1)      -1 ; - ! [D] Duration with up-shift from 1st-gear [I]
T_SHIFT_DOWN(1)    -1 ; - ! [D] Duration with down-shift to 1st-gear [I]

ITR(2)           0.03 ; kg-m2 ! 2nd-gear trans. spin inertia at output shaft
R_EFF_TR_F(2)    0.95 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_R(2)    0.95 ; - ! 2nd-gear reverse efficiency of transmission
R_GEAR_TR(2)    3.017 ; - ! 2nd-gear ratio of transmission
T_SHIFT_UP(2)      -1 ; - ! [D] Duration with up-shift from 2nd-gear
T_SHIFT_DOWN(2)    -1 ; - ! [D] Duration with down-shift to 2nd-gear

ITR(3)           0.03 ; kg-m2 ! 3rd-gear trans. spin inertia at output shaft
R_EFF_TR_F(3)    0.95 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_R(3)    0.95 ; - ! 3rd-gear reverse efficiency of transmission
R_GEAR_TR(3)    1.908 ; - ! 3rd-gear ratio of transmission
T_SHIFT_UP(3)      -1 ; - ! [D] Duration with up-shift from 3rd-gear
T_SHIFT_DOWN(3)    -1 ; - ! [D] Duration with down-shift to 3rd-gear

ITR(4)           0.03 ; kg-m2 ! 4th-gear trans. spin inertia at output shaft
R_EFF_TR_F(4)    0.95 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_R(4)    0.95 ; - ! 4th-gear reverse efficiency of transmission
R_GEAR_TR(4)    1.264 ; - ! 4th-gear ratio of transmission
T_SHIFT_UP(4)      -1 ; - ! [D] Duration with up-shift from 4th-gear
T_SHIFT_DOWN(4)    -1 ; - ! [D] Duration with down-shift to 4th-gear

ITR(5)           0.03 ; kg-m2 ! 5th-gear trans. spin inertia at output shaft
R_EFF_TR_F(5)    0.95 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_R(5)    0.95 ; - ! 5th-gear reverse efficiency of transmission
R_GEAR_TR(5)        1 ; - ! 5th-gear ratio of transmission

DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z and MU values for a road surface are provided with
! Configurable Functions MU_ROAD, ROAD_DZ, and ROAD_ZS. Boundaries that control
! automatic switching from one road surface to another make use of the Configurable
! Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            1 ! Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID for the vehicle during initialization [I]

ROAD_ID(1)          1 ; Roll (Cross-Slope) Sine Sweep
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX boundary, -1 -> stop if S > ROAD_SMAX, > 0
                      ! -> switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN boundary, -1 -> stop if S < ROAD_SMIN, > 0
                      ! -> switch to road with this ID if S < ROAD_SMIN
RR_SURF(1)          1 ; - ! Tire rolling resistance surface-effect coefficient
ROAD_N_DZ(1)        1 ! Number of ROAD_DZ layers added to the surface
RD_DZ_ID(1,1)       1 ; ROAD_DZ_ID for: Cross-Slope Sine Sweep

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             1 ! Number of LTARG datasets that are used in this run
PATH_ID_DM          1 ! PATH_ID of reference path for the driver and vehicle [I]
LTARG_ID_DM         1 ! LTARG_ID of reference LTARG for the driver model (0 -> no
                      ! reference LTARG)
OPT_INIT_PATH       1 ! [D] Set Xo, Yo, and Yaw to match path PATH_ID_DM and target
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]
OPT_DIRECTION       1 ! Travel direction along path PATH_ID_DM: 0 -> set to 1 or -1
                      ! using SSTART and SSTOP values (legacy); 1 -> increasing
                      ! station, -1 -> decreasing station [I]
SSTART              0 ; m ! Start the vehicle at this station on path PATH_ID_DM and
                      ! possibly with target LTARG_ID_DM. The current station on
                      ! this path is the output variable "Station", which is also a
                      ! state variable. [I]

OPT_DM              3 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_DRIVER_ACTION   1 ! [D] Use steer from driver model (Steer_DM) when OPT_DM > 0?
                      ! 1 -> use Steer_DM, 0 -> ignore Steer_DM [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
A_SW_MAX_DM       720 ; deg ! Limit steering wheel angle for the steer controller
AV_SW_MAX_DM     1200 ; deg/s ! Limit steering wheel rate for the steer controller
VLOW_DM            10 ; km/h ! Speed for switching the steering controller between
                      ! time preview (high speed) and distance preview (low speed)
! XREF_DM           0 ; mm ! CALC -- Local X coordinate of DM reference point
XREF_DM_F           0 ; mm ! [D] X distance of DM ref. point in front of axle 1
XREF_DM_R           0 ; mm ! [D] X distance of DM ref. point in front of rear axle
YREF_DM             0 ; mm ! [D] Local Y coordinate of DM reference point
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           0 ! Number of installed reference points and forces (read only)

!------------------------------------------------------------------------------------
! CAMERA OUTPUTS
!------------------------------------------------------------------------------------
INSTALL_CAMERA_OUTPUTS  ! Command to install tracking camera outputs

L_CAMERA_FRONT    0.5 ; m ! Distance the camera front point leads the front axle
L_CAMERA_REAR     0.5 ; m ! Distance the camera rear point trails the rear axle

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.08171
 -60, 0.996827
 -50, 0.88789
 -40, 0.755642
 -30, 0.600569
 -20, 0.422934
 -10, 0.222791
 0, 0
 10, -0.245764
 20, -0.515012
 30, -0.808436
 40, -1.12692
 50, -1.47156
 60, -1.84365
 70, -2.24474
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, left side
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 2, right side
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, rear
                                  ! differential
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE: Available clutch torque. Available clutch torque is a function of
! normalized clutch control (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Available clutch torque from the
! calculation can be adjusted with CLUTCH_TORQUE_GAIN and CLUTCH_TORQUE_OFFSET.
! Normalized clutch control used in the calculation can be adjusted with
! CON_SCALE_CL_TORQ and CON_START_CL_TORQ.

! 1D table: col 1 = normalized clutch control (-), col 2 = available clutch torque (N-m)
CLUTCH_TORQUE_TABLE LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 0, 80
 1, 0
ENDTABLE
CLUTCH_TORQUE_GAIN  1 ! Gain multiplied with calculated value to get available
                      ! clutch torque
CLUTCH_TORQUE_OFFSET 0 ; N-m ! Offset added (after gain) to get available clutch
                       ! torque
CON_START_CL_TORQ   0 ; - ! Offset subtracted from normalized clutch control
CON_SCALE_CL_TORQ   1 ! Scale factor divided into (normalized clutch control -
                      ! CON_START_CL_TORQ)

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, rear
                                 ! differential
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 1 ! Coefficient: damper compression per unit jounce at
                            ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, left side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 1, right side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, left side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 1 ! Coefficient: lower spring seat movement per unit
                                ! jounce at wheel (mm/mm), axle 2, right side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -1.5e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, left side
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) 0 ! Coefficient: Steer displacement per unit force (deg/N),
                         ! axle 2, right side
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 1.9e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 1.9e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 4.3e-07 ! Coefficient: toe displacement per unit force
                               ! (deg/N), axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LAT_AXLE: Compliance: axle lateral leftward deflection due to total Fy.
! C_LAT_AXLE displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LAT_AXLE displacement
! from the calculation can be adjusted with C_LAT_AXLE_GAIN and C_LAT_AXLE_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_C_LAT_AXLE and
! F_START_C_LAT_AXLE. This configurable function supports 2 datasets; if indices
! shown below are not used, e.g., (2), the current value of the index IAXLE is used
! to identify the dataset when reading data.

C_LAT_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LAT_AXLE displacement per unit force
                            ! (mm/N), axle 2
C_LAT_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LAT_AXLE
                       ! displacement
F_START_C_LAT_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LAT_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LAT_AXLE)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! C_LONG_AXLE: Compliance: axle longitudinal deflection due to total Fx. C_LONG_AXLE
! displacement is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. C_LONG_AXLE
! displacement from the calculation can be adjusted with C_LONG_AXLE_GAIN and
! C_LONG_AXLE_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LONG_AXLE and F_START_C_LONG_AXLE. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

C_LONG_AXLE_COEFFICIENT(2) 0 ! Coefficient: C_LONG_AXLE displacement per unit force
                             ! (mm/N), axle 2
C_LONG_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get C_LONG_AXLE
                        ! displacement
F_START_C_LONG_AXLE(2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG_AXLE(2) 1 ! Scale factor divided into (force - F_START_C_LONG_AXLE)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 194.82
 0.1, 194.82
 0.2, 235.04
 0.3, 284.89
 0.4, 352.33
 0.5, 422.29
 0.6, 492.25
 0.7, 904.65
 1, 904.65
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 194.82
 0.1, 194.82
 0.2, 235.04
 0.3, 284.89
 0.4, 352.33
 0.5, 422.29
 0.6, 492.25
 0.7, 904.65
 1, 904.65
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1314.4
 0.1, 1314.4
 0.2, 1510.6
 0.3, 1706.8
 0.4, 1903
 0.5, 2099.2
 0.6, 2295.4
 0.7, 2501.2
 0.8, 2776.7
 1, 2776.7
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 3458.9
 0.2, 3458.9
 0.3, 3469.6
 0.4, 3480.3
 0.5, 3491
 0.6, 3501.8
 0.7, 3512.5
 0.8, 4339.1
 1, 4339.1
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! axle 1, left side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! axle 1, right side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! axle 2, left side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! axle 2, right side
 -1410, -3244
 -720, -2225
 -390, -1505
 -210, -1160
 -90, -652
 -20, -147
 0, 0
 20, 147
 90, 386
 200, 507
 390, 712
 760, 1163
 1160, 1658
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 35 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 35 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,1) SPLINE ! axle 2, left side
 -150, -1946.28
 -135, -1243.26
 -120, -519.027
 -105, 228.183
 -90, 998.104
 -75, 1790.05
 -60, 2603.82
 -45, 3440.29
 -30, 4301.93
 -15, 5193.32
 0, 6121.73
 15, 7097.99
 30, 8137.64
 45, 9263.02
 60, 10506.6
 75, 11917.2
 90, 13571.2
 105, 15594.4
 120, 18203
 135, 21771.2
 150, 26874.3
ENDTABLE
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2) SPLINE ! axle 2, right side
 -150, -1946.28
 -135, -1243.26
 -120, -519.027
 -105, 228.183
 -90, 998.104
 -75, 1790.05
 -60, 2603.82
 -45, 3440.29
 -30, 4301.93
 -15, 5193.32
 0, 6121.73
 15, 7097.99
 30, 8137.64
 45, 9263.02
 60, 10506.6
 75, 11917.2
 90, 13571.2
 105, 15594.4
 120, 18203
 135, 21771.2
 150, 26874.3
ENDTABLE
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 35 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 35 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,1) SPLINE ! axle 2, left side
 -150, -4758
 0, 4897.38
 15, 5678.39
 30, 6510.11
 45, 7410.42
 60, 8405.28
 75, 9533.76
 90, 10857
 105, 12475.5
 120, 14562.4
 135, 17417
 150, 21499.4
ENDTABLE
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2) SPLINE ! axle 2, right side
 -150, -4758
 0, 4897.38
 15, 5678.39
 30, 6510.11
 45, 7410.42
 60, 8405.28
 75, 9533.76
 90, 10857
 105, 12475.5
 120, 14562.4
 135, 17417
 150, 21499.4
ENDTABLE
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

FUEL_RATE_CONSTANT  0 ; kg/s ! [D] Constant fuel rate component due to engine speed
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
FUEL_RATE_THROTTLE_CONSTANT 1 ; - ! [D] Constant fuel rate scaling due to throttle
                              ! position

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

FX_AERO_SHAPING_CONSTANT 0 ; - ! Constant CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

FX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFX2 component due to ride height

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

FY_AERO_SHAPING_CONSTANT 0 ; - ! Constant CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFY2 component due to ride height

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

FZ_AERO_SHAPING_CONSTANT 0 ; - ! Constant CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1) 220 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2) 220 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1) 220 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2) 220 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 118, 0
 119, 0
 120, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -60, -10000
 -59, 0
 -58, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_ROT: Steering gear output. Pitman arm angle is a function of steering gear
! input angle (CONSTANT, COEFFICIENT, or TABLE). Pitman arm angle from the
! calculation can be adjusted with GEAR_ROT_GAIN and GEAR_ROT_OFFSET. The derivative
! of this function is used internally. This configurable function supports 2
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IAXLE is used to identify the dataset when reading data.

GEAR_ROT_COEFFICIENT(1) 0.04444444444 ! Coefficient: pitman arm angle per unit
                                      ! steering gear input angle (deg/deg), axle 1
GEAR_ROT_GAIN(1)    1 ! Gain multiplied with calculated value to get pitman arm
                      ! angle
GEAR_ROT_OFFSET(1)  0 ; deg ! Offset added (after gain) to get pitman arm angle

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc.. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 500 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_ID(1)         1  ! 0.4 sec. Single Preview
LTARG_CONSTANT(1)   0 ; m ! Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 70 ; mm ! Constant tire contact length, axle 1, left side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 70 ; mm ! Constant tire contact length, axle 1, right side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 70 ; mm ! Constant tire contact length, axle 2, left side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 70 ; mm ! Constant tire contact length, axle 2, right side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 205 ; mm ! Constant tire contact width, axle 1, left side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 205 ; mm ! Constant tire contact width, axle 1, right side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 205 ; mm ! Constant tire contact width, axle 2, left side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 205 ; mm ! Constant tire contact width, axle 2, right side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 22 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 22 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.00098, 0.0022, 0.0039, 0.0061, 0.0088, 0.012, 0.016, 0.024, 0.035, 0.048, 0.071, 0.098, 0.13, 0.18, 0.23, 0.3, 0.39, 0.52, 0.66, 0.82, 1
 508, -1.7099, 1.4168, 5.0266, 8.3318, 11.075, 13.301, 15.099, 16.581, 18.67, 19.716, 20.11, 20.354, 20.519, 20.639, 20.752, 20.832, 20.867, 20.89, 20.906, 20.916, 20.921, 20.916
 596, -3.3267, -0.31634, 3.6703, 7.9795, 12.028, 15.535, 18.425, 20.744, 24.059, 26.223, 27.708, 29.07, 29.589, 29.764, 29.891, 29.967, 30.013, 30.043, 30.057, 30.061, 30.062, 30.061
 860, -4.85, -3.4735, -1.5911, 1.2889, 4.9004, 9.2728, 14.011, 18.519, 25.92, 31.029, 34.439, 37.584, 39.413, 40.54, 41.387, 41.829, 42.062, 42.224, 42.314, 42.337, 42.332, 42.315
 1300, -5.5606, -4.7937, -3.9451, -2.5289, -0.5629, 1.8561, 4.684, 7.9211, 15.865, 24.168, 30.917, 37.844, 41.98, 44.461, 46.36, 47.424, 48.067, 48.578, 48.98, 49.229, 49.412, 49.553
 1740, -5.9874, -5.5028, -4.8959, -4.0014, -2.6936, -1.015, 0.9789, 3.2793, 8.7723, 15.592, 23.341, 33.371, 40.407, 45.021, 48.789, 51.007, 52.351, 53.273, 53.798, 54.013, 54.104, 54.138
 2180, -6.4971, -6.1404, -5.6641, -5.0222, -4.0761, -2.8132, -1.2707, 0.50982, 4.7527, 9.9184, 16.129, 26.921, 36.122, 42.632, 48.061, 51.165, 52.969, 54.24, 55.029, 55.398, 55.549, 55.6
 2620, -7.1433, -6.8629, -6.4792, -5.979, -5.241, -4.245, -3.0075, -1.5561, 1.9364, 6.1587, 11.19, 20.329, 30.452, 38.708, 46.251, 50.825, 53.547, 55.455, 56.587, 57.098, 57.309, 57.381
 3060, -7.8102, -7.5713, -7.2301, -6.821, -6.2171, -5.3994, -4.3767, -3.1724, -0.265, 3.2927, 7.4729, 15.095, 24.3, 34.087, 44.331, 51.144, 55.439, 58.578, 60.502, 61.395, 61.775, 61.908
 3500, -8.5108, -8.3058, -7.9963, -7.6517, -7.1423, -6.449, -5.5757, -4.5409, -2.0388, 1.0305, 4.6584, 11.225, 19.151, 28.38, 39.884, 48.276, 53.88, 58.167, 60.906, 62.218, 62.793, 63
 3940, -9.2271, -9.0547, -8.7838, -8.4854, -8.0456, -7.4461, -6.6881, -5.784, -3.5829, -0.8751, 2.342, 8.1401, 15.162, 23.368, 34.589, 43.288, 49.325, 54.055, 57.119, 58.588, 59.226, 59.448
 4380, -10.02, -9.8682, -9.6252, -9.3649, -8.9838, -8.4647, -7.811, -7.0296, -5.1226, -2.7647, 0.054898, 5.1638, 11.398, 18.671, 29.806, 39.752, 47.078, 53.025, 56.982, 58.913, 59.771, 60.089
 4820, -10.865, -10.728, -10.508, -10.282, -9.9532, -9.5025, -8.9304, -8.244, -6.5609, -4.4738, -1.9772, 2.575, 8.1724, 14.686, 24.812, 35.363, 43.708, 50.817, 55.739, 58.216, 59.343, 59.772
 5260, -11.744, -11.632, -11.456, -11.257, -10.96, -10.551, -10.032, -9.4116, -7.897, -6.024, -3.7859, 0.3026, 5.3541, 11.248, 20.365, 30.644, 39.472, 47.318, 52.919, 55.808, 57.144, 57.658
 5700, -12.72, -12.61, -12.459, -12.235, -11.99, -11.632, -11.158, -10.593, -9.2118, -7.5029, -5.4619, -1.7337, 2.8658, 8.2565, 16.569, 26.203, 35.033, 43.108, 48.971, 52.045, 53.494, 54.06
 6140, -13.782, -13.685, -13.542, -13.33, -13.098, -12.771, -12.334, -11.813, -10.536, -8.9631, -7.085, -3.6581, 0.55991, 5.5114, 13.132, 22.01, 30.41, 38.215, 43.928, 46.923, 48.33, 48.886
 6580, -14.946, -14.853, -14.712, -14.524, -14.305, -13.979, -13.572, -13.083, -11.905, -10.447, -8.7055, -5.5284, -1.6205, 2.964, 9.9945, 18.163, 25.922, 33.148, 38.46, 41.25, 42.56, 43.061
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 5 ; - ! Constant transmission mode
MODE_TRANS_GAIN     1 ! Gain multiplied with calculated value to get transmission
                      ! mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function MU_ROAD_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. MU from the
! calculation can be adjusted with MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral
! position used in the calculation can be adjusted with L_SCALE_MU_ROAD and
! L_START_MU_ROAD. This configurable function supports 200 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IROAD is used to
! identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

MX_AERO_SHAPING_CONSTANT 0 ; - ! Constant CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_CONSTANT(1)  0 ; N-m ! Constant auxiliary roll moment component due to
                      ! relative axle roll, axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_CONSTANT(2)  0 ; N-m ! Constant auxiliary roll moment component due to
                      ! relative axle roll, axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

MY_AERO_SHAPING_CONSTANT 0 ; - ! Constant CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

MY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 100 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 100 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 75 ! Coefficient: brake torque per unit wheel cylinder
                             ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 75 ! Coefficient: brake torque per unit wheel cylinder
                             ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

MZ_AERO_SHAPING_CONSTANT 0 ; - ! Constant CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! M_BOOST_G: Boost torque applied to steering gear. Boost torque can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function M_BOOST_G_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost torque from the calculation can be adjusted with M_BOOST_G_GAIN
! and M_BOOST_G_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_M_BOOST and M_TB_START_M_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_M_BOOST and VX_TB_START_M_BOOST.

! 2D table: row 1 has "0" (place holder) followed by 6 values of speed (km/h). Other
! rows have torsion bar torque (N-m) followed by 6 values of boost torque (N-m).
M_BOOST_G_CARPET 2D_SPLINE
 0, 0, 20, 50, 80, 120, 200
 -16, -1200, -1200, -1200, -1200, -1200, -1200
 -15, -1200, -1200, -1200, -1200, -1200, -1200
 -14.5, -1200, -1200, -1200, -1200, -1200, -1200
 -14, -1200, -1200, -1200, -1200, -1200, -1200
 -13.5, -1200, -1200, -1200, -1200, -1200, -1200
 -13, -1200, -1200, -1200, -1200, -1200, -1200
 -12.5, -1200, -1200, -1200, -1200, -1200, -1200
 -12, -1200, -1200, -1200, -1200, -1200, -1200
 -11.5, -1200, -1200, -1200, -1200, -1088.064, -1027.8336
 -11, -1200, -1161.6, -1165.4112, -1094.808, -833.3424, -720.2448
 -10.5, -1200, -1058.4, -990.2976, -871.6464, -630.3792, -496.4256
 -10, -1200, -960, -834.84, -686.2992, -470.4, -336
 -9.5, -1200, -866.4, -697.6464, -533.7744, -345.7872, -222.9072
 -9, -1200, -777.6, -577.368, -409.5456, -249.9888, -144.6384
 -8.5, -1200, -693.6, -472.6848, -309.504, -177.4128, -91.5552
 -8, -1200, -614.4, -382.3152, -229.9632, -123.312, -56.3712
 -7.5, -1200, -540, -305.0112, -167.616, -83.7216, -33.6384
 -7, -1200, -470.4, -239.5776, -119.5344, -55.344, -19.368
 -6.5, -1200, -405.6, -184.8432, -83.136, -35.4768, -10.7088
 -6, -1200, -345.6, -139.68, -56.1648, -21.9456, -5.6448
 -5.5, -1200, -290.4, -103.008, -36.6672, -13.0224, -2.8128
 -5, -1200, -240, -73.7904, -22.9872, -7.3488, -1.3104
 -4.5, -1093.5024, -194.4, -51.0336, -13.7184, -3.9072, -0.5664
 -4, -768, -153.6, -33.792, -7.704, -1.9248, -0.2208
 -3.5, -514.5024, -117.6, -21.1776, -4.0032, -0.864, -0.0768
 -3, -324, -86.4, -12.3456, -1.8816, -0.3408, -0.024
 -2.5, -187.5024, -60, -6.5232, -0.768, -0.1152, -0.0048
 -2, -96, -38.4, -2.9856, -0.2592, -0.0288, 0
 -1.5, -40.5024, -21.6, -1.0896, -0.0624, -0.0048, 0
 -1, -12, -9.6, -0.264, -0.0096, 0, 0
 -0.5, -1.5024, -2.4, -0.024, 0, 0, 0
 0, 0, 0, 0, 0, 0, 0
 0.5, 1.5024, 2.4, 0.024, 0, 0, 0
 1, 12, 9.6, 0.264, 0.0096, 0, 0
 1.5, 40.5024, 21.6, 1.0896, 0.0624, 0.0048, 0
 2, 96, 38.4, 2.9856, 0.2592, 0.0288, 0
 2.5, 187.5024, 60, 6.5232, 0.768, 0.1152, 0.0048
 3, 324, 86.4, 12.3456, 1.8816, 0.3408, 0.024
 3.5, 514.5024, 117.6, 21.1776, 4.0032, 0.864, 0.0768
 4, 768, 153.6, 33.792, 7.704, 1.9248, 0.2208
 4.5, 1093.5024, 194.4, 51.0336, 13.7184, 3.9072, 0.5664
 5, 1200, 240, 73.7904, 22.9872, 7.3488, 1.3104
 5.5, 1200, 290.4, 103.008, 36.6672, 13.0224, 2.8128
 6, 1200, 345.6, 139.68, 56.1648, 21.9456, 5.6448
 6.5, 1200, 405.6, 184.8432, 83.136, 35.4768, 10.7088
 7, 1200, 470.4, 239.5776, 119.5344, 55.344, 19.368
 7.5, 1200, 540, 305.0112, 167.616, 83.7216, 33.6384
 8, 1200, 614.4, 382.3152, 229.9632, 123.312, 56.3712
 8.5, 1200, 693.6, 472.6848, 309.504, 177.4128, 91.5552
 9, 1200, 777.6, 577.368, 409.5456, 249.9888, 144.6384
 9.5, 1200, 866.4, 697.6464, 533.7744, 345.7872, 222.9072
 10, 1200, 960, 834.84, 686.2992, 470.4, 336
 10.5, 1200, 1058.4, 990.2976, 871.6464, 630.3792, 496.4256
 11, 1200, 1161.6, 1165.4112, 1094.808, 833.3424, 720.2448
 11.5, 1200, 1200, 1200, 1200, 1088.064, 1027.8336
 12, 1200, 1200, 1200, 1200, 1200, 1200
 12.5, 1200, 1200, 1200, 1200, 1200, 1200
 13, 1200, 1200, 1200, 1200, 1200, 1200
 13.5, 1200, 1200, 1200, 1200, 1200, 1200
 14, 1200, 1200, 1200, 1200, 1200, 1200
 14.5, 1200, 1200, 1200, 1200, 1200, 1200
 15, 1200, 1200, 1200, 1200, 1200, 1200
 16, 1200, 1200, 1200, 1200, 1200, 1200
ENDTABLE
M_BOOST_G_GAIN      1 ! Gain multiplied with calculated value to get boost torque
M_BOOST_G_OFFSET    0 ; N-m ! Offset added (after gain) to get boost torque
M_TB_START_M_BOOST  0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_M_BOOST  1 ! Scale factor divided into (torsion bar torque -
                      ! M_TB_START_M_BOOST)
VX_TB_START_M_BOOST 0 ; km/h ! Offset subtracted from speed
VX_TB_SCALE_M_BOOST 1 ! Scale factor divided into (speed - VX_TB_START_M_BOOST)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

M_DIFF_VISC_CONSTANT(2) 0 ; N-m ! Constant this torque difference, rear differential
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT  2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,1) LINEAR ! axle 2, left side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,1) MPa ;
PBK_DL_FZ_CONSTANT(2,1) 0 ; MPa ! Constant delivery pressure component due to
                          ! dynamic wheel load, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2) LINEAR ! axle 2, right side
 -1, 0
 0, 0
 2, 2
 3, 2.3
ENDTABLE
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) ADD ! How to combine the two components
SET_UNITS PBK_DL_FZ_TABLE(2,2) MPa ;
PBK_DL_FZ_CONSTANT(2,2) 0 ; MPa ! Constant delivery pressure component due to
                          ! dynamic wheel load, axle 2, right side

! ROAD_DZ: Incremental elevation added to a road surface. DZ can be a nonlinear
! CARPET function of lateral position and station or a function of station (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function ROAD_DZ_L of lateral position
! (CONSTANT, COEFFICIENT, or TABLE). DZ from the calculation can be adjusted with
! ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used in the calculation can be adjusted
! with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral position used in the calculation
! can be adjusted with L_SCALE_ROAD_DZ and L_START_ROAD_DZ. The derivative of this
! function is used internally. This configurable function supports 200 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index
! IROAD_DZ is used to identify the dataset when reading data.

ROAD_DZ_ID(1)       1  ! Cross-Slope Sine Sweep

! 1D table: col 1 = station (m), col 2 = dZ (m)
ROAD_DZ_TABLE(1) SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -1, 0
 0, 0
 1.2, -0.0069
 2.4, -0.01935
 3.58, -0.0354
 4.76, -0.0543
 5.92, -0.0756
 7.1, -0.09885
 8.26, -0.12375
 9.4, -0.14985
 10.56, -0.17685
 11.7, -0.204
 12.84, -0.23055
 13.98, -0.2556
 15.1, -0.2778
 16.22, -0.2955
 17.34, -0.30735
 18.46, -0.31125
 19.56, -0.3054
 20.66, -0.2883
 21.76, -0.25845
 22.84, -0.21585
 23.92, -0.1611
 25, -0.09615
 26.08, -0.0252
 27.14, 0.0459
 28.2, 0.1107
 29.26, 0.16095
 30.32, 0.18945
 31.36, 0.1905
 32.4, 0.1623
 33.44, 0.10695
 34.46, 0.0333
 35.48, -0.04515
 36.5, -0.1119
 37.52, -0.15165
 38.52, -0.15285
 39.54, -0.11295
 40.54, -0.04185
 41.52, 0.0402
 42.52, 0.10815
 43.5, 0.1374
 44.48, 0.11595
 45.46, 0.05115
 46.44, -0.0339
 47.4, -0.10215
 48.36, -0.12375
 49.32, -0.0867
 50.26, -0.0075
 51.2, 0.07395
 52.16, 0.11415
 53.08, 0.0894
 54.02, 0.01245
 54.94, -0.07005
 55.88, -0.10725
 56.8, -0.07275
 57.7, 0.01065
 58.6, 0.0849
 59.52, 0.096
 60.42, 0.0342
 61.32, -0.0534
 62.2, -0.0963
 63.08, -0.05835
 63.98, 0.02955
 64.84, 0.08925
 65.72, 0.0669
 66.6, -0.01725
 67.46, -0.0837
 68.32, -0.06645
 69.18, 0.01785
 70.02, 0.0822
 70.88, 0.05865
 71.72, -0.02865
 72.56, -0.08235
 73.4, -0.0417
 74.22, 0.0468
 75.04, 0.0783
 75.88, 0.01455
 76.68, -0.066
 77.5, -0.06225
 78.32, 0.02205
 79.12, 0.07575
 79.92, 0.02775
 80.72, -0.0567
 81.52, -0.0618
 82.32, 0.0204
 83.1, 0.07215
 83.88, 0.0186
 84.66, -0.06135
 85.44, -0.0486
 86.2, 0.03735
 86.96, 0.0648
 87.74, -0.0099
 88.48, -0.06765
 89.24, -0.0165
 90, 0.06075
 90.74, 0.03735
 91.48, -0.0477
 92.24, -0.05085
 92.96, 0.03285
 93.7, 0.05865
 94.44, -0.0183
 95.16, -0.06195
 95.88, 0.0054
 96.6, 0.0621
 97.32, 0.0054
 98.02, -0.06045
 98.74, -0.01275
 99.44, 0.0582
 100.14, 0.01785
 100.84, -0.0561
 101.54, -0.02115
 102.22, 0.05415
 102.92, 0.0228
 103.6, -0.05295
 104.28, -0.0231
 104.96, 0.0528
 105.62, 0.02115
 106.3, -0.05295
 106.96, -0.018
 107.62, 0.05355
 108.28, 0.0126
 108.94, -0.05415
 109.6, -0.0072
 110.24, 0.0543
 110.9, -0.0012
 111.54, -0.05355
 112.18, 0.00915
 112.82, 0.0513
 113.44, -0.0186
 114.08, -0.0471
 114.72, 0.02865
 115.34, 0.04005
 115.96, -0.0369
 116.58, -0.03075
 117.2, 0.0447
 117.8, 0.0195
 118.4, -0.04905
 119.02, -0.0057
 119.62, 0.0501
 120.22, -0.00975
 120.82, -0.0468
 121.42, 0.0243
 122, 0.03825
 122.6, -0.03615
 123.18, -0.0264
 123.76, 0.0447
 124.34, 0.00975
 124.92, -0.048
 125.5, 0.00795
 126.06, 0.0447
 126.64, -0.0243
 127.2, -0.0348
 127.76, 0.03765
 128.32, 0.01995
 128.88, -0.0453
 129.44, -0.00135
 129.98, 0.04545
 130.52, -0.0168
 131.08, -0.0375
 131.62, 0.03345
 132.16, 0.0234
 132.7, -0.04275
 133.24, -0.0048
 133.76, 0.04455
 134.3, -0.01515
 134.82, -0.03735
 135.36, 0.03225
 135.88, 0.0225
 136.4, -0.042
 136.9, -0.00375
 137.42, 0.04305
 137.94, -0.0171
 138.44, -0.03525
 138.94, 0.0324
 139.44, 0.0201
 139.96, -0.0417
 140.46, 0.0006
 140.96, 0.04125
 141.44, -0.0192
 141.94, -0.03165
 142.42, 0.0345
 142.92, 0.015
 143.4, -0.0414
 143.88, 0.0051
 144.36, 0.0393
 144.84, -0.02295
 145.3, -0.0282
 145.78, 0.03585
 146.24, 0.0108
 146.72, -0.04095
 147.18, 0.009
 147.64, 0.0363
 148.1, -0.02565
 148.56, -0.02355
 149.02, 0.0372
 149.48, 0.00705
 149.92, -0.0399
 150.38, 0.012
 150.82, 0.03405
 151.26, -0.0273
 151.72, -0.021
 152.16, 0.03735
 152.58, 0.0051
 153.02, -0.039
 153.46, 0.01275
 153.88, 0.033
 154.32, -0.02775
 154.74, -0.02085
 155.16, 0.0363
 155.6, 0.0051
 156.02, -0.03825
 156.44, 0.0114
 156.84, 0.0333
 157.26, -0.02535
 157.68, -0.02205
 158.08, 0.03465
 158.5, 0.0081
 158.9, -0.0378
 159.32, 0.0078
 159.72, 0.03465
 160.12, -0.021
 160.52, -0.0261
 160.9, 0.03075
 161.3, 0.01395
 161.7, -0.0363
 162.08, -0.00165
 162.48, 0.03645
 162.86, -0.0117
 163.24, -0.03225
 163.62, 0.0231
 164, 0.0237
 164.38, -0.0312
 164.76, -0.01365
 165.14, 0.03555
 165.52, 0.0015
 165.88, -0.036
 166.26, 0.01035
 166.62, 0.03255
 166.98, -0.01935
 167.36, -0.0267
 167.72, 0.0273
 168.08, 0.01905
 168.44, -0.03255
 168.8, -0.00945
 169.14, 0.0351
 169.5, 0.00105
 169.84, -0.0351
 170.2, 0.0081
 170.54, 0.0333
 170.9, -0.01605
 171.24, -0.02925
 171.58, 0.0225
 171.92, 0.02475
 172.26, -0.02745
 172.6, -0.0189
 172.94, 0.03075
 173.28, 0.01275
 173.6, -0.03285
 173.94, -0.00705
 174.26, 0.0342
 174.6, 0.0018
 174.92, -0.03435
 175.24, 0.00285
 175.56, 0.0336
 175.88, -0.0078
 176.2, -0.03255
 176.52, 0.012
 176.84, 0.03135
 177.16, -0.01515
 177.48, -0.0297
 177.78, 0.0174
 178.1, 0.02805
 178.4, -0.0189
 178.72, -0.0267
 179.02, 0.02085
 179.32, 0.0258
 179.62, -0.0219
 179.92, -0.02535
 180.22, 0.02235
 180.52, 0.02475
 180.82, -0.0222
 181.12, -0.0246
 181.4, 0.02235
 181.7, 0.02505
 182, -0.02175
 182.28, -0.0252
 182.56, 0.02055
 182.86, 0.02595
 183.14, -0.0186
 183.42, -0.02715
 183.7, 0.0168
 183.98, 0.02865
 184.26, -0.01425
 184.54, -0.02985
 184.82, 0.0105
 185.1, 0.03105
 185.36, -0.0072
 185.64, -0.03195
 185.92, 0.00285
 186.18, 0.03225
 186.44, 0.00255
 186.72, -0.03165
 186.98, -0.0075
 187.24, 0.0303
 187.52, 0.0132
 187.76, -0.02715
 188.04, -0.0192
 188.28, 0.0228
 188.56, 0.024
 188.8, -0.01785
 189.06, -0.0282
 189.32, 0.0099
 189.56, 0.03105
 189.82, -0.0015
 190.08, -0.0315
 190.32, -0.0066
 190.56, 0.02955
 190.82, 0.01515
 191.06, -0.02415
 191.3, -0.0231
 191.54, 0.01665
 191.78, 0.0291
 192.02, -0.0063
 192.26, -0.0312
 192.5, -0.0045
 192.74, 0.02955
 192.98, 0.01575
 193.2, -0.02295
 193.44, -0.0243
 193.68, 0.0138
 193.92, 0.03
 194.14, -0.0003
 194.36, -0.0303
 194.6, -0.01305
 194.82, 0.0249
 195.04, 0.02355
 195.28, -0.0138
 195.5, -0.02985
 195.72, -0.0015
 195.94, 0.0294
 196.16, 0.0162
 196.38, -0.0216
 196.6, -0.02655
 196.8, 0.00735
 197.02, 0.03045
 197.24, 0.00855
 197.44, -0.02505
 197.66, -0.02295
 197.88, 0.01185
 198.08, 0.03
 198.3, 0.00465
 198.5, -0.02715
 198.72, -0.0207
 198.92, 0.0135
 199.12, 0.0297
 199.32, 0.0051
 199.52, -0.02685
 199.72, -0.0216
 199.92, 0.0126
 200.12, 0.02985
 200.32, 0.00705
 200.52, -0.0252
 200.72, -0.0243
 200.92, 0.0087
 201.12, 0.0297
 201.3, 0.01305
 201.5, -0.02115
 201.7, -0.02715
 201.88, 0.00015
 202.08, 0.02775
 202.26, 0.0198
 202.44, -0.0123
 202.64, -0.02955
 202.82, -0.01005
 203, 0.02145
 203.2, 0.02715
 203.38, 0
 203.56, -0.02715
 203.74, -0.0213
 203.92, 0.009
 204.1, 0.02925
 204.28, 0.015
 204.46, -0.0174
 204.64, -0.0288
 204.82, -0.00735
 205, 0.02235
 205.16, 0.02655
 205.34, 0.0018
 205.52, -0.02565
 205.68, -0.02445
 205.86, 0.0042
 206.02, 0.02745
 206.2, 0.02145
 206.36, -0.0075
 206.52, -0.02835
 206.7, -0.01875
 206.86, 0.01095
 207.04, 0.0288
 207.2, 0.01695
 207.36, -0.0132
 207.52, -0.0288
 208, 0
 209, 0
 210, 0
ENDTABLE
ROAD_DZ_GAIN(1)     1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1)   0 ; m ! Offset added (after gain) to get dZ
SSTART_ROAD_DZ(1)   0 ; m ! Offset subtracted from station
SSCALE_ROAD_DZ(1)   1 ! Scale factor divided into (station - SSTART_ROAD_DZ)
ROAD_DZ_COMBINE(1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = lateral position (m), col 2 = dZ component due to lateral position (-)
ROAD_DZ_L_TABLE(1) LINEAR_FLAT ! linear interpolation, flat-line extrapolation
 -2.5, 0
 -2, -1
 2, 1
 2.5, 0
ENDTABLE
L_START_ROAD_DZ(1)  0 ; m ! Offset subtracted from lateral position
L_SCALE_ROAD_DZ(1)  1 ! Scale factor divided into (lateral position -
                      ! L_START_ROAD_DZ)

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: Cross Slope Sine Sweep Test
SPEED_TARGET_CONSTANT(1) 35 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1) 0.002 ! Coefficient: steer per unit total kingpin moment
                                ! (deg/N-m), axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           ! M_KP_START_STEER_COMP)

! STEER_KIN: Nonlinear steering system kinematics for recirculating ball: steer
! angle at the road wheel. Road wheel steer is a function of pitman arm angle
! (CONSTANT, COEFFICIENT, or TABLE). Road wheel steer from the calculation can be
! adjusted with STEER_KIN_GAIN and STEER_KIN_OFFSET. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -28.8, -25.49
 -27.65, -24.57
 -26.5, -23.64
 -25.34, -22.7
 -24.19, -21.76
 -23.04, -20.82
 -21.89, -19.86
 -20.74, -18.9
 -19.58, -17.94
 -18.43, -16.96
 -17.28, -15.97
 -16.13, -14.98
 -14.98, -13.98
 -13.82, -12.97
 -12.67, -11.95
 -11.52, -10.92
 -10.37, -9.88
 -9.22, -8.82
 -8.06, -7.76
 -6.91, -6.69
 -5.76, -5.6
 -4.61, -4.51
 -3.46, -3.4
 -2.3, -2.28
 -1.15, -1.15
 0, 0
 1.15, 1.16
 2.3, 2.33
 3.46, 3.52
 4.61, 4.71
 5.76, 5.93
 6.91, 7.15
 8.06, 8.39
 9.22, 9.64
 10.37, 10.91
 11.52, 12.19
 12.67, 13.49
 13.82, 14.8
 14.98, 16.12
 16.13, 17.46
 17.28, 18.81
 18.43, 20.17
 19.58, 21.55
 20.74, 22.94
 21.89, 24.34
 23.04, 25.76
 24.19, 27.18
 25.34, 28.62
 26.5, 30.07
 27.65, 31.53
 28.8, 32.99
ENDTABLE
STEER_KIN_GAIN(1,1) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = pitman arm angle (deg), col 2 = road wheel steer (deg)
STEER_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -28.8, -32.99
 -27.65, -31.53
 -26.5, -30.07
 -25.34, -28.62
 -24.19, -27.18
 -23.04, -25.76
 -21.89, -24.34
 -20.74, -22.94
 -19.58, -21.55
 -18.43, -20.17
 -17.28, -18.81
 -16.13, -17.46
 -14.98, -16.12
 -13.82, -14.8
 -12.67, -13.49
 -11.52, -12.19
 -10.37, -10.91
 -9.22, -9.64
 -8.06, -8.39
 -6.91, -7.15
 -5.76, -5.93
 -4.61, -4.71
 -3.46, -3.52
 -2.3, -2.33
 -1.15, -1.16
 0, 0
 1.15, 1.15
 2.3, 2.28
 3.46, 3.4
 4.61, 4.51
 5.76, 5.6
 6.91, 6.69
 8.06, 7.76
 9.22, 8.82
 10.37, 9.88
 11.52, 10.92
 12.67, 11.95
 13.82, 12.97
 14.98, 13.98
 16.13, 14.98
 17.28, 15.97
 18.43, 16.96
 19.58, 17.94
 20.74, 18.9
 21.89, 19.86
 23.04, 20.82
 24.19, 21.76
 25.34, 22.7
 26.5, 23.64
 27.65, 24.57
 28.8, 25.49
ENDTABLE
STEER_KIN_GAIN(1,2) 1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
STEER_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! SUSP_AXLE_ROLL_STEER: Suspension roll steer. Steer is a function of roll
! (CONSTANT, COEFFICIENT, or TABLE). Steer from the calculation can be adjusted with
! SUSP_AXLE_ROLL_STEER_GAIN and SUSP_AXLE_ROLL_STEER_OFFSET. Roll used in the
! calculation can be adjusted with ROLL_SCALE_AXLE_STEER and ROLL_START_AXLE_STEER.
! The derivative of this function is used internally. This configurable function
! supports 2 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IAXLE is used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = steer (deg)
SUSP_AXLE_ROLL_STEER_TABLE(2) SPLINE ! axle 2
 -10, -1
 0, 0
 10, 2
ENDTABLE
SUSP_AXLE_ROLL_STEER_GAIN(2) 1 ! Gain multiplied with calculated value to get steer
SUSP_AXLE_ROLL_STEER_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer
ROLL_START_AXLE_STEER(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_STEER(2) 1 ! Scale factor divided into (roll -
                           ! ROLL_START_AXLE_STEER)

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.07166
 -60, 1.77237
 -50, 1.47431
 -40, 1.17742
 -30, 0.881618
 -20, 0.586832
 -10, 0.292987
 0, 0
 10, -0.292218
 20, -0.583766
 30, -0.874758
 40, -1.16532
 50, -1.45561
 60, -1.7458
 70, -2.03611
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1,
                                         ! right side

! SUSP_DIVE_AXLE: Suspension dive (measured at zero steer). Suspension dive is a
! function of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_AXLE_GAIN and SUSP_DIVE_AXLE_OFFSET.
! Jounce used in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE_AXLE and
! JNC_START_SUSP_DIVE_AXLE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IAXLE is used to identify the dataset
! when reading data.

SUSP_DIVE_AXLE_COEFFICIENT(2) 0 ! Coefficient: suspension dive per unit jounce
                                ! (deg/mm), axle 2
SUSP_DIVE_AXLE_OFFSET(2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE_AXLE(2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE_AXLE(2) 1 ! Scale factor divided into (jounce -
                              ! JNC_START_SUSP_DIVE_AXLE)

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 4.74662
 -60, 3.12302
 -50, 1.82181
 -40, 0.837522
 -30, 0.165882
 -20, -0.196302
 -10, -0.251197
 0, 0
 10, 0.557037
 20, 1.42059
 30, 2.59226
 40, 4.07461
 50, 5.87116
 60, 7.98647
 70, 10.4262
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.729904
 -60, -0.634454
 -50, -0.536096
 -40, -0.434813
 -30, -0.330589
 -20, -0.2234
 -10, -0.113217
 0, 0
 10, 0.116308
 20, 0.235783
 30, 0.358522
 40, 0.484654
 50, 0.61434
 60, 0.747787
 70, 0.885253
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

! SUSP_X_AXLE: Suspension X axle movement forward (measured at zero steer). X axle
! movement forward is a function of jounce (CONSTANT, COEFFICIENT, or TABLE). X axle
! movement forward from the calculation can be adjusted with SUSP_X_AXLE_GAIN and
! SUSP_X_AXLE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_X_AXLE and JNC_START_SUSP_X_AXLE. The derivative of this function is
! used internally. This configurable function supports 2 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IAXLE is used to
! identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X axle movement forward (mm)
SUSP_X_AXLE_TABLE(2) SPLINE ! axle 2
 -150, 5.1612
 -135, 2.79277
 -120, 0.841255
 -105, -0.695023
 -90, -1.8184
 -75, -2.53133
 -60, -2.83607
 -45, -2.73441
 -30, -2.22759
 -15, -1.3162
 0, 0
 15, 1.72199
 30, 3.85147
 45, 6.39054
 60, 9.34103
 75, 12.703
 90, 16.4714
 105, 20.6284
 120, 25.1262
 135, 29.8517
 150, 34.583
ENDTABLE
SUSP_X_AXLE_GAIN(2) 1 ! Gain multiplied with calculated value to get X axle movement
                      ! forward
SUSP_X_AXLE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get X axle movement
                        ! forward
JNC_START_SUSP_X_AXLE(2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X_AXLE(2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_X_AXLE)

! SUSP_Y_AXLE_ROLL: Suspension Y movement. Y movement can be a nonlinear CARPET
! function of jounce and roll or a function of roll (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_LAT_AXLE_JOUNCE of jounce (CONSTANT, COEFFICIENT, or
! TABLE). Y movement from the calculation can be adjusted with SUSP_Y_AXLE_ROLL_GAIN
! and SUSP_Y_AXLE_ROLL_OFFSET. Roll used in the calculation can be adjusted with
! ROLL_SCALE_AXLE_Y and ROLL_START_AXLE_Y. Jounce used in the calculation can be
! adjusted with JNC_SCALE_AXLE_Y and JNC_START_AXLE_Y. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

! 1D table: col 1 = roll (deg), col 2 = Y movement (mm)
SUSP_Y_AXLE_ROLL_TABLE(2) SPLINE ! axle 2
 -10.053, 16.793
 -8.3636, 14.014
 -6.6819, 11.23
 -5.0063, 8.4357
 -3.335, 5.6313
 -1.6668, 2.8181
 0, 0
 1.6668, -2.8181
 3.335, -5.6313
 5.0063, -8.4357
 6.6819, -11.23
 8.3636, -14.014
 10.053, -16.793
ENDTABLE
SUSP_Y_AXLE_ROLL_GAIN(2) 1 ! Gain multiplied with calculated value to get Y movement
SUSP_Y_AXLE_ROLL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get Y movement
ROLL_START_AXLE_Y(2) 0 ; deg ! Offset subtracted from roll
ROLL_SCALE_AXLE_Y(2) 1 ! Scale factor divided into (roll - ROLL_START_AXLE_Y)
SUSP_Y_AXLE_ROLL_COMBINE(2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_AXLE_JOUNCE_TABLE(2) mm ;
SUSP_LAT_AXLE_JOUNCE_CONSTANT(2) 0 ; mm ! Constant Y movement component due to
                                   ! jounce, axle 2

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! [D] Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.292407
 -60, 0.237822
 -50, 0.187561
 -40, 0.141604
 -30, 0.099916
 -20, 0.062452
 -10, 0.029164
 0, 0
 10, -0.025093
 20, -0.046165
 30, -0.063264
 40, -0.076429
 50, -0.085696
 60, -0.091086
 70, -0.09261
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, right side

! TPREV: Driver preview time. Preview time is a function of vehicle speed (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Preview time from the calculation can be adjusted with TPREV_GAIN and TPREV_OFFSET.
! Vehicle speed used in the calculation can be adjusted with VX_SCALE_TPREV and
! VX_START_TPREV.

TPREV_CONSTANT    0.4 ; s ! Constant preview time
TPREV_GAIN          1 ! Gain multiplied with calculated value to get preview time
TPREV_OFFSET        0 ; s ! Offset added (after gain) to get preview time

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 401.81
 0.1, 401.81
 0.2, 639.68
 0.3, 850.8
 0.4, 938.22
 0.5, 998.48
 0.6, 1015.2
 0.7, 1032
 1, 1032
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 401.81
 0.1, 401.81
 0.2, 639.68
 0.3, 850.8
 0.4, 938.22
 0.5, 998.48
 0.6, 1015.2
 0.7, 1032
 1, 1032
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1638.9
 0.1, 1638.9
 0.2, 2093.7
 0.3, 2426.8
 0.4, 2759.9
 0.5, 3012.8
 0.6, 3221
 0.7, 3259.7
 0.8, 3293.3
 1, 3293.3
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 3653.5
 0.2, 3653.5
 0.3, 3872.9
 0.4, 4092.3
 0.5, 4311.6
 0.6, 4508.6
 0.7, 4578
 0.8, 4583.5
 1, 4583.5
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment


END
