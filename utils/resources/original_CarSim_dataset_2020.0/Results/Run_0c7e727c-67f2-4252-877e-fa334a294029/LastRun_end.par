PARSFILE
! CarSim 2020.0
! Vehicle Configuration: I_I
! Revision 125462, December 17, 2019

DATASET_TITLE Twist-Beam, Compliances: Opposed Fy
CATEGORY Suspension and Ride Tests
TITLE Twist-Beam, Compliances: Opposed Fy <Suspension and Ride Tests>

! Echo: Results\Run_0c7e727c-67f2-4252-877e-fa334a294029\LastRun_echo.par
! This run was made 21:01 on December 18, 2019.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.
! [L] indicates that the parameter is locked once the simulation starts.

ID_EVENT            0 ; - ! ID number that can be assigned to the current event
ID_RUN              0 ; - ! ID number that can be assigned to a simulation run
IPRINT             50 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT;
                      ! set IPRINT = 0 for debug (TSTEP_WRITE = T_DT) [L]
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           0 ! Number of variables activated for import (read only)
! NOUT_ANI_LIVE    63 ! Number of variables sent live to animators (read only)
! NOUT_EXPORT       0 ! Number of output variables activated for export (read only)
! NOUT_WRITE       77 ! Number of output variables written to file (read only)
OPT_ALL_WRITE       0 ! Write all outputs to file? 1 -> all, 0 -> only activated
                      ! outputs
OPT_BUFFER_WRITE    0 ! [D] Retain output data in memory buffer until end of run? 0
                      ! -> no, write immediately to file, 1 -> yes, buffer during
                      ! run and write to file after run finishes [L]
OPT_CHECK_MATH      2 ! [D] Check for math exceptions? 2 -> as errors, 1 -> as
                      ! warnings, 0 -> no checks
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        0 ! [D] Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_KEYWORDS_LC 0 ! [D] Echo all keywords in lowercase? -> 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ENABLE_PYTHON   0 ! [D] Enable access to embedded Python? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable with a name that is already in use. 0 -> write
                      ! warning in log file, 1 -> generate error [L]
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INT_METHOD      0 ! Numerical integration method: 0 -> AB-2; 1 -> RK-2; 2 ->
                      ! AM-2; 3 -> AM-3; 4 -> AM-4; -1 -> Euler. AB-2 and Euler are
                      ! full-step methods (TSTEP = 0.0005s is typical); AM and RK-2
                      ! use half-steps (TSTEP = 0.001s is typical, i.e., half-step
                      ! = 0.0005s) [L]
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [I]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SKIP_INIT_DYN   0 ! [D] Skip initial dynamic calculations (for some RT systems)?
                      ! 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     2 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS,3 ->
                      ! 32-bit ERD, 4 -> text CSV (no binary), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; change this using VS Commands or Events
! RTIME        0.1195 ; - ! CALC -- Computational efficiency (sec/sim. sec)
TSTART             10 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE       10 ; s ! Start writing outputs when this time is reached
TSTEP          0.0005 ; s ! Time step for numerical integration [L]
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP              20 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! SYSTEM CONSTANTS
!------------------------------------------------------------------------------------
! DR      57.29577951 ; - ! Deg/rad symbol to use in formulas (read-only)
! G           9.80665 ; - ! Symbol for gravity constant m/s/s (read-only)
! PI      3.141592654 ; - ! Symbol for PI to use in formulas (read-only)
! ZERO              0 ; - ! Symbol for zero to use in VS Events (read-only)

!------------------------------------------------------------------------------------
! VEHICLE INITIALIZATION, LIMITS, AND GRAVITY
!------------------------------------------------------------------------------------
OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle magnitude: stop the run if
                      ! reached
VLOW_STOP          -1 ; km/h ! Stop the run if the absolute vehicle speed drops to
                      ! this value; specify -1 to disable this feature
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]

!------------------------------------------------------------------------------------
! VEHICLE CONFIGURATION
!------------------------------------------------------------------------------------
! VEHICLE_NAXLES    2 ! Number of vehicle axles (read-only)
! VEHICLE_NUNITS    1 ! Number of vehicle units (read-only)
! VEHICLE_AXLE_MAP(1) 2 ! Number of axles on unit 1 (read-only)

!------------------------------------------------------------------------------------
! VEHICLE
!------------------------------------------------------------------------------------
! The instant center of gravity is calculated every time step using the sprung mass
! + axles and wheels + payloads. Output variables for the vehicle such as Vx, Vy,
! Vz, Ax, Ay, and Az are based on the motion of this instant CG for the total laden
! (TL) unit.

! H_CG_TL 490.3876955 ; mm ! CALC -- Height of TL CG
! LX_CG_TL 1136.552683 ; mm ! CALC -- X distance TL CG is behind origin
! Y_CG_TL -1.357910345e-08 ; mm ! CALC -- Y coordinate of TL CG
! M_TL         1613.1 ; kg ! CALC -- TL mass
! IXX_TL  830.8384367 ; kg-m2 ! CALC -- TL roll inertia moment
! IYY_TL  2489.335765 ; kg-m2 ! CALC -- TL pitch inertia moment
! IZZ_TL  2965.930346 ; kg-m2 ! CALC -- TL yaw inertia moment

!------------------------------------------------------------------------------------
! SPRUNG MASS
!------------------------------------------------------------------------------------
! The following parameters apply for the sprung mass without payloads, designated
! SU (sprung mass unladen). If any payloads are attached, the combined inertia
! properties (SU sprung mass + payloads) are also listed and designated SL (sprung
! mass laden).

H_CG_SU           520 ; mm ! Height of CG of sprung mass, unladen (SU) [I]
LX_CG_SU         1110 ; mm ! X distance SU CG is behind sprung mass origin [I]
Y_CG_SU             0 ; mm ! Y coordinate of SU CG [I]
M_SU             1370 ; kg ! Mass of unladen sprung mass (SU) [I]
IXX_SU          671.3 ; kg-m2 ! Roll inertia for unladen sprung mass [I]
IYY_SU         1972.8 ; kg-m2 ! Pitch inertia for SU [I]
IZZ_SU         2315.3 ; kg-m2 ! Yaw inertia for SU [I]
IXY_SU              0 ; kg-m2 ! XY product of inertia for SU [I]
IXZ_SU              0 ; kg-m2 ! XZ product of inertia for SU [I]
IYZ_SU              0 ; kg-m2 ! YZ product of inertia for SU [I]

! N_PAYLOADS        0 ! No. of payloads attached to this sprung mass (read only)

!------------------------------------------------------------------------------------
! PAYLOADS
!------------------------------------------------------------------------------------
! NLOAD             0 ! Number of installed payloads (read only)

!------------------------------------------------------------------------------------
! AERODYNAMICS
!------------------------------------------------------------------------------------
! Aerodynamic coefficients are largely defined with the nonlinear Configurable
! Functions xx_AERO_SHAPING (where xx = FX, FY, etc.). Wind speed and direction are
! defined with the functions WIND_HEADING and WIND_SPEED.

D_AIR           1.206 ; kg/m3 ! Air mass density

AREA_AERO         2.4 ; m2 ! Frontal cross-section area
H_REF_AERO          0 ; mm ! Height of aerodynamic reference point
L_REF_AERO       2866 ; mm ! Aerodynamic reference length
X_REF_AERO      -1433 ; mm ! X coordinate of aerodynamic reference point
Y_REF_AERO          0 ; mm ! Y coordinate of aerodynamic reference point

!------------------------------------------------------------------------------------
! SUSPENSION GEOMETRY AND INERTIA
!------------------------------------------------------------------------------------
! Suspension geometry is specified with the following parameters along with some
! nonlinear Configurable Functions that can use tables of measured or simulated
! suspension kinematical relationships. For independent suspensions, these include
! the functions CAMBER, SUSP_DIVE, SUSP_LAT, SUSP_X, and TOE. All coordinate
! parameters are relative to the origin of the sprung mass (SM) coordinate system.

! Generic/independent suspension for axle 1
OPT_JNC_DESIGN(1)   1 ! Specify JNC_DESIGN (jounce when the wheel center is at the
                      ! reference Z coordinate H_WC) explicitly? 1 -> yes, 0 -> no,
                      ! calculate JNC_DESIGN from the ride spring data [I]
A_CAMBER(1,1)       0 ; deg ! Static camber for wheel L1 [I]
A_CAMBER(1,2)       0 ; deg ! Static camber for wheel R1 [I]
A_TOE(1,1)          0 ; deg ! Static toe for wheel L1 [I]
A_TOE(1,2)          0 ; deg ! Static toe for wheel R1 [I]
H_WC(1,1)         340 ; mm ! Reference Z coordinate of wheel center L1 (in SM
                      ! coordinate system) [I]
H_WC(1,2)         340 ; mm ! Reference Z coordinate of wheel center R1 [I]
! ISPIN(1,1)     1.67 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L1 [I]
! ISPIN(1,2)     1.67 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R1 [I]
! ISPIN_XXZZ(1,1) 0.88 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L1 [I]
! ISPIN_XXZZ(1,2) 0.88 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R1 [I]
IW(1,1)          0.17 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)          0.17 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW_XXZZ(1,1)     0.08 ; kg-m2 ! IXX/IZZ inertia for wheel L1 [I]
IW_XXZZ(1,2)     0.08 ; kg-m2 ! IXX/IZZ inertia for wheel R1 [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce when center of wheel L1 is at the reference
                      ! coordinate H_WC [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce when center of wheel R1 is at H_WC [I]
L_TRACK(1)       1550 ; mm ! Track width, wheel-center to wheel-center, axle 1 [I]
LX_AXLE(1)          0 ; mm ! [D] X dist. axle 1 is behind the sprung-mass origin [I]
M_US_IND(1,1)   12.48 ; kg ! Unsteered suspension mass for wheel L1 [I]
M_US_IND(1,2)   12.48 ; kg ! Unsteered suspension mass for wheel R1 [I]
M_US_STR(1,1)   32.47 ; kg ! Steered mass for wheel L1 [I]
M_US_STR(1,2)   32.47 ; kg ! Steered mass for wheel R1 [I]
! M_US(1)       133.9 ; kg ! CALC -- Total unsprung mass for axle 1
! R_US_STR(1) 0.813592233 ; - ! CALC -- Steered fraction of unsprung mass, axle 1
! Y_CG_SUSP(1)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 1 [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. for suspension centerline, axle 1 [I]

! Generic/independent suspension for axle 2
OPT_JNC_DESIGN(2)   1 ! Specify JNC_DESIGN explicitly for axle 2? [I]
A_CAMBER(2,1)       0 ; deg ! Static camber for wheel L2 [I]
A_CAMBER(2,2)       0 ; deg ! Static camber for wheel R2 [I]
A_TOE(2,1)          0 ; deg ! Static toe for wheel L2 [I]
A_TOE(2,2)          0 ; deg ! Static toe for wheel R2 [I]
H_WC(2,1)         325 ; mm ! Reference Z coordinate of wheel center L2 [I]
H_WC(2,2)         325 ; mm ! Reference Z coordinate of wheel center R2 [I]
! ISPIN(2,1)     1.67 ; kg-m2 ! CALC -- Spin inertia for wheel + tire L2 [I]
! ISPIN(2,2)     1.67 ; kg-m2 ! CALC -- Spin inertia for wheel + tire R2 [I]
! ISPIN_XXZZ(2,1) 0.88 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire L2 [I]
! ISPIN_XXZZ(2,2) 0.88 ; kg-m2 ! CALC -- IXX/IZZ inertia for wheel + tire R2 [I]
IW(2,1)          0.17 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)          0.17 ; kg-m2 ! Spin inertia for wheel R2 [I]
IW_XXZZ(2,1)     0.08 ; kg-m2 ! IXX/IZZ inertia for wheel L2 [I]
IW_XXZZ(2,2)     0.08 ; kg-m2 ! IXX/IZZ inertia for wheel R2 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce when center of wheel L2 is at H_WC [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce when center of wheel R2 is at H_WC [I]
L_TRACK(2)       1550 ; mm ! Track width, wheel-center to wheel-center, axle 2 [I]
LX_AXLE(2)       2866 ; mm ! X dist. axle 2 is behind the sprung-mass origin [I]
M_US_IND(2,1)    32.6 ; kg ! Unsteered suspension mass for wheel L2 [I]
M_US_IND(2,2)    32.6 ; kg ! Unsteered suspension mass for wheel R2 [I]
M_US_STR(2,1)       0 ; kg ! Steered mass for wheel L2 [I]
M_US_STR(2,2)       0 ; kg ! Steered mass for wheel R2 [I]
! M_US(2)       109.2 ; kg ! CALC -- Total unsprung mass for axle 2
! R_US_STR(2) 0.4029304029 ; - ! CALC -- Steered fraction of unsprung mass, axle 2
! Y_CG_SUSP(2)      0 ; mm ! CALC -- Y coord. for total unsprung mass, axle 2 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. for suspension centerline, axle 2 [I]

!------------------------------------------------------------------------------------
! SUSPENSION SPRINGS AND DAMPERS
!------------------------------------------------------------------------------------
! Suspension springs and dampers are specified with the following parameters, along
! with the nonlinear Configurable Functions CMP_DAMP, CMP_JSTOP, CMP_RSTOP,
! CMP_SPR_SEAT, FD, F_JNC_STOP, F_REB_STOP, FS_COMP, FS_EXT, and MX_AUX. All
! suspension models calculate compliance effects using the functions CC_FX, CI_FY,
! CI_MZ, CS_FY, CS_MZ, and CT_FX. Independent suspensions also use the functions
! CD_MY, C_LAT, and C_LONG.

! Generic/independent suspension for axle 1
OPT_EXT_SP(1,1)     0 ! External option for spring L1: 0 -> use built-in spring
                      ! (with or without external model), 1 -> disable built-in
                      ! spring and use an external model [I]
OPT_EXT_SP(1,2)     0 ! Disable built-in spring R1? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(1) 1 ! [D] Subtract offset from each compliance table to
                                ! avoid double-counting kinematical offset? 1 ->
                                ! Yes, subtract the offset, 0 -> No, use compliance
                                ! table as is [I]
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of external spring L1 [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of external spring R1 [I]
! CMP_DESIGN(1,1) 41.29464339 ; mm ! CALC -- Compression at design load, spring L1
! CMP_DESIGN(1,2) 41.29464339 ; mm ! CALC -- Compression at design load, spring R1
DAUX(1)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 1
! FSA_DESIGN(1) 8231.700641 ; N ! CALC -- Design Load (suspension, unladen), axle 1
! FSA_L(1) 8231.700641 ; N ! CALC -- Static suspension load, laden, axle  1
FS_OFFSET(1,1)      0 ; N ! Force offset subtracted from built-in spring L1 [I]
FS_OFFSET(1,2)      0 ; N ! Force offset subtracted from built-in spring R1 [I]
! FS_STATIC(1,1) 6318.080438 ; N ! CALC -- Static spring force, laden, spring L1
! FS_STATIC(1,2) 6318.080438 ; N ! CALC -- Static spring force, laden, spring R1
! FZA_L(1) 9544.811076 ; N ! CALC -- Static ground load, laden, axle 1
! FZA_UL(1) 9544.811076 ; N ! CALC -- Static ground load, unladen, axle 1
! FZ_STATIC(1,1) 4772.405538 ; N ! CALC -- Static ground force, laden, wheel L1
! FZ_STATIC(1,2) 4772.405538 ; N ! CALC -- Static ground force, laden, wheel R1
! KA_ROLL(1) 3591.762449 ; N-m/deg ! CALC -- Total roll stiffness, axle 1
L_SPG_ADJ(1,1)      0 ; mm ! Upper seat height increase for spring L1 to reduce
                      ! spring compression [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper seat height increase for spring R1 [I]
SPRING_COMP_BETA(1,1) 2 ; mm ! Reference hysteretic compression (1/3 of the
                        ! compression needed to go from the lower force boundary to
                        ! the upper force boundary) for ride spring L1 
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic compression, ride spring R1
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic extension, ride spring L1
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic extension, ride spring R1

! Generic/independent suspension for axle 2
OPT_EXT_SP(2,1)     0 ! Disable built-in spring L2? 0 -> no, 1 -> yes [I]
OPT_EXT_SP(2,2)     0 ! Disable built-in spring R2? 0 -> no, 1 -> yes [I]
OPT_SUSP_COMPLIANCE_METHOD(2) 1 ! [D] Adjust compliance tables to avoid
                                ! double-counting? 1 -> Adjust, 0 -> Use as is [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of external spring L2 [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of external spring R2 [I]
! CMP_DESIGN(2,1) 39.80942145 ; mm ! CALC -- Compression at design load, spring L2
! CMP_DESIGN(2,2) 39.80942145 ; mm ! CALC -- Compression at design load, spring R2
DAUX(2)             0 ; N-m-s/deg ! Auxiliary roll damping, axle 2
! FSA_DESIGN(2) 5203.409859 ; N ! CALC -- Design Load (suspension, unladen), axle 2
! FSA_L(2) 5203.409859 ; N ! CALC -- Static suspension load, laden, axle  2
FS_OFFSET(2,1)      0 ; N ! Force offset subtracted from built-in spring L2 [I]
FS_OFFSET(2,2)      0 ; N ! Force offset subtracted from built-in spring R2 [I]
! FS_STATIC(2,1) 3264.372559 ; N ! CALC -- Static spring force, laden, spring L2
! FS_STATIC(2,2) 3264.372559 ; N ! CALC -- Static spring force, laden, spring R2
! FZA_L(2) 6274.296039 ; N ! CALC -- Static ground load, laden, axle 2
! FZA_UL(2) 6274.296039 ; N ! CALC -- Static ground load, unladen, axle 2
! FZ_STATIC(2,1) 3137.148019 ; N ! CALC -- Static ground force, laden, wheel L2
! FZ_STATIC(2,2) 3137.148019 ; N ! CALC -- Static ground force, laden, wheel R2
! KA_ROLL(2) 2063.192946 ; N-m/deg ! CALC -- Total roll stiffness, axle 2
L_SPG_ADJ(2,1)      0 ; mm ! Upper seat height increase for spring L2 [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper seat height increase for spring R2 [I]
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic compression, ride spring L2
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic compression, ride spring R2
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic extension, ride spring L2
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic extension, ride spring R2

!------------------------------------------------------------------------------------
! STEERING
!------------------------------------------------------------------------------------
! The steering system is specified with the following parameters along with the
! nonlinear Configurable Functions F_BOOST_R, GEAR_ROT, M_BOOST_G, M_SW, M_TBAR,
! MZ_PARKING_STEER, RACK_KIN, RACK_TRAVEL, R_STEER_SPEED, STEER_COMP, and
! STEER_KIN. Open-loop steering can be specified with the function STEER_SW (angle
! control) or M_STR_IN (torque control)

OPT_M_SW_CALC       1 ! Reaction torque wheel with angle input (OPT_STEER = 0): 0 ->
                      ! from table, 1 -> calculated (see the steering Help document
                      ! for details) [I]
OPT_POWER           1 ! Power steering? 0 -> No, 1 -> Rack or Gear assist, 2 ->
                      ! Column assist [I]
OPT_STEER_DEF       1 ! Define steer angles of knuckles: 1 -> with respect to the
                      ! sprung-mass X-Y plane, 0 -> as rotation angle about a
                      ! kingpin axis [L]
BETA_COL          0.1 ; deg ! Ref hysteretic angle for steering column friction
D_COL           0.002 ; N-m-s/deg ! Steering column viscous damping
D_TBAR              0 ; N-m-s/deg ! [D] Torsion bar viscous damping
HYS_COL           0.2 ; N-m ! Steering column friction torque
I_GEAR_IN    0.000481 ; kg-m2 ! Steering system inertia
F_BOOST_MAX     10000 ; N ! Maximum power steering boost force
TC_BOOST        0.025 ; s ! Time constant for power steering boost
A_STR_STOP_L      -45 ; deg ! Steer angle limit during torque control (Left)
A_STR_STOP_R       45 ; deg ! Steer angle limit during torque control (Right)
K_STR_STOP_L        0 ; N-m/deg ! Steering stop stiffness (Left)
K_STR_STOP_R        0 ; N-m/deg ! Steering stop stiffness (Right)

OPT_STEER_EXT(1)    0 ! Steer model option for axle 1: 0 -> Internal model, 1 -> Not
                      ! steered, 2 -> External gear/rack, 3 -> External except
                      ! tie-rod linkage, 4 -> Full external model [I]
OPT_CS(1)           0 ! [D] Compliance steer option, axle 1: 1 -> control L wheel, 2
                      ! -> control R wheel, 0 -> symmetric
OPT_RACK(1)         1 ! Steering gear type for axle 1: 0 -> Recirculating ball, 1 ->
                      ! Rack and pinion [I]
A_CASTER(1,1)     9.5 ; deg ! Caster for wheel L1 [I]
A_CASTER(1,2)     9.5 ; deg ! Caster for wheel R1 [I]
A_KPI(1,1)       12.5 ; deg ! Kingpin inclination for wheel L1 [I]
A_KPI(1,2)       12.5 ; deg ! Kingpin inclination for wheel R1 [I]
A_MZ_BETA(1,1)      0 ; deg ! Ref. hysteresis angle for L1 parking steer torque
A_MZ_BETA(1,2)      0 ; deg ! Ref. hysteresis angle for R1 parking steer torque
BETA_RACK(1)      0.1 ; mm ! Ref hys. displ. for steering rack friction, axle 1
D_RACK(1)         5.5 ; N-s/mm ! Steering rack viscous damping, axle 1
HYS_RACK(1)       300 ; N ! Steering rack hysteresis, axle 1
L_KPO(1,1)         77 ; mm ! Lateral kingpin offset to center of wheel L1 [I]
L_KPO(1,2)         77 ; mm ! Lateral kingpin offset to center of wheel R1 [I]
X_KPO(1,1)          5 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          5 ; mm ! X coord. of kingpin at center of wheel R1 [I]

OPT_STEER_EXT(2)    1 ! Steer model option for axle 2: 1 -> Not steered, 0 ->
                      ! Internal model, 2 -> External gear/rack, 3 -> External
                      ! except tie-rod linkage, 4 -> Full external model [I]

!------------------------------------------------------------------------------------
! TIRES
!------------------------------------------------------------------------------------
! Tire behavior is specified with the following parameters. Depending on the
! selected options, the following nonlinear Configurable Functions might also be
! used: FX_TIRE, FY_TIRE, FYG_TIRE, FZ_TIRE, KGAMMA, L_CONTACT_X, L_CONTACT_Y,
! L_RELAX_X, L_RELAX_Y, MX_TIRE, MXG_TIRE, MZ_TIRE, STI_TYPARR, and Z_PROFILE

VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade

OPT_TIRE_MODEL(1,1) 1 ! Internal tire shear-model option, tire L1: 1 -> original
                      ! tabular model; 0 -> fully external model; 2 -> built-in
                      ! lags; 3 -> built-in for Fx, My, and lags; 6 -> tabular with
                      ! camber extensions; 7 -> built-in Pacejka 5.2; 8 -> TNO
                      ! Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party STI tire
                      ! model [I]
OPT_TIRE_COMB(1,1)  0 ! Option for combined slip calculation: 0 -> use only
                      ! theoretical combined slip; 1 -> use transition between the
                      ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in tire alpha: 1 -> transition
                          ! to using instant slip when the time constant is less
                          ! than 12*TSTEP, 0 -> use fixed time constant 12*TSTEP at
                          ! high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in tire kappa: 2 -> use instant
                          ! slip when absolute kappa is decreasing and transition
                          ! to instant slip when the time constant is less than
                          ! 12*TSTEP; 1 -> transition to instant slip when the time
                          ! constant is less than 12*TSTEP; 0 -> use fixed time
                          ! constant 12*TSTEP at high speeds
FZ_MAX(1,1)    100000 ; N ! Maximum allowed vertical force, tire L1 [I]
FZ_REF(1,1)      6500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
IT(1,1)           1.5 ; kg-m2 ! Spin inertia for tire L1 [I]
IT_XXZZ(1,1)      0.8 ; kg-m2 ! XX/ZZ inertia for tire L1 [I]
M_TIRE(1,1)        22 ; kg ! Mass of tire L1
MU_REF_X(1,1)       1 ; - ! Ground friction during meas. of Fx data, tire L1
MU_REF_Y(1,1)       1 ; - ! Ground friction during meas. of Fy data, tire L1
R0(1,1)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,1)          325 ; mm ! Effective rolling radius (Vx/AVy), tire L1 [I]
RR_C(1,1)      0.0038 ; - ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,1)          1 ; - ! Switch: 0 -> do not add the effect of tire Fx to the
                      ! rolling resistance moment MyRR; 1 add the effect
RR_V(1,1)     2.6e-05 ; h/km ! Rolling resistance: MyRR = R*Fz*RR_surf*(RR_c +
                      ! RR_v*Vx)
VLOW_ALPHA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 1 ! Internal tire shear-model option, R1 [I]
OPT_TIRE_COMB(1,2)  0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2)    100000 ; N ! Maximum allowed vertical force, tire R1 [I]
FZ_REF(1,2)      6500 ; N ! Reference vertical force
IT(1,2)           1.5 ; kg-m2 ! Spin inertia for tire R1 [I]
IT_XXZZ(1,2)      0.8 ; kg-m2 ! XX/ZZ inertia for tire R1 [I]
M_TIRE(1,2)        22 ; kg ! Mass of tire R1
MU_REF_X(1,2)       1 ; - ! Ground friction during meas. of Fx data, tire R1
MU_REF_Y(1,2)       1 ; - ! Ground friction during meas. of Fy data, tire R1
R0(1,2)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(1,2)          325 ; mm ! Effective rolling radius (Vx/AVy), tire R1 [I]
RR_C(1,2)      0.0038 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(1,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(1,2)     2.6e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 1 ! Internal tire shear-model option, L2 [I]
OPT_TIRE_COMB(2,1)  0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1)    100000 ; N ! Maximum allowed vertical force, tire L2 [I]
FZ_REF(2,1)      6500 ; N ! Reference vertical force
IT(2,1)           1.5 ; kg-m2 ! Spin inertia for tire L2 [I]
IT_XXZZ(2,1)      0.8 ; kg-m2 ! XX/ZZ inertia for tire L2 [I]
M_TIRE(2,1)        22 ; kg ! Mass of tire L2
MU_REF_X(2,1)       1 ; - ! Ground friction during meas. of Fx data, tire L2
MU_REF_Y(2,1)       1 ; - ! Ground friction during meas. of Fy data, tire L2
R0(2,1)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,1)          325 ; mm ! Effective rolling radius (Vx/AVy), tire L2 [I]
RR_C(2,1)      0.0038 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,1)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,1)     2.6e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 1 ! Internal tire shear-model option, R2 [I]
OPT_TIRE_COMB(2,2)  0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2)    100000 ; N ! Maximum allowed vertical force, tire R2 [I]
FZ_REF(2,2)      6500 ; N ! Reference vertical force
IT(2,2)           1.5 ; kg-m2 ! Spin inertia for tire R2 [I]
IT_XXZZ(2,2)      0.8 ; kg-m2 ! XX/ZZ inertia for tire R2 [I]
M_TIRE(2,2)        22 ; kg ! Mass of tire R2
MU_REF_X(2,2)       1 ; - ! Ground friction during meas. of Fx data, tire R2
MU_REF_Y(2,2)       1 ; - ! Ground friction during meas. of Fy data, tire R2
R0(2,2)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to RRE) [I]
RRE(2,2)          325 ; mm ! Effective rolling radius (Vx/AVy), tire R2 [I]
RR_C(2,2)      0.0038 ; - ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
RR_FX(2,2)          1 ; - ! 0 -> do not add Fx effect to MyRR; 1 -> add it
RR_V(2,2)     2.6e-05 ; h/km ! MyRR = R*Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2)    0 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

!------------------------------------------------------------------------------------
! BRAKES
!------------------------------------------------------------------------------------
! The brake system is specified with the following parameters along with the
! nonlinear Configurable Functions BRAKE_COOL, F_BRAKE_PEDAL_BOOST, MY_BRAKE,
! MY_BRAKE_TEMP, PBK_CALIPER, and PBK_DL. Open-loop braking can be specified with
! the function F_BRAKE_PEDAL (pedal force) or PBK_CON (master cylinder pressure)

LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! torsional natural frequency of a wheel during brake lockup
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of each wheel during lockup

OPT_BK_PEDAL        0 ! Brake input: 0 -> pressure (M/C), 1 -> pedal force (manual),
                      ! 2 -> pedal force with boost

OPT_BK_DYN(1,1)     1 ! Fluid dynamics: 1 -> time constant for actuator pressure, 2
                      ! -> hydraulic resistance for flow into actuator, 0 -> no
                      ! dynamics (instant actuator response)
OPT_BK_THERMAL(1,1) 0 ! [D] Brake L1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,1)  0.5 ; N-m ! Bearing/brake friction, wheel L1
TC_BK(1,1)       0.06 ; s ! Time constant for brake actuator L1
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach brake L1 [I]

OPT_BK_DYN(1,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(1,2) 0 ! [D] Brake R1 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(1,2)  0.5 ; N-m ! Bearing/brake friction, wheel R1
TC_BK(1,2)       0.06 ; s ! Time constant for brake actuator R1
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach brake R1 [I]

OPT_BK_DYN(2,1)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,1) 0 ! [D] Brake L2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,1)  0.5 ; N-m ! Bearing/brake friction, wheel L2
TC_BK(2,1)       0.06 ; s ! Time constant for brake actuator L2
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach brake L2 [I]

OPT_BK_DYN(2,2)     1 ! Dynamics: 1 -> time const., 2 -> hyd. res., 0 -> none
OPT_BK_THERMAL(2,2) 0 ! [D] Brake R2 thermal effects (fade)? 0 -> no, 1 -> yes
MY_FRICTION(2,2)  0.5 ; N-m ! Bearing/brake friction, wheel R2
TC_BK(2,2)       0.06 ; s ! Time constant for brake actuator R2
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach brake R2 [I]

!------------------------------------------------------------------------------------
! POWERTRAIN
!------------------------------------------------------------------------------------
OPT_PT              0 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise
R_REAR_DRIVE_SC     0 ; - ! Ratio: [rear axle drive torque]/[total drive torque] [I]
PMAX_SC           201 ; kW ! Maximum power available when OPT_PT = 0 [I]

!------------------------------------------------------------------------------------
! REFERENCE PATHS
!------------------------------------------------------------------------------------
! Up to 500 reference paths may be installed to provide station-based coordinate
! systems used to define 3D road surfaces, targets for the driver model, and
! positions of moving objects. In addition to the parameters shown in this section,
! the paths may include spline X-Y tables (keyword = SEGMENT_XY_TABLE).

! NPATH             1 ! Number of installed paths available for roads, driver model,
                      ! and moving objects (read only)
DEFINE_PATHS        1 ! VS Command to install reference paths

PATH_ID(1)          1 ; Straight East
OPT_PATH_START(1)   0 ! Set initial heading and X-Y coordinates of the path? 0 -> no
                      ! (legacy, using table data), 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes
SPATH_START(1)      0 ; m ! Station at the start of this path
! HEADING_START(1)  0 ; deg ! Heading at the start of this path
! X_PATH_START(1)   0 ; m ! Global X coordinate at the start of this path
! Y_PATH_START(1)   0 ; m ! Global Y coordinate at the start of this path

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> table, 2 -> rho, 3 -> radius, 4 -> cloth
SEGMENT_LENGTH(1,1) 100 ; m ! Segment length
! S_SEGMENT_END(1,1) 100 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 100 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment

!------------------------------------------------------------------------------------
! ROAD SURFACES
!------------------------------------------------------------------------------------
! Road surfaces define elevation Z and friction MU as functions of global X and Y
! coordinates, using a station-based coordinate system defined with a Reference
! Path. Up to 200 surfaces may be installed to represent sections, intersections,
! multiple lanes, etc. The Z and MU values for a road surface are provided with
! Configurable Functions MU_ROAD, ROAD_DZ, and ROAD_ZS. Boundaries that control
! automatic switching from one road surface to another make use of the Configurable
! Functions ROAD_L_BOUNDARY, ROAD_NEW_ID, and ROAD_NEW_S.

! NROAD             1 ! Number of installed road surfaces (read only)
NROAD_DZ            0 ! [D] Number of ROAD_DZ datasets
DEFINE_ROADS        1 ! VS Command to define road surfaces
CURRENT_ROAD_ID     1 ! ROAD_ID for the vehicle during initialization [I]

ROAD_ID(1)          1 ; K & C Test Rig
ROAD_PATH_ID(1)     1 ; PATH_ID for: Straight East
ROAD_SMAX_NEW_ID(1) 0 ! [D] 0 -> No SMAX boundary, -1 -> stop if S > ROAD_SMAX, > 0
                      ! -> switch to road with this ID if S > ROAD_SMAX
ROAD_SMIN_NEW_ID(1) 0 ! [D] 0 -> No SMIN boundary, -1 -> stop if S < ROAD_SMIN, > 0
                      ! -> switch to road with this ID if S < ROAD_SMIN
RR_SURF(1)          1 ; - ! Tire rolling resistance surface-effect coefficient
ROAD_N_DZ(1)        0 ! [D] Number of ROAD_DZ layers added to the surface

!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER AND VEHICLE REFERENCE PATH
!------------------------------------------------------------------------------------
! The built-in steering controller is a closed-loop path follower that calculates
! steering wheel angle in order to follow a specified lateral offset (LTARG_ID =
! LTARG_ID_DM) relative to a specified reference path (PATH_ID = PATH_ID_DM).
! Preview time is calculated with the Configurable Function TPREV.

N_LTARG             0 ! [D] Number of LTARG datasets that are used in this run
PATH_ID_DM          1 ! PATH_ID of reference path for the driver and vehicle [I]
LTARG_ID_DM         0 ! [D] LTARG_ID of reference LTARG for the driver model (0 ->
                      ! no reference LTARG)
OPT_INIT_PATH       0 ! Set Xo, Yo, and Yaw to match path PATH_ID_DM and target
                      ! LTARG_ID_DM at station SSTART? 1 -> yes, 0 -> no [I]

OPT_DM              0 ! Driver model option: 0 -> no driver model; 1 -> use linear
                      ! dynamic model and 10 preview points; 2 -> same as 1, but
                      ! with no rear steer effect (legacy); 3 -> use geometry and a
                      ! single preview point [I]
OPT_STR_BY_TRQ      0 ! Control by steering wheel torque? 0 -> no, 1 -> yes [I]
! NPREVIEW          0 ! No. of installed preview sensors for external DM (read only)

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
N_SPEED_TARGET      1 ! Number of SPEED_TARGET datasets for driver model, moving
                      ! objects, and VS Commands that are written below: 0 - 200

INSTALL_SPEED_CONTROLLER  ! VS Command to install the built-in speed controller
! The speed controller uses throttle and braking controls to follow target speed
! specified as a function of time and/or station along reference path PATH_ID_DM.
! The target speed is specified with Configurable Function SPEED_TARGET. If the
! speed is based on the path, then acceleration limits are specified using
! functions SPEED_AX_BRAKE, SPEED_AX_THROTTLE, SPEED_AY_LEFT, and SPEED_AY_RIGHT.

OPT_SC              3 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! is function of time and station, 4 -> target speed is
                      ! determined using path preview, 5 -> use acceleration
                      ! command Ax_SCcmd [I]
OPT_AUTO_RESET_IC   1 ! [D] Reset integral of speed error Vx_Err when Vx_Err changes
                      ! sign AND |Vx_IErr| > VX_IERR_DEAD_SC: 1 -> yes, 0 -> no
OPT_BK_SC           0 ! [D] Braking and SC: 0 -> turn controller off while brakes
                      ! are applied, 1 -> controller can use the brakes
OPT_SC_ENGINE_BRAKING 0 ! Use engine braking to control speed? 0 -> no, 1 -> yes
SPEED_ID_SC         1 ! SPEED_TARGET_ID for speed controller [I]
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain
VX_IERR_DEAD_SC     1 ; m ! [D] Integral control deadband for auto reset

!------------------------------------------------------------------------------------
! MOTION SENSORS
!------------------------------------------------------------------------------------
GPS_REF_ALT       250 ; m ! [D] GPS altitude when Z = 0
GPS_REF_LAT    42.231 ; deg ! [D] GPS latitude when Y = GPS_REF_Y [I]
GPS_REF_LONG  -83.727 ; deg ! [D] GPS longitude at GPS_REF_X and GPS_REF_Y
GPS_RANGE_Y      5000 ; m ! [D] Range in Y allowed before a GPS reset
GPS_REF_X           0 ; m ! [D] X coordinate at GPS_REF_LAT and GPS_REF_LONG
GPS_REF_Y           0 ; m ! [D] Y coordinate at GPS_REF_LAT

! NSENSOR_M         0 ! Number of installed custom motion sensors (read only)

!------------------------------------------------------------------------------------
! REFERENCE POINTS AND IMPORTED FORCES
!------------------------------------------------------------------------------------
! NREF_PT           1 ! Number of installed reference points and forces (read only)
DEFINE_REFERENCE_POINTS 1 ! VS Command to add reference points with imported forces

REFERENCE_POINT_NAME(1) 1 ; K and C Table (X=-1388mm, Z=200mm)
OPT_RP_BODY_TYPE(1) 1 ! Type of body where point is located: 1 -> sprung mass, 4 ->
                      ! mounted engine, 0 -> not used
OPT_RP_BODY_ID(1)   1 ! ID number of body where point is located
OPT_RP_FORCE_N(1)   0 ! Axes for imported Fx, Fy, Fz: 0 -> body, 1 -> N
X_RP(1)         -1388 ; mm ! X coordinate of reference point
Y_RP(1)             0 ; mm ! Y coordinate of reference point
Z_RP(1)           200 ; mm ! Z coordinate of reference point

!------------------------------------------------------------------------------------
! ABS CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_ABS_CONTROLLER  ! VS Command to install the built-in ABS controller

OPT_ABS_CTRL(1)     2 ! ABS control option, axle 1: 0 -> No ABS, 1-> Single control
                      ! channel for axle, 2 -> Independent control channels for
                      ! each wheel
ABS_SLIP_ON(1)   0.09 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(1)  0.15 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(1)         2 ; km/h ! Disable ABS for speed below this limit

OPT_ABS_CTRL(2)     2 ! ABS control option, axle 2
ABS_SLIP_ON(2)   0.09 ; - ! ABS: allow braking for slip below this limit
ABS_SLIP_OFF(2)  0.12 ; - ! ABS: release brake for slip above this limit
ABS_VMIN(2)         2 ; km/h ! Disable ABS for speed below this limit

!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTIONS
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber can be a nonlinear
! CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! SUSP_CAMBER_JNC_OTHER_SIDE of jounce (other side) (CONSTANT, COEFFICIENT, or
! TABLE). Camber from the calculation can be adjusted with CAMBER_GAIN and
! CAMBER_OFFSET. Jounce used in the calculation can be adjusted with JNC_SCALE_CAMBER
! and JNC_START_CAMBER. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_CAMBER and JNC2_START_CAMBER. The derivative of this function is
! used internally. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
CAMBER_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_CAMBER_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_CAMBER_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant camber component due to
                                           ! jounce (other side), axle 1, right
                                           ! side

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of camber (deg).
CAMBER_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -90, -60, -30, 0, 30, 60
 -88.86, -2.387, -1.9005, -1.4221, -0.95187, -0.4898, -0.035747
 -84.86, -2.477, -1.9893, -1.5098, -1.0385, -0.5754, -0.12028
 -80.86, -2.5666, -2.0778, -1.5972, -1.1248, -0.66064, -0.20446
 -76.86, -2.6559, -2.166, -1.6843, -1.2108, -0.74548, -0.28822
 -72.86, -2.7448, -2.2537, -1.7709, -1.2963, -0.82992, -0.37159
 -68.86, -2.8333, -2.3411, -1.8571, -1.3814, -0.91397, -0.45456
 -64.86, -2.9215, -2.4281, -1.943, -1.4662, -0.99765, -0.53715
 -60.86, -3.0093, -2.5148, -2.0285, -1.5506, -1.081, -0.61936
 -56.86, -3.0968, -2.6011, -2.1137, -1.6347, -1.1639, -0.70119
 -52.86, -3.1839, -2.6871, -2.1986, -1.7184, -1.2465, -0.78266
 -48.86, -3.2708, -2.7727, -2.283, -1.8017, -1.3287, -0.86376
 -44.86, -3.3573, -2.8581, -2.3672, -1.8847, -1.4105, -0.94451
 -40.86, -3.4435, -2.9431, -2.451, -1.9674, -1.4921, -1.0249
 -36.86, -3.5295, -3.0278, -2.5345, -2.0497, -1.5733, -1.105
 -32.86, -3.6151, -3.1122, -2.6178, -2.1318, -1.6541, -1.1847
 -28.86, -3.7004, -3.1963, -2.7007, -2.2135, -1.7347, -1.2641
 -24.86, -3.7855, -3.2801, -2.7833, -2.2949, -1.8149, -1.3432
 -20.86, -3.8703, -3.3637, -2.8656, -2.376, -1.8948, -1.4219
 -16.86, -3.9549, -3.447, -2.9476, -2.4568, -1.9744, -1.5003
 -12.86, -4.0392, -3.53, -3.0294, -2.5373, -2.0538, -1.5785
 -8.86, -4.1232, -3.6128, -3.1109, -2.6176, -2.1328, -1.6563
 -4.86, -4.207, -3.6953, -3.1921, -2.6976, -2.2115, -1.7338
 -0.86, -4.2906, -3.7775, -3.2731, -2.7773, -2.29, -1.8111
 3.14, -4.374, -3.8596, -3.3538, -2.8567, -2.3682, -1.888
 7.14, -4.4571, -3.9414, -3.4343, -2.9359, -2.4461, -1.9647
 11.14, -4.5401, -4.0229, -3.5145, -3.0148, -2.5238, -2.0411
 15.14, -4.6228, -4.1043, -3.5945, -3.0935, -2.6011, -2.1172
 19.14, -4.7053, -4.1854, -3.6743, -3.172, -2.6783, -2.193
 23.14, -4.7877, -4.2664, -3.7539, -3.2502, -2.7552, -2.2687
 27.14, -4.8698, -4.3471, -3.8332, -3.3282, -2.8318, -2.344
 31.14, -4.9518, -4.4277, -3.9124, -3.4059, -2.9082, -2.4191
 35.14, -5.0336, -4.508, -3.9913, -3.4835, -2.9844, -2.4939
 39.14, -5.1152, -4.5882, -4.07, -3.5608, -3.0604, -2.5685
 43.14, -5.1967, -4.6682, -4.1486, -3.6379, -3.1361, -2.6428
 47.14, -5.2781, -4.748, -4.2269, -3.7148, -3.2116, -2.717
 51.14, -5.3592, -4.8277, -4.3051, -3.7915, -3.2868, -2.7908
 55.14, -5.4403, -4.9071, -4.3831, -3.868, -3.3619, -2.8645
 59.14, -5.5211, -4.9865, -4.4609, -3.9444, -3.4367, -2.9379
 63.14, -5.6019, -5.0657, -4.5385, -4.0205, -3.5114, -3.011
 67.14, -5.6825, -5.1447, -4.616, -4.0964, -3.5858, -3.084
 71.14, -5.763, -5.2236, -4.6933, -4.1721, -3.66, -3.1567
 75.14, -5.8434, -5.3023, -4.7704, -4.2477, -3.734, -3.2292
 79.14, -5.9237, -5.3809, -4.8474, -4.3231, -3.8079, -3.3015
 83.14, -6.0038, -5.4594, -4.9242, -4.3983, -3.8815, -3.3736
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
JNC2_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce (other side) -
                         ! JNC2_START_CAMBER)

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of camber (deg).
CAMBER_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -90, -60, -30, 0, 30, 60
 -88.86, -2.387, -1.9005, -1.4221, -0.95187, -0.4898, -0.035747
 -84.86, -2.477, -1.9893, -1.5098, -1.0385, -0.5754, -0.12028
 -80.86, -2.5666, -2.0778, -1.5972, -1.1248, -0.66064, -0.20446
 -76.86, -2.6559, -2.166, -1.6843, -1.2108, -0.74548, -0.28822
 -72.86, -2.7448, -2.2537, -1.7709, -1.2963, -0.82992, -0.37159
 -68.86, -2.8333, -2.3411, -1.8571, -1.3814, -0.91397, -0.45456
 -64.86, -2.9215, -2.4281, -1.943, -1.4662, -0.99765, -0.53715
 -60.86, -3.0093, -2.5148, -2.0285, -1.5506, -1.081, -0.61936
 -56.86, -3.0968, -2.6011, -2.1137, -1.6347, -1.1639, -0.70119
 -52.86, -3.1839, -2.6871, -2.1986, -1.7184, -1.2465, -0.78266
 -48.86, -3.2708, -2.7727, -2.283, -1.8017, -1.3287, -0.86376
 -44.86, -3.3573, -2.8581, -2.3672, -1.8847, -1.4105, -0.94451
 -40.86, -3.4435, -2.9431, -2.451, -1.9674, -1.4921, -1.0249
 -36.86, -3.5295, -3.0278, -2.5345, -2.0497, -1.5733, -1.105
 -32.86, -3.6151, -3.1122, -2.6178, -2.1318, -1.6541, -1.1847
 -28.86, -3.7004, -3.1963, -2.7007, -2.2135, -1.7347, -1.2641
 -24.86, -3.7855, -3.2801, -2.7833, -2.2949, -1.8149, -1.3432
 -20.86, -3.8703, -3.3637, -2.8656, -2.376, -1.8948, -1.4219
 -16.86, -3.9549, -3.447, -2.9476, -2.4568, -1.9744, -1.5003
 -12.86, -4.0392, -3.53, -3.0294, -2.5373, -2.0538, -1.5785
 -8.86, -4.1232, -3.6128, -3.1109, -2.6176, -2.1328, -1.6563
 -4.86, -4.207, -3.6953, -3.1921, -2.6976, -2.2115, -1.7338
 -0.86, -4.2906, -3.7775, -3.2731, -2.7773, -2.29, -1.8111
 3.14, -4.374, -3.8596, -3.3538, -2.8567, -2.3682, -1.888
 7.14, -4.4571, -3.9414, -3.4343, -2.9359, -2.4461, -1.9647
 11.14, -4.5401, -4.0229, -3.5145, -3.0148, -2.5238, -2.0411
 15.14, -4.6228, -4.1043, -3.5945, -3.0935, -2.6011, -2.1172
 19.14, -4.7053, -4.1854, -3.6743, -3.172, -2.6783, -2.193
 23.14, -4.7877, -4.2664, -3.7539, -3.2502, -2.7552, -2.2687
 27.14, -4.8698, -4.3471, -3.8332, -3.3282, -2.8318, -2.344
 31.14, -4.9518, -4.4277, -3.9124, -3.4059, -2.9082, -2.4191
 35.14, -5.0336, -4.508, -3.9913, -3.4835, -2.9844, -2.4939
 39.14, -5.1152, -4.5882, -4.07, -3.5608, -3.0604, -2.5685
 43.14, -5.1967, -4.6682, -4.1486, -3.6379, -3.1361, -2.6428
 47.14, -5.2781, -4.748, -4.2269, -3.7148, -3.2116, -2.717
 51.14, -5.3592, -4.8277, -4.3051, -3.7915, -3.2868, -2.7908
 55.14, -5.4403, -4.9071, -4.3831, -3.868, -3.3619, -2.8645
 59.14, -5.5211, -4.9865, -4.4609, -3.9444, -3.4367, -2.9379
 63.14, -5.6019, -5.0657, -4.5385, -4.0205, -3.5114, -3.011
 67.14, -5.6825, -5.1447, -4.616, -4.0964, -3.5858, -3.084
 71.14, -5.763, -5.2236, -4.6933, -4.1721, -3.66, -3.1567
 75.14, -5.8434, -5.3023, -4.7704, -4.2477, -3.734, -3.2292
 79.14, -5.9237, -5.3809, -4.8474, -4.3231, -3.8079, -3.3015
 83.14, -6.0038, -5.4594, -4.9242, -4.3983, -3.8815, -3.3736
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)
JNC2_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce (other side) -
                         ! JNC2_START_CAMBER)

! CC_FX: Compliance: wheel camber due to in- and out-phase Fx. Camber displacement
! can be a nonlinear CARPET function of force (other side) and force or a function of
! force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Camber displacement from the calculation can be adjusted with
! CC_FX_GAIN and CC_FX_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_CC_FX and F_START_CC_FX. Force (other side) used in the calculation can be
! adjusted with F2_SCALE_CC_FX and F2_START_CC_FX. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: camber displacement per unit force (deg/N),
                         ! axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of camber displacement (deg).
CC_FX_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -3000, 0, 3000
 -3000, -1.54403, -1.67875, -1.86413
 -2700, -1.64493, -1.7809, -1.96784
 -2400, -1.74798, -1.88521, -2.07376
 -2100, -1.85323, -1.99176, -2.18192
 -1800, -1.96073, -2.10057, -2.2924
 -1500, -2.07054, -2.21171, -2.40523
 -1200, -2.18269, -2.32523, -2.52048
 -900, -2.29725, -2.44119, -2.63819
 -600, -2.41428, -2.55963, -2.75843
 -300, -2.53382, -2.68062, -2.88125
 0, -2.65594, -2.80421, -3.00672
 300, -2.78069, -2.93047, -3.13489
 600, -2.90815, -3.05946, -3.26582
 900, -3.03836, -3.19123, -3.39958
 1200, -3.17139, -3.32587, -3.53624
 1500, -3.30731, -3.46342, -3.67587
 1800, -3.44619, -3.60396, -3.81853
 2100, -3.5881, -3.74756, -3.96429
 2400, -3.7331, -3.8943, -4.11323
 2700, -3.88127, -4.04424, -4.26542
 3000, -4.03268, -4.19745, -4.42094
ENDTABLE
CC_FX_GAIN(2,1)     1 ! Gain multiplied with calculated value to get camber
                      ! displacement
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)
F2_START_CC_FX(2,1) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_CC_FX(2,1) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_CC_FX)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of camber displacement (deg).
CC_FX_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -3000, 0, 3000
 -3000, -1.54403, -1.67875, -1.86413
 -2700, -1.64493, -1.7809, -1.96784
 -2400, -1.74798, -1.88521, -2.07376
 -2100, -1.85323, -1.99176, -2.18192
 -1800, -1.96073, -2.10057, -2.2924
 -1500, -2.07054, -2.21171, -2.40523
 -1200, -2.18269, -2.32523, -2.52048
 -900, -2.29725, -2.44119, -2.63819
 -600, -2.41428, -2.55963, -2.75843
 -300, -2.53382, -2.68062, -2.88125
 0, -2.65594, -2.80421, -3.00672
 300, -2.78069, -2.93047, -3.13489
 600, -2.90815, -3.05946, -3.26582
 900, -3.03836, -3.19123, -3.39958
 1200, -3.17139, -3.32587, -3.53624
 1500, -3.30731, -3.46342, -3.67587
 1800, -3.44619, -3.60396, -3.81853
 2100, -3.5881, -3.74756, -3.96429
 2400, -3.7331, -3.8943, -4.11323
 2700, -3.88127, -4.04424, -4.26542
 3000, -4.03268, -4.19745, -4.42094
ENDTABLE
CC_FX_GAIN(2,2)     1 ! Gain multiplied with calculated value to get camber
                      ! displacement
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get camber displacement
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)
F2_START_CC_FX(2,2) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_CC_FX(2,2) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_CC_FX)

! CD_MY: Compliance: suspension dive due to in- and out-phase My. Dive displacement
! can be a nonlinear CARPET function of moment (other side) and moment or a function
! of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. Dive displacement from the calculation can be adjusted with
! CD_MY_GAIN and CD_MY_OFFSET. Moment used in the calculation can be adjusted with
! M_SCALE_CD_MY and M_START_CD_MY. Moment (other side) used in the calculation can be
! adjusted with M2_SCALE_CD_MY and M2_START_CD_MY. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, left side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: dive displacement per unit moment (deg/N-m),
                         ! axle 2, right side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get dive displacement
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due in- and out-phase Fy. Inclination
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_FY_GAIN and CI_FY_OFFSET. Force used in the calculation can
! be adjusted with F_SCALE_CI_FY and F_START_CI_FY. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_CI_FY and F2_START_CI_FY. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of inclination displacement
! (deg).
CI_FY_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -3000, 0, 3000
 -3000, -0.482498, -0.927606, -1.39192
 -2700, -0.150306, -0.594455, -1.05863
 -2400, 0.179586, -0.263581, -0.72759
 -2100, 0.507152, 0.0649881, -0.398816
 -1800, 0.832368, 0.391228, -0.0723395
 -1500, 1.15521, 0.715117, 0.251816
 -1200, 1.47567, 1.03663, 0.573628
 -900, 1.79372, 1.35576, 0.893077
 -600, 2.10935, 1.67247, 1.21014
 -300, 2.42254, 1.98677, 1.52481
 0, 2.73328, 2.29863, 1.83707
 300, 3.04156, 2.60804, 2.1469
 600, 3.34738, 2.91499, 2.45429
 900, 3.65073, 3.21948, 2.75923
 1200, 3.9516, 3.5215, 3.06172
 1500, 4.24998, 3.82104, 3.36175
 1800, 4.54589, 4.1181, 3.65931
 2100, 4.83931, 4.41268, 3.95441
 2400, 5.13025, 4.70478, 4.24703
 2700, 5.41871, 4.99439, 4.53718
 3000, 5.70469, 5.28153, 4.82485
ENDTABLE
CI_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)
F2_START_CI_FY(2,1) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_CI_FY(2,1) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_CI_FY)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of inclination displacement
! (deg).
CI_FY_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -3000, 0, 3000
 -3000, -4.82485, -5.28153, -5.70496
 -2700, -4.53718, -4.99439, -5.41898
 -2400, -4.24703, -4.70478, -5.13052
 -2100, -3.95441, -4.41268, -4.83958
 -1800, -3.65931, -4.1181, -4.54616
 -1500, -3.36175, -3.82104, -4.25026
 -1200, -3.06172, -3.5215, -3.95187
 -900, -2.75923, -3.21948, -3.651
 -600, -2.45429, -2.91499, -3.34766
 -300, -2.1469, -2.60804, -3.04184
 0, -1.83707, -2.29863, -2.73356
 300, -1.52481, -1.98677, -2.42282
 600, -1.21014, -1.67247, -2.10963
 900, -0.893077, -1.35576, -1.794
 1200, -0.573628, -1.03663, -1.47595
 1500, -0.251816, -0.715117, -1.1555
 1800, 0.0723395, -0.391228, -0.832654
 2100, 0.398816, -0.0649881, -0.507438
 2400, 0.72759, 0.263581, -0.179873
 2700, 1.05863, 0.594455, 0.150018
 3000, 1.39192, 0.927606, 0.482209
ENDTABLE
CI_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get inclination
                      ! displacement
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)
F2_START_CI_FY(2,2) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_CI_FY(2,2) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_CI_FY)

! CI_MZ: Compliance: inclination of wheel due to in- and out-phase Mz. Inclination
! displacement can be a nonlinear CARPET function of moment (other side) and moment
! or a function of moment (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Inclination displacement from the calculation
! can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET. Moment used in the calculation
! can be adjusted with M_SCALE_CI_MZ and M_START_CI_MZ. Moment (other side) used in
! the calculation can be adjusted with M2_SCALE_CI_MZ and M2_START_CI_MZ. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: inclination displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get inclination
                      ! displacement
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.65144 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.65144 ! Coefficient: damper compression per unit jounce
                                  ! at wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.65144 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.65144 ! Coefficient: jounce stop deflection per unit
                                   ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 1 ! Coefficient: jounce stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.65144 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.65144 ! Coefficient: rebound stop deflection per unit
                                   ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 1 ! Coefficient: rebound stop deflection per unit jounce
                             ! at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.65144 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), axle 1, left
                                      ! side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.65144 ! Coefficient: lower spring seat movement per
                                      ! unit jounce at wheel (mm/mm), axle 1, right
                                      ! side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, left
                                    ! side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, right
                                    ! side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to in- and out-phase Fy. Steer displacement can be a
! nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Steer displacement from the calculation can be adjusted with CS_FY_GAIN
! and CS_FY_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CS_FY
! and F_START_CS_FY. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CS_FY and F2_START_CS_FY. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -2.7e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -2.7e-07 ! Coefficient: Steer displacement per unit force
                                ! (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of Steer displacement (deg).
CS_FY_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -3000, 0, 3000
 -3000, 1.7152, 1.65854, 1.61732
 -2700, 1.49022, 1.4341, 1.39246
 -2400, 1.26695, 1.21129, 1.16916
 -2100, 1.04538, 0.9901, 0.947406
 -1800, 0.825501, 0.77053, 0.727207
 -1500, 0.607313, 0.552576, 0.508559
 -1200, 0.390805, 0.336233, 0.291461
 -900, 0.175972, 0.121495, 0.0759087
 -600, -0.0371953, -0.0916427, -0.1381
 -300, -0.248704, -0.303187, -0.35057
 0, -0.458564, -0.513143, -0.561503
 300, -0.666783, -0.721519, -0.770906
 600, -0.873371, -0.928322, -0.978781
 900, -1.07834, -1.13356, -1.18513
 1200, -1.28169, -1.33723, -1.38997
 1500, -1.48344, -1.53936, -1.59329
 1800, -1.68359, -1.73994, -1.79511
 2100, -1.88217, -1.93898, -1.99543
 2400, -2.07916, -2.1365, -2.19425
 2700, -2.27459, -2.3325, -2.39158
 3000, -2.46847, -2.52698, -2.58742
ENDTABLE
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)
F2_START_CS_FY(2,1) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_CS_FY(2,1) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_CS_FY)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of Steer displacement (deg).
CS_FY_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -3000, 0, 3000
 -3000, 2.58742, 2.52698, 2.46843
 -2700, 2.39158, 2.3325, 2.27456
 -2400, 2.19425, 2.1365, 2.07912
 -2100, 1.99543, 1.93898, 1.88213
 -1800, 1.79511, 1.73994, 1.68356
 -1500, 1.59329, 1.53936, 1.4834
 -1200, 1.38997, 1.33723, 1.28165
 -900, 1.18513, 1.13356, 1.0783
 -600, 0.978781, 0.928322, 0.873333
 -300, 0.770906, 0.721519, 0.666745
 0, 0.561503, 0.513143, 0.458526
 300, 0.35057, 0.303187, 0.248666
 600, 0.1381, 0.0916427, 0.0371565
 900, -0.0759087, -0.121495, -0.176011
 1200, -0.291461, -0.336233, -0.390844
 1500, -0.508559, -0.552576, -0.607352
 1800, -0.727207, -0.77053, -0.825542
 2100, -0.947406, -0.9901, -1.04542
 2400, -1.16916, -1.21129, -1.26699
 2700, -1.39246, -1.4341, -1.49027
 3000, -1.61732, -1.65854, -1.71524
ENDTABLE
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get Steer
                      ! displacement
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get Steer displacement
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)
F2_START_CS_FY(2,2) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_CS_FY(2,2) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_CS_FY)

! CS_MZ: Compliance: steer due to in- and out-phase Mz. Steer displacement can be a
! nonlinear CARPET function of moment and moment or a function of moment (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steer displacement from the calculation can be adjusted with CS_MZ_GAIN and
! CS_MZ_OFFSET. Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. Moment used in the calculation can be adjusted with M2_SCALE_CS_MZ
! and M2_START_CS_MZ. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 3.8e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 3.8e-05 ! Coefficient: steer displacement per unit moment
                               ! (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get steer
                      ! displacement
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, left side
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 0 ! Coefficient: steer displacement per unit moment
                         ! (deg/N-m), axle 2, right side
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get steer displacement
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: wheel toe due to in- and out-phase Fx. Toe displacement can be
! a nonlinear CARPET function of force (other side) and force or a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Toe displacement from the calculation can be adjusted with CT_FX_GAIN
! and CT_FX_OFFSET. Force used in the calculation can be adjusted with F_SCALE_CT_FX
! and F_START_CT_FX. Force (other side) used in the calculation can be adjusted with
! F2_SCALE_CT_FX and F2_START_CT_FX. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

CT_FX_COEFFICIENT(1,1) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, left side
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 0 ! Coefficient: toe displacement per unit force (deg/N),
                         ! axle 1, right side
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0.000625777 ! Coefficient: toe displacement per unit force
                                   ! (deg/N), axle 2, left side
CT_FX_GAIN(2,1)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0.000625777 ! Coefficient: toe displacement per unit force
                                   ! (deg/N), axle 2, right side
CT_FX_GAIN(2,2)     1 ! Gain multiplied with calculated value to get toe
                      ! displacement
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get toe displacement
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral displacement of wheel due to in- and out-phase Fy .
! Lateral displacement can be a nonlinear CARPET function of force (other side) and
! force or a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Lateral displacement from the
! calculation can be adjusted with C_LAT_GAIN and C_LAT_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_C_LAT and F_START_C_LAT. Force (other
! side) used in the calculation can be adjusted with F2_SCALE_C_LAT and
! F2_START_C_LAT. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-05 ! Coefficient: lateral displacement per unit force
                               ! (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of lateral displacement (mm).
C_LAT_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -3000, 0, 3000
 -3000, -16.627, -12.8946, -9.37381
 -2700, -14.8914, -11.1555, -7.62097
 -2400, -13.1816, -9.44156, -5.89265
 -2100, -11.4972, -7.75235, -4.18839
 -1800, -9.83769, -6.08737, -2.50774
 -1500, -8.20253, -4.44612, -0.850222
 -1200, -6.59122, -2.82812, 0.784605
 -900, -5.00327, -1.2329, 2.3972
 -600, -3.43817, 0.34003, 3.98801
 -300, -1.89543, 1.89113, 5.55747
 0, -0.374564, 3.42087, 7.10602
 300, 1.1249, 4.92971, 8.6341
 600, 2.60344, 6.41808, 10.1421
 900, 4.06151, 7.88644, 11.6305
 1200, 5.49956, 9.33521, 13.0997
 1500, 6.91805, 10.7648, 14.55
 1800, 8.3174, 12.1757, 15.9819
 2100, 9.69804, 13.5682, 17.3958
 2400, 11.0604, 14.9428, 18.792
 2700, 12.4049, 16.2999, 20.1709
 3000, 13.7318, 17.6398, 21.5328
ENDTABLE
C_LAT_GAIN(2,1)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT)
F2_START_C_LAT(2,1) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_C_LAT(2,1) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_C_LAT)

! 2D table: row 1 has "0" (place holder) followed by 3 values of force (other side)
! (N). Other rows have force (N) followed by 3 values of lateral displacement (mm).
C_LAT_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -3000, 0, 3000
 -3000, -21.5328, -17.6398, -13.7292
 -2700, -20.1709, -16.2999, -12.4022
 -2400, -18.792, -14.9428, -11.0578
 -2100, -17.3958, -13.5682, -9.69543
 -1800, -15.9819, -12.1757, -8.31479
 -1500, -14.55, -10.7648, -6.91545
 -1200, -13.0997, -9.33521, -5.49697
 -900, -11.6305, -7.88644, -4.05892
 -600, -10.1421, -6.41808, -2.60085
 -300, -8.6341, -4.92971, -1.12232
 0, -7.10602, -3.42087, 0.377141
 300, -5.55747, -1.89113, 1.898
 600, -3.98801, -0.34003, 3.44074
 900, -2.3972, 1.2329, 5.00584
 1200, -0.784605, 2.82812, 6.59379
 1500, 0.850222, 4.44612, 8.2051
 1800, 2.50774, 6.08737, 9.84025
 2100, 4.18839, 7.75235, 11.4998
 2400, 5.89265, 9.44156, 13.1842
 2700, 7.62097, 11.1555, 14.8939
 3000, 9.37381, 12.8946, 16.6296
ENDTABLE
C_LAT_GAIN(2,2)     1 ! Gain multiplied with calculated value to get lateral
                      ! displacement
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get lateral displacement
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT)
F2_START_C_LAT(2,2) 0 ; N ! Offset subtracted from force (other side)
F2_SCALE_C_LAT(2,2) 1 ! Scale factor divided into (force (other side) -
                      ! F2_START_C_LAT)

! C_LONG: Compliance: wheel longitudinal displacement due to in- and out-phase Fx. X
! displacement can be a nonlinear CARPET function of force (other side) and force or
! a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. X displacement from the calculation can be
! adjusted with C_LONG_GAIN and C_LONG_OFFSET. Force used in the calculation can be
! adjusted with F_SCALE_C_LONG and F_START_C_LONG. Force (other side) used in the
! calculation can be adjusted with F2_SCALE_C_LONG and F2_START_C_LONG. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-05 ! Coefficient: X displacement per unit force (mm/N),
                              ! axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1) 0.00343994 ! Coefficient: X displacement per unit force
                                   ! (mm/N), axle 2, left side
C_LONG_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,2) 0.00343994 ! Coefficient: X displacement per unit force
                                   ! (mm/N), axle 2, right side
C_LONG_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X displacement
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X displacement
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 0, 0
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 153 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 153 ! Coefficient: spring force per unit spring compression
                             ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

FS_COMP_COEFFICIENT(2,1) 82 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, left side
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

FS_COMP_COEFFICIENT(2,2) 82 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 2, right side
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 153 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 153 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

FS_EXT_COEFFICIENT(2,1) 82 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, left side
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

FS_EXT_COEFFICIENT(2,2) 82 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 2, right side
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.3
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.3
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

FX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -90, -2
 0, 0
 90, 2
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical force. Vertical force is a function of tire compression
! (COEFFICIENT or TABLE). Vertical force from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire compression used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1) 268 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2) 268 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1) 268 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2) 268 ! Coefficient: vertical force per unit tire compression
                             ! (N/mm), axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical force
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical force
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire compression
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire compression -
                         ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST.

! 1D table: col 1 = torsion bar torque (N-m), col 2 = boost force (N)
F_BOOST_R_TABLE SPLINE ! spline interpolation and extrapolation
 -8.85, -7841.4
 -8.7, -7640.4
 -8.55, -7439.3
 -8.4, -7238.2
 -8.25, -7037.2
 -8.1, -6836.1
 -7.95, -6635
 -7.8, -6434
 -7.65, -6232.9
 -7.5, -6031.9
 -7.35, -5830.8
 -7.2, -5629.7
 -7.05, -5428.7
 -6.9, -5227.6
 -6.75, -5026.5
 -6.6, -4825.5
 -6.45, -4624.4
 -6.3, -4423.4
 -5.7, -3759.9
 -5.55, -3629.2
 -5.4, -3498.5
 -5.25, -3367.8
 -5.1, -3237.1
 -4.95, -3106.4
 -4.8, -2975.7
 -4.65, -2845
 -4.5, -2714.3
 -4.35, -2583.6
 -4.2, -2453
 -4.05, -2322.3
 -3.9, -2191.6
 -3.75, -2060.9
 -3.6, -1930.2
 -3.45, -1799.5
 -3.3, -1668.8
 -3.15, -1538.1
 -3, -1407.4
 -2.85, -1276.7
 -2.7, -1146.1
 -2.55, -1015.4
 -2.4, -884.67
 -2.25, -753.98
 -2.1, -623.29
 -1.95, -492.6
 -1.8, -361.91
 -1.2, -80.425
 -1.05, -70.372
 -0.9, -60.319
 -0.75, -50.265
 -0.6, -40.212
 -0.45, -30.159
 -0.3, -20.106
 -0.15, -10.053
 0, 0
 0.15, 10.053
 0.3, 20.106
 0.45, 30.159
 0.6, 40.212
 0.75, 50.265
 0.9, 60.319
 1.05, 70.372
 1.2, 80.425
 1.8, 361.91
 1.95, 492.6
 2.1, 623.29
 2.25, 753.98
 2.4, 884.67
 2.55, 1015.4
 2.7, 1146.1
 2.85, 1276.7
 3, 1407.4
 3.15, 1538.1
 3.3, 1668.8
 3.45, 1799.5
 3.6, 1930.2
 3.75, 2060.9
 3.9, 2191.6
 4.05, 2322.3
 4.2, 2453
 4.35, 2583.6
 4.5, 2714.3
 4.65, 2845
 4.8, 2975.7
 4.95, 3106.4
 5.1, 3237.1
 5.25, 3367.8
 5.4, 3498.5
 5.55, 3629.2
 5.7, 3759.9
 6.3, 4423.4
 6.45, 4624.4
 6.6, 4825.5
 6.75, 5026.5
 6.9, 5227.6
 7.05, 5428.7
 7.2, 5629.7
 7.35, 5830.8
 7.5, 6031.9
 7.65, 6232.9
 7.8, 6434
 7.95, 6635
 8.1, 6836.1
 8.25, 7037.2
 8.4, 7238.2
 8.55, 7439.3
 8.7, 7640.4
 8.85, 7841.4
 9, 8042.5
ENDTABLE
F_BOOST_R_GAIN      1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET    0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST  0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST  1 ! Scale factor divided into (torsion bar torque -
                      ! M_TB_START_F_BOOST)
F_BOOST_R_COMBINE ADD ! How to combine the two components
SET_UNITS F_BOOST_R_V_TABLE N ;
F_BOOST_R_V_CONSTANT 0 ; N ! Constant boost force component due to speed

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

F_JNC_STOP_CONSTANT(2,1) 0 ; N ! Constant force, axle 2, left side
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force

F_JNC_STOP_CONSTANT(2,2) 0 ; N ! Constant force, axle 2, right side
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

F_REB_STOP_CONSTANT(2,1) 0 ; N ! Constant force, axle 2, left side
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force

F_REB_STOP_CONSTANT(2,2) 0 ; N ! Constant force, axle 2, right side
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force

! ISHAFT_KIN: Intermediate shaft kinematics. Shaft output angle is a function of
! intermediate shaft input angle (CONSTANT, COEFFICIENT, or TABLE). Shaft output
! angle from the calculation can be adjusted with ISHAFT_KIN_GAIN and
! ISHAFT_KIN_OFFSET. An inverse version of this function is used internally. The
! derivative of this function is used internally.

ISHAFT_KIN_COEFFICIENT 1 ! [D] Coefficient: Shaft output angle per unit intermediate
                         ! shaft input angle (deg/deg)
ISHAFT_KIN_GAIN     1 ! Gain multiplied with calculated value to get Shaft output
                      ! angle
ISHAFT_KIN_OFFSET   0 ; deg ! Offset added (after gain) to get Shaft output angle

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(2,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(2,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2) 1 ! Scale factor divided into dynamic tire load

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 90 ; mm ! Constant tire contact length, axle 1, left side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 90 ; mm ! Constant tire contact length, axle 1, right side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 90 ; mm ! Constant tire contact length, axle 2, left side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 90 ; mm ! Constant tire contact length, axle 2, right side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 215 ; mm ! Constant tire contact width, axle 1, left side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 215 ; mm ! Constant tire contact width, axle 1, right side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 215 ; mm ! Constant tire contact width, axle 2, left side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 215 ; mm ! Constant tire contact width, axle 2, right side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_X from the calculation can be
! adjusted with L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the
! calculation can be adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_X. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_X_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1) LINEAR ! axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2) LINEAR ! axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1) LINEAR ! axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2) LINEAR ! axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2) 6500 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_Y from the calculation can be
! adjusted with L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the
! calculation can be adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_Y. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_Y_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2) 6500 ! Scale factor divided into Fz

! MU_ROAD: Tire/road friction coefficient (MU) for a road surface. Use MU = -1 for
! original tire data (no scaling). MU can be a nonlinear CARPET function of lateral
! position and station or a function of station (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function MU_ROAD_L of lateral position (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. MU from the
! calculation can be adjusted with MU_ROAD_GAIN and MU_ROAD_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_MU_ROAD and SSTART_MU_ROAD. Lateral
! position used in the calculation can be adjusted with L_SCALE_MU_ROAD and
! L_START_MU_ROAD. This configurable function supports 200 datasets; if indices shown
! below are not used, e.g., (2), the current value of the index IROAD is used to
! identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 1e-05 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) ADD ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 0 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 384 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 1
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(1) N-m ;
MX_AUX_FSTATIC_CONSTANT(1) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 1

MX_AUX_COEFFICIENT(2) 344 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg), axle 2
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) ADD ! How to combine the two components
SET_UNITS MX_AUX_FSTATIC_TABLE(2) N-m ;
MX_AUX_FSTATIC_CONSTANT(2) 0 ; N-m ! Constant auxiliary roll moment component due to
                             ! static axle load, axle 2

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.17
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.17
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

MY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 250 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 250 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 100 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 100 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0
 -135, 0.2
 -75, 0
 -35, -0.2
 0, 0
 35, 0.2
 75, 0
 135, -0.2
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 7.452673542, 14.64959626, 21.54915219, 28.13312762, 34.39085259, 40.31966384, 45.90179517, 51.15086512
 1, 15.07509942, 29.65361007, 43.65497795, 57.03124096, 69.75540841, 81.79688942, 93.13987976, 103.7828717
 1.5, 21.32663766, 42.23959603, 62.62702384, 82.4007136, 101.458924, 119.73241, 137.1329889, 153.6016139
 2, 23.73004713, 47.66537269, 71.73982093, 95.84980211, 119.855025, 143.5945442, 166.8858444, 189.5425159
 2.5, 21.99372876, 44.90685727, 68.84963178, 93.8087936, 119.7297538, 146.4726113, 173.8654352, 201.6658753
 3, 18.14074155, 37.59953072, 58.62214546, 81.36260258, 105.9217146, 132.3535328, 160.6255867, 190.6578153
 3.5, 14.06887262, 29.50822021, 46.63490127, 65.71737839, 86.98378571, 110.6688723, 136.9480163, 165.9816456
 4, 10.58879803, 22.42678885, 35.84515029, 51.13312027, 68.60532091, 88.57797644, 111.3885331, 137.3644113
 4.5, 7.836285874, 16.75003754, 27.05137706, 39.02310043, 52.98429643, 69.2748367, 88.29561436, 110.4824822
 5, 5.710646062, 12.34118771, 20.14977005, 29.40150275, 40.39566248, 53.46178464, 68.99360804, 87.46296931
 5.5, 4.07982336, 8.927362915, 14.78169293, 21.86498968, 30.44124912, 40.81873231, 53.37193915, 68.54232854
 6, 2.811946049, 6.269915035, 10.58617046, 15.94927125, 22.58605235, 30.78104994, 40.8620161, 53.23546322
 6.5, 1.809380108, 4.181237372, 7.276479254, 11.26423176, 16.35526284, 22.77307317, 30.83240551, 40.88490488
 7, 1.017756163, 2.511195538, 4.625718621, 7.513991597, 11.3507223, 16.3372078, 22.73749225, 30.883169
 7.5, 0.369513987, 1.15582271, 2.480092299, 4.474975134, 7.292975012, 11.10446589, 16.15025363, 22.71583675
 8, -0.162075367, 0.043765673, 0.721583733, 1.980181037, 3.957411103, 6.806902585, 10.73176979, 15.98696291
 8.5, -0.602193938, -0.881818771, -0.745387126, -0.095373299, 1.181978846, 3.231046404, 6.225841262, 10.39411024
 9, -0.97481139, -1.664305144, -1.979096729, -1.842828165, -1.14775825, 0.225857262, 2.442153575, 5.686489692
 9.5, -1.292306991, -2.32902221, -3.035038589, -3.332473734, -3.135072744, -2.329438581, -0.776874005, 1.691308235
 10, -1.56648864, -2.900098932, -3.939285249, -4.615010055, -4.839588026, -4.52159855, -3.535071449, -1.726082378
 10.5, -1.803440111, -3.400787263, -4.727495909, -5.722504698, -6.318220394, -6.422237318, -5.925739841, -4.688293086
 11, -2.014297278, -3.842957305, -5.423365433, -6.702189151, -7.614620174, -8.083094353, -8.009487844, -7.265664817
 11.5, -2.204684941, -4.232685161, -6.039089273, -7.567096051, -8.759775421, -9.548335669, -9.84446809, -9.537350008
 12, -2.374769821, -4.581170508, -6.58629456, -8.335044607, -9.778075858, -10.85501245, -11.47540471, -11.55036416
 12.5, -2.524628574, -4.899385963, -7.081811426, -9.028944772, -10.69321243, -12.02212719, -12.93407193, -13.34418312
 13, -2.659614692, -5.18206113, -7.525873371, -9.654731928, -11.51715671, -13.07371476, -14.24552626, -14.95701408
 13.5, -2.785051214, -5.44533402, -7.93486284, -10.22368634, -12.26713697, -14.02759627, -15.4341518, -16.41431684
 14, -2.900886747, -5.683772275, -8.308786566, -10.741359, -12.95456424, -14.89553819, -16.51227411, -17.73501202
 14.5, -3.0070464, -5.90266629, -8.65296303, -11.22424815, -13.58501207, -15.69481182, -17.50344211, -18.94938784
 15, -3.108856781, -6.107300207, -8.972736703, -11.66670627, -14.16401758, -16.43109525, -18.41943062, -20.05778026
 15.5, -3.200874527, -6.297540242, -9.267919486, -12.0795864, -14.70822789, -17.11564214, -19.2601596, -21.08398821
 16, -3.288368067, -6.478698001, -9.543773415, -12.46265559, -15.20613473, -17.74823957, -20.04291125, -22.03386974
 16.5, -3.371285052, -6.645156434, -9.800138218, -12.82121134, -15.68004052, -18.34004477, -20.77325299, -22.91911194
 17, -3.444155182, -6.80224243, -10.04775839, -13.16062475, -16.11834359, -18.89649458, -21.4508578, -23.7513539
 17.5, -3.51767811, -6.949795577, -10.27549077, -13.48061809, -16.53206877, -19.41724065, -22.09294179, -24.52428255
 18, -3.586460617, -7.093173326, -10.49410313, -13.78092829, -16.92659322, -19.90772689, -22.69913017, -25.25541387
 18.5, -3.650354932, -7.226767057, -10.7035133, -14.06692276, -17.29591764, -20.37338313, -23.26906222, -25.93840645
 19, -3.714753523, -7.350468858, -10.89791843, -14.33842558, -17.65119399, -20.81386673, -23.80827793, -26.59083669
 19.5, -3.774223363, -7.475134313, -11.0883277, -14.59514517, -17.9864457, -21.23469831, -24.31639205, -27.20627504
 20, -3.82864507, -7.589694958, -11.26899314, -14.84257465, -18.30713281, -21.63551111, -24.80482183, -27.79642297
 20.5, -3.883444674, -7.699531799, -11.4398002, -15.08052062, -18.61302126, -22.01613348, -25.27332363, -28.35487978
 21, -3.938581507, -7.810140861, -11.60058143, -15.30881042, -18.90384817, -22.38200175, -25.71561638, -28.88729382
 21.5, -3.98858859, -7.910320562, -11.76242427, -15.5215519, -19.18518042, -22.73295339, -26.14329644, -29.39940291
 22, -4.033339755, -8.011113636, -11.91403297, -15.73571238, -19.45686391, -23.0687127, -26.55011218, -29.88481795
 22.5, -4.083905407, -8.106879608, -12.06087168, -15.93401885, -19.71286029, -23.3890387, -26.94178715, -30.35535808
 23, -4.129172965, -8.197542219, -12.20287534, -16.12778154, -19.96467699, -23.70553312, -27.3240656, -30.80467474
 23.5, -4.169045156, -8.288726867, -12.3399873, -16.31687009, -20.20626286, -24.00622562, -27.68466753, -31.24470109
 24, -4.214743531, -8.374633295, -12.47205046, -16.50118665, -20.44338012, -24.29677306, -28.04149426, -31.66296255
 24.5, -4.25497, -8.460964357, -12.60476871, -16.6748672, -20.67005308, -24.57708584, -28.38227937, -32.06531652
 25, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
 26, -4.295425512, -8.541981986, -12.72655819, -16.84352825, -20.89195742, -24.84695846, -28.70674458, -32.45772358
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT 1.8 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT   30 ; MPa ! Constant brake pressure
PBK_CON_GAIN        1 ! Gain multiplied with calculated value to get brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

PBK_DL_COEFFICIENT(2,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, left side
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

PBK_DL_COEFFICIENT(2,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 2, right side
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -90, -32.68230746
 -89.1, -32.33877579
 -88.2, -31.99684282
 -87.3, -31.65644275
 -86.4, -31.31751213
 -85.5, -30.97998967
 -84.6, -30.64381621
 -83.7, -30.30893453
 -82.8, -29.97528928
 -81.9, -29.64282688
 -81, -29.31149541
 -80.1, -28.98124456
 -79.2, -28.65202552
 -78.3, -28.32379091
 -77.4, -27.9964947
 -76.5, -27.67009217
 -75.6, -27.34453983
 -74.7, -27.01979535
 -73.8, -26.69581753
 -72.9, -26.37256621
 -72, -26.05000226
 -71.1, -25.72808751
 -70.2, -25.4067847
 -69.3, -25.08605746
 -68.4, -24.76587025
 -67.5, -24.44618833
 -66.6, -24.12697771
 -65.7, -23.80820516
 -64.8, -23.4898381
 -63.9, -23.17184465
 -63, -22.85419356
 -62.1, -22.53685416
 -61.2, -22.21979639
 -60.3, -21.90299073
 -59.4, -21.5864082
 -58.5, -21.2700203
 -57.6, -20.95379905
 -56.7, -20.6377169
 -55.8, -20.32174677
 -54.9, -20.00586199
 -54, -19.69003629
 -53.1, -19.37424381
 -52.2, -19.05845902
 -51.3, -18.74265678
 -50.4, -18.42681227
 -49.5, -18.110901
 -48.6, -17.7948988
 -47.7, -17.47878176
 -46.8, -17.16252629
 -45.9, -16.84610904
 -45, -16.52950694
 -44.1, -16.21269716
 -43.2, -15.89565707
 -42.3, -15.57836432
 -41.4, -15.26079673
 -40.5, -14.94293233
 -39.6, -14.62474934
 -38.7, -14.30622619
 -37.8, -13.98734144
 -36.9, -13.66807384
 -36, -13.3484023
 -35.1, -13.02830587
 -34.2, -12.70776373
 -33.3, -12.38675522
 -32.4, -12.06525976
 -31.5, -11.74325694
 -30.6, -11.42072642
 -29.7, -11.09764799
 -28.8, -10.77400151
 -27.9, -10.44976696
 -27, -10.12492439
 -26.1, -9.799453938
 -25.2, -9.473335795
 -24.3, -9.14655024
 -23.4, -8.819077606
 -22.5, -8.490898283
 -21.6, -8.161992714
 -20.7, -7.832341388
 -19.8, -7.501924836
 -18.9, -7.170723626
 -18, -6.83871836
 -17.1, -6.505889664
 -16.2, -6.172218193
 -15.3, -5.837684618
 -14.4, -5.502269626
 -13.5, -5.165953918
 -12.6, -4.828718198
 -11.7, -4.490543179
 -10.8, -4.151409569
 -9.9, -3.811298077
 -9, -3.470189401
 -8.1, -3.128064233
 -7.2, -2.784903247
 -6.3, -2.440687102
 -5.4, -2.095396437
 -4.5, -1.749011868
 -3.6, -1.401513983
 -2.7, -1.052883344
 -1.8, -0.703100478
 -0.9, -0.352145878
 0, 0
 0.9, 0.35335674
 1.8, 0.70794397
 2.7, 1.063781362
 3.6, 1.420888636
 4.5, 1.779285564
 5.4, 2.138991968
 6.3, 2.500027726
 7.2, 2.862412773
 8.1, 3.226167105
 9, 3.591310778
 9.9, 3.95786391
 10.8, 4.325846688
 11.7, 4.695279365
 12.6, 5.066182263
 13.5, 5.438575778
 14.4, 5.812480378
 15.3, 6.187916606
 16.2, 6.564905083
 17.1, 6.94346651
 18, 7.323621668
 18.9, 7.705391421
 19.8, 8.088796718
 20.7, 8.473858592
 21.6, 8.860598168
 22.5, 9.249036656
 23.4, 9.639195362
 24.3, 10.03109568
 25.2, 10.42475911
 26.1, 10.82020723
 27, 11.21746172
 27.9, 11.61654439
 28.8, 12.01747711
 29.7, 12.42028188
 30.6, 12.82498079
 31.5, 13.23159605
 32.4, 13.64014997
 33.3, 14.05066497
 34.2, 14.4631636
 35.1, 14.87766851
 36, 15.29420246
 36.9, 15.71278834
 37.8, 16.13344918
 38.7, 16.55620809
 39.6, 16.98108834
 40.5, 17.40811334
 41.4, 17.83730659
 42.3, 18.26869176
 43.2, 18.70229265
 44.1, 19.13813319
 45, 19.57623748
 45.9, 20.01662974
 46.8, 20.45933437
 47.7, 20.90437591
 48.6, 21.35177906
 49.5, 21.80156871
 50.4, 22.25376989
 51.3, 22.70840783
 52.2, 23.16550794
 53.1, 23.62509581
 54, 24.08719725
 54.9, 24.55183824
 55.8, 25.01904499
 56.7, 25.48884395
 57.6, 25.96126176
 58.5, 26.43632533
 59.4, 26.9140618
 60.3, 27.39449859
 61.2, 27.87766337
 62.1, 28.36358411
 63, 28.85228908
 63.9, 29.34380686
 64.8, 29.83816635
 65.7, 30.33539681
 66.6, 30.83552786
 67.5, 31.33858951
 68.4, 31.84461216
 69.3, 32.35362665
 70.2, 32.86566428
 71.1, 33.3807568
 72, 33.8989365
 72.9, 34.42023618
 73.8, 34.94468922
 74.7, 35.4723296
 75.6, 36.00319194
 76.5, 36.53731154
 77.4, 37.07472442
 78.3, 37.61546736
 79.2, 38.15957797
 80.1, 38.70709473
 81, 39.25805703
 81.9, 39.81250528
 82.8, 40.37048091
 83.7, 40.93202649
 84.6, 41.4971858
 85.5, 42.06600389
 86.4, 42.63852718
 87.3, 43.21480358
 88.2, 43.79488254
 89.1, 44.37881522
 90, 44.96665455
ENDTABLE
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -90, -44.96665455
 -89.1, -44.37881522
 -88.2, -43.79488254
 -87.3, -43.21480358
 -86.4, -42.63852718
 -85.5, -42.06600389
 -84.6, -41.4971858
 -83.7, -40.93202649
 -82.8, -40.37048091
 -81.9, -39.81250528
 -81, -39.25805703
 -80.1, -38.70709473
 -79.2, -38.15957797
 -78.3, -37.61546736
 -77.4, -37.07472442
 -76.5, -36.53731154
 -75.6, -36.00319194
 -74.7, -35.4723296
 -73.8, -34.94468922
 -72.9, -34.42023618
 -72, -33.8989365
 -71.1, -33.3807568
 -70.2, -32.86566428
 -69.3, -32.35362665
 -68.4, -31.84461216
 -67.5, -31.33858951
 -66.6, -30.83552786
 -65.7, -30.33539681
 -64.8, -29.83816635
 -63.9, -29.34380686
 -63, -28.85228908
 -62.1, -28.36358411
 -61.2, -27.87766337
 -60.3, -27.39449859
 -59.4, -26.9140618
 -58.5, -26.43632533
 -57.6, -25.96126176
 -56.7, -25.48884395
 -55.8, -25.01904499
 -54.9, -24.55183824
 -54, -24.08719725
 -53.1, -23.62509581
 -52.2, -23.16550794
 -51.3, -22.70840783
 -50.4, -22.25376989
 -49.5, -21.80156871
 -48.6, -21.35177906
 -47.7, -20.90437591
 -46.8, -20.45933437
 -45.9, -20.01662974
 -45, -19.57623748
 -44.1, -19.13813319
 -43.2, -18.70229265
 -42.3, -18.26869176
 -41.4, -17.83730659
 -40.5, -17.40811334
 -39.6, -16.98108834
 -38.7, -16.55620809
 -37.8, -16.13344918
 -36.9, -15.71278834
 -36, -15.29420246
 -35.1, -14.87766851
 -34.2, -14.4631636
 -33.3, -14.05066497
 -32.4, -13.64014997
 -31.5, -13.23159605
 -30.6, -12.82498079
 -29.7, -12.42028188
 -28.8, -12.01747711
 -27.9, -11.61654439
 -27, -11.21746172
 -26.1, -10.82020723
 -25.2, -10.42475911
 -24.3, -10.03109568
 -23.4, -9.639195362
 -22.5, -9.249036656
 -21.6, -8.860598168
 -20.7, -8.473858592
 -19.8, -8.088796718
 -18.9, -7.705391421
 -18, -7.323621668
 -17.1, -6.94346651
 -16.2, -6.564905083
 -15.3, -6.187916606
 -14.4, -5.812480378
 -13.5, -5.438575778
 -12.6, -5.066182263
 -11.7, -4.695279365
 -10.8, -4.325846688
 -9.9, -3.95786391
 -9, -3.591310778
 -8.1, -3.226167105
 -7.2, -2.862412773
 -6.3, -2.500027726
 -5.4, -2.138991968
 -4.5, -1.779285564
 -3.6, -1.420888636
 -2.7, -1.063781362
 -1.8, -0.70794397
 -0.9, -0.35335674
 0, 0
 0.9, 0.352145878
 1.8, 0.703100478
 2.7, 1.052883344
 3.6, 1.401513983
 4.5, 1.749011868
 5.4, 2.095396437
 6.3, 2.440687102
 7.2, 2.784903247
 8.1, 3.128064233
 9, 3.470189401
 9.9, 3.811298077
 10.8, 4.151409569
 11.7, 4.490543179
 12.6, 4.828718198
 13.5, 5.165953918
 14.4, 5.502269626
 15.3, 5.837684618
 16.2, 6.172218193
 17.1, 6.505889664
 18, 6.83871836
 18.9, 7.170723626
 19.8, 7.501924836
 20.7, 7.832341388
 21.6, 8.161992714
 22.5, 8.490898283
 23.4, 8.819077606
 24.3, 9.14655024
 25.2, 9.473335795
 26.1, 9.799453938
 27, 10.12492439
 27.9, 10.44976696
 28.8, 10.77400151
 29.7, 11.09764799
 30.6, 11.42072642
 31.5, 11.74325694
 32.4, 12.06525976
 33.3, 12.38675522
 34.2, 12.70776373
 35.1, 13.02830587
 36, 13.3484023
 36.9, 13.66807384
 37.8, 13.98734144
 38.7, 14.30622619
 39.6, 14.62474934
 40.5, 14.94293233
 41.4, 15.26079673
 42.3, 15.57836432
 43.2, 15.89565707
 44.1, 16.21269716
 45, 16.52950694
 45.9, 16.84610904
 46.8, 17.16252629
 47.7, 17.47878176
 48.6, 17.7948988
 49.5, 18.110901
 50.4, 18.42681227
 51.3, 18.74265678
 52.2, 19.05845902
 53.1, 19.37424381
 54, 19.69003629
 54.9, 20.00586199
 55.8, 20.32174677
 56.7, 20.6377169
 57.6, 20.95379905
 58.5, 21.2700203
 59.4, 21.5864082
 60.3, 21.90299073
 61.2, 22.21979639
 62.1, 22.53685416
 63, 22.85419356
 63.9, 23.17184465
 64.8, 23.4898381
 65.7, 23.80820516
 66.6, 24.12697771
 67.5, 24.44618833
 68.4, 24.76587025
 69.3, 25.08605746
 70.2, 25.4067847
 71.1, 25.72808751
 72, 26.05000226
 72.9, 26.37256621
 73.8, 26.69581753
 74.7, 27.01979535
 75.6, 27.34453983
 76.5, 27.67009217
 77.4, 27.9964947
 78.3, 28.32379091
 79.2, 28.65202552
 80.1, 28.98124456
 81, 29.31149541
 81.9, 29.64282688
 82.8, 29.97528928
 83.7, 30.30893453
 84.6, 30.64381621
 85.5, 30.97998967
 86.4, 31.31751213
 87.3, 31.65644275
 88.2, 31.99684282
 89.1, 32.33877579
 90, 32.68230746
ENDTABLE
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1) 0.15625 ! Coefficient: rack displacement per unit pinion
                                   ! angle (mm/deg), axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get rack displacement

! ROAD_NEW_ID: Left/right boundary: 0 -> no boundary, -1 stop when L reaches
! boundary, > 0 ID of adjacent road. ID is a function of S (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. ID from the
! calculation can be adjusted with ROAD_NEW_ID_GAIN and ROAD_NEW_ID_OFFSET. S used in
! the calculation can be adjusted with SSCALE_ROAD_NEW_ID and SSTART_ROAD_NEW_ID.
! This configurable function supports 400 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IROAD and ISIDE are used to
! identify the dataset when reading data.

ROAD_NEW_ID_CONSTANT(1,1) 0 ; - ! [D] Constant ID, Road 1, left side boundary
ROAD_NEW_ID_OFFSET(1,1) 0 ; - ! Offset added (after gain) to get ID

ROAD_NEW_ID_CONSTANT(1,2) 0 ; - ! [D] Constant ID, Road 1, right side boundary
ROAD_NEW_ID_OFFSET(1,2) 0 ; - ! Offset added (after gain) to get ID

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! [D] Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! SPEED_TARGET: Speed controller target. Speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function SPEED_TARGET_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Speed from the
! calculation can be adjusted with SPEED_TARGET_GAIN and SPEED_TARGET_OFFSET. Time
! used in the calculation can be adjusted with TSCALE_SPEED_TARGET and
! TSTART_SPEED_TARGET. Station used in the calculation can be adjusted with
! SSCALE_SPEED_TARGET and SSTART_SPEED_TARGET. This configurable function supports
! 200 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index ISPEED is used to identify the dataset when reading data.

SPEED_TARGET_ID(1)  1  ! Procedure: K & C Opposed Fy
SPEED_TARGET_CONSTANT(1) 0 ; km/h ! Constant speed component due to time
SPEED_TARGET_GAIN(1) 1 ! Gain multiplied with calculated value to get speed
SPEED_TARGET_OFFSET(1) 0 ; km/h ! Offset added (after gain) to get speed
SPEED_TARGET_COMBINE(1) ADD ! How to combine the two components
SET_UNITS SPEED_TARGET_S_TABLE(1) km/h ;
SPEED_TARGET_S_CONSTANT(1) 0 ; km/h ! Constant speed component due to station

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                ! (deg/N-m), axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           ! M_KP_START_STEER_COMP)

! STEER_SW: Open loop steering wheel angle as a function of time. Steering wheel
! angle is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Steering wheel angle from the
! calculation can be adjusted with STEER_SW_GAIN and STEER_SW_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_STEER and TSTART_STEER.

STEER_SW_CONSTANT   0 ; deg ! Constant steering wheel angle
STEER_SW_OFFSET     0 ; deg ! Offset added (after gain) to get steering wheel angle

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive can be a
! nonlinear CARPET function of jounce (other side) and jounce or a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function SUSP_DIVE_JNC_OTHER_SIDE
! of jounce (other side) (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the
! calculation can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_DIVE and
! JNC_START_SUSP_DIVE. Jounce (other side) used in the calculation can be adjusted
! with JNC2_SCALE_SUSP_DIVE and JNC2_START_SUSP_DIVE. The derivative of this function
! is used internally. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1, left
                                         ! side

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
SUSP_DIVE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_DIVE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_DIVE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant suspension dive component
                                         ! due to jounce (other side), axle 1,
                                         ! right side

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of suspension dive (deg).
SUSP_DIVE_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -90, -60, -30, 0, 30, 60
 -92.645, -7.7443, -7.5325, -7.3276, -7.1294, -6.9375, -6.7516
 -88.645, -7.458, -7.2466, -7.0421, -6.8443, -6.6529, -6.4674
 -84.645, -7.1715, -6.9604, -6.7563, -6.5589, -6.3679, -6.1829
 -80.645, -6.8847, -6.6739, -6.4702, -6.2732, -6.0826, -5.8981
 -76.645, -6.5976, -6.3872, -6.1838, -5.9872, -5.797, -5.6129
 -72.645, -6.3103, -6.1002, -5.8971, -5.7009, -5.5111, -5.3274
 -68.645, -6.0227, -5.8129, -5.6102, -5.4143, -5.2248, -5.0415
 -64.645, -5.7349, -5.5253, -5.3229, -5.1273, -4.9382, -4.7552
 -60.645, -5.4469, -5.2375, -5.0354, -4.84, -4.6512, -4.4686
 -56.645, -5.1586, -4.9494, -4.7475, -4.5525, -4.364, -4.1816
 -52.645, -4.87, -4.6611, -4.4594, -4.2646, -4.0764, -3.8943
 -48.645, -4.5812, -4.3725, -4.171, -3.9764, -3.7884, -3.6067
 -44.645, -4.2922, -4.0836, -3.8823, -3.6879, -3.5001, -3.3187
 -40.645, -4.0029, -3.7944, -3.5933, -3.3991, -3.2115, -3.0303
 -36.645, -3.7134, -3.505, -3.304, -3.11, -2.9226, -2.7416
 -32.645, -3.4236, -3.2153, -3.0144, -2.8205, -2.6333, -2.4525
 -28.645, -3.1336, -2.9254, -2.7246, -2.5308, -2.3438, -2.1631
 -24.645, -2.8434, -2.6352, -2.4344, -2.2407, -2.0538, -1.8734
 -20.645, -2.5529, -2.3447, -2.144, -1.9504, -1.7636, -1.5832
 -16.645, -2.2621, -2.0539, -1.8532, -1.6597, -1.473, -1.2927
 -12.645, -1.9712, -1.7629, -1.5622, -1.3687, -1.182, -1.0019
 -8.645, -1.6799, -1.4716, -1.2709, -1.0774, -0.89078, -0.71071
 -4.645, -1.3885, -1.1801, -0.97931, -0.78579, -0.59918, -0.41916
 -0.645, -1.0968, -0.88828, -0.68742, -0.49386, -0.30725, -0.12725
 3.355, -0.80481, -0.59619, -0.39524, -0.20161, -0.014972, 0.16502
 7.355, -0.51261, -0.30384, -0.10277, 0.090947, 0.27764, 0.45765
 11.355, -0.22016, -0.011215, 0.19, 0.38382, 0.57059, 0.75064
 15.355, 0.072533, 0.28168, 0.48306, 0.67702, 0.86388, 1.044
 19.355, 0.36548, 0.57485, 0.77643, 0.97054, 1.1575, 1.3377
 23.355, 0.65866, 0.86829, 1.0701, 1.2644, 1.4515, 1.6318
 27.355, 0.9521, 1.162, 1.364, 1.5585, 1.7458, 1.9263
 31.355, 1.2458, 1.456, 1.6583, 1.853, 2.0405, 2.2211
 35.355, 1.5397, 1.7502, 1.9528, 2.1478, 2.3355, 2.5163
 39.355, 1.8339, 2.0448, 2.2477, 2.443, 2.6309, 2.8119
 43.355, 2.1284, 2.3396, 2.5429, 2.7384, 2.9266, 3.1078
 47.355, 2.423, 2.6347, 2.8383, 3.0342, 3.2227, 3.4042
 51.355, 2.718, 2.9301, 3.1341, 3.3304, 3.5192, 3.7009
 55.355, 3.0132, 3.2258, 3.4302, 3.6268, 3.816, 3.998
 59.355, 3.3087, 3.5217, 3.7266, 3.9236, 4.1132, 4.2955
 63.355, 3.6044, 3.818, 4.0233, 4.2208, 4.4107, 4.5934
 67.355, 3.9004, 4.1145, 4.3203, 4.5183, 4.7086, 4.8917
 71.355, 4.1966, 4.4113, 4.6177, 4.8161, 5.0069, 5.1904
 75.355, 4.4932, 4.7084, 4.9154, 5.1143, 5.3056, 5.4895
 79.355, 4.79, 5.0059, 5.2134, 5.4128, 5.6046, 5.789
 83.355, 5.087, 5.3036, 5.5117, 5.7117, 5.904, 6.0889
ENDTABLE
SUSP_DIVE_GAIN(2,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
JNC2_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce (other side) -
                            ! JNC2_START_SUSP_DIVE)

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of suspension dive (deg).
SUSP_DIVE_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -90, -60, -30, 0, 30, 60
 -92.645, -7.7443, -7.5325, -7.3276, -7.1294, -6.9375, -6.7516
 -88.645, -7.458, -7.2466, -7.0421, -6.8443, -6.6529, -6.4674
 -84.645, -7.1715, -6.9604, -6.7563, -6.5589, -6.3679, -6.1829
 -80.645, -6.8847, -6.6739, -6.4702, -6.2732, -6.0826, -5.8981
 -76.645, -6.5976, -6.3872, -6.1838, -5.9872, -5.797, -5.6129
 -72.645, -6.3103, -6.1002, -5.8971, -5.7009, -5.5111, -5.3274
 -68.645, -6.0227, -5.8129, -5.6102, -5.4143, -5.2248, -5.0415
 -64.645, -5.7349, -5.5253, -5.3229, -5.1273, -4.9382, -4.7552
 -60.645, -5.4469, -5.2375, -5.0354, -4.84, -4.6512, -4.4686
 -56.645, -5.1586, -4.9494, -4.7475, -4.5525, -4.364, -4.1816
 -52.645, -4.87, -4.6611, -4.4594, -4.2646, -4.0764, -3.8943
 -48.645, -4.5812, -4.3725, -4.171, -3.9764, -3.7884, -3.6067
 -44.645, -4.2922, -4.0836, -3.8823, -3.6879, -3.5001, -3.3187
 -40.645, -4.0029, -3.7944, -3.5933, -3.3991, -3.2115, -3.0303
 -36.645, -3.7134, -3.505, -3.304, -3.11, -2.9226, -2.7416
 -32.645, -3.4236, -3.2153, -3.0144, -2.8205, -2.6333, -2.4525
 -28.645, -3.1336, -2.9254, -2.7246, -2.5308, -2.3438, -2.1631
 -24.645, -2.8434, -2.6352, -2.4344, -2.2407, -2.0538, -1.8734
 -20.645, -2.5529, -2.3447, -2.144, -1.9504, -1.7636, -1.5832
 -16.645, -2.2621, -2.0539, -1.8532, -1.6597, -1.473, -1.2927
 -12.645, -1.9712, -1.7629, -1.5622, -1.3687, -1.182, -1.0019
 -8.645, -1.6799, -1.4716, -1.2709, -1.0774, -0.89078, -0.71071
 -4.645, -1.3885, -1.1801, -0.97931, -0.78579, -0.59918, -0.41916
 -0.645, -1.0968, -0.88828, -0.68742, -0.49386, -0.30725, -0.12725
 3.355, -0.80481, -0.59619, -0.39524, -0.20161, -0.014972, 0.16502
 7.355, -0.51261, -0.30384, -0.10277, 0.090947, 0.27764, 0.45765
 11.355, -0.22016, -0.011215, 0.19, 0.38382, 0.57059, 0.75064
 15.355, 0.072533, 0.28168, 0.48306, 0.67702, 0.86388, 1.044
 19.355, 0.36548, 0.57485, 0.77643, 0.97054, 1.1575, 1.3377
 23.355, 0.65866, 0.86829, 1.0701, 1.2644, 1.4515, 1.6318
 27.355, 0.9521, 1.162, 1.364, 1.5585, 1.7458, 1.9263
 31.355, 1.2458, 1.456, 1.6583, 1.853, 2.0405, 2.2211
 35.355, 1.5397, 1.7502, 1.9528, 2.1478, 2.3355, 2.5163
 39.355, 1.8339, 2.0448, 2.2477, 2.443, 2.6309, 2.8119
 43.355, 2.1284, 2.3396, 2.5429, 2.7384, 2.9266, 3.1078
 47.355, 2.423, 2.6347, 2.8383, 3.0342, 3.2227, 3.4042
 51.355, 2.718, 2.9301, 3.1341, 3.3304, 3.5192, 3.7009
 55.355, 3.0132, 3.2258, 3.4302, 3.6268, 3.816, 3.998
 59.355, 3.3087, 3.5217, 3.7266, 3.9236, 4.1132, 4.2955
 63.355, 3.6044, 3.818, 4.0233, 4.2208, 4.4107, 4.5934
 67.355, 3.9004, 4.1145, 4.3203, 4.5183, 4.7086, 4.8917
 71.355, 4.1966, 4.4113, 4.6177, 4.8161, 5.0069, 5.1904
 75.355, 4.4932, 4.7084, 4.9154, 5.1143, 5.3056, 5.4895
 79.355, 4.79, 5.0059, 5.2134, 5.4128, 5.6046, 5.789
 83.355, 5.087, 5.3036, 5.5117, 5.7117, 5.904, 6.0889
ENDTABLE
SUSP_DIVE_GAIN(2,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)
JNC2_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce (other side) -
                            ! JNC2_START_SUSP_DIVE)

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_LAT_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of
! unsteered wheel from the calculation can be adjusted with SUSP_LAT_GAIN and
! SUSP_LAT_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_SUSP_LAT and JNC2_START_SUSP_LAT. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
SUSP_LAT_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_LAT_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_LAT_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant Lateral movement inward of
                                        ! unsteered wheel component due to jounce
                                        ! (other side), axle 1, right side

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of Lateral movement inward
! of unsteered wheel (mm).
SUSP_LAT_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -90, -60, -30, 0, 30, 60
 -92.645, -1.0433, -1.0482, -0.88656, -0.56617, -0.093882, 0.52444
 -88.645, -1.1506, -1.185, -1.052, -0.75913, -0.31343, 0.27928
 -84.645, -1.2512, -1.3154, -1.2109, -0.94578, -0.52678, 0.040194
 -80.645, -1.3453, -1.4392, -1.3635, -1.1261, -0.73396, -0.19283
 -76.645, -1.4329, -1.5566, -1.5097, -1.3003, -0.93499, -0.41982
 -72.645, -1.5139, -1.6675, -1.6497, -1.4682, -1.1299, -0.64081
 -68.645, -1.5884, -1.7721, -1.7833, -1.6298, -1.3187, -0.85582
 -64.645, -1.6564, -1.8702, -1.9106, -1.7854, -1.5015, -1.0649
 -60.645, -1.718, -1.962, -2.0317, -1.9347, -1.6782, -1.268
 -56.645, -1.7732, -2.0475, -2.1465, -2.078, -1.8489, -1.4652
 -52.645, -1.8219, -2.1267, -2.2552, -2.2152, -2.0137, -1.6566
 -48.645, -1.8643, -2.1997, -2.3577, -2.3463, -2.1724, -1.8421
 -44.645, -1.9004, -2.2664, -2.454, -2.4714, -2.3253, -2.0218
 -40.645, -1.9302, -2.3269, -2.5443, -2.5904, -2.4723, -2.1958
 -36.645, -1.9537, -2.3812, -2.6285, -2.7035, -2.6134, -2.364
 -32.645, -1.9709, -2.4293, -2.7066, -2.8107, -2.7487, -2.5264
 -28.645, -1.9819, -2.4714, -2.7787, -2.912, -2.8781, -2.6832
 -24.645, -1.9867, -2.5073, -2.8448, -3.0073, -3.0018, -2.8343
 -20.645, -1.9854, -2.5372, -2.905, -3.0968, -3.1198, -2.9798
 -16.645, -1.9779, -2.561, -2.9592, -3.1805, -3.232, -3.1196
 -12.645, -1.9643, -2.5788, -3.0075, -3.2584, -3.3385, -3.254
 -8.645, -1.9446, -2.5907, -3.05, -3.3305, -3.4394, -3.3827
 -4.645, -1.9189, -2.5966, -3.0865, -3.3969, -3.5347, -3.506
 -0.645, -1.8871, -2.5965, -3.1173, -3.4576, -3.6244, -3.6238
 3.355, -1.8493, -2.5906, -3.1423, -3.5126, -3.7085, -3.7361
 7.355, -1.8056, -2.5789, -3.1616, -3.562, -3.7871, -3.8431
 11.355, -1.756, -2.5613, -3.1751, -3.6057, -3.8602, -3.9447
 15.355, -1.7004, -2.5379, -3.183, -3.644, -3.9279, -4.0409
 19.355, -1.6389, -2.5087, -3.1852, -3.6766, -3.9901, -4.1319
 23.355, -1.5717, -2.4738, -3.1818, -3.7038, -4.047, -4.2176
 27.355, -1.4986, -2.4332, -3.1728, -3.7255, -4.0985, -4.298
 31.355, -1.4197, -2.387, -3.1583, -3.7418, -4.1448, -4.3733
 35.355, -1.3351, -2.3351, -3.1382, -3.7527, -4.1857, -4.4435
 39.355, -1.2448, -2.2777, -3.1127, -3.7582, -4.2214, -4.5086
 43.355, -1.1488, -2.2146, -3.0818, -3.7584, -4.252, -4.5686
 47.355, -1.0472, -2.1461, -3.0454, -3.7534, -4.2774, -4.6235
 51.355, -0.93996, -2.0721, -3.0037, -3.7432, -4.2977, -4.6736
 55.355, -0.82718, -1.9927, -2.9567, -3.7277, -4.3129, -4.7187
 59.355, -0.70887, -1.9078, -2.9044, -3.7071, -4.3232, -4.7589
 63.355, -0.58508, -1.8176, -2.8469, -3.6814, -4.3285, -4.7943
 67.355, -0.45585, -1.7221, -2.7843, -3.6507, -4.3288, -4.8249
 71.355, -0.32121, -1.6213, -2.7164, -3.615, -4.3243, -4.8508
 75.355, -0.18122, -1.5153, -2.6435, -3.5743, -4.315, -4.8721
 79.355, -0.035917, -1.4041, -2.5656, -3.5287, -4.301, -4.8887
 83.355, 0.11466, -1.2878, -2.4827, -3.4783, -4.2822, -4.9007
ENDTABLE
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
JNC2_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce (other side) -
                           ! JNC2_START_SUSP_LAT)

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of Lateral movement inward
! of unsteered wheel (mm).
SUSP_LAT_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -90, -60, -30, 0, 30, 60
 -92.645, -1.0433, -1.0482, -0.88656, -0.56617, -0.093882, 0.52444
 -88.645, -1.1506, -1.185, -1.052, -0.75913, -0.31343, 0.27928
 -84.645, -1.2512, -1.3154, -1.2109, -0.94578, -0.52678, 0.040194
 -80.645, -1.3453, -1.4392, -1.3635, -1.1261, -0.73396, -0.19283
 -76.645, -1.4329, -1.5566, -1.5097, -1.3003, -0.93499, -0.41982
 -72.645, -1.5139, -1.6675, -1.6497, -1.4682, -1.1299, -0.64081
 -68.645, -1.5884, -1.7721, -1.7833, -1.6298, -1.3187, -0.85582
 -64.645, -1.6564, -1.8702, -1.9106, -1.7854, -1.5015, -1.0649
 -60.645, -1.718, -1.962, -2.0317, -1.9347, -1.6782, -1.268
 -56.645, -1.7732, -2.0475, -2.1465, -2.078, -1.8489, -1.4652
 -52.645, -1.8219, -2.1267, -2.2552, -2.2152, -2.0137, -1.6566
 -48.645, -1.8643, -2.1997, -2.3577, -2.3463, -2.1724, -1.8421
 -44.645, -1.9004, -2.2664, -2.454, -2.4714, -2.3253, -2.0218
 -40.645, -1.9302, -2.3269, -2.5443, -2.5904, -2.4723, -2.1958
 -36.645, -1.9537, -2.3812, -2.6285, -2.7035, -2.6134, -2.364
 -32.645, -1.9709, -2.4293, -2.7066, -2.8107, -2.7487, -2.5264
 -28.645, -1.9819, -2.4714, -2.7787, -2.912, -2.8781, -2.6832
 -24.645, -1.9867, -2.5073, -2.8448, -3.0073, -3.0018, -2.8343
 -20.645, -1.9854, -2.5372, -2.905, -3.0968, -3.1198, -2.9798
 -16.645, -1.9779, -2.561, -2.9592, -3.1805, -3.232, -3.1196
 -12.645, -1.9643, -2.5788, -3.0075, -3.2584, -3.3385, -3.254
 -8.645, -1.9446, -2.5907, -3.05, -3.3305, -3.4394, -3.3827
 -4.645, -1.9189, -2.5966, -3.0865, -3.3969, -3.5347, -3.506
 -0.645, -1.8871, -2.5965, -3.1173, -3.4576, -3.6244, -3.6238
 3.355, -1.8493, -2.5906, -3.1423, -3.5126, -3.7085, -3.7361
 7.355, -1.8056, -2.5789, -3.1616, -3.562, -3.7871, -3.8431
 11.355, -1.756, -2.5613, -3.1751, -3.6057, -3.8602, -3.9447
 15.355, -1.7004, -2.5379, -3.183, -3.644, -3.9279, -4.0409
 19.355, -1.6389, -2.5087, -3.1852, -3.6766, -3.9901, -4.1319
 23.355, -1.5717, -2.4738, -3.1818, -3.7038, -4.047, -4.2176
 27.355, -1.4986, -2.4332, -3.1728, -3.7255, -4.0985, -4.298
 31.355, -1.4197, -2.387, -3.1583, -3.7418, -4.1448, -4.3733
 35.355, -1.3351, -2.3351, -3.1382, -3.7527, -4.1857, -4.4435
 39.355, -1.2448, -2.2777, -3.1127, -3.7582, -4.2214, -4.5086
 43.355, -1.1488, -2.2146, -3.0818, -3.7584, -4.252, -4.5686
 47.355, -1.0472, -2.1461, -3.0454, -3.7534, -4.2774, -4.6235
 51.355, -0.93996, -2.0721, -3.0037, -3.7432, -4.2977, -4.6736
 55.355, -0.82718, -1.9927, -2.9567, -3.7277, -4.3129, -4.7187
 59.355, -0.70887, -1.9078, -2.9044, -3.7071, -4.3232, -4.7589
 63.355, -0.58508, -1.8176, -2.8469, -3.6814, -4.3285, -4.7943
 67.355, -0.45585, -1.7221, -2.7843, -3.6507, -4.3288, -4.8249
 71.355, -0.32121, -1.6213, -2.7164, -3.615, -4.3243, -4.8508
 75.355, -0.18122, -1.5153, -2.6435, -3.5743, -4.315, -4.8721
 79.355, -0.035917, -1.4041, -2.5656, -3.5287, -4.301, -4.8887
 83.355, 0.11466, -1.2878, -2.4827, -3.4783, -4.2822, -4.9007
ENDTABLE
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)
JNC2_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce (other side) -
                           ! JNC2_START_SUSP_LAT)

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel can be a nonlinear CARPET function of jounce
! (other side) and jounce or a function of jounce (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function SUSP_X_JNC_OTHER_SIDE of jounce (other side) (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. Jounce (other side)
! used in the calculation can be adjusted with JNC2_SCALE_SUSP_X and
! JNC2_START_SUSP_X. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,1) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
SUSP_X_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_X_JNC_OTHER_SIDE_TABLE(1,2) mm ;
SUSP_X_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; mm ! Constant X movement forward of
                                      ! unsteered wheel component due to jounce
                                      ! (other side), axle 1, right side

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of X movement forward of
! unsteered wheel (mm).
SUSP_X_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -90, -60, -30, 0, 30, 60
 -92.645, 12.948, 12.7378, 12.4672, 12.1393, 11.7569, 11.3227
 -88.645, 12.2871, 12.0988, 11.8497, 11.5426, 11.1804, 10.7657
 -84.645, 11.6443, 11.4781, 11.2504, 10.964, 10.622, 10.227
 -80.645, 11.0199, 10.8757, 10.6693, 10.4037, 10.0819, 9.70645
 -76.645, 10.4138, 10.2915, 10.1065, 9.86162, 9.5599, 9.20408
 -72.645, 9.82592, 9.72551, 9.56176, 9.33766, 9.0561, 8.71986
 -68.645, 9.25624, 9.17769, 9.03524, 8.83186, 8.57045, 8.25377
 -64.645, 8.70476, 8.64807, 8.5269, 8.34422, 8.10295, 7.80584
 -60.645, 8.17146, 8.13659, 8.03668, 7.8747, 7.65356, 7.37602
 -56.645, 7.65631, 7.64325, 7.56458, 7.42328, 7.22226, 6.9643
 -52.645, 7.15929, 7.168, 7.11057, 6.98996, 6.80906, 6.57067
 -48.645, 6.68038, 6.71087, 6.67466, 6.57472, 6.41394, 6.19513
 -44.645, 6.21958, 6.27181, 6.25682, 6.17755, 6.03689, 5.83766
 -40.645, 5.77685, 5.85083, 5.85704, 5.79844, 5.67791, 5.49827
 -36.645, 5.3522, 5.44792, 5.47533, 5.43739, 5.337, 5.17696
 -32.645, 4.94563, 5.06306, 5.11167, 5.09441, 5.01415, 4.87371
 -28.645, 4.55712, 4.69626, 4.76607, 4.76947, 4.70936, 4.58855
 -24.645, 4.18665, 4.34751, 4.43851, 4.46259, 4.42264, 4.32146
 -20.645, 3.83424, 4.0168, 4.129, 4.17377, 4.15399, 4.07246
 -16.645, 3.49987, 3.70414, 3.83754, 3.903, 3.90341, 3.84154
 -12.645, 3.18356, 3.40952, 3.56414, 3.65031, 3.67091, 3.62875
 -8.645, 2.88529, 3.13295, 3.30879, 3.41568, 3.45649, 3.43405
 -4.645, 2.60506, 2.87445, 3.07151, 3.19913, 3.26019, 3.25748
 -0.645, 2.34289, 2.634, 2.8523, 3.00068, 3.08199, 3.09904
 3.355, 2.09878, 2.41161, 2.65117, 2.82032, 2.92192, 2.95878
 7.355, 1.87273, 2.20731, 2.46814, 2.65809, 2.77999, 2.83667
 11.355, 1.66477, 2.02109, 2.30322, 2.51398, 2.65622, 2.73277
 15.355, 1.47489, 1.85298, 2.15643, 2.38803, 2.55065, 2.64709
 19.355, 1.30313, 1.70302, 2.02779, 2.28028, 2.4633, 2.57967
 23.355, 1.14948, 1.57119, 1.91733, 2.19072, 2.39419, 2.53053
 27.355, 1.01398, 1.45751, 1.82505, 2.11937, 2.34332, 2.49968
 31.355, 0.896616, 1.36202, 1.75098, 2.06628, 2.31075, 2.48716
 35.355, 0.797423, 1.28471, 1.69513, 2.03146, 2.29648, 2.493
 39.355, 0.71645, 1.22566, 1.65759, 2.01496, 2.3006, 2.51728
 43.355, 0.65371, 1.18488, 1.63834, 2.01683, 2.32312, 2.56001
 47.355, 0.609214, 1.16238, 1.63742, 2.03705, 2.36406, 2.62121
 51.355, 0.582985, 1.15819, 1.65485, 2.07568, 2.42346, 2.70094
 55.355, 0.575091, 1.17238, 1.69071, 2.1328, 2.5014, 2.79927
 59.355, 0.585554, 1.20496, 1.74502, 2.20842, 2.59791, 2.91623
 63.355, 0.614382, 1.25597, 1.81781, 2.30258, 2.71301, 3.05185
 67.355, 0.661634, 1.32545, 1.90913, 2.41534, 2.84678, 3.20622
 71.355, 0.727376, 1.41348, 2.01906, 2.54676, 2.9993, 3.37941
 75.355, 0.811599, 1.52005, 2.1476, 2.69687, 3.17057, 3.57142
 79.355, 0.914383, 1.64524, 2.29483, 2.86575, 3.36069, 3.78236
 83.355, 1.03578, 1.78912, 2.46082, 3.05346, 3.56972, 4.01231
ENDTABLE
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
JNC2_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce (other side) -
                         ! JNC2_START_SUSP_X)

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of X movement forward of
! unsteered wheel (mm).
SUSP_X_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -90, -60, -30, 0, 30, 60
 -92.645, 12.948, 12.7378, 12.4672, 12.1393, 11.7569, 11.3227
 -88.645, 12.2871, 12.0988, 11.8497, 11.5426, 11.1804, 10.7657
 -84.645, 11.6443, 11.4781, 11.2504, 10.964, 10.622, 10.227
 -80.645, 11.0199, 10.8757, 10.6693, 10.4037, 10.0819, 9.70645
 -76.645, 10.4138, 10.2915, 10.1065, 9.86162, 9.5599, 9.20408
 -72.645, 9.82592, 9.72551, 9.56176, 9.33766, 9.0561, 8.71986
 -68.645, 9.25624, 9.17769, 9.03524, 8.83186, 8.57045, 8.25377
 -64.645, 8.70476, 8.64807, 8.5269, 8.34422, 8.10295, 7.80584
 -60.645, 8.17146, 8.13659, 8.03668, 7.8747, 7.65356, 7.37602
 -56.645, 7.65631, 7.64325, 7.56458, 7.42328, 7.22226, 6.9643
 -52.645, 7.15929, 7.168, 7.11057, 6.98996, 6.80906, 6.57067
 -48.645, 6.68038, 6.71087, 6.67466, 6.57472, 6.41394, 6.19513
 -44.645, 6.21958, 6.27181, 6.25682, 6.17755, 6.03689, 5.83766
 -40.645, 5.77685, 5.85083, 5.85704, 5.79844, 5.67791, 5.49827
 -36.645, 5.3522, 5.44792, 5.47533, 5.43739, 5.337, 5.17696
 -32.645, 4.94563, 5.06306, 5.11167, 5.09441, 5.01415, 4.87371
 -28.645, 4.55712, 4.69626, 4.76607, 4.76947, 4.70936, 4.58855
 -24.645, 4.18665, 4.34751, 4.43851, 4.46259, 4.42264, 4.32146
 -20.645, 3.83424, 4.0168, 4.129, 4.17377, 4.15399, 4.07246
 -16.645, 3.49987, 3.70414, 3.83754, 3.903, 3.90341, 3.84154
 -12.645, 3.18356, 3.40952, 3.56414, 3.65031, 3.67091, 3.62875
 -8.645, 2.88529, 3.13295, 3.30879, 3.41568, 3.45649, 3.43405
 -4.645, 2.60506, 2.87445, 3.07151, 3.19913, 3.26019, 3.25748
 -0.645, 2.34289, 2.634, 2.8523, 3.00068, 3.08199, 3.09904
 3.355, 2.09878, 2.41161, 2.65117, 2.82032, 2.92192, 2.95878
 7.355, 1.87273, 2.20731, 2.46814, 2.65809, 2.77999, 2.83667
 11.355, 1.66477, 2.02109, 2.30322, 2.51398, 2.65622, 2.73277
 15.355, 1.47489, 1.85298, 2.15643, 2.38803, 2.55065, 2.64709
 19.355, 1.30313, 1.70302, 2.02779, 2.28028, 2.4633, 2.57967
 23.355, 1.14948, 1.57119, 1.91733, 2.19072, 2.39419, 2.53053
 27.355, 1.01398, 1.45751, 1.82505, 2.11937, 2.34332, 2.49968
 31.355, 0.896616, 1.36202, 1.75098, 2.06628, 2.31075, 2.48716
 35.355, 0.797423, 1.28471, 1.69513, 2.03146, 2.29648, 2.493
 39.355, 0.71645, 1.22566, 1.65759, 2.01496, 2.3006, 2.51728
 43.355, 0.65371, 1.18488, 1.63834, 2.01683, 2.32312, 2.56001
 47.355, 0.609214, 1.16238, 1.63742, 2.03705, 2.36406, 2.62121
 51.355, 0.582985, 1.15819, 1.65485, 2.07568, 2.42346, 2.70094
 55.355, 0.575091, 1.17238, 1.69071, 2.1328, 2.5014, 2.79927
 59.355, 0.585554, 1.20496, 1.74502, 2.20842, 2.59791, 2.91623
 63.355, 0.614382, 1.25597, 1.81781, 2.30258, 2.71301, 3.05185
 67.355, 0.661634, 1.32545, 1.90913, 2.41534, 2.84678, 3.20622
 71.355, 0.727376, 1.41348, 2.01906, 2.54676, 2.9993, 3.37941
 75.355, 0.811599, 1.52005, 2.1476, 2.69687, 3.17057, 3.57142
 79.355, 0.914383, 1.64524, 2.29483, 2.86575, 3.36069, 3.78236
 83.355, 1.03578, 1.78912, 2.46082, 3.05346, 3.56972, 4.01231
ENDTABLE
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)
JNC2_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce (other side) -
                         ! JNC2_START_SUSP_X)

! TOE: Suspension toe (measured at zero steer). Toe can be a nonlinear CARPET
! function of jounce (other side) and jounce or a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function SUSP_TOE_JNC_OTHER_SIDE of jounce
! (other side) (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be
! adjusted with TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be
! adjusted with JNC_SCALE_TOE and JNC_START_TOE. Jounce (other side) used in the
! calculation can be adjusted with JNC2_SCALE_TOE and JNC2_START_TOE. The derivative
! of this function is used internally. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,1) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,1) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,1) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, left side

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
TOE_COMBINE(1,2) ADD ! How to combine the two components
SET_UNITS SUSP_TOE_JNC_OTHER_SIDE_TABLE(1,2) deg ;
SUSP_TOE_JNC_OTHER_SIDE_CONSTANT(1,2) 0 ; deg ! Constant toe component due to jounce
                                        ! (other side), axle 1, right side

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of toe (deg).
TOE_CARPET(2,1) 2D_SPLINE ! axle 2, left side
 0, -90, -60, -30, 0, 30, 60
 -92.645, 0.2875, 0.38976, 0.4708, 0.53167, 0.57336, 0.59678
 -88.645, 0.30327, 0.40659, 0.48865, 0.5505, 0.59313, 0.61744
 -84.645, 0.31915, 0.42354, 0.50663, 0.56945, 0.61301, 0.63822
 -80.645, 0.33515, 0.44061, 0.52471, 0.58852, 0.63302, 0.65912
 -76.645, 0.35126, 0.45779, 0.54292, 0.60771, 0.65314, 0.68013
 -72.645, 0.36748, 0.47508, 0.56124, 0.627, 0.67338, 0.70127
 -68.645, 0.38382, 0.49249, 0.57967, 0.64642, 0.69373, 0.72251
 -64.645, 0.40027, 0.51001, 0.59821, 0.66594, 0.71419, 0.74387
 -60.645, 0.41683, 0.52764, 0.61687, 0.68558, 0.73477, 0.76535
 -56.645, 0.4335, 0.54537, 0.63563, 0.70533, 0.75546, 0.78694
 -52.645, 0.45028, 0.56323, 0.65451, 0.72519, 0.77627, 0.80864
 -48.645, 0.46716, 0.58119, 0.6735, 0.74517, 0.79718, 0.83046
 -44.645, 0.48416, 0.59926, 0.6926, 0.76526, 0.81822, 0.85239
 -40.645, 0.50127, 0.61744, 0.71182, 0.78546, 0.83936, 0.87444
 -36.645, 0.51849, 0.63574, 0.73114, 0.80577, 0.86062, 0.8966
 -32.645, 0.53582, 0.65414, 0.75058, 0.8262, 0.882, 0.91888
 -28.645, 0.55326, 0.67267, 0.77014, 0.84675, 0.9035, 0.94128
 -24.645, 0.57082, 0.6913, 0.78981, 0.86741, 0.92511, 0.9638
 -20.645, 0.58849, 0.71005, 0.8096, 0.8882, 0.94684, 0.98645
 -16.645, 0.60628, 0.72892, 0.82951, 0.9091, 0.9687, 1.0092
 -12.645, 0.62419, 0.74791, 0.84954, 0.93013, 0.99068, 1.0321
 -8.645, 0.64221, 0.76703, 0.86969, 0.95127, 1.0128, 1.0551
 -4.645, 0.66036, 0.78626, 0.88997, 0.97255, 1.035, 1.0783
 -0.645, 0.67864, 0.80562, 0.91037, 0.99396, 1.0574, 1.1015
 3.355, 0.69704, 0.82511, 0.93091, 1.0155, 1.0799, 1.125
 7.355, 0.71557, 0.84473, 0.95157, 1.0372, 1.1025, 1.1485
 11.355, 0.73423, 0.86449, 0.97238, 1.059, 1.1253, 1.1722
 15.355, 0.75303, 0.88438, 0.99333, 1.0809, 1.1482, 1.1961
 19.355, 0.77197, 0.90442, 1.0144, 1.103, 1.1713, 1.22
 23.355, 0.79105, 0.9246, 1.0357, 1.1253, 1.1945, 1.2442
 27.355, 0.81028, 0.94494, 1.057, 1.1477, 1.2179, 1.2685
 31.355, 0.82967, 0.96543, 1.0786, 1.1703, 1.2414, 1.293
 35.355, 0.84921, 0.98607, 1.1003, 1.193, 1.2651, 1.3176
 39.355, 0.86891, 1.0069, 1.1222, 1.2159, 1.289, 1.3424
 43.355, 0.88878, 1.0279, 1.1442, 1.2389, 1.313, 1.3674
 47.355, 0.90882, 1.049, 1.1665, 1.2622, 1.3373, 1.3926
 51.355, 0.92903, 1.0704, 1.1889, 1.2856, 1.3617, 1.418
 55.355, 0.94943, 1.0919, 1.2115, 1.3093, 1.3863, 1.4435
 59.355, 0.97002, 1.1136, 1.2342, 1.3331, 1.4111, 1.4693
 63.355, 0.99081, 1.1355, 1.2572, 1.3571, 1.4362, 1.4953
 67.355, 1.0118, 1.1576, 1.2804, 1.3814, 1.4614, 1.5215
 71.355, 1.033, 1.1799, 1.3039, 1.4058, 1.4869, 1.5479
 75.355, 1.0544, 1.2025, 1.3275, 1.4305, 1.5126, 1.5746
 79.355, 1.076, 1.2253, 1.3514, 1.4554, 1.5385, 1.6014
 83.355, 1.0979, 1.2483, 1.3755, 1.4806, 1.5647, 1.6286
ENDTABLE
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
JNC2_START_TOE(2,1) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_TOE(2,1) 1 ! Scale factor divided into (jounce (other side) -
                      ! JNC2_START_TOE)

! 2D table: row 1 has "0" (place holder) followed by 6 values of jounce (other side)
! (mm). Other rows have jounce (mm) followed by 6 values of toe (deg).
TOE_CARPET(2,2) 2D_SPLINE ! axle 2, right side
 0, -90, -60, -30, 0, 30, 60
 -92.645, 0.2875, 0.38976, 0.4708, 0.53167, 0.57336, 0.59678
 -88.645, 0.30327, 0.40659, 0.48865, 0.5505, 0.59313, 0.61744
 -84.645, 0.31915, 0.42354, 0.50663, 0.56945, 0.61301, 0.63822
 -80.645, 0.33515, 0.44061, 0.52471, 0.58852, 0.63302, 0.65912
 -76.645, 0.35126, 0.45779, 0.54292, 0.60771, 0.65314, 0.68013
 -72.645, 0.36748, 0.47508, 0.56124, 0.627, 0.67338, 0.70127
 -68.645, 0.38382, 0.49249, 0.57967, 0.64642, 0.69373, 0.72251
 -64.645, 0.40027, 0.51001, 0.59821, 0.66594, 0.71419, 0.74387
 -60.645, 0.41683, 0.52764, 0.61687, 0.68558, 0.73477, 0.76535
 -56.645, 0.4335, 0.54537, 0.63563, 0.70533, 0.75546, 0.78694
 -52.645, 0.45028, 0.56323, 0.65451, 0.72519, 0.77627, 0.80864
 -48.645, 0.46716, 0.58119, 0.6735, 0.74517, 0.79718, 0.83046
 -44.645, 0.48416, 0.59926, 0.6926, 0.76526, 0.81822, 0.85239
 -40.645, 0.50127, 0.61744, 0.71182, 0.78546, 0.83936, 0.87444
 -36.645, 0.51849, 0.63574, 0.73114, 0.80577, 0.86062, 0.8966
 -32.645, 0.53582, 0.65414, 0.75058, 0.8262, 0.882, 0.91888
 -28.645, 0.55326, 0.67267, 0.77014, 0.84675, 0.9035, 0.94128
 -24.645, 0.57082, 0.6913, 0.78981, 0.86741, 0.92511, 0.9638
 -20.645, 0.58849, 0.71005, 0.8096, 0.8882, 0.94684, 0.98645
 -16.645, 0.60628, 0.72892, 0.82951, 0.9091, 0.9687, 1.0092
 -12.645, 0.62419, 0.74791, 0.84954, 0.93013, 0.99068, 1.0321
 -8.645, 0.64221, 0.76703, 0.86969, 0.95127, 1.0128, 1.0551
 -4.645, 0.66036, 0.78626, 0.88997, 0.97255, 1.035, 1.0783
 -0.645, 0.67864, 0.80562, 0.91037, 0.99396, 1.0574, 1.1015
 3.355, 0.69704, 0.82511, 0.93091, 1.0155, 1.0799, 1.125
 7.355, 0.71557, 0.84473, 0.95157, 1.0372, 1.1025, 1.1485
 11.355, 0.73423, 0.86449, 0.97238, 1.059, 1.1253, 1.1722
 15.355, 0.75303, 0.88438, 0.99333, 1.0809, 1.1482, 1.1961
 19.355, 0.77197, 0.90442, 1.0144, 1.103, 1.1713, 1.22
 23.355, 0.79105, 0.9246, 1.0357, 1.1253, 1.1945, 1.2442
 27.355, 0.81028, 0.94494, 1.057, 1.1477, 1.2179, 1.2685
 31.355, 0.82967, 0.96543, 1.0786, 1.1703, 1.2414, 1.293
 35.355, 0.84921, 0.98607, 1.1003, 1.193, 1.2651, 1.3176
 39.355, 0.86891, 1.0069, 1.1222, 1.2159, 1.289, 1.3424
 43.355, 0.88878, 1.0279, 1.1442, 1.2389, 1.313, 1.3674
 47.355, 0.90882, 1.049, 1.1665, 1.2622, 1.3373, 1.3926
 51.355, 0.92903, 1.0704, 1.1889, 1.2856, 1.3617, 1.418
 55.355, 0.94943, 1.0919, 1.2115, 1.3093, 1.3863, 1.4435
 59.355, 0.97002, 1.1136, 1.2342, 1.3331, 1.4111, 1.4693
 63.355, 0.99081, 1.1355, 1.2572, 1.3571, 1.4362, 1.4953
 67.355, 1.0118, 1.1576, 1.2804, 1.3814, 1.4614, 1.5215
 71.355, 1.033, 1.1799, 1.3039, 1.4058, 1.4869, 1.5479
 75.355, 1.0544, 1.2025, 1.3275, 1.4305, 1.5126, 1.5746
 79.355, 1.076, 1.2253, 1.3514, 1.4554, 1.5385, 1.6014
 83.355, 1.0979, 1.2483, 1.3755, 1.4806, 1.5647, 1.6286
ENDTABLE
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)
JNC2_START_TOE(2,2) 0 ; mm ! Offset subtracted from jounce (other side)
JNC2_SCALE_TOE(2,2) 1 ! Scale factor divided into (jounce (other side) -
                      ! JNC2_START_TOE)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER AMP_KC = 0; mm ; Amplitude of kc movement (parameter)
DEFINE_PARAMETER AMP_C = 3000; N ; Amplitude of tire forces (parameter)
DEFINE_PARAMETER T_KC_CYCLE = 10; s ; Time length for 1 cycle test (parameter)
DEFINE_PARAMETER K_KC_TR = 1000; N/mm ; Stiffness (Trans.) between KC and vehicle body (parameter)
DEFINE_PARAMETER C_KC_TR = 100; N-s/mm ; Damping (Trans.) between KC and vehicle body (parameter)
DEFINE_PARAMETER K_KC_RT = 100000; N-m/deg ; Stiffness (Rot.) between KC and vehicle body (parameter)
DEFINE_PARAMETER C_KC_RT = 10000; N-m-s/deg ; Damping (Rot.) between KC and vehicle body (parameter)

DEFINE_OUTPUT x_kc = -1.388; m ; X coordinate of K and C Table 
SET_OUTPUT_COMPONENT X_KC K and C Table;
SET_OUTPUT_GENERIC X_KC X coordinate;
DEFINE_OUTPUT y_kc = 0; m ; Y coordinate of K and C Table 
SET_OUTPUT_COMPONENT Y_KC K and C Table;
SET_OUTPUT_GENERIC Y_KC Y coordinate;
DEFINE_OUTPUT z_kc = 0.2; m ; Z coordinate of K and C Table 
SET_OUTPUT_COMPONENT Z_KC K and C Table;
SET_OUTPUT_GENERIC Z_KC Z coordinate;
DEFINE_OUTPUT yaw_kc = 0; deg ; Yaw angle of K and C Table 
SET_OUTPUT_COMPONENT YAW_KC K and C Table;
SET_OUTPUT_GENERIC YAW_KC angle;
DEFINE_OUTPUT pitch_kc = 0; deg ; Pitch angle of K and C Table 
SET_OUTPUT_COMPONENT PITCH_KC K and C Table;
SET_OUTPUT_GENERIC PITCH_KC angle;
DEFINE_OUTPUT roll_kc = 0; deg ; Roll angle of K and C Table 
SET_OUTPUT_COMPONENT ROLL_KC K and C Table;
SET_OUTPUT_GENERIC ROLL_KC angle;
DEFINE_OUTPUT Flat_l2 = -1.37683e-09; N ; Flat_l2 
DEFINE_OUTPUT Flat_r2 = -1.37683e-09; N ; Flat_r2 
DEFINE_OUTPUT toe_l2 = 0.986058; deg ; toe_l2 
DEFINE_OUTPUT toe_r2 = 0.986058; deg ; toe_r2 

!------------------------------------------------------------------------------------
! EQUATIONS IN (AT THE START OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_IN X_KC = -1.388;
EQ_IN Y_KC = 0;
EQ_IN Z_KC = 0.2 + AMP_KC*SIN(2*PI*T/T_KC_CYCLE);
EQ_IN YAW_KC = 0;
EQ_IN PITCH_KC = 0;
EQ_IN ROLL_KC = 0;
EQ_IN IMP_FX_RP_1 = (X_KC -X_RP1)*K_KC_TR -(VX_SM*C_KC_TR);
EQ_IN IMP_FY_RP_1 = (Y_KC -Y_RP1)*K_KC_TR -(VY_SM*C_KC_TR);
EQ_IN IMP_FZ_RP_1 = (Z_KC -Z_RP1)*K_KC_TR -(VZ_SM*C_KC_TR);
EQ_IN IMP_MX_EXT = (ROLL_KC -ROLL)*K_KC_RT -(AVX*C_KC_RT);
EQ_IN IMP_MY_EXT = (PITCH_KC -PITCH)*K_KC_RT -(AVY*C_KC_RT);
EQ_IN IMP_MZ_EXT = (YAW_KC -YAW)*K_KC_RT -(AVZ*C_KC_RT);
EQ_IN IMP_FY_L2 = AMP_C*SIN(2*PI*T/T_KC_CYCLE);
EQ_IN IMP_FY_R2 = -1*AMP_C*SIN(2*PI*T/T_KC_CYCLE);

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT FLAT_L2 = -1*FY_L2;
EQ_OUT FLAT_R2 = FY_R2;
EQ_OUT TOE_L2 = -1*STEER_L2;
EQ_OUT TOE_R2 = STEER_R2;

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_ABS_ON_OFF_L1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_L2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_ABS_ON_OFF_R1    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L1
SV_ABS_ON_OFF_R2    1 ; - ! ABS state: 1 -> apply brake, 0 -> release, wheel L2
SV_AERO_ROAD_ID_1   1 ; - ! Road surface ID for tracked aero road point
SV_AERO_ROAD_STA_1 -1.433102194 ; m ! Road path station for tracked aero road point
SV_AVX 1.784338408e-08 ; deg/s ! ODE: Body-X roll rate of sprung-mass {AVx}
SV_AVY -0.002541337835 ; deg/s ! ODE: Body-Y pitch rate of sprung-mass {AVy}
SV_AVY_L1 -2.504718569e-06 ; rpm ! ODE: Spin of wheel L1 {AVy_L1}
SV_AVY_L1_OLD -2.504845058e-06 ; rpm ! Spin of wheel L1 (previous time step)
SV_AVY_L2 -5.465073662e-06 ; rpm ! ODE: Spin of wheel L2 {AVy_L2}
SV_AVY_L2_OLD -5.465523903e-06 ; rpm ! Spin of wheel L2 (previous time step)
SV_AVY_R1 -2.504717514e-06 ; rpm ! ODE: Spin of wheel R1 {AVy_R1}
SV_AVY_R1_OLD -2.504844007e-06 ; rpm ! Spin of wheel R1 (previous time step)
SV_AVY_R2 -5.465408548e-06 ; rpm ! ODE: Spin of wheel R2 {AVy_R2}
SV_AVY_R2_OLD -5.465858429e-06 ; rpm ! Spin of wheel R2 (previous time step)
SV_AVZ 4.375371441e-10 ; deg/s ! ODE: Body-Z yaw rate of sprung-mass {AVz}
SV_AV_COL_CONTROL   0 ; deg/s ! ODE: Steering wheel angular rate
SV_AV_SW            0 ; deg/s ! ODE: Steering wheel angular rate {StrAV_SW}
SV_A_CONTROL        0 ; deg ! ODE: Steering wheel angle
SV_BETA -8.33603935e-05 ; deg ! Sideslip (ISO)
SV_BETA_RD -8.33603935e-05 ; deg ! Sideslip using road axes
SV_CMP_S_L1 30.44132367 ; mm ! Compression of ride spring L1
SV_CMP_S_L2 38.81445011 ; mm ! Compression of ride spring L2
SV_CMP_S_R1 30.44132359 ; mm ! Compression of ride spring R1
SV_CMP_S_R2 38.81444941 ; mm ! Compression of ride spring R2
SV_CMP_T_L1 13.70587792 ; mm ! Tire L1 compression
SV_CMP_T_L2 11.45020853 ; mm ! Tire L2 compression
SV_CMP_T_R1 13.70587793 ; mm ! Tire R1 compression
SV_CMP_T_R2 11.45020934 ; mm ! Tire R2 compression
SV_CONTACT_ID_L1    1 ; - ! Road surface ID for tire contact {RdID_L1}
SV_CONTACT_ID_L2    1 ; - ! Road surface ID for tire contact {RdID_L2}
SV_CONTACT_ID_R1    1 ; - ! Road surface ID for tire contact {RdID_R1}
SV_CONTACT_ID_R2    1 ; - ! Road surface ID for tire contact {RdID_R2}
SV_CONTACT_STA_L1 0.04453965261 ; m ! Road path station for tire contact {S_Rd_L1}
SV_CONTACT_STA_L2 -2.815761168 ; m ! Road path station for tire contact {S_Rd_L2}
SV_CONTACT_STA_R1 0.0445396526 ; m ! Road path station for tire contact {S_Rd_R1}
SV_CONTACT_STA_R2 -2.815761168 ; m ! Road path station for tire contact {S_Rd_R2}
SV_DZDX_GND         0 ; - ! dZ/dX of ground at vehicle aero ref. pt
SV_DZDX_L1          0 ; - ! Ground X slope under tire L1
SV_DZDX_L2          0 ; - ! Ground X slope under tire L2
SV_DZDX_R1          0 ; - ! Ground X slope under tire R1
SV_DZDX_R2          0 ; - ! Ground X slope under tire R2
SV_DZDY_GND         0 ; - ! dZ/dY of ground at vehicle aero ref. pt
SV_DZDY_L1          0 ; - ! Ground Y slope under tire L1
SV_DZDY_L2          0 ; - ! Ground Y slope under tire L2
SV_DZDY_R1         -0 ; - ! Ground Y slope under tire R1
SV_DZDY_R2          0 ; - ! Ground Y slope under tire R2
SV_D_ALPHA_L1       0 ; - ! Delta Alpha (Fy 0-crossing), tire L1
SV_D_ALPHA_L2       0 ; - ! Delta Alpha (Fy 0-crossing), tire L2
SV_D_ALPHA_MX_L1    0 ; - ! Delta Alpha (Mx 0-crossing), tire L1
SV_D_ALPHA_MX_L2    0 ; - ! Delta Alpha (Mx 0-crossing), tire L2
SV_D_ALPHA_MX_R1    0 ; - ! Delta Alpha (Mx 0-crossing), tire R1
SV_D_ALPHA_MX_R2    0 ; - ! Delta Alpha (Mx 0-crossing), tire R2
SV_D_ALPHA_R1       0 ; - ! Delta Alpha (Fy 0-crossing), tire R1
SV_D_ALPHA_R2       0 ; - ! Delta Alpha (Fy 0-crossing), tire R2
SV_D_CONI_L1        0 ; - ! Delta Coni (Mz 0-crossing), tire L1
SV_D_CONI_L2        0 ; - ! Delta Coni (Mz 0-crossing), tire L2
SV_D_CONI_R1        0 ; - ! Delta Coni (Mz 0-crossing), tire R1
SV_D_CONI_R2        0 ; - ! Delta Coni (Mz 0-crossing), tire R2
SV_D_KAPPA_L1       0 ; - ! Delta Kappa (Fx 0-crossing), tire L1
SV_D_KAPPA_L2       0 ; - ! Delta Kappa (Fx 0-crossing), tire L2
SV_D_KAPPA_R1       0 ; - ! Delta Kappa (Fx 0-crossing), tire R1
SV_D_KAPPA_R2       0 ; - ! Delta Kappa (Fx 0-crossing), tire R2
SV_FBK              0 ; N ! ODE: Instant boost force (above input force)
SV_FBOOST -6.768932284e-08 ; N ! ODE: Delayed boost force {F_boost}
SV_FS_L1  4639.408592 ; N ! Force from ride spring L1
SV_FS_L2  3181.956302 ; N ! Force from ride spring L2
SV_FS_R1  4639.408599 ; N ! Force from ride spring R1
SV_FS_R2   3181.95673 ; N ! Force from ride spring R2
SV_FX_SM_L1 -1.810092299 ; N ! Tire force [sx] component, wheel L1
SV_FX_SM_L2 -1.522844867 ; N ! Tire force [sx] component, wheel L2
SV_FX_SM_R1 -1.810092305 ; N ! Tire force [sx] component, wheel R1
SV_FX_SM_R2 -1.522844886 ; N ! Tire force [sx] component, wheel R2
SV_FY_SM_L1 0.02158425176 ; N ! Tire force [sy] component, wheel L1
SV_FY_SM_L2 -0.942776763 ; N ! Tire force [sy] component, wheel L2
SV_FY_SM_R1 -0.02158471478 ; N ! Tire force [sy] component, wheel R1
SV_FY_SM_R2 0.9427763808 ; N ! Tire force [sy] component, wheel R2
SV_FZ_SM_L1 3673.172486 ; N ! Tire force force [sz] component, wheel L1
SV_FZ_SM_L2 3068.693501 ; N ! Tire force force [sz] component, wheel L2
SV_FZ_SM_R1 3673.17249 ; N ! Tire force force [sz] component, wheel R1
SV_FZ_SM_R2 3068.69372 ; N ! Tire force force [sz] component, wheel R2
SV_F_HYS_RACK_A1 3.011974485e-07 ; N ! Friction force at rack
SV_F_HYS_RACK_A2    0 ; N ! Friction force at rack
SV_IVERR            0 ; m ! ODE: Integral of SC speed error {Vx_IErr}
SV_JNCR_L1 6.55417333e-05 ; m/s ! ODE: Jounce rate at wheel L1
SV_JNCR_L2 -0.0001271118355 ; m/s ! ODE: Jounce rate at wheel L2
SV_JNCR_R1 6.554207472e-05 ; m/s ! ODE: Jounce rate at wheel R1
SV_JNCR_R2 -0.0001271260602 ; m/s ! ODE: Jounce rate at wheel R2
SV_JNC_L1 -0.01666047275 ; m ! ODE: Jounce movement at wheel L1
SV_JNC_L2 -0.001248459142 ; m ! ODE: Jounce movement at wheel L2
SV_JNC_R1 -0.01666047287 ; m ! ODE: Jounce movement at wheel R1
SV_JNC_R2 -0.001248460032 ; m ! ODE: Jounce movement at wheel R2
SV_LK_WHL_L1        1 ; - ! Lockup state for wheel L1
SV_LK_WHL_L2        1 ; - ! Lockup state for wheel L2
SV_LK_WHL_R1        1 ; - ! Lockup state for wheel R1
SV_LK_WHL_R2        1 ; - ! Lockup state for wheel R2
SV_MBOOST           0 ; N-m ! ODE: Delayed boost torque {M_boost}
SV_MY_BRK_L1 -0.04199161607 ; N-m ! Spin moment, wheel L1
SV_MY_BRK_L2 -0.8724203 ; N-m ! Spin moment, wheel L2
SV_MY_BRK_R1 -0.04199162334 ; N-m ! Spin moment, wheel R1
SV_MY_BRK_R2 -0.8724223199 ; N-m ! Spin moment, wheel R2
SV_MZ_WHEEL_L1 -0.005997535602 ; N-m ! Tire Mz, wheel L1
SV_MZ_WHEEL_L2 -0.3904419782 ; N-m ! Tire Mz, wheel L2
SV_MZ_WHEEL_R1 0.005997535526 ; N-m ! Tire Mz, wheel R1
SV_MZ_WHEEL_R2 0.3904419446 ; N-m ! Tire Mz, wheel R2
SV_M_HYS_COL        0 ; N-m ! Steering column friction
SV_M_HYS_GEAR_A1    0 ; N-m ! Friction torque for recirculating ball
SV_M_HYS_GEAR_A2    0 ; N-m ! Friction torque for recirculating ball
SV_M_KP_L1 -41.18592567 ; N-m ! Kingpin moment, wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment, wheel L2
SV_M_KP_R1 41.18592574 ; N-m ! Kingpin moment, wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment, wheel R2
SV_M_PARK_L1       -0 ; N-m ! Kingpin steer park torque, wheel L1
SV_M_PARK_L2        0 ; N-m ! Kingpin steer park torque, wheel L2
SV_M_PARK_R1        0 ; N-m ! Kingpin steer park torque, wheel R1
SV_M_PARK_R2        0 ; N-m ! Kingpin steer park torque, wheel R2
SV_N_START_CROSS    0 ; - ! Count of start-crossings on looped driver path
SV_PBK_L1          30 ; MPa ! ODE: Brake actuator pressure for wheel L1
SV_PBK_L2          30 ; MPa ! ODE: Brake actuator pressure for wheel L2
SV_PBK_R1          30 ; MPa ! ODE: Brake actuator pressure for wheel R1
SV_PBK_R2          30 ; MPa ! ODE: Brake actuator pressure for wheel R2
SV_PITCH 0.02860420557 ; deg ! ODE: Pitch of sprung mass {Pitch}
SV_ROLL -3.573404176e-09 ; deg ! ODE: Roll (Euler) of sprung mass {Roll_E}
SV_ROT_L1 1.054322862e-06 ; rev ! ODE: Rotation of wheel L1
SV_ROT_L2 -6.910157904e-07 ; rev ! ODE: Rotation of wheel L2
SV_ROT_LK_L1 1.073747518e-06 ; rev ! Rotation reference of wheel L1 in "locked" mode
SV_ROT_LK_L2 -6.623770537e-07 ; rev ! Rotation reference of wheel L2 in "locked"
                              ! mode
SV_ROT_LK_R1 1.073747518e-06 ; rev ! Rotation reference of wheel R1 in "locked" mode
SV_ROT_LK_R2 -6.623770537e-07 ; rev ! Rotation reference of wheel R2 in "locked"
                              ! mode
SV_ROT_R1 1.054322857e-06 ; rev ! ODE: Rotation of wheel R1
SV_ROT_R2 -6.910169554e-07 ; rev ! ODE: Rotation of wheel R2
SV_R_GEAR_TOTAL_SC  1 ; - ! Driveline total gear ratio for speed controller
SV_R_KP_GND_L1 -1.037729709 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_L2 -0.9988471351 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R1 -1.037729709 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_KP_GND_R2 -0.9988471352 ; - ! Kingpin steer / ground steer (-1 for vertical KP)
SV_R_L1  0.3202941309 ; m ! Deflected radius for tire L1
SV_R_L2  0.3225496497 ; m ! Deflected radius for tire L2
SV_R_R1  0.3202941308 ; m ! Deflected radius for tire R1
SV_R_R2  0.3225496489 ; m ! Deflected radius for tire R2
SV_SLIP_LAT_L1 -0.002714162199 ; - ! ODE: Lagged tan of lateral slip, tire L1
SV_SLIP_LAT_L2 -0.0001353199332 ; - ! ODE: Lagged tan of lateral slip, tire L2
SV_SLIP_LAT_R1 0.002714162193 ; - ! ODE: Lagged tan of lateral slip, tire R1
SV_SLIP_LAT_R2 0.0001353202214 ; - ! ODE: Lagged tan of lateral slip, tire R2
SV_SLIP_LONG_L1 0.003253225416 ; - ! ODE: Lagged long. slip, tire L1
SV_SLIP_LONG_L2 0.004672343942 ; - ! ODE: Lagged long. slip, tire L2
SV_SLIP_LONG_R1 0.003253224424 ; - ! ODE: Lagged long. slip, tire R1
SV_SLIP_LONG_R2 0.004672537908 ; - ! ODE: Lagged long. slip, tire R2
SV_SO_DIST -0.01382614301 ; m ! ODE: Distance travelled, for tire "wandering
                          ! profiles" {Sta_Prof}
SV_SPEED_DVDS       0 ; - ! dVdS derivative for speed control
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Initial target speed in preview array
SV_STATION -0.0001023725376 ; m ! Station of vehicle on driver path PATH_ID_DM
                            ! {Station}
SV_STA_ROAD -0.0001023725376 ; m ! Vehicle station on road CURRENT_ROAD_ID
                             ! {Sta_Road}
SV_STR_DM -5.417138997e-10 ; deg ! Road-wheel steer from driver model
SV_STR_DM_OLD -5.417140612e-10 ; deg ! Road-wheel steer from driver model (previous
                               ! time step)
SV_STR_IN_DGR_A1 6.394048448e-11 ; - ! ODE: Steering gear input rate, axle 1
SV_STR_IN_DGR_A2    0 ; - ! ODE: Steering gear input rate, axle 2
SV_STR_IN_GR_A1 1.124662669e-11 ; - ! ODE: Steering gear input position, axle 1
                                ! {A_StrIn1}
SV_STR_IN_GR_A2     0 ; - ! ODE: Steering gear input position, axle 2 {A_StrIn2}
SV_STR_KP_L1 0.1418296001 ; deg ! Kingpin steer angle, wheel L1
SV_STR_KP_L1_OLD 0.1418296001 ; deg ! Kingpin steer angle, wheel L1 (previous time
                              ! step)
SV_STR_KP_L2 -0.9849274833 ; deg ! Kingpin steer angle, wheel L2
SV_STR_KP_L2_OLD 2.787067118 ; deg ! Kingpin steer angle, wheel L2 (previous time
                             ! step)
SV_STR_KP_R1 -0.1418296012 ; deg ! Kingpin steer angle, wheel R1
SV_STR_KP_R1_OLD -0.1418296012 ; deg ! Kingpin steer angle, wheel R1 (previous time
                               ! step)
SV_STR_KP_R2 0.984927487 ; deg ! Kingpin steer angle, wheel R2
SV_STR_KP_R2_OLD -2.787066998 ; deg ! Kingpin steer angle, wheel R2 (previous time
                              ! step)
SV_STR_OUT_GR_A1 1.00399086e-13 ; - ! Steering gear output
SV_STR_OUT_GR_A2    0 ; - ! Steering gear output
SV_SWA              0 ; deg ! ODE: Steering wheel angle
SV_SWA_DM -8.845616172e-09 ; deg ! Steering wheel angle from DM
SV_SWA_OL           0 ; deg ! Steering wheel angle from open loop control
SV_SWA_OLD          0 ; deg ! Steering wheel angle (previous time step)
SV_TROT_L1          0 ; C ! ODE: Brake rotor L1 temperature {T_Rtr_L1}
SV_TROT_L2          0 ; C ! ODE: Brake rotor L2 temperature {T_Rtr_L2}
SV_TROT_R1          0 ; C ! ODE: Brake rotor R1 temperature {T_Rtr_R1}
SV_TROT_R2          0 ; C ! ODE: Brake rotor R2 temperature {T_Rtr_R2}
SV_VBK_L1           0 ; mm3 ! ODE: Brake caliper L1 volume
SV_VBK_L2           0 ; mm3 ! ODE: Brake caliper L2 volume
SV_VBK_R1           0 ; mm3 ! ODE: Brake caliper R1 volume
SV_VBK_R2           0 ; mm3 ! ODE: Brake caliper R2 volume
SV_VERR_OLD         0 ; km/h ! Speed controller error at previous time step
SV_VXS 0.0001215695353 ; km/h ! ODE: Body-X speed of laden sprung-mass CG
SV_VYS -6.341813602e-11 ; m/s ! ODE: Body-Y speed of laden sprung-mass CG
SV_VZS -0.0001322511122 ; m/s ! ODE: Body-Z speed of laden sprung-mass CG
SV_XO -0.0001023725376 ; m ! ODE: Global X coord. of sprung-mass origin {Xo}
SV_X_GND -1.433102222 ; m ! X coord, ground, vehicle aero ref. pt
SV_YAW -3.995476924e-11 ; deg ! ODE: Yaw of sprung mass {Yaw}
SV_YO -6.492968018e-12 ; m ! ODE: Global Y coord. of sprung-mass origin {Yo}
SV_Y_GND -5.541661537e-12 ; m ! Y coord, ground, vehicle aero ref. pt
SV_ZO -0.003015177908 ; m ! ODE: Global Z coord. of sprung-mass origin {Zo}
SV_Z_CTC_L1        -0 ; m ! Center of tire contact L1 {Zgnd_L1}
SV_Z_CTC_L2        -0 ; m ! Center of tire contact L2 {Zgnd_L2}
SV_Z_CTC_R1        -0 ; m ! Center of tire contact R1 {Zgnd_R1}
SV_Z_CTC_R2 -5.551115123e-17 ; m ! Center of tire contact R2 {Zgnd_R2}
SV_Z_GND            0 ; m ! Z coord, ground, vehicle aero ref. pt

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_FY_L2 VS_REPLACE 1.376829941e-09 ; N ! #0. Lateral force at the CTC (if
                                            ! OPT_TIRE_MODEL < 8)
IMPORT IMP_FY_R2 VS_REPLACE -1.376829941e-09 ; N ! #0. Lateral force at the CTC (if
                                             ! OPT_TIRE_MODEL < 8)
IMPORT IMP_MX_EXT VS_REPLACE 0.0001797978527 ; N-m ! #0. User-defined [sx] moment on
                                             ! sprung mass from inertial reference
                                             ! frame
IMPORT IMP_MY_EXT VS_REPLACE -2835.007179 ; N-m ! #0. User-defined [sy] moment on
                                          ! sprung mass from inertial reference
                                          ! frame
IMPORT IMP_MZ_EXT VS_REPLACE -3.798945167e-07 ; N-m ! #0. User-defined [sz] moment
                                              ! on sprung mass from inertial
                                              ! reference frame
IMPORT IMP_FX_RP_1 VS_REPLACE -0.9857950015 ; N ! #0. Longitudinal force at
                                            ! reference point
IMPORT IMP_FY_RP_1 VS_REPLACE -6.055397206e-07 ; N ! #0. Lateral force at reference
                                               ! point
IMPORT IMP_FZ_RP_1 VS_REPLACE 2335.416632 ; N ! #0. Vertical force at reference
                                          ! point


END
